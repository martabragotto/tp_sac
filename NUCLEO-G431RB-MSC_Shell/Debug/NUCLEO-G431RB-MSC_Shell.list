
NUCLEO-G431RB-MSC_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061d0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006688  08006688  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006688  08006688  00016688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006690  08006690  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006690  08006690  00016690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200001e4  0800687c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  0800687c  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141d1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002790  00000000  00000000  000343e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00036b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00037c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0ad  00000000  00000000  00038c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001361f  00000000  00000000  00057d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7829  00000000  00000000  0006b33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132b65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b4  00000000  00000000  00132bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006398 	.word	0x08006398

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	08006398 	.word	0x08006398

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09e      	sub	sp, #120	; 0x78
 80005e8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	66bb      	str	r3, [r7, #104]	; 0x68
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005f2:	f000 fcc0 	bl	8000f76 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005f6:	f000 f969 	bl	80008cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005fa:	f000 f9ff 	bl	80009fc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005fe:	f000 f9b1 	bl	8000964 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2224      	movs	r2, #36	; 0x24
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fbff 	bl	8004e0c <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 800060e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000612:	2240      	movs	r2, #64	; 0x40
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fbf8 	bl	8004e0c <memset>
 800061c:	4b95      	ldr	r3, [pc, #596]	; (8000874 <main+0x290>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000622:	2240      	movs	r2, #64	; 0x40
 8000624:	2100      	movs	r1, #0
 8000626:	4894      	ldr	r0, [pc, #592]	; (8000878 <main+0x294>)
 8000628:	f004 fbf0 	bl	8004e0c <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800062c:	2201      	movs	r2, #1
 800062e:	4991      	ldr	r1, [pc, #580]	; (8000874 <main+0x290>)
 8000630:	4892      	ldr	r0, [pc, #584]	; (800087c <main+0x298>)
 8000632:	f002 fc5d 	bl	8002ef0 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000636:	200a      	movs	r0, #10
 8000638:	f000 fcd4 	bl	8000fe4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	2266      	movs	r2, #102	; 0x66
 8000642:	498f      	ldr	r1, [pc, #572]	; (8000880 <main+0x29c>)
 8000644:	488d      	ldr	r0, [pc, #564]	; (800087c <main+0x298>)
 8000646:	f002 fbbd 	bl	8002dc4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	2218      	movs	r2, #24
 8000650:	498c      	ldr	r1, [pc, #560]	; (8000884 <main+0x2a0>)
 8000652:	488a      	ldr	r0, [pc, #552]	; (800087c <main+0x298>)
 8000654:	f002 fbb6 	bl	8002dc4 <HAL_UART_Transmit>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8000658:	4b8b      	ldr	r3, [pc, #556]	; (8000888 <main+0x2a4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d06e      	beq.n	800073e <main+0x15a>
			switch(uartRxBuffer[0]){
 8000660:	4b84      	ldr	r3, [pc, #528]	; (8000874 <main+0x290>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b0d      	cmp	r3, #13
 8000666:	d002      	beq.n	800066e <main+0x8a>
 8000668:	2b7f      	cmp	r3, #127	; 0x7f
 800066a:	d045      	beq.n	80006f8 <main+0x114>
 800066c:	e054      	b.n	8000718 <main+0x134>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	2203      	movs	r2, #3
 8000674:	4985      	ldr	r1, [pc, #532]	; (800088c <main+0x2a8>)
 8000676:	4881      	ldr	r0, [pc, #516]	; (800087c <main+0x298>)
 8000678:	f002 fba4 	bl	8002dc4 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 800067c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000682:	4413      	add	r3, r2
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 800068c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000690:	497f      	ldr	r1, [pc, #508]	; (8000890 <main+0x2ac>)
 8000692:	4618      	mov	r0, r3
 8000694:	f004 fbe2 	bl	8004e5c <strtok>
 8000698:	4603      	mov	r3, r0
 800069a:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 800069c:	e00e      	b.n	80006bc <main+0xd8>
					argv[argc++] = token;
 800069e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	673a      	str	r2, [r7, #112]	; 0x70
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	3378      	adds	r3, #120	; 0x78
 80006a8:	443b      	add	r3, r7
 80006aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80006ac:	f843 2c74 	str.w	r2, [r3, #-116]
					token = strtok(NULL, " ");
 80006b0:	4977      	ldr	r1, [pc, #476]	; (8000890 <main+0x2ac>)
 80006b2:	2000      	movs	r0, #0
 80006b4:	f004 fbd2 	bl	8004e5c <strtok>
 80006b8:	4603      	mov	r3, r0
 80006ba:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80006bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d1ed      	bne.n	800069e <main+0xba>
				}

				//requested echo transmission to check characters

				HAL_UART_Transmit(&huart2, "\r\n ", sizeof("\r\n "), HAL_MAX_DELAY);
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	2204      	movs	r2, #4
 80006c8:	4972      	ldr	r1, [pc, #456]	; (8000894 <main+0x2b0>)
 80006ca:	486c      	ldr	r0, [pc, #432]	; (800087c <main+0x298>)
 80006cc:	f002 fb7a 	bl	8002dc4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, cmdBuffer, sizeof(cmdBuffer), HAL_MAX_DELAY);
 80006d0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	2240      	movs	r2, #64	; 0x40
 80006da:	4868      	ldr	r0, [pc, #416]	; (800087c <main+0x298>)
 80006dc:	f002 fb72 	bl	8002dc4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\r\n ", sizeof("\r\n "), HAL_MAX_DELAY);
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	2204      	movs	r2, #4
 80006e6:	496b      	ldr	r1, [pc, #428]	; (8000894 <main+0x2b0>)
 80006e8:	4864      	ldr	r0, [pc, #400]	; (800087c <main+0x298>)
 80006ea:	f002 fb6b 	bl	8002dc4 <HAL_UART_Transmit>

				idx_cmd = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80006f6:	e01f      	b.n	8000738 <main+0x154>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80006f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006fa:	1e5a      	subs	r2, r3, #1
 80006fc:	677a      	str	r2, [r7, #116]	; 0x74
 80006fe:	3378      	adds	r3, #120	; 0x78
 8000700:	443b      	add	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	2201      	movs	r2, #1
 800070e:	4959      	ldr	r1, [pc, #356]	; (8000874 <main+0x290>)
 8000710:	485a      	ldr	r0, [pc, #360]	; (800087c <main+0x298>)
 8000712:	f002 fb57 	bl	8002dc4 <HAL_UART_Transmit>
				break;
 8000716:	e00f      	b.n	8000738 <main+0x154>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	677a      	str	r2, [r7, #116]	; 0x74
 800071e:	4a55      	ldr	r2, [pc, #340]	; (8000874 <main+0x290>)
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	3378      	adds	r3, #120	; 0x78
 8000724:	443b      	add	r3, r7
 8000726:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	2201      	movs	r2, #1
 8000730:	4950      	ldr	r1, [pc, #320]	; (8000874 <main+0x290>)
 8000732:	4852      	ldr	r0, [pc, #328]	; (800087c <main+0x298>)
 8000734:	f002 fb46 	bl	8002dc4 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8000738:	4b53      	ldr	r3, [pc, #332]	; (8000888 <main+0x2a4>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 800073e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000740:	2b00      	cmp	r3, #0
 8000742:	d089      	beq.n	8000658 <main+0x74>
			if(strcmp(argv[0],"set")==0){
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4954      	ldr	r1, [pc, #336]	; (8000898 <main+0x2b4>)
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fd69 	bl	8000220 <strcmp>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d12d      	bne.n	80007b0 <main+0x1cc>
				if(strcmp(argv[1],"PA5")==0){
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	4951      	ldr	r1, [pc, #324]	; (800089c <main+0x2b8>)
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fd61 	bl	8000220 <strcmp>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d11d      	bne.n	80007a0 <main+0x1bc>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4618      	mov	r0, r3
 8000768:	f004 fb22 	bl	8004db0 <atoi>
 800076c:	4603      	mov	r3, r0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	2120      	movs	r1, #32
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f000 ff78 	bl	800166c <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	4618      	mov	r0, r3
 8000780:	f004 fb16 	bl	8004db0 <atoi>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	4945      	ldr	r1, [pc, #276]	; (80008a0 <main+0x2bc>)
 800078a:	483b      	ldr	r0, [pc, #236]	; (8000878 <main+0x294>)
 800078c:	f004 fb46 	bl	8004e1c <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	2220      	movs	r2, #32
 8000796:	4938      	ldr	r1, [pc, #224]	; (8000878 <main+0x294>)
 8000798:	4838      	ldr	r0, [pc, #224]	; (800087c <main+0x298>)
 800079a:	f002 fb13 	bl	8002dc4 <HAL_UART_Transmit>
 800079e:	e05e      	b.n	800085e <main+0x27a>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	2214      	movs	r2, #20
 80007a6:	493f      	ldr	r1, [pc, #252]	; (80008a4 <main+0x2c0>)
 80007a8:	4834      	ldr	r0, [pc, #208]	; (800087c <main+0x298>)
 80007aa:	f002 fb0b 	bl	8002dc4 <HAL_UART_Transmit>
 80007ae:	e056      	b.n	800085e <main+0x27a>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	493d      	ldr	r1, [pc, #244]	; (80008a8 <main+0x2c4>)
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fd33 	bl	8000220 <strcmp>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d107      	bne.n	80007d0 <main+0x1ec>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295
 80007c4:	2214      	movs	r2, #20
 80007c6:	4937      	ldr	r1, [pc, #220]	; (80008a4 <main+0x2c0>)
 80007c8:	482c      	ldr	r0, [pc, #176]	; (800087c <main+0x298>)
 80007ca:	f002 fafb 	bl	8002dc4 <HAL_UART_Transmit>
 80007ce:	e046      	b.n	800085e <main+0x27a>
			}

			// help function prints all the available commands
			else if(strcmp(argv[0],"help")==0){
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4936      	ldr	r1, [pc, #216]	; (80008ac <main+0x2c8>)
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fd23 	bl	8000220 <strcmp>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d107      	bne.n	80007f0 <main+0x20c>
				HAL_UART_Transmit(&huart2, helpContent, sizeof(helpContent), HAL_MAX_DELAY);
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	222e      	movs	r2, #46	; 0x2e
 80007e6:	4932      	ldr	r1, [pc, #200]	; (80008b0 <main+0x2cc>)
 80007e8:	4824      	ldr	r0, [pc, #144]	; (800087c <main+0x298>)
 80007ea:	f002 faeb 	bl	8002dc4 <HAL_UART_Transmit>
 80007ee:	e036      	b.n	800085e <main+0x27a>
			}
			else if(strcmp(argv[0],"pinout")==0){
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4930      	ldr	r1, [pc, #192]	; (80008b4 <main+0x2d0>)
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fd13 	bl	8000220 <strcmp>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d107      	bne.n	8000810 <main+0x22c>
				HAL_UART_Transmit(&huart2, pinoutContent, sizeof(pinoutContent), HAL_MAX_DELAY);
 8000800:	f04f 33ff 	mov.w	r3, #4294967295
 8000804:	2289      	movs	r2, #137	; 0x89
 8000806:	492c      	ldr	r1, [pc, #176]	; (80008b8 <main+0x2d4>)
 8000808:	481c      	ldr	r0, [pc, #112]	; (800087c <main+0x298>)
 800080a:	f002 fadb 	bl	8002dc4 <HAL_UART_Transmit>
 800080e:	e026      	b.n	800085e <main+0x27a>
			}
			else if(strcmp(argv[0],"start")==0){
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	492a      	ldr	r1, [pc, #168]	; (80008bc <main+0x2d8>)
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fd03 	bl	8000220 <strcmp>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d107      	bne.n	8000830 <main+0x24c>
				HAL_UART_Transmit(&huart2, startContent, sizeof(startContent), HAL_MAX_DELAY);
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	220f      	movs	r2, #15
 8000826:	4926      	ldr	r1, [pc, #152]	; (80008c0 <main+0x2dc>)
 8000828:	4814      	ldr	r0, [pc, #80]	; (800087c <main+0x298>)
 800082a:	f002 facb 	bl	8002dc4 <HAL_UART_Transmit>
 800082e:	e016      	b.n	800085e <main+0x27a>
			}
			else if(strcmp(argv[0],"stop")==0){
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4924      	ldr	r1, [pc, #144]	; (80008c4 <main+0x2e0>)
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fcf3 	bl	8000220 <strcmp>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d107      	bne.n	8000850 <main+0x26c>
				HAL_UART_Transmit(&huart2, stopContent, sizeof(stopContent), HAL_MAX_DELAY);
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	2210      	movs	r2, #16
 8000846:	4920      	ldr	r1, [pc, #128]	; (80008c8 <main+0x2e4>)
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <main+0x298>)
 800084a:	f002 fabb 	bl	8002dc4 <HAL_UART_Transmit>
 800084e:	e006      	b.n	800085e <main+0x27a>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	2214      	movs	r2, #20
 8000856:	4913      	ldr	r1, [pc, #76]	; (80008a4 <main+0x2c0>)
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <main+0x298>)
 800085a:	f002 fab3 	bl	8002dc4 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	2218      	movs	r2, #24
 8000864:	4907      	ldr	r1, [pc, #28]	; (8000884 <main+0x2a0>)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <main+0x298>)
 8000868:	f002 faac 	bl	8002dc4 <HAL_UART_Transmit>
			newCmdReady = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 8000870:	e6f2      	b.n	8000658 <main+0x74>
 8000872:	bf00      	nop
 8000874:	20000294 	.word	0x20000294
 8000878:	20000298 	.word	0x20000298
 800087c:	20000200 	.word	0x20000200
 8000880:	20000018 	.word	0x20000018
 8000884:	20000000 	.word	0x20000000
 8000888:	20000290 	.word	0x20000290
 800088c:	20000080 	.word	0x20000080
 8000890:	080063b0 	.word	0x080063b0
 8000894:	080063b4 	.word	0x080063b4
 8000898:	080063b8 	.word	0x080063b8
 800089c:	080063bc 	.word	0x080063bc
 80008a0:	080063c0 	.word	0x080063c0
 80008a4:	20000084 	.word	0x20000084
 80008a8:	080063dc 	.word	0x080063dc
 80008ac:	080063e0 	.word	0x080063e0
 80008b0:	20000098 	.word	0x20000098
 80008b4:	080063e8 	.word	0x080063e8
 80008b8:	200000c8 	.word	0x200000c8
 80008bc:	080063f0 	.word	0x080063f0
 80008c0:	20000154 	.word	0x20000154
 80008c4:	080063f8 	.word	0x080063f8
 80008c8:	20000164 	.word	0x20000164

080008cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	; 0x50
 80008d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0318 	add.w	r3, r7, #24
 80008d6:	2238      	movs	r2, #56	; 0x38
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 fa96 	bl	8004e0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 fed4 	bl	800169c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fe:	2340      	movs	r3, #64	; 0x40
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000906:	2302      	movs	r3, #2
 8000908:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800090a:	2304      	movs	r3, #4
 800090c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800090e:	2355      	movs	r3, #85	; 0x55
 8000910:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000912:	2302      	movs	r3, #2
 8000914:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800091a:	2302      	movs	r3, #2
 800091c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 0318 	add.w	r3, r7, #24
 8000922:	4618      	mov	r0, r3
 8000924:	f000 ff5e 	bl	80017e4 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x66>
	{
		Error_Handler();
 800092e:	f000 f8e7 	bl	8000b00 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	230f      	movs	r3, #15
 8000934:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2303      	movs	r3, #3
 8000938:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2104      	movs	r1, #4
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fa62 	bl	8001e14 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000956:	f000 f8d3 	bl	8000b00 <Error_Handler>
	}
}
 800095a:	bf00      	nop
 800095c:	3750      	adds	r7, #80	; 0x50
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 800096a:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 800096c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ac:	4811      	ldr	r0, [pc, #68]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009ae:	f002 f9b9 	bl	8002d24 <HAL_UART_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 80009b8:	f000 f8a2 	bl	8000b00 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009c0:	f004 f92b 	bl	8004c1a <HAL_UARTEx_SetTxFifoThreshold>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 80009ca:	f000 f899 	bl	8000b00 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009d2:	f004 f960 	bl	8004c96 <HAL_UARTEx_SetRxFifoThreshold>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 80009dc:	f000 f890 	bl	8000b00 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009e2:	f004 f8e1 	bl	8004ba8 <HAL_UARTEx_DisableFifoMode>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 80009ec:	f000 f888 	bl	8000b00 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000200 	.word	0x20000200
 80009f8:	40004400 	.word	0x40004400

080009fc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <MX_GPIO_Init+0xac>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a24      	ldr	r2, [pc, #144]	; (8000aa8 <MX_GPIO_Init+0xac>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_GPIO_Init+0xac>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_GPIO_Init+0xac>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <MX_GPIO_Init+0xac>)
 8000a30:	f043 0320 	orr.w	r3, r3, #32
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_GPIO_Init+0xac>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0320 	and.w	r3, r3, #32
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_GPIO_Init+0xac>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a18      	ldr	r2, [pc, #96]	; (8000aa8 <MX_GPIO_Init+0xac>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_GPIO_Init+0xac>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f000 fe03 	bl	800166c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BLUE_BUTTON_Pin */
	GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a70:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <MX_GPIO_Init+0xb0>)
 8000a7e:	f000 fc73 	bl	8001368 <HAL_GPIO_Init>

	/*Configure GPIO pin : GREEN_LED_Pin */
	GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000a82:	2320      	movs	r3, #32
 8000a84:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f000 fc64 	bl	8001368 <HAL_GPIO_Init>

}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	48000800 	.word	0x48000800

08000ab0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_UART_RxCpltCallback+0x20>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4904      	ldr	r1, [pc, #16]	; (8000ad4 <HAL_UART_RxCpltCallback+0x24>)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <HAL_UART_RxCpltCallback+0x28>)
 8000ac4:	f002 fa14 	bl	8002ef0 <HAL_UART_Receive_IT>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000290 	.word	0x20000290
 8000ad4:	20000294 	.word	0x20000294
 8000ad8:	20000200 	.word	0x20000200

08000adc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d101      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000aee:	f000 fa5b 	bl	8000fa8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40001000 	.word	0x40001000

08000b00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_MspInit+0x44>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <HAL_MspInit+0x44>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_MspInit+0x44>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x44>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x44>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6593      	str	r3, [r2, #88]	; 0x58
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x44>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b09a      	sub	sp, #104	; 0x68
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	2244      	movs	r2, #68	; 0x44
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 f949 	bl	8004e0c <memset>
  if(huart->Instance==USART2)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d13e      	bne.n	8000c02 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 fb8d 	bl	80022b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b9c:	f7ff ffb0 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <HAL_UART_MspInit+0xbc>)
 8000ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba4:	4a1a      	ldr	r2, [pc, #104]	; (8000c10 <HAL_UART_MspInit+0xbc>)
 8000ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000baa:	6593      	str	r3, [r2, #88]	; 0x58
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_UART_MspInit+0xbc>)
 8000bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_UART_MspInit+0xbc>)
 8000bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <HAL_UART_MspInit+0xbc>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_UART_MspInit+0xbc>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be0:	2307      	movs	r3, #7
 8000be2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000be8:	4619      	mov	r1, r3
 8000bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bee:	f000 fbbb 	bl	8001368 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2026      	movs	r0, #38	; 0x26
 8000bf8:	f000 face 	bl	8001198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bfc:	2026      	movs	r0, #38	; 0x26
 8000bfe:	f000 fae5 	bl	80011cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3768      	adds	r7, #104	; 0x68
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <HAL_InitTick+0xcc>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ce0 <HAL_InitTick+0xcc>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	6593      	str	r3, [r2, #88]	; 0x58
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <HAL_InitTick+0xcc>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c42:	f107 020c 	add.w	r2, r7, #12
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 fab7 	bl	80021c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c52:	f001 fa89 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8000c56:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c5a:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <HAL_InitTick+0xd0>)
 8000c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c60:	0c9b      	lsrs	r3, r3, #18
 8000c62:	3b01      	subs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_InitTick+0xd4>)
 8000c68:	4a20      	ldr	r2, [pc, #128]	; (8000cec <HAL_InitTick+0xd8>)
 8000c6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <HAL_InitTick+0xd4>)
 8000c6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c72:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c74:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <HAL_InitTick+0xd4>)
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <HAL_InitTick+0xd4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_InitTick+0xd4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c86:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <HAL_InitTick+0xd4>)
 8000c88:	f001 fd02 	bl	8002690 <HAL_TIM_Base_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d11b      	bne.n	8000cd2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c9a:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <HAL_InitTick+0xd4>)
 8000c9c:	f001 fd5a 	bl	8002754 <HAL_TIM_Base_Start_IT>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d111      	bne.n	8000cd2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cae:	2036      	movs	r0, #54	; 0x36
 8000cb0:	f000 fa8c 	bl	80011cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b0f      	cmp	r3, #15
 8000cb8:	d808      	bhi.n	8000ccc <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f000 fa6a 	bl	8001198 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_InitTick+0xdc>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	e002      	b.n	8000cd2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3730      	adds	r7, #48	; 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	431bde83 	.word	0x431bde83
 8000ce8:	200002d8 	.word	0x200002d8
 8000cec:	40001000 	.word	0x40001000
 8000cf0:	20000178 	.word	0x20000178

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <USART2_IRQHandler+0x10>)
 8000d52:	f002 f923 	bl	8002f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000200 	.word	0x20000200

08000d60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <TIM6_DAC_IRQHandler+0x10>)
 8000d66:	f001 fd5f 	bl	8002828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200002d8 	.word	0x200002d8

08000d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	return 1;
 8000d78:	2301      	movs	r3, #1
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_kill>:

int _kill(int pid, int sig)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d8e:	f004 f813 	bl	8004db8 <__errno>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2216      	movs	r2, #22
 8000d96:	601a      	str	r2, [r3, #0]
	return -1;
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <_exit>:

void _exit (int status)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ffe7 	bl	8000d84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000db6:	e7fe      	b.n	8000db6 <_exit+0x12>

08000db8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e00a      	b.n	8000de0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dca:	f3af 8000 	nop.w
 8000dce:	4601      	mov	r1, r0
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	60ba      	str	r2, [r7, #8]
 8000dd6:	b2ca      	uxtb	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbf0      	blt.n	8000dca <_read+0x12>
	}

return len;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e009      	b.n	8000e18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	60ba      	str	r2, [r7, #8]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf1      	blt.n	8000e04 <_write+0x12>
	}
	return len;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_close>:

int _close(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
	return -1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e52:	605a      	str	r2, [r3, #4]
	return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_isatty>:

int _isatty(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	return 1;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec4:	f003 ff78 	bl	8004db8 <__errno>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <_sbrk+0x64>)
 8000ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20008000 	.word	0x20008000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	20000324 	.word	0x20000324
 8000efc:	20000340 	.word	0x20000340

08000f00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0b      	ldr	r4, [pc, #44]	; (8000f70 <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f4e:	f7ff ffd7 	bl	8000f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f003 ff37 	bl	8004dc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f56:	f7ff fb45 	bl	80005e4 <main>

08000f5a <LoopForever>:

LoopForever:
    b LoopForever
 8000f5a:	e7fe      	b.n	8000f5a <LoopForever>
  ldr   r0, =_estack
 8000f5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000f68:	08006698 	.word	0x08006698
  ldr r2, =_sbss
 8000f6c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000f70:	2000033c 	.word	0x2000033c

08000f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_2_IRQHandler>

08000f76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f8fe 	bl	8001182 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f86:	200f      	movs	r0, #15
 8000f88:	f7ff fe44 	bl	8000c14 <HAL_InitTick>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d002      	beq.n	8000f98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	e001      	b.n	8000f9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f98:	f7ff fdb8 	bl	8000b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]

}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <HAL_IncTick+0x1c>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <HAL_IncTick+0x1c>)
 8000fb8:	6013      	str	r3, [r2, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	20000328 	.word	0x20000328
 8000fc8:	2000017c 	.word	0x2000017c

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000328 	.word	0x20000328

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff ffee 	bl	8000fcc <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d004      	beq.n	8001008 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_Delay+0x40>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4413      	add	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001008:	bf00      	nop
 800100a:	f7ff ffdf 	bl	8000fcc <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	429a      	cmp	r2, r3
 8001018:	d8f7      	bhi.n	800100a <HAL_Delay+0x26>
  {
  }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000017c 	.word	0x2000017c

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff4c 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a6:	f7ff ff63 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	6978      	ldr	r0, [r7, #20]
 80011b2:	f7ff ffb3 	bl	800111c <NVIC_EncodePriority>
 80011b6:	4602      	mov	r2, r0
 80011b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff82 	bl	80010c8 <__NVIC_SetPriority>
}
 80011c4:	bf00      	nop
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff56 	bl	800108c <__NVIC_EnableIRQ>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d005      	beq.n	800120c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2204      	movs	r2, #4
 8001204:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e037      	b.n	800127c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 020e 	bic.w	r2, r2, #14
 800121a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800122a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0201 	bic.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	2101      	movs	r1, #1
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001258:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00c      	beq.n	800127c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001270:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800127a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d00d      	beq.n	80012ce <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2204      	movs	r2, #4
 80012b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e047      	b.n	800135e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 020e 	bic.w	r2, r2, #14
 80012dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f003 021f 	and.w	r2, r3, #31
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	2101      	movs	r1, #1
 800130c:	fa01 f202 	lsl.w	r2, r1, r2
 8001310:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800131a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00c      	beq.n	800133e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001332:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800133c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	4798      	blx	r3
    }
  }
  return status;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001376:	e15a      	b.n	800162e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 814c 	beq.w	8001628 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	f003 0201 	and.w	r2, r3, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b03      	cmp	r3, #3
 8001414:	d017      	beq.n	8001446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d123      	bne.n	800149a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	6939      	ldr	r1, [r7, #16]
 8001496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0203 	and.w	r2, r3, #3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80a6 	beq.w	8001628 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014dc:	4b5b      	ldr	r3, [pc, #364]	; (800164c <HAL_GPIO_Init+0x2e4>)
 80014de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e0:	4a5a      	ldr	r2, [pc, #360]	; (800164c <HAL_GPIO_Init+0x2e4>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6613      	str	r3, [r2, #96]	; 0x60
 80014e8:	4b58      	ldr	r3, [pc, #352]	; (800164c <HAL_GPIO_Init+0x2e4>)
 80014ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f4:	4a56      	ldr	r2, [pc, #344]	; (8001650 <HAL_GPIO_Init+0x2e8>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800151e:	d01f      	beq.n	8001560 <HAL_GPIO_Init+0x1f8>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a4c      	ldr	r2, [pc, #304]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d019      	beq.n	800155c <HAL_GPIO_Init+0x1f4>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a4b      	ldr	r2, [pc, #300]	; (8001658 <HAL_GPIO_Init+0x2f0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d013      	beq.n	8001558 <HAL_GPIO_Init+0x1f0>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a4a      	ldr	r2, [pc, #296]	; (800165c <HAL_GPIO_Init+0x2f4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d00d      	beq.n	8001554 <HAL_GPIO_Init+0x1ec>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a49      	ldr	r2, [pc, #292]	; (8001660 <HAL_GPIO_Init+0x2f8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d007      	beq.n	8001550 <HAL_GPIO_Init+0x1e8>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a48      	ldr	r2, [pc, #288]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_GPIO_Init+0x1e4>
 8001548:	2305      	movs	r3, #5
 800154a:	e00a      	b.n	8001562 <HAL_GPIO_Init+0x1fa>
 800154c:	2306      	movs	r3, #6
 800154e:	e008      	b.n	8001562 <HAL_GPIO_Init+0x1fa>
 8001550:	2304      	movs	r3, #4
 8001552:	e006      	b.n	8001562 <HAL_GPIO_Init+0x1fa>
 8001554:	2303      	movs	r3, #3
 8001556:	e004      	b.n	8001562 <HAL_GPIO_Init+0x1fa>
 8001558:	2302      	movs	r3, #2
 800155a:	e002      	b.n	8001562 <HAL_GPIO_Init+0x1fa>
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_GPIO_Init+0x1fa>
 8001560:	2300      	movs	r3, #0
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	f002 0203 	and.w	r2, r2, #3
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	4093      	lsls	r3, r2
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001572:	4937      	ldr	r1, [pc, #220]	; (8001650 <HAL_GPIO_Init+0x2e8>)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001580:	4b39      	ldr	r3, [pc, #228]	; (8001668 <HAL_GPIO_Init+0x300>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015a4:	4a30      	ldr	r2, [pc, #192]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ce:	4a26      	ldr	r2, [pc, #152]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015f8:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_GPIO_Init+0x300>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_GPIO_Init+0x300>)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	f47f ae9d 	bne.w	8001378 <HAL_GPIO_Init+0x10>
  }
}
 800163e:	bf00      	nop
 8001640:	bf00      	nop
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40021000 	.word	0x40021000
 8001650:	40010000 	.word	0x40010000
 8001654:	48000400 	.word	0x48000400
 8001658:	48000800 	.word	0x48000800
 800165c:	48000c00 	.word	0x48000c00
 8001660:	48001000 	.word	0x48001000
 8001664:	48001400 	.word	0x48001400
 8001668:	40010400 	.word	0x40010400

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001688:	e002      	b.n	8001690 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d141      	bne.n	800172e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016aa:	4b4b      	ldr	r3, [pc, #300]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b6:	d131      	bne.n	800171c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016b8:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016be:	4a46      	ldr	r2, [pc, #280]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c8:	4b43      	ldr	r3, [pc, #268]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016d0:	4a41      	ldr	r2, [pc, #260]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016d8:	4b40      	ldr	r3, [pc, #256]	; (80017dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2232      	movs	r2, #50	; 0x32
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	4a3f      	ldr	r2, [pc, #252]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016e4:	fba2 2303 	umull	r2, r3, r2, r3
 80016e8:	0c9b      	lsrs	r3, r3, #18
 80016ea:	3301      	adds	r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ee:	e002      	b.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f6:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001702:	d102      	bne.n	800170a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f2      	bne.n	80016f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800170a:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001716:	d158      	bne.n	80017ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e057      	b.n	80017cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001722:	4a2d      	ldr	r2, [pc, #180]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001728:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800172c:	e04d      	b.n	80017ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001734:	d141      	bne.n	80017ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001736:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d131      	bne.n	80017a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800174a:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001754:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800175c:	4a1e      	ldr	r2, [pc, #120]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001762:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001764:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2232      	movs	r2, #50	; 0x32
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	0c9b      	lsrs	r3, r3, #18
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800177a:	e002      	b.n	8001782 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3b01      	subs	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178e:	d102      	bne.n	8001796 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f2      	bne.n	800177c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a2:	d112      	bne.n	80017ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e011      	b.n	80017cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017b8:	e007      	b.n	80017ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40007000 	.word	0x40007000
 80017dc:	20000174 	.word	0x20000174
 80017e0:	431bde83 	.word	0x431bde83

080017e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e306      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d075      	beq.n	80018ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001802:	4b97      	ldr	r3, [pc, #604]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800180c:	4b94      	ldr	r3, [pc, #592]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2b0c      	cmp	r3, #12
 800181a:	d102      	bne.n	8001822 <HAL_RCC_OscConfig+0x3e>
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d002      	beq.n	8001828 <HAL_RCC_OscConfig+0x44>
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	2b08      	cmp	r3, #8
 8001826:	d10b      	bne.n	8001840 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	4b8d      	ldr	r3, [pc, #564]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d05b      	beq.n	80018ec <HAL_RCC_OscConfig+0x108>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d157      	bne.n	80018ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e2e1      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001848:	d106      	bne.n	8001858 <HAL_RCC_OscConfig+0x74>
 800184a:	4b85      	ldr	r3, [pc, #532]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a84      	ldr	r2, [pc, #528]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e01d      	b.n	8001894 <HAL_RCC_OscConfig+0xb0>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x98>
 8001862:	4b7f      	ldr	r3, [pc, #508]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a7e      	ldr	r2, [pc, #504]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b7c      	ldr	r3, [pc, #496]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a7b      	ldr	r2, [pc, #492]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0xb0>
 800187c:	4b78      	ldr	r3, [pc, #480]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a77      	ldr	r2, [pc, #476]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b75      	ldr	r3, [pc, #468]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a74      	ldr	r2, [pc, #464]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 800188e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fb96 	bl	8000fcc <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff fb92 	bl	8000fcc <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e2a6      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b6:	4b6a      	ldr	r3, [pc, #424]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0xc0>
 80018c2:	e014      	b.n	80018ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fb82 	bl	8000fcc <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff fb7e 	bl	8000fcc <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e292      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018de:	4b60      	ldr	r3, [pc, #384]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0xe8>
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d075      	beq.n	80019e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fa:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001904:	4b56      	ldr	r3, [pc, #344]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	2b0c      	cmp	r3, #12
 8001912:	d102      	bne.n	800191a <HAL_RCC_OscConfig+0x136>
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d002      	beq.n	8001920 <HAL_RCC_OscConfig+0x13c>
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	2b04      	cmp	r3, #4
 800191e:	d11f      	bne.n	8001960 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001920:	4b4f      	ldr	r3, [pc, #316]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_OscConfig+0x154>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e265      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001938:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	061b      	lsls	r3, r3, #24
 8001946:	4946      	ldr	r1, [pc, #280]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800194c:	4b45      	ldr	r3, [pc, #276]	; (8001a64 <HAL_RCC_OscConfig+0x280>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff f95f 	bl	8000c14 <HAL_InitTick>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d043      	beq.n	80019e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e251      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d023      	beq.n	80019b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001968:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a3c      	ldr	r2, [pc, #240]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 800196e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff fb2a 	bl	8000fcc <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197c:	f7ff fb26 	bl	8000fcc <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e23a      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800198e:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	061b      	lsls	r3, r3, #24
 80019a8:	492d      	ldr	r1, [pc, #180]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
 80019ae:	e01a      	b.n	80019e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b0:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2a      	ldr	r2, [pc, #168]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 80019b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fb06 	bl	8000fcc <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c4:	f7ff fb02 	bl	8000fcc <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e216      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d6:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x1e0>
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d041      	beq.n	8001a76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d01c      	beq.n	8001a34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 80019fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a00:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fadf 	bl	8000fcc <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff fadb 	bl	8000fcc <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e1ef      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0ef      	beq.n	8001a12 <HAL_RCC_OscConfig+0x22e>
 8001a32:	e020      	b.n	8001a76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a34:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff fac2 	bl	8000fcc <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a4a:	e00d      	b.n	8001a68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fabe 	bl	8000fcc <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d906      	bls.n	8001a68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e1d2      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	20000178 	.word	0x20000178
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a68:	4b8c      	ldr	r3, [pc, #560]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ea      	bne.n	8001a4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 80a6 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a88:	4b84      	ldr	r3, [pc, #528]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_OscConfig+0x2b4>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x2b6>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00d      	beq.n	8001aba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b7f      	ldr	r3, [pc, #508]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4a7e      	ldr	r2, [pc, #504]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aaa:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aba:	4b79      	ldr	r3, [pc, #484]	; (8001ca0 <HAL_RCC_OscConfig+0x4bc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d118      	bne.n	8001af8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac6:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <HAL_RCC_OscConfig+0x4bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a75      	ldr	r2, [pc, #468]	; (8001ca0 <HAL_RCC_OscConfig+0x4bc>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fa7b 	bl	8000fcc <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ada:	f7ff fa77 	bl	8000fcc <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e18b      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aec:	4b6c      	ldr	r3, [pc, #432]	; (8001ca0 <HAL_RCC_OscConfig+0x4bc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d108      	bne.n	8001b12 <HAL_RCC_OscConfig+0x32e>
 8001b00:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b06:	4a65      	ldr	r2, [pc, #404]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b10:	e024      	b.n	8001b5c <HAL_RCC_OscConfig+0x378>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d110      	bne.n	8001b3c <HAL_RCC_OscConfig+0x358>
 8001b1a:	4b60      	ldr	r3, [pc, #384]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b20:	4a5e      	ldr	r2, [pc, #376]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b2a:	4b5c      	ldr	r3, [pc, #368]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b30:	4a5a      	ldr	r2, [pc, #360]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b3a:	e00f      	b.n	8001b5c <HAL_RCC_OscConfig+0x378>
 8001b3c:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	4a56      	ldr	r2, [pc, #344]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b52:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d016      	beq.n	8001b92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff fa32 	bl	8000fcc <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fa2e 	bl	8000fcc <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e140      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b82:	4b46      	ldr	r3, [pc, #280]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ed      	beq.n	8001b6c <HAL_RCC_OscConfig+0x388>
 8001b90:	e015      	b.n	8001bbe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b92:	f7ff fa1b 	bl	8000fcc <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff fa17 	bl	8000fcc <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e129      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb0:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1ed      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bbe:	7ffb      	ldrb	r3, [r7, #31]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc4:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	4a34      	ldr	r2, [pc, #208]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d03c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01c      	beq.n	8001c1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bea:	4a2c      	ldr	r2, [pc, #176]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f9ea 	bl	8000fcc <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bfc:	f7ff f9e6 	bl	8000fcc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0fa      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ef      	beq.n	8001bfc <HAL_RCC_OscConfig+0x418>
 8001c1c:	e01b      	b.n	8001c56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c24:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f9cd 	bl	8000fcc <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c36:	f7ff f9c9 	bl	8000fcc <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0dd      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001c4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1ef      	bne.n	8001c36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 80d1 	beq.w	8001e02 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	f000 808b 	beq.w	8001d84 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d15e      	bne.n	8001d34 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <HAL_RCC_OscConfig+0x4b8>)
 8001c7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c82:	f7ff f9a3 	bl	8000fcc <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c88:	e00c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7ff f99f 	bl	8000fcc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d905      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0b3      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca4:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1ec      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb0:	4b56      	ldr	r3, [pc, #344]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	4b56      	ldr	r3, [pc, #344]	; (8001e10 <HAL_RCC_OscConfig+0x62c>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6a11      	ldr	r1, [r2, #32]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cc0:	3a01      	subs	r2, #1
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	4311      	orrs	r1, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001cca:	0212      	lsls	r2, r2, #8
 8001ccc:	4311      	orrs	r1, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cd2:	0852      	lsrs	r2, r2, #1
 8001cd4:	3a01      	subs	r2, #1
 8001cd6:	0552      	lsls	r2, r2, #21
 8001cd8:	4311      	orrs	r1, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cde:	0852      	lsrs	r2, r2, #1
 8001ce0:	3a01      	subs	r2, #1
 8001ce2:	0652      	lsls	r2, r2, #25
 8001ce4:	4311      	orrs	r1, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cea:	06d2      	lsls	r2, r2, #27
 8001cec:	430a      	orrs	r2, r1
 8001cee:	4947      	ldr	r1, [pc, #284]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf4:	4b45      	ldr	r3, [pc, #276]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a44      	ldr	r2, [pc, #272]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d00:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4a41      	ldr	r2, [pc, #260]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f95e 	bl	8000fcc <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d14:	f7ff f95a 	bl	8000fcc <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e06e      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d26:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x530>
 8001d32:	e066      	b.n	8001e02 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d34:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d40:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4a31      	ldr	r2, [pc, #196]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001d46:	f023 0303 	bic.w	r3, r3, #3
 8001d4a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d4c:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4a2e      	ldr	r2, [pc, #184]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001d52:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7ff f936 	bl	8000fcc <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d64:	f7ff f932 	bl	8000fcc <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e046      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d76:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x580>
 8001d82:	e03e      	b.n	8001e02 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e039      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_RCC_OscConfig+0x628>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0203 	and.w	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d12c      	bne.n	8001dfe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	3b01      	subs	r3, #1
 8001db0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d123      	bne.n	8001dfe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d11b      	bne.n	8001dfe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d113      	bne.n	8001dfe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	3b01      	subs	r3, #1
 8001de4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df4:	085b      	lsrs	r3, r3, #1
 8001df6:	3b01      	subs	r3, #1
 8001df8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	019f800c 	.word	0x019f800c

08001e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e11e      	b.n	800206a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b91      	ldr	r3, [pc, #580]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d910      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b8e      	ldr	r3, [pc, #568]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 020f 	bic.w	r2, r3, #15
 8001e42:	498c      	ldr	r1, [pc, #560]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b8a      	ldr	r3, [pc, #552]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e106      	b.n	800206a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d073      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d129      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e70:	4b81      	ldr	r3, [pc, #516]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0f4      	b.n	800206a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e80:	f000 f9d0 	bl	8002224 <RCC_GetSysClockFreqFromPLLSource>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4a7c      	ldr	r2, [pc, #496]	; (800207c <HAL_RCC_ClockConfig+0x268>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d93f      	bls.n	8001f0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e8e:	4b7a      	ldr	r3, [pc, #488]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d033      	beq.n	8001f0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d12f      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001eae:	4b72      	ldr	r3, [pc, #456]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eb6:	4a70      	ldr	r2, [pc, #448]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ebc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e024      	b.n	8001f0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d107      	bne.n	8001edc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ecc:	4b6a      	ldr	r3, [pc, #424]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0c6      	b.n	800206a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001edc:	4b66      	ldr	r3, [pc, #408]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0be      	b.n	800206a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001eec:	f000 f8ce 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4a61      	ldr	r2, [pc, #388]	; (800207c <HAL_RCC_ClockConfig+0x268>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d909      	bls.n	8001f0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001efa:	4b5f      	ldr	r3, [pc, #380]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f02:	4a5d      	ldr	r2, [pc, #372]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f0e:	4b5a      	ldr	r3, [pc, #360]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f023 0203 	bic.w	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4957      	ldr	r1, [pc, #348]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f20:	f7ff f854 	bl	8000fcc <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f28:	f7ff f850 	bl	8000fcc <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e095      	b.n	800206a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	4b4e      	ldr	r3, [pc, #312]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 020c 	and.w	r2, r3, #12
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1eb      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d023      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f68:	4b43      	ldr	r3, [pc, #268]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4a42      	ldr	r2, [pc, #264]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f80:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f88:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f90:	4b39      	ldr	r3, [pc, #228]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4936      	ldr	r1, [pc, #216]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b80      	cmp	r3, #128	; 0x80
 8001fa8:	d105      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001faa:	4b33      	ldr	r3, [pc, #204]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	4a32      	ldr	r2, [pc, #200]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001fb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb6:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d21d      	bcs.n	8002000 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc4:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 020f 	bic.w	r2, r3, #15
 8001fcc:	4929      	ldr	r1, [pc, #164]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fd4:	f7fe fffa 	bl	8000fcc <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fdc:	f7fe fff6 	bl	8000fcc <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e03b      	b.n	800206a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d1ed      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4917      	ldr	r1, [pc, #92]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 800201a:	4313      	orrs	r3, r2
 800201c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	490f      	ldr	r1, [pc, #60]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800203e:	f000 f825 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8002042:	4602      	mov	r2, r0
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	490c      	ldr	r1, [pc, #48]	; (8002080 <HAL_RCC_ClockConfig+0x26c>)
 8002050:	5ccb      	ldrb	r3, [r1, r3]
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	fa22 f303 	lsr.w	r3, r2, r3
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <HAL_RCC_ClockConfig+0x270>)
 800205c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_RCC_ClockConfig+0x274>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fdd6 	bl	8000c14 <HAL_InitTick>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40022000 	.word	0x40022000
 8002078:	40021000 	.word	0x40021000
 800207c:	04c4b400 	.word	0x04c4b400
 8002080:	08006400 	.word	0x08006400
 8002084:	20000174 	.word	0x20000174
 8002088:	20000178 	.word	0x20000178

0800208c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002092:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b04      	cmp	r3, #4
 800209c:	d102      	bne.n	80020a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800209e:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	e047      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d102      	bne.n	80020b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020b0:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	e03e      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d136      	bne.n	8002130 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3301      	adds	r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d10c      	bne.n	80020fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020e0:	4a1a      	ldr	r2, [pc, #104]	; (800214c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	4a16      	ldr	r2, [pc, #88]	; (8002144 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ea:	68d2      	ldr	r2, [r2, #12]
 80020ec:	0a12      	lsrs	r2, r2, #8
 80020ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	617b      	str	r3, [r7, #20]
      break;
 80020f8:	e00c      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020fa:	4a13      	ldr	r2, [pc, #76]	; (8002148 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	4a10      	ldr	r2, [pc, #64]	; (8002144 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002104:	68d2      	ldr	r2, [r2, #12]
 8002106:	0a12      	lsrs	r2, r2, #8
 8002108:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]
      break;
 8002112:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0e5b      	lsrs	r3, r3, #25
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	3301      	adds	r3, #1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	e001      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002134:	693b      	ldr	r3, [r7, #16]
}
 8002136:	4618      	mov	r0, r3
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	00f42400 	.word	0x00f42400
 800214c:	016e3600 	.word	0x016e3600

08002150 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_RCC_GetHCLKFreq+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000174 	.word	0x20000174

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800216c:	f7ff fff0 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4904      	ldr	r1, [pc, #16]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x28>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	08006410 	.word	0x08006410

08002194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002198:	f7ff ffda 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 800219c:	4602      	mov	r2, r0
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	0adb      	lsrs	r3, r3, #11
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	4904      	ldr	r1, [pc, #16]	; (80021bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80021aa:	5ccb      	ldrb	r3, [r1, r3]
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	08006410 	.word	0x08006410

080021c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	220f      	movs	r2, #15
 80021ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_RCC_GetClockConfig+0x5c>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_RCC_GetClockConfig+0x5c>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_RCC_GetClockConfig+0x5c>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_RCC_GetClockConfig+0x5c>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	08db      	lsrs	r3, r3, #3
 80021fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <HAL_RCC_GetClockConfig+0x60>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 020f 	and.w	r2, r3, #15
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	601a      	str	r2, [r3, #0]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	40022000 	.word	0x40022000

08002224 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
    break;
 8002260:	e00c      	b.n	800227c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a0e      	ldr	r2, [pc, #56]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
    break;
 800227a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002296:	687b      	ldr	r3, [r7, #4]
}
 8002298:	4618      	mov	r0, r3
 800229a:	371c      	adds	r7, #28
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40021000 	.word	0x40021000
 80022a8:	016e3600 	.word	0x016e3600
 80022ac:	00f42400 	.word	0x00f42400

080022b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022b8:	2300      	movs	r3, #0
 80022ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022bc:	2300      	movs	r3, #0
 80022be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8098 	beq.w	80023fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d2:	4b43      	ldr	r3, [pc, #268]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10d      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	4b40      	ldr	r3, [pc, #256]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	4a3f      	ldr	r2, [pc, #252]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f6:	2301      	movs	r3, #1
 80022f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022fa:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a39      	ldr	r2, [pc, #228]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002304:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002306:	f7fe fe61 	bl	8000fcc <HAL_GetTick>
 800230a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800230c:	e009      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7fe fe5d 	bl	8000fcc <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d902      	bls.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	74fb      	strb	r3, [r7, #19]
        break;
 8002320:	e005      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002322:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0ef      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800232e:	7cfb      	ldrb	r3, [r7, #19]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d159      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002334:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800233e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d01e      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	429a      	cmp	r2, r3
 800234e:	d019      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002350:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800235a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800236c:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	4a1b      	ldr	r2, [pc, #108]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800237c:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d016      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7fe fe1d 	bl	8000fcc <HAL_GetTick>
 8002392:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002394:	e00b      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002396:	f7fe fe19 	bl	8000fcc <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d902      	bls.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	74fb      	strb	r3, [r7, #19]
            break;
 80023ac:	e006      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0ec      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10b      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	4903      	ldr	r1, [pc, #12]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023d8:	e008      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	74bb      	strb	r3, [r7, #18]
 80023de:	e005      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ec:	7c7b      	ldrb	r3, [r7, #17]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d105      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f2:	4ba6      	ldr	r3, [pc, #664]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	4aa5      	ldr	r2, [pc, #660]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800240a:	4ba0      	ldr	r3, [pc, #640]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f023 0203 	bic.w	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	499c      	ldr	r1, [pc, #624]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800242c:	4b97      	ldr	r3, [pc, #604]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f023 020c 	bic.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	4994      	ldr	r1, [pc, #592]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800244e:	4b8f      	ldr	r3, [pc, #572]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002454:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	498b      	ldr	r1, [pc, #556]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002470:	4b86      	ldr	r3, [pc, #536]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	4983      	ldr	r1, [pc, #524]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002492:	4b7e      	ldr	r3, [pc, #504]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	497a      	ldr	r1, [pc, #488]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b4:	4b75      	ldr	r3, [pc, #468]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	4972      	ldr	r1, [pc, #456]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024d6:	4b6d      	ldr	r3, [pc, #436]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	4969      	ldr	r1, [pc, #420]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024f8:	4b64      	ldr	r3, [pc, #400]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4961      	ldr	r1, [pc, #388]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800251a:	4b5c      	ldr	r3, [pc, #368]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	4958      	ldr	r1, [pc, #352]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d015      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	4950      	ldr	r1, [pc, #320]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800255a:	d105      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800255c:	4b4b      	ldr	r3, [pc, #300]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4a4a      	ldr	r2, [pc, #296]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002566:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002570:	2b00      	cmp	r3, #0
 8002572:	d015      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002574:	4b45      	ldr	r3, [pc, #276]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	4942      	ldr	r1, [pc, #264]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002592:	d105      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002594:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a3c      	ldr	r2, [pc, #240]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800259e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d015      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025ac:	4b37      	ldr	r3, [pc, #220]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4934      	ldr	r1, [pc, #208]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ca:	d105      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025cc:	4b2f      	ldr	r3, [pc, #188]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a2e      	ldr	r2, [pc, #184]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d015      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025e4:	4b29      	ldr	r3, [pc, #164]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f2:	4926      	ldr	r1, [pc, #152]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002602:	d105      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002604:	4b21      	ldr	r3, [pc, #132]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a20      	ldr	r2, [pc, #128]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d015      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	4918      	ldr	r1, [pc, #96]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800263a:	d105      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4a12      	ldr	r2, [pc, #72]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002646:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d015      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002654:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002662:	490a      	ldr	r1, [pc, #40]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002672:	d105      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a04      	ldr	r2, [pc, #16]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800267a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002680:	7cbb      	ldrb	r3, [r7, #18]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e049      	b.n	8002736 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f841 	bl	800273e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3304      	adds	r3, #4
 80026cc:	4619      	mov	r1, r3
 80026ce:	4610      	mov	r0, r2
 80026d0:	f000 fa52 	bl	8002b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	d001      	beq.n	800276c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e04a      	b.n	8002802 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a21      	ldr	r2, [pc, #132]	; (8002810 <HAL_TIM_Base_Start_IT+0xbc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d018      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x6c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002796:	d013      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x6c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <HAL_TIM_Base_Start_IT+0xc0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00e      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x6c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1c      	ldr	r2, [pc, #112]	; (8002818 <HAL_TIM_Base_Start_IT+0xc4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d009      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x6c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1a      	ldr	r2, [pc, #104]	; (800281c <HAL_TIM_Base_Start_IT+0xc8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d004      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x6c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a19      	ldr	r2, [pc, #100]	; (8002820 <HAL_TIM_Base_Start_IT+0xcc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d115      	bne.n	80027ec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <HAL_TIM_Base_Start_IT+0xd0>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d015      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0xaa>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d8:	d011      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0201 	orr.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ea:	e008      	b.n	80027fe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e000      	b.n	8002800 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40012c00 	.word	0x40012c00
 8002814:	40000400 	.word	0x40000400
 8002818:	40000800 	.word	0x40000800
 800281c:	40013400 	.word	0x40013400
 8002820:	40014000 	.word	0x40014000
 8002824:	00010007 	.word	0x00010007

08002828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b02      	cmp	r3, #2
 800283c:	d122      	bne.n	8002884 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b02      	cmp	r3, #2
 800284a:	d11b      	bne.n	8002884 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0202 	mvn.w	r2, #2
 8002854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f965 	bl	8002b3a <HAL_TIM_IC_CaptureCallback>
 8002870:	e005      	b.n	800287e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f957 	bl	8002b26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f968 	bl	8002b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b04      	cmp	r3, #4
 8002890:	d122      	bne.n	80028d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b04      	cmp	r3, #4
 800289e:	d11b      	bne.n	80028d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0204 	mvn.w	r2, #4
 80028a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f93b 	bl	8002b3a <HAL_TIM_IC_CaptureCallback>
 80028c4:	e005      	b.n	80028d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f92d 	bl	8002b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f93e 	bl	8002b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d122      	bne.n	800292c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d11b      	bne.n	800292c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0208 	mvn.w	r2, #8
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2204      	movs	r2, #4
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f911 	bl	8002b3a <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f903 	bl	8002b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f914 	bl	8002b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b10      	cmp	r3, #16
 8002938:	d122      	bne.n	8002980 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b10      	cmp	r3, #16
 8002946:	d11b      	bne.n	8002980 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0210 	mvn.w	r2, #16
 8002950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2208      	movs	r2, #8
 8002956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f8e7 	bl	8002b3a <HAL_TIM_IC_CaptureCallback>
 800296c:	e005      	b.n	800297a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f8d9 	bl	8002b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f8ea 	bl	8002b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b01      	cmp	r3, #1
 800298c:	d10e      	bne.n	80029ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d107      	bne.n	80029ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0201 	mvn.w	r2, #1
 80029a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe f898 	bl	8000adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b6:	2b80      	cmp	r3, #128	; 0x80
 80029b8:	d10e      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c4:	2b80      	cmp	r3, #128	; 0x80
 80029c6:	d107      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f96a 	bl	8002cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e6:	d10e      	bne.n	8002a06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f2:	2b80      	cmp	r3, #128	; 0x80
 80029f4:	d107      	bne.n	8002a06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f95d 	bl	8002cc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a10:	2b40      	cmp	r3, #64	; 0x40
 8002a12:	d10e      	bne.n	8002a32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1e:	2b40      	cmp	r3, #64	; 0x40
 8002a20:	d107      	bne.n	8002a32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f898 	bl	8002b62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d10e      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d107      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f06f 0220 	mvn.w	r2, #32
 8002a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f91d 	bl	8002c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a6c:	d10f      	bne.n	8002a8e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a7c:	d107      	bne.n	8002a8e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f923 	bl	8002cd4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a9c:	d10f      	bne.n	8002abe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002aac:	d107      	bne.n	8002abe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f915 	bl	8002ce8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002acc:	d10f      	bne.n	8002aee <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002adc:	d107      	bne.n	8002aee <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f907 	bl	8002cfc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002af8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002afc:	d10f      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b0c:	d107      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f8f9 	bl	8002d10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3c      	ldr	r2, [pc, #240]	; (8002c7c <TIM_Base_SetConfig+0x104>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00f      	beq.n	8002bb0 <TIM_Base_SetConfig+0x38>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b96:	d00b      	beq.n	8002bb0 <TIM_Base_SetConfig+0x38>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a39      	ldr	r2, [pc, #228]	; (8002c80 <TIM_Base_SetConfig+0x108>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d007      	beq.n	8002bb0 <TIM_Base_SetConfig+0x38>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a38      	ldr	r2, [pc, #224]	; (8002c84 <TIM_Base_SetConfig+0x10c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d003      	beq.n	8002bb0 <TIM_Base_SetConfig+0x38>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a37      	ldr	r2, [pc, #220]	; (8002c88 <TIM_Base_SetConfig+0x110>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d108      	bne.n	8002bc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a2d      	ldr	r2, [pc, #180]	; (8002c7c <TIM_Base_SetConfig+0x104>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01b      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd0:	d017      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2a      	ldr	r2, [pc, #168]	; (8002c80 <TIM_Base_SetConfig+0x108>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <TIM_Base_SetConfig+0x10c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00f      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <TIM_Base_SetConfig+0x110>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <TIM_Base_SetConfig+0x114>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a26      	ldr	r2, [pc, #152]	; (8002c90 <TIM_Base_SetConfig+0x118>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_Base_SetConfig+0x8a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a25      	ldr	r2, [pc, #148]	; (8002c94 <TIM_Base_SetConfig+0x11c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d108      	bne.n	8002c14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a10      	ldr	r2, [pc, #64]	; (8002c7c <TIM_Base_SetConfig+0x104>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00f      	beq.n	8002c60 <TIM_Base_SetConfig+0xe8>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <TIM_Base_SetConfig+0x110>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00b      	beq.n	8002c60 <TIM_Base_SetConfig+0xe8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <TIM_Base_SetConfig+0x114>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d007      	beq.n	8002c60 <TIM_Base_SetConfig+0xe8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a0f      	ldr	r2, [pc, #60]	; (8002c90 <TIM_Base_SetConfig+0x118>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d003      	beq.n	8002c60 <TIM_Base_SetConfig+0xe8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <TIM_Base_SetConfig+0x11c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d103      	bne.n	8002c68 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	615a      	str	r2, [r3, #20]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40012c00 	.word	0x40012c00
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40000800 	.word	0x40000800
 8002c88:	40013400 	.word	0x40013400
 8002c8c:	40014000 	.word	0x40014000
 8002c90:	40014400 	.word	0x40014400
 8002c94:	40014800 	.word	0x40014800

08002c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e042      	b.n	8002dbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d106      	bne.n	8002d4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7fd ff03 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2224      	movs	r2, #36	; 0x24
 8002d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fc50 	bl	800360c <UART_SetConfig>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e022      	b.n	8002dbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 ff10 	bl	8003ba4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002da2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 ff97 	bl	8003ce8 <UART_CheckIdleState>
 8002dba:	4603      	mov	r3, r0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	f040 8083 	bne.w	8002ee6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_UART_Transmit+0x28>
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e07b      	b.n	8002ee8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Transmit+0x3a>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e074      	b.n	8002ee8 <HAL_UART_Transmit+0x124>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2221      	movs	r2, #33	; 0x21
 8002e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e16:	f7fe f8d9 	bl	8000fcc <HAL_GetTick>
 8002e1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	88fa      	ldrh	r2, [r7, #6]
 8002e20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e34:	d108      	bne.n	8002e48 <HAL_UART_Transmit+0x84>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	e003      	b.n	8002e50 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002e58:	e02c      	b.n	8002eb4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2200      	movs	r2, #0
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 ff8a 	bl	8003d7e <UART_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e039      	b.n	8002ee8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10b      	bne.n	8002e92 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	e007      	b.n	8002ea2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1cc      	bne.n	8002e5a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2140      	movs	r1, #64	; 0x40
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 ff57 	bl	8003d7e <UART_WaitOnFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e006      	b.n	8002ee8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
  }
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	4613      	mov	r3, r2
 8002efc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d142      	bne.n	8002f8e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_UART_Receive_IT+0x24>
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e03b      	b.n	8002f90 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_UART_Receive_IT+0x36>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e034      	b.n	8002f90 <HAL_UART_Receive_IT+0xa0>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <HAL_UART_Receive_IT+0xa8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d01f      	beq.n	8002f7e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d018      	beq.n	8002f7e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	e853 3f00 	ldrex	r3, [r3]
 8002f58:	613b      	str	r3, [r7, #16]
   return(result);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	623b      	str	r3, [r7, #32]
 8002f6c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6e:	69f9      	ldr	r1, [r7, #28]
 8002f70:	6a3a      	ldr	r2, [r7, #32]
 8002f72:	e841 2300 	strex	r3, r2, [r1]
 8002f76:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1e6      	bne.n	8002f4c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	461a      	mov	r2, r3
 8002f82:	68b9      	ldr	r1, [r7, #8]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 ffc3 	bl	8003f10 <UART_Start_Receive_IT>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	e000      	b.n	8002f90 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
  }
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3728      	adds	r7, #40	; 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40008000 	.word	0x40008000

08002f9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b0ba      	sub	sp, #232	; 0xe8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002fc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002fca:	4013      	ands	r3, r2
 8002fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002fd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11b      	bne.n	8003010 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d015      	beq.n	8003010 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d105      	bne.n	8002ffc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d009      	beq.n	8003010 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 82d6 	beq.w	80035b2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	4798      	blx	r3
      }
      return;
 800300e:	e2d0      	b.n	80035b2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 811f 	beq.w	8003258 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800301a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800301e:	4b8b      	ldr	r3, [pc, #556]	; (800324c <HAL_UART_IRQHandler+0x2b0>)
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003026:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800302a:	4b89      	ldr	r3, [pc, #548]	; (8003250 <HAL_UART_IRQHandler+0x2b4>)
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8112 	beq.w	8003258 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d011      	beq.n	8003064 <HAL_UART_IRQHandler+0xc8>
 8003040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2201      	movs	r2, #1
 8003052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d011      	beq.n	8003094 <HAL_UART_IRQHandler+0xf8>
 8003070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00b      	beq.n	8003094 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2202      	movs	r2, #2
 8003082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800308a:	f043 0204 	orr.w	r2, r3, #4
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d011      	beq.n	80030c4 <HAL_UART_IRQHandler+0x128>
 80030a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2204      	movs	r2, #4
 80030b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030ba:	f043 0202 	orr.w	r2, r3, #2
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d017      	beq.n	8003100 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80030dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80030e0:	4b5a      	ldr	r3, [pc, #360]	; (800324c <HAL_UART_IRQHandler+0x2b0>)
 80030e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2208      	movs	r2, #8
 80030ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f6:	f043 0208 	orr.w	r2, r3, #8
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003108:	2b00      	cmp	r3, #0
 800310a:	d012      	beq.n	8003132 <HAL_UART_IRQHandler+0x196>
 800310c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00c      	beq.n	8003132 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003120:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 823c 	beq.w	80035b6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800313e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d013      	beq.n	8003172 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800314a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d105      	bne.n	8003162 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003178:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d005      	beq.n	8003196 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800318a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800318e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003192:	2b00      	cmp	r3, #0
 8003194:	d04f      	beq.n	8003236 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 ffe4 	bl	8004164 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d141      	bne.n	800322e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3308      	adds	r3, #8
 80031b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3308      	adds	r3, #8
 80031d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1d9      	bne.n	80031aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d013      	beq.n	8003226 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003202:	4a14      	ldr	r2, [pc, #80]	; (8003254 <HAL_UART_IRQHandler+0x2b8>)
 8003204:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe f845 	bl	800129a <HAL_DMA_Abort_IT>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d017      	beq.n	8003246 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003220:	4610      	mov	r0, r2
 8003222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	e00f      	b.n	8003246 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f9da 	bl	80035e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	e00b      	b.n	8003246 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f9d6 	bl	80035e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003234:	e007      	b.n	8003246 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f9d2 	bl	80035e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003244:	e1b7      	b.n	80035b6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003246:	bf00      	nop
    return;
 8003248:	e1b5      	b.n	80035b6 <HAL_UART_IRQHandler+0x61a>
 800324a:	bf00      	nop
 800324c:	10000001 	.word	0x10000001
 8003250:	04000120 	.word	0x04000120
 8003254:	08004231 	.word	0x08004231

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325c:	2b01      	cmp	r3, #1
 800325e:	f040 814a 	bne.w	80034f6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8143 	beq.w	80034f6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 813c 	beq.w	80034f6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2210      	movs	r2, #16
 8003284:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	f040 80b5 	bne.w	8003400 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8187 	beq.w	80035ba <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80032b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032b6:	429a      	cmp	r2, r3
 80032b8:	f080 817f 	bcs.w	80035ba <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 8086 	bne.w	80033e4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032e4:	e853 3f00 	ldrex	r3, [r3]
 80032e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003302:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003306:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800330e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003312:	e841 2300 	strex	r3, r2, [r1]
 8003316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800331a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1da      	bne.n	80032d8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	3308      	adds	r3, #8
 8003328:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800332c:	e853 3f00 	ldrex	r3, [r3]
 8003330:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3308      	adds	r3, #8
 8003342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003346:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800334a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800334e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e1      	bne.n	8003322 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3308      	adds	r3, #8
 8003364:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800336e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3308      	adds	r3, #8
 800337e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003382:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003384:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003386:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003388:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1e3      	bne.n	800335e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ac:	e853 3f00 	ldrex	r3, [r3]
 80033b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b4:	f023 0310 	bic.w	r3, r3, #16
 80033b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80033c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e4      	bne.n	80033a4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd ff02 	bl	80011e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	4619      	mov	r1, r3
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f8fb 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033fe:	e0dc      	b.n	80035ba <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800340c:	b29b      	uxth	r3, r3
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80ce 	beq.w	80035be <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003422:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80c9 	beq.w	80035be <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003434:	e853 3f00 	ldrex	r3, [r3]
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800343a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003440:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800344e:	647b      	str	r3, [r7, #68]	; 0x44
 8003450:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003452:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003456:	e841 2300 	strex	r3, r2, [r1]
 800345a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800345c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e4      	bne.n	800342c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3308      	adds	r3, #8
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	623b      	str	r3, [r7, #32]
   return(result);
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3308      	adds	r3, #8
 8003486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800348a:	633a      	str	r2, [r7, #48]	; 0x30
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e1      	bne.n	8003462 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	60fb      	str	r3, [r7, #12]
   return(result);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0310 	bic.w	r3, r3, #16
 80034c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d8:	69b9      	ldr	r1, [r7, #24]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	e841 2300 	strex	r3, r2, [r1]
 80034e0:	617b      	str	r3, [r7, #20]
   return(result);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e4      	bne.n	80034b2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034ec:	4619      	mov	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f880 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034f4:	e063      	b.n	80035be <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00e      	beq.n	8003520 <HAL_UART_IRQHandler+0x584>
 8003502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003516:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f001 fb27 	bl	8004b6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800351e:	e051      	b.n	80035c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003528:	2b00      	cmp	r3, #0
 800352a:	d014      	beq.n	8003556 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800352c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b00      	cmp	r3, #0
 8003536:	d105      	bne.n	8003544 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800353c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003548:	2b00      	cmp	r3, #0
 800354a:	d03a      	beq.n	80035c2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
    }
    return;
 8003554:	e035      	b.n	80035c2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_UART_IRQHandler+0x5da>
 8003562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fe74 	bl	800425c <UART_EndTransmit_IT>
    return;
 8003574:	e026      	b.n	80035c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <HAL_UART_IRQHandler+0x5fa>
 8003582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003586:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f001 fb00 	bl	8004b94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003594:	e016      	b.n	80035c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d010      	beq.n	80035c4 <HAL_UART_IRQHandler+0x628>
 80035a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	da0c      	bge.n	80035c4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f001 fae8 	bl	8004b80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035b0:	e008      	b.n	80035c4 <HAL_UART_IRQHandler+0x628>
      return;
 80035b2:	bf00      	nop
 80035b4:	e006      	b.n	80035c4 <HAL_UART_IRQHandler+0x628>
    return;
 80035b6:	bf00      	nop
 80035b8:	e004      	b.n	80035c4 <HAL_UART_IRQHandler+0x628>
      return;
 80035ba:	bf00      	nop
 80035bc:	e002      	b.n	80035c4 <HAL_UART_IRQHandler+0x628>
      return;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HAL_UART_IRQHandler+0x628>
    return;
 80035c2:	bf00      	nop
  }
}
 80035c4:	37e8      	adds	r7, #232	; 0xe8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop

080035cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800360c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003610:	b08c      	sub	sp, #48	; 0x30
 8003612:	af00      	add	r7, sp, #0
 8003614:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	431a      	orrs	r2, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	431a      	orrs	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	4313      	orrs	r3, r2
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4bab      	ldr	r3, [pc, #684]	; (80038e8 <UART_SetConfig+0x2dc>)
 800363c:	4013      	ands	r3, r2
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003644:	430b      	orrs	r3, r1
 8003646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4aa0      	ldr	r2, [pc, #640]	; (80038ec <UART_SetConfig+0x2e0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003674:	4313      	orrs	r3, r2
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003682:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800368c:	430b      	orrs	r3, r1
 800368e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	f023 010f 	bic.w	r1, r3, #15
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a91      	ldr	r2, [pc, #580]	; (80038f0 <UART_SetConfig+0x2e4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d125      	bne.n	80036fc <UART_SetConfig+0xf0>
 80036b0:	4b90      	ldr	r3, [pc, #576]	; (80038f4 <UART_SetConfig+0x2e8>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d81a      	bhi.n	80036f4 <UART_SetConfig+0xe8>
 80036be:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <UART_SetConfig+0xb8>)
 80036c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c4:	080036d5 	.word	0x080036d5
 80036c8:	080036e5 	.word	0x080036e5
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	080036ed 	.word	0x080036ed
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036da:	e0d6      	b.n	800388a <UART_SetConfig+0x27e>
 80036dc:	2302      	movs	r3, #2
 80036de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036e2:	e0d2      	b.n	800388a <UART_SetConfig+0x27e>
 80036e4:	2304      	movs	r3, #4
 80036e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ea:	e0ce      	b.n	800388a <UART_SetConfig+0x27e>
 80036ec:	2308      	movs	r3, #8
 80036ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036f2:	e0ca      	b.n	800388a <UART_SetConfig+0x27e>
 80036f4:	2310      	movs	r3, #16
 80036f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036fa:	e0c6      	b.n	800388a <UART_SetConfig+0x27e>
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a7d      	ldr	r2, [pc, #500]	; (80038f8 <UART_SetConfig+0x2ec>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d138      	bne.n	8003778 <UART_SetConfig+0x16c>
 8003706:	4b7b      	ldr	r3, [pc, #492]	; (80038f4 <UART_SetConfig+0x2e8>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	2b0c      	cmp	r3, #12
 8003712:	d82d      	bhi.n	8003770 <UART_SetConfig+0x164>
 8003714:	a201      	add	r2, pc, #4	; (adr r2, 800371c <UART_SetConfig+0x110>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	08003751 	.word	0x08003751
 8003720:	08003771 	.word	0x08003771
 8003724:	08003771 	.word	0x08003771
 8003728:	08003771 	.word	0x08003771
 800372c:	08003761 	.word	0x08003761
 8003730:	08003771 	.word	0x08003771
 8003734:	08003771 	.word	0x08003771
 8003738:	08003771 	.word	0x08003771
 800373c:	08003759 	.word	0x08003759
 8003740:	08003771 	.word	0x08003771
 8003744:	08003771 	.word	0x08003771
 8003748:	08003771 	.word	0x08003771
 800374c:	08003769 	.word	0x08003769
 8003750:	2300      	movs	r3, #0
 8003752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003756:	e098      	b.n	800388a <UART_SetConfig+0x27e>
 8003758:	2302      	movs	r3, #2
 800375a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800375e:	e094      	b.n	800388a <UART_SetConfig+0x27e>
 8003760:	2304      	movs	r3, #4
 8003762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003766:	e090      	b.n	800388a <UART_SetConfig+0x27e>
 8003768:	2308      	movs	r3, #8
 800376a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800376e:	e08c      	b.n	800388a <UART_SetConfig+0x27e>
 8003770:	2310      	movs	r3, #16
 8003772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003776:	e088      	b.n	800388a <UART_SetConfig+0x27e>
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a5f      	ldr	r2, [pc, #380]	; (80038fc <UART_SetConfig+0x2f0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d125      	bne.n	80037ce <UART_SetConfig+0x1c2>
 8003782:	4b5c      	ldr	r3, [pc, #368]	; (80038f4 <UART_SetConfig+0x2e8>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800378c:	2b30      	cmp	r3, #48	; 0x30
 800378e:	d016      	beq.n	80037be <UART_SetConfig+0x1b2>
 8003790:	2b30      	cmp	r3, #48	; 0x30
 8003792:	d818      	bhi.n	80037c6 <UART_SetConfig+0x1ba>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d00a      	beq.n	80037ae <UART_SetConfig+0x1a2>
 8003798:	2b20      	cmp	r3, #32
 800379a:	d814      	bhi.n	80037c6 <UART_SetConfig+0x1ba>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <UART_SetConfig+0x19a>
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d008      	beq.n	80037b6 <UART_SetConfig+0x1aa>
 80037a4:	e00f      	b.n	80037c6 <UART_SetConfig+0x1ba>
 80037a6:	2300      	movs	r3, #0
 80037a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ac:	e06d      	b.n	800388a <UART_SetConfig+0x27e>
 80037ae:	2302      	movs	r3, #2
 80037b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037b4:	e069      	b.n	800388a <UART_SetConfig+0x27e>
 80037b6:	2304      	movs	r3, #4
 80037b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037bc:	e065      	b.n	800388a <UART_SetConfig+0x27e>
 80037be:	2308      	movs	r3, #8
 80037c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037c4:	e061      	b.n	800388a <UART_SetConfig+0x27e>
 80037c6:	2310      	movs	r3, #16
 80037c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037cc:	e05d      	b.n	800388a <UART_SetConfig+0x27e>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a4b      	ldr	r2, [pc, #300]	; (8003900 <UART_SetConfig+0x2f4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d125      	bne.n	8003824 <UART_SetConfig+0x218>
 80037d8:	4b46      	ldr	r3, [pc, #280]	; (80038f4 <UART_SetConfig+0x2e8>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037e2:	2bc0      	cmp	r3, #192	; 0xc0
 80037e4:	d016      	beq.n	8003814 <UART_SetConfig+0x208>
 80037e6:	2bc0      	cmp	r3, #192	; 0xc0
 80037e8:	d818      	bhi.n	800381c <UART_SetConfig+0x210>
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d00a      	beq.n	8003804 <UART_SetConfig+0x1f8>
 80037ee:	2b80      	cmp	r3, #128	; 0x80
 80037f0:	d814      	bhi.n	800381c <UART_SetConfig+0x210>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <UART_SetConfig+0x1f0>
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d008      	beq.n	800380c <UART_SetConfig+0x200>
 80037fa:	e00f      	b.n	800381c <UART_SetConfig+0x210>
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003802:	e042      	b.n	800388a <UART_SetConfig+0x27e>
 8003804:	2302      	movs	r3, #2
 8003806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800380a:	e03e      	b.n	800388a <UART_SetConfig+0x27e>
 800380c:	2304      	movs	r3, #4
 800380e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003812:	e03a      	b.n	800388a <UART_SetConfig+0x27e>
 8003814:	2308      	movs	r3, #8
 8003816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800381a:	e036      	b.n	800388a <UART_SetConfig+0x27e>
 800381c:	2310      	movs	r3, #16
 800381e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003822:	e032      	b.n	800388a <UART_SetConfig+0x27e>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a30      	ldr	r2, [pc, #192]	; (80038ec <UART_SetConfig+0x2e0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d12a      	bne.n	8003884 <UART_SetConfig+0x278>
 800382e:	4b31      	ldr	r3, [pc, #196]	; (80038f4 <UART_SetConfig+0x2e8>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003834:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003838:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800383c:	d01a      	beq.n	8003874 <UART_SetConfig+0x268>
 800383e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003842:	d81b      	bhi.n	800387c <UART_SetConfig+0x270>
 8003844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003848:	d00c      	beq.n	8003864 <UART_SetConfig+0x258>
 800384a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384e:	d815      	bhi.n	800387c <UART_SetConfig+0x270>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <UART_SetConfig+0x250>
 8003854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003858:	d008      	beq.n	800386c <UART_SetConfig+0x260>
 800385a:	e00f      	b.n	800387c <UART_SetConfig+0x270>
 800385c:	2300      	movs	r3, #0
 800385e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003862:	e012      	b.n	800388a <UART_SetConfig+0x27e>
 8003864:	2302      	movs	r3, #2
 8003866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800386a:	e00e      	b.n	800388a <UART_SetConfig+0x27e>
 800386c:	2304      	movs	r3, #4
 800386e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003872:	e00a      	b.n	800388a <UART_SetConfig+0x27e>
 8003874:	2308      	movs	r3, #8
 8003876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800387a:	e006      	b.n	800388a <UART_SetConfig+0x27e>
 800387c:	2310      	movs	r3, #16
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003882:	e002      	b.n	800388a <UART_SetConfig+0x27e>
 8003884:	2310      	movs	r3, #16
 8003886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a17      	ldr	r2, [pc, #92]	; (80038ec <UART_SetConfig+0x2e0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	f040 80a8 	bne.w	80039e6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003896:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800389a:	2b08      	cmp	r3, #8
 800389c:	d834      	bhi.n	8003908 <UART_SetConfig+0x2fc>
 800389e:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <UART_SetConfig+0x298>)
 80038a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a4:	080038c9 	.word	0x080038c9
 80038a8:	08003909 	.word	0x08003909
 80038ac:	080038d1 	.word	0x080038d1
 80038b0:	08003909 	.word	0x08003909
 80038b4:	080038d7 	.word	0x080038d7
 80038b8:	08003909 	.word	0x08003909
 80038bc:	08003909 	.word	0x08003909
 80038c0:	08003909 	.word	0x08003909
 80038c4:	080038df 	.word	0x080038df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c8:	f7fe fc4e 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 80038cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038ce:	e021      	b.n	8003914 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <UART_SetConfig+0x2f8>)
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038d4:	e01e      	b.n	8003914 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038d6:	f7fe fbd9 	bl	800208c <HAL_RCC_GetSysClockFreq>
 80038da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038dc:	e01a      	b.n	8003914 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038e4:	e016      	b.n	8003914 <UART_SetConfig+0x308>
 80038e6:	bf00      	nop
 80038e8:	cfff69f3 	.word	0xcfff69f3
 80038ec:	40008000 	.word	0x40008000
 80038f0:	40013800 	.word	0x40013800
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40004400 	.word	0x40004400
 80038fc:	40004800 	.word	0x40004800
 8003900:	40004c00 	.word	0x40004c00
 8003904:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003912:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 812a 	beq.w	8003b70 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	4a9e      	ldr	r2, [pc, #632]	; (8003b9c <UART_SetConfig+0x590>)
 8003922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003926:	461a      	mov	r2, r3
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	fbb3 f3f2 	udiv	r3, r3, r2
 800392e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	429a      	cmp	r2, r3
 800393e:	d305      	bcc.n	800394c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	429a      	cmp	r2, r3
 800394a:	d903      	bls.n	8003954 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003952:	e10d      	b.n	8003b70 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	2200      	movs	r2, #0
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	60fa      	str	r2, [r7, #12]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	4a8e      	ldr	r2, [pc, #568]	; (8003b9c <UART_SetConfig+0x590>)
 8003962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003966:	b29b      	uxth	r3, r3
 8003968:	2200      	movs	r2, #0
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003972:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003976:	f7fc fcb3 	bl	80002e0 <__aeabi_uldivmod>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	020b      	lsls	r3, r1, #8
 800398c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003990:	0202      	lsls	r2, r0, #8
 8003992:	6979      	ldr	r1, [r7, #20]
 8003994:	6849      	ldr	r1, [r1, #4]
 8003996:	0849      	lsrs	r1, r1, #1
 8003998:	2000      	movs	r0, #0
 800399a:	460c      	mov	r4, r1
 800399c:	4605      	mov	r5, r0
 800399e:	eb12 0804 	adds.w	r8, r2, r4
 80039a2:	eb43 0905 	adc.w	r9, r3, r5
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	469a      	mov	sl, r3
 80039ae:	4693      	mov	fp, r2
 80039b0:	4652      	mov	r2, sl
 80039b2:	465b      	mov	r3, fp
 80039b4:	4640      	mov	r0, r8
 80039b6:	4649      	mov	r1, r9
 80039b8:	f7fc fc92 	bl	80002e0 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4613      	mov	r3, r2
 80039c2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ca:	d308      	bcc.n	80039de <UART_SetConfig+0x3d2>
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d2:	d204      	bcs.n	80039de <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	60da      	str	r2, [r3, #12]
 80039dc:	e0c8      	b.n	8003b70 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80039e4:	e0c4      	b.n	8003b70 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ee:	d167      	bne.n	8003ac0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80039f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d828      	bhi.n	8003a4a <UART_SetConfig+0x43e>
 80039f8:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <UART_SetConfig+0x3f4>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a2d 	.word	0x08003a2d
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a4b 	.word	0x08003a4b
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a4b 	.word	0x08003a4b
 8003a18:	08003a4b 	.word	0x08003a4b
 8003a1c:	08003a4b 	.word	0x08003a4b
 8003a20:	08003a43 	.word	0x08003a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7fe fba0 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8003a28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a2a:	e014      	b.n	8003a56 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7fe fbb2 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 8003a30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a32:	e010      	b.n	8003a56 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a34:	4b5a      	ldr	r3, [pc, #360]	; (8003ba0 <UART_SetConfig+0x594>)
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a38:	e00d      	b.n	8003a56 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7fe fb27 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8003a3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a40:	e009      	b.n	8003a56 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a48:	e005      	b.n	8003a56 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8089 	beq.w	8003b70 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	4a4e      	ldr	r2, [pc, #312]	; (8003b9c <UART_SetConfig+0x590>)
 8003a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a70:	005a      	lsls	r2, r3, #1
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	441a      	add	r2, r3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	2b0f      	cmp	r3, #15
 8003a88:	d916      	bls.n	8003ab8 <UART_SetConfig+0x4ac>
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a90:	d212      	bcs.n	8003ab8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	f023 030f 	bic.w	r3, r3, #15
 8003a9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	8bfb      	ldrh	r3, [r7, #30]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	8bfa      	ldrh	r2, [r7, #30]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	e05b      	b.n	8003b70 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003abe:	e057      	b.n	8003b70 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ac0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d828      	bhi.n	8003b1a <UART_SetConfig+0x50e>
 8003ac8:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <UART_SetConfig+0x4c4>)
 8003aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ace:	bf00      	nop
 8003ad0:	08003af5 	.word	0x08003af5
 8003ad4:	08003afd 	.word	0x08003afd
 8003ad8:	08003b05 	.word	0x08003b05
 8003adc:	08003b1b 	.word	0x08003b1b
 8003ae0:	08003b0b 	.word	0x08003b0b
 8003ae4:	08003b1b 	.word	0x08003b1b
 8003ae8:	08003b1b 	.word	0x08003b1b
 8003aec:	08003b1b 	.word	0x08003b1b
 8003af0:	08003b13 	.word	0x08003b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af4:	f7fe fb38 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8003af8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003afa:	e014      	b.n	8003b26 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003afc:	f7fe fb4a 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 8003b00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b02:	e010      	b.n	8003b26 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b04:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <UART_SetConfig+0x594>)
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b08:	e00d      	b.n	8003b26 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b0a:	f7fe fabf 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8003b0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b10:	e009      	b.n	8003b26 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b18:	e005      	b.n	8003b26 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b24:	bf00      	nop
    }

    if (pclk != 0U)
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d021      	beq.n	8003b70 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <UART_SetConfig+0x590>)
 8003b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b36:	461a      	mov	r2, r3
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	441a      	add	r2, r3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	2b0f      	cmp	r3, #15
 8003b54:	d909      	bls.n	8003b6a <UART_SetConfig+0x55e>
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5c:	d205      	bcs.n	8003b6a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60da      	str	r2, [r3, #12]
 8003b68:	e002      	b.n	8003b70 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2200      	movs	r2, #0
 8003b84:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003b8c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3730      	adds	r7, #48	; 0x30
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9a:	bf00      	nop
 8003b9c:	08006418 	.word	0x08006418
 8003ba0:	00f42400 	.word	0x00f42400

08003ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01a      	beq.n	8003cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca2:	d10a      	bne.n	8003cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	605a      	str	r2, [r3, #4]
  }
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cf8:	f7fd f968 	bl	8000fcc <HAL_GetTick>
 8003cfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d10e      	bne.n	8003d2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f82f 	bl	8003d7e <UART_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e025      	b.n	8003d76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d10e      	bne.n	8003d56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f819 	bl	8003d7e <UART_WaitOnFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e00f      	b.n	8003d76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b09c      	sub	sp, #112	; 0x70
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	603b      	str	r3, [r7, #0]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8e:	e0a9      	b.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d96:	f000 80a5 	beq.w	8003ee4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9a:	f7fd f917 	bl	8000fcc <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d302      	bcc.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d140      	bne.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dc4:	667b      	str	r3, [r7, #100]	; 0x64
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dd0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003dd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e6      	bne.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3308      	adds	r3, #8
 8003de8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	663b      	str	r3, [r7, #96]	; 0x60
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e02:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e5      	bne.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e069      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d051      	beq.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e4e:	d149      	bne.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e78:	637b      	str	r3, [r7, #52]	; 0x34
 8003e7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e6      	bne.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3308      	adds	r3, #8
 8003e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003eac:	623a      	str	r2, [r7, #32]
 8003eae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb0:	69f9      	ldr	r1, [r7, #28]
 8003eb2:	6a3a      	ldr	r2, [r7, #32]
 8003eb4:	e841 2300 	strex	r3, r2, [r1]
 8003eb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e5      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e010      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4013      	ands	r3, r2
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	f43f af46 	beq.w	8003d90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3770      	adds	r7, #112	; 0x70
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b0a3      	sub	sp, #140	; 0x8c
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f42:	d10e      	bne.n	8003f62 <UART_Start_Receive_IT+0x52>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <UART_Start_Receive_IT+0x48>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f56:	e02d      	b.n	8003fb4 <UART_Start_Receive_IT+0xa4>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	22ff      	movs	r2, #255	; 0xff
 8003f5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f60:	e028      	b.n	8003fb4 <UART_Start_Receive_IT+0xa4>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10d      	bne.n	8003f86 <UART_Start_Receive_IT+0x76>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d104      	bne.n	8003f7c <UART_Start_Receive_IT+0x6c>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	22ff      	movs	r2, #255	; 0xff
 8003f76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f7a:	e01b      	b.n	8003fb4 <UART_Start_Receive_IT+0xa4>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	227f      	movs	r2, #127	; 0x7f
 8003f80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f84:	e016      	b.n	8003fb4 <UART_Start_Receive_IT+0xa4>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f8e:	d10d      	bne.n	8003fac <UART_Start_Receive_IT+0x9c>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d104      	bne.n	8003fa2 <UART_Start_Receive_IT+0x92>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	227f      	movs	r2, #127	; 0x7f
 8003f9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003fa0:	e008      	b.n	8003fb4 <UART_Start_Receive_IT+0xa4>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	223f      	movs	r2, #63	; 0x3f
 8003fa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003faa:	e003      	b.n	8003fb4 <UART_Start_Receive_IT+0xa4>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2222      	movs	r2, #34	; 0x22
 8003fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003fd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003fe8:	673a      	str	r2, [r7, #112]	; 0x70
 8003fea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003fee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e3      	bne.n	8003fc4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004004:	d153      	bne.n	80040ae <UART_Start_Receive_IT+0x19e>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	429a      	cmp	r2, r3
 8004010:	d34d      	bcc.n	80040ae <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401a:	d107      	bne.n	800402c <UART_Start_Receive_IT+0x11c>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d103      	bne.n	800402c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4a4b      	ldr	r2, [pc, #300]	; (8004154 <UART_Start_Receive_IT+0x244>)
 8004028:	671a      	str	r2, [r3, #112]	; 0x70
 800402a:	e002      	b.n	8004032 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4a4a      	ldr	r2, [pc, #296]	; (8004158 <UART_Start_Receive_IT+0x248>)
 8004030:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01a      	beq.n	8004078 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004056:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004066:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800406a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e4      	bne.n	8004042 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3308      	adds	r3, #8
 800407e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3308      	adds	r3, #8
 8004096:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004098:	64ba      	str	r2, [r7, #72]	; 0x48
 800409a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800409e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e5      	bne.n	8004078 <UART_Start_Receive_IT+0x168>
 80040ac:	e04a      	b.n	8004144 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b6:	d107      	bne.n	80040c8 <UART_Start_Receive_IT+0x1b8>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d103      	bne.n	80040c8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a26      	ldr	r2, [pc, #152]	; (800415c <UART_Start_Receive_IT+0x24c>)
 80040c4:	671a      	str	r2, [r3, #112]	; 0x70
 80040c6:	e002      	b.n	80040ce <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4a25      	ldr	r2, [pc, #148]	; (8004160 <UART_Start_Receive_IT+0x250>)
 80040cc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d019      	beq.n	8004112 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80040f2:	677b      	str	r3, [r7, #116]	; 0x74
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
 80040fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e6      	bne.n	80040de <UART_Start_Receive_IT+0x1ce>
 8004110:	e018      	b.n	8004144 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	613b      	str	r3, [r7, #16]
   return(result);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f043 0320 	orr.w	r3, r3, #32
 8004126:	67bb      	str	r3, [r7, #120]	; 0x78
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004130:	623b      	str	r3, [r7, #32]
 8004132:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	69f9      	ldr	r1, [r7, #28]
 8004136:	6a3a      	ldr	r2, [r7, #32]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	61bb      	str	r3, [r7, #24]
   return(result);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e6      	bne.n	8004112 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	378c      	adds	r7, #140	; 0x8c
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	0800486d 	.word	0x0800486d
 8004158:	08004575 	.word	0x08004575
 800415c:	08004413 	.word	0x08004413
 8004160:	080042b3 	.word	0x080042b3

08004164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b095      	sub	sp, #84	; 0x54
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004180:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418a:	643b      	str	r3, [r7, #64]	; 0x40
 800418c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e6      	bne.n	800416c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3308      	adds	r3, #8
 80041a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e3      	bne.n	800419e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d118      	bne.n	8004210 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f023 0310 	bic.w	r3, r3, #16
 80041f2:	647b      	str	r3, [r7, #68]	; 0x44
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6979      	ldr	r1, [r7, #20]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	613b      	str	r3, [r7, #16]
   return(result);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e6      	bne.n	80041de <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004224:	bf00      	nop
 8004226:	3754      	adds	r7, #84	; 0x54
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f7ff f9c6 	bl	80035e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	60bb      	str	r3, [r7, #8]
   return(result);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6979      	ldr	r1, [r7, #20]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	613b      	str	r3, [r7, #16]
   return(result);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e6      	bne.n	8004264 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff f991 	bl	80035cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042aa:	bf00      	nop
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b096      	sub	sp, #88	; 0x58
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80042c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	2b22      	cmp	r3, #34	; 0x22
 80042cc:	f040 8095 	bne.w	80043fa <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042da:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80042de:	b2d9      	uxtb	r1, r3
 80042e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	400a      	ands	r2, r1
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d178      	bne.n	800440a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800432c:	653b      	str	r3, [r7, #80]	; 0x50
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004336:	647b      	str	r3, [r7, #68]	; 0x44
 8004338:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800433c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e6      	bne.n	8004318 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3308      	adds	r3, #8
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	623b      	str	r3, [r7, #32]
   return(result);
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3308      	adds	r3, #8
 8004368:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800436a:	633a      	str	r2, [r7, #48]	; 0x30
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e5      	bne.n	800434a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d12e      	bne.n	80043f2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0310 	bic.w	r3, r3, #16
 80043ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	69b9      	ldr	r1, [r7, #24]
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	617b      	str	r3, [r7, #20]
   return(result);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e6      	bne.n	800439a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b10      	cmp	r3, #16
 80043d8:	d103      	bne.n	80043e2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2210      	movs	r2, #16
 80043e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff f902 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043f0:	e00b      	b.n	800440a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fc fb5c 	bl	8000ab0 <HAL_UART_RxCpltCallback>
}
 80043f8:	e007      	b.n	800440a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0208 	orr.w	r2, r2, #8
 8004408:	619a      	str	r2, [r3, #24]
}
 800440a:	bf00      	nop
 800440c:	3758      	adds	r7, #88	; 0x58
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b096      	sub	sp, #88	; 0x58
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004420:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	2b22      	cmp	r3, #34	; 0x22
 800442c:	f040 8095 	bne.w	800455a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004440:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004444:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004448:	4013      	ands	r3, r2
 800444a:	b29a      	uxth	r2, r3
 800444c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	1c9a      	adds	r2, r3, #2
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d178      	bne.n	800456a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800448c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004496:	643b      	str	r3, [r7, #64]	; 0x40
 8004498:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800449c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e6      	bne.n	8004478 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3308      	adds	r3, #8
 80044b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3308      	adds	r3, #8
 80044c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e5      	bne.n	80044aa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d12e      	bne.n	8004552 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	60bb      	str	r3, [r7, #8]
   return(result);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f023 0310 	bic.w	r3, r3, #16
 800450e:	647b      	str	r3, [r7, #68]	; 0x44
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6979      	ldr	r1, [r7, #20]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	613b      	str	r3, [r7, #16]
   return(result);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e6      	bne.n	80044fa <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b10      	cmp	r3, #16
 8004538:	d103      	bne.n	8004542 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2210      	movs	r2, #16
 8004540:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004548:	4619      	mov	r1, r3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff f852 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004550:	e00b      	b.n	800456a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fc faac 	bl	8000ab0 <HAL_UART_RxCpltCallback>
}
 8004558:	e007      	b.n	800456a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0208 	orr.w	r2, r2, #8
 8004568:	619a      	str	r2, [r3, #24]
}
 800456a:	bf00      	nop
 800456c:	3758      	adds	r7, #88	; 0x58
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b0a6      	sub	sp, #152	; 0x98
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004582:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	2b22      	cmp	r3, #34	; 0x22
 80045ac:	f040 814f 	bne.w	800484e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80045b6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80045ba:	e0f6      	b.n	80047aa <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045c6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80045ca:	b2d9      	uxtb	r1, r3
 80045cc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d6:	400a      	ands	r2, r1
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004602:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	2b00      	cmp	r3, #0
 800460c:	d053      	beq.n	80046b6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800460e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d011      	beq.n	800463e <UART_RxISR_8BIT_FIFOEN+0xca>
 800461a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800461e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2201      	movs	r2, #1
 800462c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004634:	f043 0201 	orr.w	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800463e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d011      	beq.n	800466e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800464a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00b      	beq.n	800466e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2202      	movs	r2, #2
 800465c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004664:	f043 0204 	orr.w	r2, r3, #4
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800466e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d011      	beq.n	800469e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800467a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2204      	movs	r2, #4
 800468c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004694:	f043 0202 	orr.w	r2, r3, #2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d006      	beq.n	80046b6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fe ff99 	bl	80035e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d173      	bne.n	80047aa <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80046d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80046e6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80046ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80046f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e4      	bne.n	80046c2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3308      	adds	r3, #8
 80046fe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800471c:	657a      	str	r2, [r7, #84]	; 0x54
 800471e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004722:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800472a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e3      	bne.n	80046f8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004742:	2b01      	cmp	r3, #1
 8004744:	d12e      	bne.n	80047a4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	f023 0310 	bic.w	r3, r3, #16
 8004760:	67bb      	str	r3, [r7, #120]	; 0x78
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800476a:	643b      	str	r3, [r7, #64]	; 0x40
 800476c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e6      	bne.n	800474c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b10      	cmp	r3, #16
 800478a:	d103      	bne.n	8004794 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2210      	movs	r2, #16
 8004792:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800479a:	4619      	mov	r1, r3
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fe ff29 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
 80047a2:	e002      	b.n	80047aa <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7fc f983 	bl	8000ab0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80047aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80047b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f47f aefe 	bne.w	80045bc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80047ca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d045      	beq.n	800485e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80047d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80047dc:	429a      	cmp	r2, r3
 80047de:	d23e      	bcs.n	800485e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3308      	adds	r3, #8
 80047e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f6:	673b      	str	r3, [r7, #112]	; 0x70
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3308      	adds	r3, #8
 80047fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004800:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a14      	ldr	r2, [pc, #80]	; (8004868 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8004818:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	60bb      	str	r3, [r7, #8]
   return(result);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f043 0320 	orr.w	r3, r3, #32
 800482e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6979      	ldr	r1, [r7, #20]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	613b      	str	r3, [r7, #16]
   return(result);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e6      	bne.n	800481a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800484c:	e007      	b.n	800485e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699a      	ldr	r2, [r3, #24]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0208 	orr.w	r2, r2, #8
 800485c:	619a      	str	r2, [r3, #24]
}
 800485e:	bf00      	nop
 8004860:	3798      	adds	r7, #152	; 0x98
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	080042b3 	.word	0x080042b3

0800486c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b0a8      	sub	sp, #160	; 0xa0
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800487a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	2b22      	cmp	r3, #34	; 0x22
 80048a4:	f040 8153 	bne.w	8004b4e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80048ae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80048b2:	e0fa      	b.n	8004aaa <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80048c6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80048ca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80048ce:	4013      	ands	r3, r2
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048dc:	1c9a      	adds	r2, r3, #2
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80048fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	2b00      	cmp	r3, #0
 8004908:	d053      	beq.n	80049b2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800490a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d011      	beq.n	800493a <UART_RxISR_16BIT_FIFOEN+0xce>
 8004916:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2201      	movs	r2, #1
 8004928:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004930:	f043 0201 	orr.w	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800493a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d011      	beq.n	800496a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004946:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00b      	beq.n	800496a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2202      	movs	r2, #2
 8004958:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004960:	f043 0204 	orr.w	r2, r3, #4
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800496a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	d011      	beq.n	800499a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004976:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2204      	movs	r2, #4
 8004988:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004990:	f043 0202 	orr.w	r2, r3, #2
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d006      	beq.n	80049b2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fe fe1b 	bl	80035e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d175      	bne.n	8004aaa <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049e2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e4      	bne.n	80049be <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3308      	adds	r3, #8
 80049fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	f023 0301 	bic.w	r3, r3, #1
 8004a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3308      	adds	r3, #8
 8004a18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e1      	bne.n	80049f4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d12e      	bne.n	8004aa4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5c:	f023 0310 	bic.w	r3, r3, #16
 8004a60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e6      	bne.n	8004a4c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d103      	bne.n	8004a94 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2210      	movs	r2, #16
 8004a92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7fe fda9 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
 8004aa2:	e002      	b.n	8004aaa <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7fc f803 	bl	8000ab0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004aaa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d006      	beq.n	8004ac0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8004ab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f47f aefa 	bne.w	80048b4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ac6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004aca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d045      	beq.n	8004b5e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004ad8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d23e      	bcs.n	8004b5e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	623b      	str	r3, [r7, #32]
   return(result);
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af6:	677b      	str	r3, [r7, #116]	; 0x74
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3308      	adds	r3, #8
 8004afe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004b00:	633a      	str	r2, [r7, #48]	; 0x30
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a14      	ldr	r2, [pc, #80]	; (8004b68 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8004b18:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f043 0320 	orr.w	r3, r3, #32
 8004b2e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	617b      	str	r3, [r7, #20]
   return(result);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e6      	bne.n	8004b1a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b4c:	e007      	b.n	8004b5e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699a      	ldr	r2, [r3, #24]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0208 	orr.w	r2, r2, #8
 8004b5c:	619a      	str	r2, [r3, #24]
}
 8004b5e:	bf00      	nop
 8004b60:	37a0      	adds	r7, #160	; 0xa0
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	08004413 	.word	0x08004413

08004b6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_UARTEx_DisableFifoMode+0x16>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e027      	b.n	8004c0e <HAL_UARTEx_DisableFifoMode+0x66>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2224      	movs	r2, #36	; 0x24
 8004bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004bec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e02d      	b.n	8004c8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2224      	movs	r2, #36	; 0x24
 8004c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0201 	bic.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f850 	bl	8004d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e02d      	b.n	8004d0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2224      	movs	r2, #36	; 0x24
 8004cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0201 	bic.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f812 	bl	8004d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d108      	bne.n	8004d36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d34:	e031      	b.n	8004d9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d36:	2308      	movs	r3, #8
 8004d38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d3a:	2308      	movs	r3, #8
 8004d3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	0e5b      	lsrs	r3, r3, #25
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	0f5b      	lsrs	r3, r3, #29
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d5e:	7bbb      	ldrb	r3, [r7, #14]
 8004d60:	7b3a      	ldrb	r2, [r7, #12]
 8004d62:	4911      	ldr	r1, [pc, #68]	; (8004da8 <UARTEx_SetNbDataToProcess+0x94>)
 8004d64:	5c8a      	ldrb	r2, [r1, r2]
 8004d66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d6a:	7b3a      	ldrb	r2, [r7, #12]
 8004d6c:	490f      	ldr	r1, [pc, #60]	; (8004dac <UARTEx_SetNbDataToProcess+0x98>)
 8004d6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d70:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	7b7a      	ldrb	r2, [r7, #13]
 8004d80:	4909      	ldr	r1, [pc, #36]	; (8004da8 <UARTEx_SetNbDataToProcess+0x94>)
 8004d82:	5c8a      	ldrb	r2, [r1, r2]
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d88:	7b7a      	ldrb	r2, [r7, #13]
 8004d8a:	4908      	ldr	r1, [pc, #32]	; (8004dac <UARTEx_SetNbDataToProcess+0x98>)
 8004d8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	08006430 	.word	0x08006430
 8004dac:	08006438 	.word	0x08006438

08004db0 <atoi>:
 8004db0:	220a      	movs	r2, #10
 8004db2:	2100      	movs	r1, #0
 8004db4:	f000 b930 	b.w	8005018 <strtol>

08004db8 <__errno>:
 8004db8:	4b01      	ldr	r3, [pc, #4]	; (8004dc0 <__errno+0x8>)
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000180 	.word	0x20000180

08004dc4 <__libc_init_array>:
 8004dc4:	b570      	push	{r4, r5, r6, lr}
 8004dc6:	4d0d      	ldr	r5, [pc, #52]	; (8004dfc <__libc_init_array+0x38>)
 8004dc8:	4c0d      	ldr	r4, [pc, #52]	; (8004e00 <__libc_init_array+0x3c>)
 8004dca:	1b64      	subs	r4, r4, r5
 8004dcc:	10a4      	asrs	r4, r4, #2
 8004dce:	2600      	movs	r6, #0
 8004dd0:	42a6      	cmp	r6, r4
 8004dd2:	d109      	bne.n	8004de8 <__libc_init_array+0x24>
 8004dd4:	4d0b      	ldr	r5, [pc, #44]	; (8004e04 <__libc_init_array+0x40>)
 8004dd6:	4c0c      	ldr	r4, [pc, #48]	; (8004e08 <__libc_init_array+0x44>)
 8004dd8:	f001 fade 	bl	8006398 <_init>
 8004ddc:	1b64      	subs	r4, r4, r5
 8004dde:	10a4      	asrs	r4, r4, #2
 8004de0:	2600      	movs	r6, #0
 8004de2:	42a6      	cmp	r6, r4
 8004de4:	d105      	bne.n	8004df2 <__libc_init_array+0x2e>
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
 8004de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dec:	4798      	blx	r3
 8004dee:	3601      	adds	r6, #1
 8004df0:	e7ee      	b.n	8004dd0 <__libc_init_array+0xc>
 8004df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df6:	4798      	blx	r3
 8004df8:	3601      	adds	r6, #1
 8004dfa:	e7f2      	b.n	8004de2 <__libc_init_array+0x1e>
 8004dfc:	08006690 	.word	0x08006690
 8004e00:	08006690 	.word	0x08006690
 8004e04:	08006690 	.word	0x08006690
 8004e08:	08006694 	.word	0x08006694

08004e0c <memset>:
 8004e0c:	4402      	add	r2, r0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d100      	bne.n	8004e16 <memset+0xa>
 8004e14:	4770      	bx	lr
 8004e16:	f803 1b01 	strb.w	r1, [r3], #1
 8004e1a:	e7f9      	b.n	8004e10 <memset+0x4>

08004e1c <siprintf>:
 8004e1c:	b40e      	push	{r1, r2, r3}
 8004e1e:	b500      	push	{lr}
 8004e20:	b09c      	sub	sp, #112	; 0x70
 8004e22:	ab1d      	add	r3, sp, #116	; 0x74
 8004e24:	9002      	str	r0, [sp, #8]
 8004e26:	9006      	str	r0, [sp, #24]
 8004e28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e2c:	4809      	ldr	r0, [pc, #36]	; (8004e54 <siprintf+0x38>)
 8004e2e:	9107      	str	r1, [sp, #28]
 8004e30:	9104      	str	r1, [sp, #16]
 8004e32:	4909      	ldr	r1, [pc, #36]	; (8004e58 <siprintf+0x3c>)
 8004e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e38:	9105      	str	r1, [sp, #20]
 8004e3a:	6800      	ldr	r0, [r0, #0]
 8004e3c:	9301      	str	r3, [sp, #4]
 8004e3e:	a902      	add	r1, sp, #8
 8004e40:	f000 fa68 	bl	8005314 <_svfiprintf_r>
 8004e44:	9b02      	ldr	r3, [sp, #8]
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	b01c      	add	sp, #112	; 0x70
 8004e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e50:	b003      	add	sp, #12
 8004e52:	4770      	bx	lr
 8004e54:	20000180 	.word	0x20000180
 8004e58:	ffff0208 	.word	0xffff0208

08004e5c <strtok>:
 8004e5c:	4b16      	ldr	r3, [pc, #88]	; (8004eb8 <strtok+0x5c>)
 8004e5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e60:	681e      	ldr	r6, [r3, #0]
 8004e62:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004e64:	4605      	mov	r5, r0
 8004e66:	b9fc      	cbnz	r4, 8004ea8 <strtok+0x4c>
 8004e68:	2050      	movs	r0, #80	; 0x50
 8004e6a:	9101      	str	r1, [sp, #4]
 8004e6c:	f000 f90e 	bl	800508c <malloc>
 8004e70:	9901      	ldr	r1, [sp, #4]
 8004e72:	65b0      	str	r0, [r6, #88]	; 0x58
 8004e74:	4602      	mov	r2, r0
 8004e76:	b920      	cbnz	r0, 8004e82 <strtok+0x26>
 8004e78:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <strtok+0x60>)
 8004e7a:	4811      	ldr	r0, [pc, #68]	; (8004ec0 <strtok+0x64>)
 8004e7c:	2157      	movs	r1, #87	; 0x57
 8004e7e:	f000 f8d5 	bl	800502c <__assert_func>
 8004e82:	e9c0 4400 	strd	r4, r4, [r0]
 8004e86:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004e8a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004e8e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004e92:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004e96:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004e9a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004e9e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004ea2:	6184      	str	r4, [r0, #24]
 8004ea4:	7704      	strb	r4, [r0, #28]
 8004ea6:	6244      	str	r4, [r0, #36]	; 0x24
 8004ea8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4628      	mov	r0, r5
 8004eae:	b002      	add	sp, #8
 8004eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004eb4:	f000 b806 	b.w	8004ec4 <__strtok_r>
 8004eb8:	20000180 	.word	0x20000180
 8004ebc:	08006444 	.word	0x08006444
 8004ec0:	0800645b 	.word	0x0800645b

08004ec4 <__strtok_r>:
 8004ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec6:	b908      	cbnz	r0, 8004ecc <__strtok_r+0x8>
 8004ec8:	6810      	ldr	r0, [r2, #0]
 8004eca:	b188      	cbz	r0, 8004ef0 <__strtok_r+0x2c>
 8004ecc:	4604      	mov	r4, r0
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004ed4:	460f      	mov	r7, r1
 8004ed6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004eda:	b91e      	cbnz	r6, 8004ee4 <__strtok_r+0x20>
 8004edc:	b965      	cbnz	r5, 8004ef8 <__strtok_r+0x34>
 8004ede:	6015      	str	r5, [r2, #0]
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	e005      	b.n	8004ef0 <__strtok_r+0x2c>
 8004ee4:	42b5      	cmp	r5, r6
 8004ee6:	d1f6      	bne.n	8004ed6 <__strtok_r+0x12>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f0      	bne.n	8004ece <__strtok_r+0xa>
 8004eec:	6014      	str	r4, [r2, #0]
 8004eee:	7003      	strb	r3, [r0, #0]
 8004ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef2:	461c      	mov	r4, r3
 8004ef4:	e00c      	b.n	8004f10 <__strtok_r+0x4c>
 8004ef6:	b915      	cbnz	r5, 8004efe <__strtok_r+0x3a>
 8004ef8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004efc:	460e      	mov	r6, r1
 8004efe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004f02:	42ab      	cmp	r3, r5
 8004f04:	d1f7      	bne.n	8004ef6 <__strtok_r+0x32>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f3      	beq.n	8004ef2 <__strtok_r+0x2e>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004f10:	6014      	str	r4, [r2, #0]
 8004f12:	e7ed      	b.n	8004ef0 <__strtok_r+0x2c>

08004f14 <_strtol_l.constprop.0>:
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f1a:	d001      	beq.n	8004f20 <_strtol_l.constprop.0+0xc>
 8004f1c:	2b24      	cmp	r3, #36	; 0x24
 8004f1e:	d906      	bls.n	8004f2e <_strtol_l.constprop.0+0x1a>
 8004f20:	f7ff ff4a 	bl	8004db8 <__errno>
 8004f24:	2316      	movs	r3, #22
 8004f26:	6003      	str	r3, [r0, #0]
 8004f28:	2000      	movs	r0, #0
 8004f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005014 <_strtol_l.constprop.0+0x100>
 8004f32:	460d      	mov	r5, r1
 8004f34:	462e      	mov	r6, r5
 8004f36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f3a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004f3e:	f017 0708 	ands.w	r7, r7, #8
 8004f42:	d1f7      	bne.n	8004f34 <_strtol_l.constprop.0+0x20>
 8004f44:	2c2d      	cmp	r4, #45	; 0x2d
 8004f46:	d132      	bne.n	8004fae <_strtol_l.constprop.0+0x9a>
 8004f48:	782c      	ldrb	r4, [r5, #0]
 8004f4a:	2701      	movs	r7, #1
 8004f4c:	1cb5      	adds	r5, r6, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d05b      	beq.n	800500a <_strtol_l.constprop.0+0xf6>
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d109      	bne.n	8004f6a <_strtol_l.constprop.0+0x56>
 8004f56:	2c30      	cmp	r4, #48	; 0x30
 8004f58:	d107      	bne.n	8004f6a <_strtol_l.constprop.0+0x56>
 8004f5a:	782c      	ldrb	r4, [r5, #0]
 8004f5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004f60:	2c58      	cmp	r4, #88	; 0x58
 8004f62:	d14d      	bne.n	8005000 <_strtol_l.constprop.0+0xec>
 8004f64:	786c      	ldrb	r4, [r5, #1]
 8004f66:	2310      	movs	r3, #16
 8004f68:	3502      	adds	r5, #2
 8004f6a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004f6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f72:	f04f 0c00 	mov.w	ip, #0
 8004f76:	fbb8 f9f3 	udiv	r9, r8, r3
 8004f7a:	4666      	mov	r6, ip
 8004f7c:	fb03 8a19 	mls	sl, r3, r9, r8
 8004f80:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004f84:	f1be 0f09 	cmp.w	lr, #9
 8004f88:	d816      	bhi.n	8004fb8 <_strtol_l.constprop.0+0xa4>
 8004f8a:	4674      	mov	r4, lr
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	dd24      	ble.n	8004fda <_strtol_l.constprop.0+0xc6>
 8004f90:	f1bc 0f00 	cmp.w	ip, #0
 8004f94:	db1e      	blt.n	8004fd4 <_strtol_l.constprop.0+0xc0>
 8004f96:	45b1      	cmp	r9, r6
 8004f98:	d31c      	bcc.n	8004fd4 <_strtol_l.constprop.0+0xc0>
 8004f9a:	d101      	bne.n	8004fa0 <_strtol_l.constprop.0+0x8c>
 8004f9c:	45a2      	cmp	sl, r4
 8004f9e:	db19      	blt.n	8004fd4 <_strtol_l.constprop.0+0xc0>
 8004fa0:	fb06 4603 	mla	r6, r6, r3, r4
 8004fa4:	f04f 0c01 	mov.w	ip, #1
 8004fa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fac:	e7e8      	b.n	8004f80 <_strtol_l.constprop.0+0x6c>
 8004fae:	2c2b      	cmp	r4, #43	; 0x2b
 8004fb0:	bf04      	itt	eq
 8004fb2:	782c      	ldrbeq	r4, [r5, #0]
 8004fb4:	1cb5      	addeq	r5, r6, #2
 8004fb6:	e7ca      	b.n	8004f4e <_strtol_l.constprop.0+0x3a>
 8004fb8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004fbc:	f1be 0f19 	cmp.w	lr, #25
 8004fc0:	d801      	bhi.n	8004fc6 <_strtol_l.constprop.0+0xb2>
 8004fc2:	3c37      	subs	r4, #55	; 0x37
 8004fc4:	e7e2      	b.n	8004f8c <_strtol_l.constprop.0+0x78>
 8004fc6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004fca:	f1be 0f19 	cmp.w	lr, #25
 8004fce:	d804      	bhi.n	8004fda <_strtol_l.constprop.0+0xc6>
 8004fd0:	3c57      	subs	r4, #87	; 0x57
 8004fd2:	e7db      	b.n	8004f8c <_strtol_l.constprop.0+0x78>
 8004fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8004fd8:	e7e6      	b.n	8004fa8 <_strtol_l.constprop.0+0x94>
 8004fda:	f1bc 0f00 	cmp.w	ip, #0
 8004fde:	da05      	bge.n	8004fec <_strtol_l.constprop.0+0xd8>
 8004fe0:	2322      	movs	r3, #34	; 0x22
 8004fe2:	6003      	str	r3, [r0, #0]
 8004fe4:	4646      	mov	r6, r8
 8004fe6:	b942      	cbnz	r2, 8004ffa <_strtol_l.constprop.0+0xe6>
 8004fe8:	4630      	mov	r0, r6
 8004fea:	e79e      	b.n	8004f2a <_strtol_l.constprop.0+0x16>
 8004fec:	b107      	cbz	r7, 8004ff0 <_strtol_l.constprop.0+0xdc>
 8004fee:	4276      	negs	r6, r6
 8004ff0:	2a00      	cmp	r2, #0
 8004ff2:	d0f9      	beq.n	8004fe8 <_strtol_l.constprop.0+0xd4>
 8004ff4:	f1bc 0f00 	cmp.w	ip, #0
 8004ff8:	d000      	beq.n	8004ffc <_strtol_l.constprop.0+0xe8>
 8004ffa:	1e69      	subs	r1, r5, #1
 8004ffc:	6011      	str	r1, [r2, #0]
 8004ffe:	e7f3      	b.n	8004fe8 <_strtol_l.constprop.0+0xd4>
 8005000:	2430      	movs	r4, #48	; 0x30
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1b1      	bne.n	8004f6a <_strtol_l.constprop.0+0x56>
 8005006:	2308      	movs	r3, #8
 8005008:	e7af      	b.n	8004f6a <_strtol_l.constprop.0+0x56>
 800500a:	2c30      	cmp	r4, #48	; 0x30
 800500c:	d0a5      	beq.n	8004f5a <_strtol_l.constprop.0+0x46>
 800500e:	230a      	movs	r3, #10
 8005010:	e7ab      	b.n	8004f6a <_strtol_l.constprop.0+0x56>
 8005012:	bf00      	nop
 8005014:	080064f5 	.word	0x080064f5

08005018 <strtol>:
 8005018:	4613      	mov	r3, r2
 800501a:	460a      	mov	r2, r1
 800501c:	4601      	mov	r1, r0
 800501e:	4802      	ldr	r0, [pc, #8]	; (8005028 <strtol+0x10>)
 8005020:	6800      	ldr	r0, [r0, #0]
 8005022:	f7ff bf77 	b.w	8004f14 <_strtol_l.constprop.0>
 8005026:	bf00      	nop
 8005028:	20000180 	.word	0x20000180

0800502c <__assert_func>:
 800502c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800502e:	4614      	mov	r4, r2
 8005030:	461a      	mov	r2, r3
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <__assert_func+0x2c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4605      	mov	r5, r0
 8005038:	68d8      	ldr	r0, [r3, #12]
 800503a:	b14c      	cbz	r4, 8005050 <__assert_func+0x24>
 800503c:	4b07      	ldr	r3, [pc, #28]	; (800505c <__assert_func+0x30>)
 800503e:	9100      	str	r1, [sp, #0]
 8005040:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005044:	4906      	ldr	r1, [pc, #24]	; (8005060 <__assert_func+0x34>)
 8005046:	462b      	mov	r3, r5
 8005048:	f000 f80e 	bl	8005068 <fiprintf>
 800504c:	f000 fe20 	bl	8005c90 <abort>
 8005050:	4b04      	ldr	r3, [pc, #16]	; (8005064 <__assert_func+0x38>)
 8005052:	461c      	mov	r4, r3
 8005054:	e7f3      	b.n	800503e <__assert_func+0x12>
 8005056:	bf00      	nop
 8005058:	20000180 	.word	0x20000180
 800505c:	080064b8 	.word	0x080064b8
 8005060:	080064c5 	.word	0x080064c5
 8005064:	080064f3 	.word	0x080064f3

08005068 <fiprintf>:
 8005068:	b40e      	push	{r1, r2, r3}
 800506a:	b503      	push	{r0, r1, lr}
 800506c:	4601      	mov	r1, r0
 800506e:	ab03      	add	r3, sp, #12
 8005070:	4805      	ldr	r0, [pc, #20]	; (8005088 <fiprintf+0x20>)
 8005072:	f853 2b04 	ldr.w	r2, [r3], #4
 8005076:	6800      	ldr	r0, [r0, #0]
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	f000 fa75 	bl	8005568 <_vfiprintf_r>
 800507e:	b002      	add	sp, #8
 8005080:	f85d eb04 	ldr.w	lr, [sp], #4
 8005084:	b003      	add	sp, #12
 8005086:	4770      	bx	lr
 8005088:	20000180 	.word	0x20000180

0800508c <malloc>:
 800508c:	4b02      	ldr	r3, [pc, #8]	; (8005098 <malloc+0xc>)
 800508e:	4601      	mov	r1, r0
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	f000 b86f 	b.w	8005174 <_malloc_r>
 8005096:	bf00      	nop
 8005098:	20000180 	.word	0x20000180

0800509c <_free_r>:
 800509c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800509e:	2900      	cmp	r1, #0
 80050a0:	d044      	beq.n	800512c <_free_r+0x90>
 80050a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050a6:	9001      	str	r0, [sp, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f1a1 0404 	sub.w	r4, r1, #4
 80050ae:	bfb8      	it	lt
 80050b0:	18e4      	addlt	r4, r4, r3
 80050b2:	f001 f83d 	bl	8006130 <__malloc_lock>
 80050b6:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <_free_r+0x94>)
 80050b8:	9801      	ldr	r0, [sp, #4]
 80050ba:	6813      	ldr	r3, [r2, #0]
 80050bc:	b933      	cbnz	r3, 80050cc <_free_r+0x30>
 80050be:	6063      	str	r3, [r4, #4]
 80050c0:	6014      	str	r4, [r2, #0]
 80050c2:	b003      	add	sp, #12
 80050c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050c8:	f001 b838 	b.w	800613c <__malloc_unlock>
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	d908      	bls.n	80050e2 <_free_r+0x46>
 80050d0:	6825      	ldr	r5, [r4, #0]
 80050d2:	1961      	adds	r1, r4, r5
 80050d4:	428b      	cmp	r3, r1
 80050d6:	bf01      	itttt	eq
 80050d8:	6819      	ldreq	r1, [r3, #0]
 80050da:	685b      	ldreq	r3, [r3, #4]
 80050dc:	1949      	addeq	r1, r1, r5
 80050de:	6021      	streq	r1, [r4, #0]
 80050e0:	e7ed      	b.n	80050be <_free_r+0x22>
 80050e2:	461a      	mov	r2, r3
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	b10b      	cbz	r3, 80050ec <_free_r+0x50>
 80050e8:	42a3      	cmp	r3, r4
 80050ea:	d9fa      	bls.n	80050e2 <_free_r+0x46>
 80050ec:	6811      	ldr	r1, [r2, #0]
 80050ee:	1855      	adds	r5, r2, r1
 80050f0:	42a5      	cmp	r5, r4
 80050f2:	d10b      	bne.n	800510c <_free_r+0x70>
 80050f4:	6824      	ldr	r4, [r4, #0]
 80050f6:	4421      	add	r1, r4
 80050f8:	1854      	adds	r4, r2, r1
 80050fa:	42a3      	cmp	r3, r4
 80050fc:	6011      	str	r1, [r2, #0]
 80050fe:	d1e0      	bne.n	80050c2 <_free_r+0x26>
 8005100:	681c      	ldr	r4, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	6053      	str	r3, [r2, #4]
 8005106:	4421      	add	r1, r4
 8005108:	6011      	str	r1, [r2, #0]
 800510a:	e7da      	b.n	80050c2 <_free_r+0x26>
 800510c:	d902      	bls.n	8005114 <_free_r+0x78>
 800510e:	230c      	movs	r3, #12
 8005110:	6003      	str	r3, [r0, #0]
 8005112:	e7d6      	b.n	80050c2 <_free_r+0x26>
 8005114:	6825      	ldr	r5, [r4, #0]
 8005116:	1961      	adds	r1, r4, r5
 8005118:	428b      	cmp	r3, r1
 800511a:	bf04      	itt	eq
 800511c:	6819      	ldreq	r1, [r3, #0]
 800511e:	685b      	ldreq	r3, [r3, #4]
 8005120:	6063      	str	r3, [r4, #4]
 8005122:	bf04      	itt	eq
 8005124:	1949      	addeq	r1, r1, r5
 8005126:	6021      	streq	r1, [r4, #0]
 8005128:	6054      	str	r4, [r2, #4]
 800512a:	e7ca      	b.n	80050c2 <_free_r+0x26>
 800512c:	b003      	add	sp, #12
 800512e:	bd30      	pop	{r4, r5, pc}
 8005130:	2000032c 	.word	0x2000032c

08005134 <sbrk_aligned>:
 8005134:	b570      	push	{r4, r5, r6, lr}
 8005136:	4e0e      	ldr	r6, [pc, #56]	; (8005170 <sbrk_aligned+0x3c>)
 8005138:	460c      	mov	r4, r1
 800513a:	6831      	ldr	r1, [r6, #0]
 800513c:	4605      	mov	r5, r0
 800513e:	b911      	cbnz	r1, 8005146 <sbrk_aligned+0x12>
 8005140:	f000 fcd6 	bl	8005af0 <_sbrk_r>
 8005144:	6030      	str	r0, [r6, #0]
 8005146:	4621      	mov	r1, r4
 8005148:	4628      	mov	r0, r5
 800514a:	f000 fcd1 	bl	8005af0 <_sbrk_r>
 800514e:	1c43      	adds	r3, r0, #1
 8005150:	d00a      	beq.n	8005168 <sbrk_aligned+0x34>
 8005152:	1cc4      	adds	r4, r0, #3
 8005154:	f024 0403 	bic.w	r4, r4, #3
 8005158:	42a0      	cmp	r0, r4
 800515a:	d007      	beq.n	800516c <sbrk_aligned+0x38>
 800515c:	1a21      	subs	r1, r4, r0
 800515e:	4628      	mov	r0, r5
 8005160:	f000 fcc6 	bl	8005af0 <_sbrk_r>
 8005164:	3001      	adds	r0, #1
 8005166:	d101      	bne.n	800516c <sbrk_aligned+0x38>
 8005168:	f04f 34ff 	mov.w	r4, #4294967295
 800516c:	4620      	mov	r0, r4
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	20000330 	.word	0x20000330

08005174 <_malloc_r>:
 8005174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005178:	1ccd      	adds	r5, r1, #3
 800517a:	f025 0503 	bic.w	r5, r5, #3
 800517e:	3508      	adds	r5, #8
 8005180:	2d0c      	cmp	r5, #12
 8005182:	bf38      	it	cc
 8005184:	250c      	movcc	r5, #12
 8005186:	2d00      	cmp	r5, #0
 8005188:	4607      	mov	r7, r0
 800518a:	db01      	blt.n	8005190 <_malloc_r+0x1c>
 800518c:	42a9      	cmp	r1, r5
 800518e:	d905      	bls.n	800519c <_malloc_r+0x28>
 8005190:	230c      	movs	r3, #12
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	2600      	movs	r6, #0
 8005196:	4630      	mov	r0, r6
 8005198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800519c:	4e2e      	ldr	r6, [pc, #184]	; (8005258 <_malloc_r+0xe4>)
 800519e:	f000 ffc7 	bl	8006130 <__malloc_lock>
 80051a2:	6833      	ldr	r3, [r6, #0]
 80051a4:	461c      	mov	r4, r3
 80051a6:	bb34      	cbnz	r4, 80051f6 <_malloc_r+0x82>
 80051a8:	4629      	mov	r1, r5
 80051aa:	4638      	mov	r0, r7
 80051ac:	f7ff ffc2 	bl	8005134 <sbrk_aligned>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	4604      	mov	r4, r0
 80051b4:	d14d      	bne.n	8005252 <_malloc_r+0xde>
 80051b6:	6834      	ldr	r4, [r6, #0]
 80051b8:	4626      	mov	r6, r4
 80051ba:	2e00      	cmp	r6, #0
 80051bc:	d140      	bne.n	8005240 <_malloc_r+0xcc>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	4631      	mov	r1, r6
 80051c2:	4638      	mov	r0, r7
 80051c4:	eb04 0803 	add.w	r8, r4, r3
 80051c8:	f000 fc92 	bl	8005af0 <_sbrk_r>
 80051cc:	4580      	cmp	r8, r0
 80051ce:	d13a      	bne.n	8005246 <_malloc_r+0xd2>
 80051d0:	6821      	ldr	r1, [r4, #0]
 80051d2:	3503      	adds	r5, #3
 80051d4:	1a6d      	subs	r5, r5, r1
 80051d6:	f025 0503 	bic.w	r5, r5, #3
 80051da:	3508      	adds	r5, #8
 80051dc:	2d0c      	cmp	r5, #12
 80051de:	bf38      	it	cc
 80051e0:	250c      	movcc	r5, #12
 80051e2:	4629      	mov	r1, r5
 80051e4:	4638      	mov	r0, r7
 80051e6:	f7ff ffa5 	bl	8005134 <sbrk_aligned>
 80051ea:	3001      	adds	r0, #1
 80051ec:	d02b      	beq.n	8005246 <_malloc_r+0xd2>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	442b      	add	r3, r5
 80051f2:	6023      	str	r3, [r4, #0]
 80051f4:	e00e      	b.n	8005214 <_malloc_r+0xa0>
 80051f6:	6822      	ldr	r2, [r4, #0]
 80051f8:	1b52      	subs	r2, r2, r5
 80051fa:	d41e      	bmi.n	800523a <_malloc_r+0xc6>
 80051fc:	2a0b      	cmp	r2, #11
 80051fe:	d916      	bls.n	800522e <_malloc_r+0xba>
 8005200:	1961      	adds	r1, r4, r5
 8005202:	42a3      	cmp	r3, r4
 8005204:	6025      	str	r5, [r4, #0]
 8005206:	bf18      	it	ne
 8005208:	6059      	strne	r1, [r3, #4]
 800520a:	6863      	ldr	r3, [r4, #4]
 800520c:	bf08      	it	eq
 800520e:	6031      	streq	r1, [r6, #0]
 8005210:	5162      	str	r2, [r4, r5]
 8005212:	604b      	str	r3, [r1, #4]
 8005214:	4638      	mov	r0, r7
 8005216:	f104 060b 	add.w	r6, r4, #11
 800521a:	f000 ff8f 	bl	800613c <__malloc_unlock>
 800521e:	f026 0607 	bic.w	r6, r6, #7
 8005222:	1d23      	adds	r3, r4, #4
 8005224:	1af2      	subs	r2, r6, r3
 8005226:	d0b6      	beq.n	8005196 <_malloc_r+0x22>
 8005228:	1b9b      	subs	r3, r3, r6
 800522a:	50a3      	str	r3, [r4, r2]
 800522c:	e7b3      	b.n	8005196 <_malloc_r+0x22>
 800522e:	6862      	ldr	r2, [r4, #4]
 8005230:	42a3      	cmp	r3, r4
 8005232:	bf0c      	ite	eq
 8005234:	6032      	streq	r2, [r6, #0]
 8005236:	605a      	strne	r2, [r3, #4]
 8005238:	e7ec      	b.n	8005214 <_malloc_r+0xa0>
 800523a:	4623      	mov	r3, r4
 800523c:	6864      	ldr	r4, [r4, #4]
 800523e:	e7b2      	b.n	80051a6 <_malloc_r+0x32>
 8005240:	4634      	mov	r4, r6
 8005242:	6876      	ldr	r6, [r6, #4]
 8005244:	e7b9      	b.n	80051ba <_malloc_r+0x46>
 8005246:	230c      	movs	r3, #12
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	4638      	mov	r0, r7
 800524c:	f000 ff76 	bl	800613c <__malloc_unlock>
 8005250:	e7a1      	b.n	8005196 <_malloc_r+0x22>
 8005252:	6025      	str	r5, [r4, #0]
 8005254:	e7de      	b.n	8005214 <_malloc_r+0xa0>
 8005256:	bf00      	nop
 8005258:	2000032c 	.word	0x2000032c

0800525c <__ssputs_r>:
 800525c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005260:	688e      	ldr	r6, [r1, #8]
 8005262:	429e      	cmp	r6, r3
 8005264:	4682      	mov	sl, r0
 8005266:	460c      	mov	r4, r1
 8005268:	4690      	mov	r8, r2
 800526a:	461f      	mov	r7, r3
 800526c:	d838      	bhi.n	80052e0 <__ssputs_r+0x84>
 800526e:	898a      	ldrh	r2, [r1, #12]
 8005270:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005274:	d032      	beq.n	80052dc <__ssputs_r+0x80>
 8005276:	6825      	ldr	r5, [r4, #0]
 8005278:	6909      	ldr	r1, [r1, #16]
 800527a:	eba5 0901 	sub.w	r9, r5, r1
 800527e:	6965      	ldr	r5, [r4, #20]
 8005280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005284:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005288:	3301      	adds	r3, #1
 800528a:	444b      	add	r3, r9
 800528c:	106d      	asrs	r5, r5, #1
 800528e:	429d      	cmp	r5, r3
 8005290:	bf38      	it	cc
 8005292:	461d      	movcc	r5, r3
 8005294:	0553      	lsls	r3, r2, #21
 8005296:	d531      	bpl.n	80052fc <__ssputs_r+0xa0>
 8005298:	4629      	mov	r1, r5
 800529a:	f7ff ff6b 	bl	8005174 <_malloc_r>
 800529e:	4606      	mov	r6, r0
 80052a0:	b950      	cbnz	r0, 80052b8 <__ssputs_r+0x5c>
 80052a2:	230c      	movs	r3, #12
 80052a4:	f8ca 3000 	str.w	r3, [sl]
 80052a8:	89a3      	ldrh	r3, [r4, #12]
 80052aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ae:	81a3      	strh	r3, [r4, #12]
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295
 80052b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b8:	6921      	ldr	r1, [r4, #16]
 80052ba:	464a      	mov	r2, r9
 80052bc:	f000 ff10 	bl	80060e0 <memcpy>
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ca:	81a3      	strh	r3, [r4, #12]
 80052cc:	6126      	str	r6, [r4, #16]
 80052ce:	6165      	str	r5, [r4, #20]
 80052d0:	444e      	add	r6, r9
 80052d2:	eba5 0509 	sub.w	r5, r5, r9
 80052d6:	6026      	str	r6, [r4, #0]
 80052d8:	60a5      	str	r5, [r4, #8]
 80052da:	463e      	mov	r6, r7
 80052dc:	42be      	cmp	r6, r7
 80052de:	d900      	bls.n	80052e2 <__ssputs_r+0x86>
 80052e0:	463e      	mov	r6, r7
 80052e2:	6820      	ldr	r0, [r4, #0]
 80052e4:	4632      	mov	r2, r6
 80052e6:	4641      	mov	r1, r8
 80052e8:	f000 ff08 	bl	80060fc <memmove>
 80052ec:	68a3      	ldr	r3, [r4, #8]
 80052ee:	1b9b      	subs	r3, r3, r6
 80052f0:	60a3      	str	r3, [r4, #8]
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	4433      	add	r3, r6
 80052f6:	6023      	str	r3, [r4, #0]
 80052f8:	2000      	movs	r0, #0
 80052fa:	e7db      	b.n	80052b4 <__ssputs_r+0x58>
 80052fc:	462a      	mov	r2, r5
 80052fe:	f000 ff23 	bl	8006148 <_realloc_r>
 8005302:	4606      	mov	r6, r0
 8005304:	2800      	cmp	r0, #0
 8005306:	d1e1      	bne.n	80052cc <__ssputs_r+0x70>
 8005308:	6921      	ldr	r1, [r4, #16]
 800530a:	4650      	mov	r0, sl
 800530c:	f7ff fec6 	bl	800509c <_free_r>
 8005310:	e7c7      	b.n	80052a2 <__ssputs_r+0x46>
	...

08005314 <_svfiprintf_r>:
 8005314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005318:	4698      	mov	r8, r3
 800531a:	898b      	ldrh	r3, [r1, #12]
 800531c:	061b      	lsls	r3, r3, #24
 800531e:	b09d      	sub	sp, #116	; 0x74
 8005320:	4607      	mov	r7, r0
 8005322:	460d      	mov	r5, r1
 8005324:	4614      	mov	r4, r2
 8005326:	d50e      	bpl.n	8005346 <_svfiprintf_r+0x32>
 8005328:	690b      	ldr	r3, [r1, #16]
 800532a:	b963      	cbnz	r3, 8005346 <_svfiprintf_r+0x32>
 800532c:	2140      	movs	r1, #64	; 0x40
 800532e:	f7ff ff21 	bl	8005174 <_malloc_r>
 8005332:	6028      	str	r0, [r5, #0]
 8005334:	6128      	str	r0, [r5, #16]
 8005336:	b920      	cbnz	r0, 8005342 <_svfiprintf_r+0x2e>
 8005338:	230c      	movs	r3, #12
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	f04f 30ff 	mov.w	r0, #4294967295
 8005340:	e0d1      	b.n	80054e6 <_svfiprintf_r+0x1d2>
 8005342:	2340      	movs	r3, #64	; 0x40
 8005344:	616b      	str	r3, [r5, #20]
 8005346:	2300      	movs	r3, #0
 8005348:	9309      	str	r3, [sp, #36]	; 0x24
 800534a:	2320      	movs	r3, #32
 800534c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005350:	f8cd 800c 	str.w	r8, [sp, #12]
 8005354:	2330      	movs	r3, #48	; 0x30
 8005356:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005500 <_svfiprintf_r+0x1ec>
 800535a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800535e:	f04f 0901 	mov.w	r9, #1
 8005362:	4623      	mov	r3, r4
 8005364:	469a      	mov	sl, r3
 8005366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800536a:	b10a      	cbz	r2, 8005370 <_svfiprintf_r+0x5c>
 800536c:	2a25      	cmp	r2, #37	; 0x25
 800536e:	d1f9      	bne.n	8005364 <_svfiprintf_r+0x50>
 8005370:	ebba 0b04 	subs.w	fp, sl, r4
 8005374:	d00b      	beq.n	800538e <_svfiprintf_r+0x7a>
 8005376:	465b      	mov	r3, fp
 8005378:	4622      	mov	r2, r4
 800537a:	4629      	mov	r1, r5
 800537c:	4638      	mov	r0, r7
 800537e:	f7ff ff6d 	bl	800525c <__ssputs_r>
 8005382:	3001      	adds	r0, #1
 8005384:	f000 80aa 	beq.w	80054dc <_svfiprintf_r+0x1c8>
 8005388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800538a:	445a      	add	r2, fp
 800538c:	9209      	str	r2, [sp, #36]	; 0x24
 800538e:	f89a 3000 	ldrb.w	r3, [sl]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 80a2 	beq.w	80054dc <_svfiprintf_r+0x1c8>
 8005398:	2300      	movs	r3, #0
 800539a:	f04f 32ff 	mov.w	r2, #4294967295
 800539e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053a2:	f10a 0a01 	add.w	sl, sl, #1
 80053a6:	9304      	str	r3, [sp, #16]
 80053a8:	9307      	str	r3, [sp, #28]
 80053aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053ae:	931a      	str	r3, [sp, #104]	; 0x68
 80053b0:	4654      	mov	r4, sl
 80053b2:	2205      	movs	r2, #5
 80053b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b8:	4851      	ldr	r0, [pc, #324]	; (8005500 <_svfiprintf_r+0x1ec>)
 80053ba:	f7fa ff41 	bl	8000240 <memchr>
 80053be:	9a04      	ldr	r2, [sp, #16]
 80053c0:	b9d8      	cbnz	r0, 80053fa <_svfiprintf_r+0xe6>
 80053c2:	06d0      	lsls	r0, r2, #27
 80053c4:	bf44      	itt	mi
 80053c6:	2320      	movmi	r3, #32
 80053c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053cc:	0711      	lsls	r1, r2, #28
 80053ce:	bf44      	itt	mi
 80053d0:	232b      	movmi	r3, #43	; 0x2b
 80053d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053d6:	f89a 3000 	ldrb.w	r3, [sl]
 80053da:	2b2a      	cmp	r3, #42	; 0x2a
 80053dc:	d015      	beq.n	800540a <_svfiprintf_r+0xf6>
 80053de:	9a07      	ldr	r2, [sp, #28]
 80053e0:	4654      	mov	r4, sl
 80053e2:	2000      	movs	r0, #0
 80053e4:	f04f 0c0a 	mov.w	ip, #10
 80053e8:	4621      	mov	r1, r4
 80053ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ee:	3b30      	subs	r3, #48	; 0x30
 80053f0:	2b09      	cmp	r3, #9
 80053f2:	d94e      	bls.n	8005492 <_svfiprintf_r+0x17e>
 80053f4:	b1b0      	cbz	r0, 8005424 <_svfiprintf_r+0x110>
 80053f6:	9207      	str	r2, [sp, #28]
 80053f8:	e014      	b.n	8005424 <_svfiprintf_r+0x110>
 80053fa:	eba0 0308 	sub.w	r3, r0, r8
 80053fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005402:	4313      	orrs	r3, r2
 8005404:	9304      	str	r3, [sp, #16]
 8005406:	46a2      	mov	sl, r4
 8005408:	e7d2      	b.n	80053b0 <_svfiprintf_r+0x9c>
 800540a:	9b03      	ldr	r3, [sp, #12]
 800540c:	1d19      	adds	r1, r3, #4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	9103      	str	r1, [sp, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	bfbb      	ittet	lt
 8005416:	425b      	neglt	r3, r3
 8005418:	f042 0202 	orrlt.w	r2, r2, #2
 800541c:	9307      	strge	r3, [sp, #28]
 800541e:	9307      	strlt	r3, [sp, #28]
 8005420:	bfb8      	it	lt
 8005422:	9204      	strlt	r2, [sp, #16]
 8005424:	7823      	ldrb	r3, [r4, #0]
 8005426:	2b2e      	cmp	r3, #46	; 0x2e
 8005428:	d10c      	bne.n	8005444 <_svfiprintf_r+0x130>
 800542a:	7863      	ldrb	r3, [r4, #1]
 800542c:	2b2a      	cmp	r3, #42	; 0x2a
 800542e:	d135      	bne.n	800549c <_svfiprintf_r+0x188>
 8005430:	9b03      	ldr	r3, [sp, #12]
 8005432:	1d1a      	adds	r2, r3, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	9203      	str	r2, [sp, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	bfb8      	it	lt
 800543c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005440:	3402      	adds	r4, #2
 8005442:	9305      	str	r3, [sp, #20]
 8005444:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005510 <_svfiprintf_r+0x1fc>
 8005448:	7821      	ldrb	r1, [r4, #0]
 800544a:	2203      	movs	r2, #3
 800544c:	4650      	mov	r0, sl
 800544e:	f7fa fef7 	bl	8000240 <memchr>
 8005452:	b140      	cbz	r0, 8005466 <_svfiprintf_r+0x152>
 8005454:	2340      	movs	r3, #64	; 0x40
 8005456:	eba0 000a 	sub.w	r0, r0, sl
 800545a:	fa03 f000 	lsl.w	r0, r3, r0
 800545e:	9b04      	ldr	r3, [sp, #16]
 8005460:	4303      	orrs	r3, r0
 8005462:	3401      	adds	r4, #1
 8005464:	9304      	str	r3, [sp, #16]
 8005466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800546a:	4826      	ldr	r0, [pc, #152]	; (8005504 <_svfiprintf_r+0x1f0>)
 800546c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005470:	2206      	movs	r2, #6
 8005472:	f7fa fee5 	bl	8000240 <memchr>
 8005476:	2800      	cmp	r0, #0
 8005478:	d038      	beq.n	80054ec <_svfiprintf_r+0x1d8>
 800547a:	4b23      	ldr	r3, [pc, #140]	; (8005508 <_svfiprintf_r+0x1f4>)
 800547c:	bb1b      	cbnz	r3, 80054c6 <_svfiprintf_r+0x1b2>
 800547e:	9b03      	ldr	r3, [sp, #12]
 8005480:	3307      	adds	r3, #7
 8005482:	f023 0307 	bic.w	r3, r3, #7
 8005486:	3308      	adds	r3, #8
 8005488:	9303      	str	r3, [sp, #12]
 800548a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548c:	4433      	add	r3, r6
 800548e:	9309      	str	r3, [sp, #36]	; 0x24
 8005490:	e767      	b.n	8005362 <_svfiprintf_r+0x4e>
 8005492:	fb0c 3202 	mla	r2, ip, r2, r3
 8005496:	460c      	mov	r4, r1
 8005498:	2001      	movs	r0, #1
 800549a:	e7a5      	b.n	80053e8 <_svfiprintf_r+0xd4>
 800549c:	2300      	movs	r3, #0
 800549e:	3401      	adds	r4, #1
 80054a0:	9305      	str	r3, [sp, #20]
 80054a2:	4619      	mov	r1, r3
 80054a4:	f04f 0c0a 	mov.w	ip, #10
 80054a8:	4620      	mov	r0, r4
 80054aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ae:	3a30      	subs	r2, #48	; 0x30
 80054b0:	2a09      	cmp	r2, #9
 80054b2:	d903      	bls.n	80054bc <_svfiprintf_r+0x1a8>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0c5      	beq.n	8005444 <_svfiprintf_r+0x130>
 80054b8:	9105      	str	r1, [sp, #20]
 80054ba:	e7c3      	b.n	8005444 <_svfiprintf_r+0x130>
 80054bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80054c0:	4604      	mov	r4, r0
 80054c2:	2301      	movs	r3, #1
 80054c4:	e7f0      	b.n	80054a8 <_svfiprintf_r+0x194>
 80054c6:	ab03      	add	r3, sp, #12
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	462a      	mov	r2, r5
 80054cc:	4b0f      	ldr	r3, [pc, #60]	; (800550c <_svfiprintf_r+0x1f8>)
 80054ce:	a904      	add	r1, sp, #16
 80054d0:	4638      	mov	r0, r7
 80054d2:	f3af 8000 	nop.w
 80054d6:	1c42      	adds	r2, r0, #1
 80054d8:	4606      	mov	r6, r0
 80054da:	d1d6      	bne.n	800548a <_svfiprintf_r+0x176>
 80054dc:	89ab      	ldrh	r3, [r5, #12]
 80054de:	065b      	lsls	r3, r3, #25
 80054e0:	f53f af2c 	bmi.w	800533c <_svfiprintf_r+0x28>
 80054e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054e6:	b01d      	add	sp, #116	; 0x74
 80054e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ec:	ab03      	add	r3, sp, #12
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	462a      	mov	r2, r5
 80054f2:	4b06      	ldr	r3, [pc, #24]	; (800550c <_svfiprintf_r+0x1f8>)
 80054f4:	a904      	add	r1, sp, #16
 80054f6:	4638      	mov	r0, r7
 80054f8:	f000 f9d4 	bl	80058a4 <_printf_i>
 80054fc:	e7eb      	b.n	80054d6 <_svfiprintf_r+0x1c2>
 80054fe:	bf00      	nop
 8005500:	080065f5 	.word	0x080065f5
 8005504:	080065ff 	.word	0x080065ff
 8005508:	00000000 	.word	0x00000000
 800550c:	0800525d 	.word	0x0800525d
 8005510:	080065fb 	.word	0x080065fb

08005514 <__sfputc_r>:
 8005514:	6893      	ldr	r3, [r2, #8]
 8005516:	3b01      	subs	r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	b410      	push	{r4}
 800551c:	6093      	str	r3, [r2, #8]
 800551e:	da08      	bge.n	8005532 <__sfputc_r+0x1e>
 8005520:	6994      	ldr	r4, [r2, #24]
 8005522:	42a3      	cmp	r3, r4
 8005524:	db01      	blt.n	800552a <__sfputc_r+0x16>
 8005526:	290a      	cmp	r1, #10
 8005528:	d103      	bne.n	8005532 <__sfputc_r+0x1e>
 800552a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800552e:	f000 baef 	b.w	8005b10 <__swbuf_r>
 8005532:	6813      	ldr	r3, [r2, #0]
 8005534:	1c58      	adds	r0, r3, #1
 8005536:	6010      	str	r0, [r2, #0]
 8005538:	7019      	strb	r1, [r3, #0]
 800553a:	4608      	mov	r0, r1
 800553c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005540:	4770      	bx	lr

08005542 <__sfputs_r>:
 8005542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005544:	4606      	mov	r6, r0
 8005546:	460f      	mov	r7, r1
 8005548:	4614      	mov	r4, r2
 800554a:	18d5      	adds	r5, r2, r3
 800554c:	42ac      	cmp	r4, r5
 800554e:	d101      	bne.n	8005554 <__sfputs_r+0x12>
 8005550:	2000      	movs	r0, #0
 8005552:	e007      	b.n	8005564 <__sfputs_r+0x22>
 8005554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005558:	463a      	mov	r2, r7
 800555a:	4630      	mov	r0, r6
 800555c:	f7ff ffda 	bl	8005514 <__sfputc_r>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d1f3      	bne.n	800554c <__sfputs_r+0xa>
 8005564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005568 <_vfiprintf_r>:
 8005568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556c:	460d      	mov	r5, r1
 800556e:	b09d      	sub	sp, #116	; 0x74
 8005570:	4614      	mov	r4, r2
 8005572:	4698      	mov	r8, r3
 8005574:	4606      	mov	r6, r0
 8005576:	b118      	cbz	r0, 8005580 <_vfiprintf_r+0x18>
 8005578:	6983      	ldr	r3, [r0, #24]
 800557a:	b90b      	cbnz	r3, 8005580 <_vfiprintf_r+0x18>
 800557c:	f000 fcaa 	bl	8005ed4 <__sinit>
 8005580:	4b89      	ldr	r3, [pc, #548]	; (80057a8 <_vfiprintf_r+0x240>)
 8005582:	429d      	cmp	r5, r3
 8005584:	d11b      	bne.n	80055be <_vfiprintf_r+0x56>
 8005586:	6875      	ldr	r5, [r6, #4]
 8005588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800558a:	07d9      	lsls	r1, r3, #31
 800558c:	d405      	bmi.n	800559a <_vfiprintf_r+0x32>
 800558e:	89ab      	ldrh	r3, [r5, #12]
 8005590:	059a      	lsls	r2, r3, #22
 8005592:	d402      	bmi.n	800559a <_vfiprintf_r+0x32>
 8005594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005596:	f000 fd3b 	bl	8006010 <__retarget_lock_acquire_recursive>
 800559a:	89ab      	ldrh	r3, [r5, #12]
 800559c:	071b      	lsls	r3, r3, #28
 800559e:	d501      	bpl.n	80055a4 <_vfiprintf_r+0x3c>
 80055a0:	692b      	ldr	r3, [r5, #16]
 80055a2:	b9eb      	cbnz	r3, 80055e0 <_vfiprintf_r+0x78>
 80055a4:	4629      	mov	r1, r5
 80055a6:	4630      	mov	r0, r6
 80055a8:	f000 fb04 	bl	8005bb4 <__swsetup_r>
 80055ac:	b1c0      	cbz	r0, 80055e0 <_vfiprintf_r+0x78>
 80055ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055b0:	07dc      	lsls	r4, r3, #31
 80055b2:	d50e      	bpl.n	80055d2 <_vfiprintf_r+0x6a>
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295
 80055b8:	b01d      	add	sp, #116	; 0x74
 80055ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055be:	4b7b      	ldr	r3, [pc, #492]	; (80057ac <_vfiprintf_r+0x244>)
 80055c0:	429d      	cmp	r5, r3
 80055c2:	d101      	bne.n	80055c8 <_vfiprintf_r+0x60>
 80055c4:	68b5      	ldr	r5, [r6, #8]
 80055c6:	e7df      	b.n	8005588 <_vfiprintf_r+0x20>
 80055c8:	4b79      	ldr	r3, [pc, #484]	; (80057b0 <_vfiprintf_r+0x248>)
 80055ca:	429d      	cmp	r5, r3
 80055cc:	bf08      	it	eq
 80055ce:	68f5      	ldreq	r5, [r6, #12]
 80055d0:	e7da      	b.n	8005588 <_vfiprintf_r+0x20>
 80055d2:	89ab      	ldrh	r3, [r5, #12]
 80055d4:	0598      	lsls	r0, r3, #22
 80055d6:	d4ed      	bmi.n	80055b4 <_vfiprintf_r+0x4c>
 80055d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055da:	f000 fd1a 	bl	8006012 <__retarget_lock_release_recursive>
 80055de:	e7e9      	b.n	80055b4 <_vfiprintf_r+0x4c>
 80055e0:	2300      	movs	r3, #0
 80055e2:	9309      	str	r3, [sp, #36]	; 0x24
 80055e4:	2320      	movs	r3, #32
 80055e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80055ee:	2330      	movs	r3, #48	; 0x30
 80055f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80057b4 <_vfiprintf_r+0x24c>
 80055f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055f8:	f04f 0901 	mov.w	r9, #1
 80055fc:	4623      	mov	r3, r4
 80055fe:	469a      	mov	sl, r3
 8005600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005604:	b10a      	cbz	r2, 800560a <_vfiprintf_r+0xa2>
 8005606:	2a25      	cmp	r2, #37	; 0x25
 8005608:	d1f9      	bne.n	80055fe <_vfiprintf_r+0x96>
 800560a:	ebba 0b04 	subs.w	fp, sl, r4
 800560e:	d00b      	beq.n	8005628 <_vfiprintf_r+0xc0>
 8005610:	465b      	mov	r3, fp
 8005612:	4622      	mov	r2, r4
 8005614:	4629      	mov	r1, r5
 8005616:	4630      	mov	r0, r6
 8005618:	f7ff ff93 	bl	8005542 <__sfputs_r>
 800561c:	3001      	adds	r0, #1
 800561e:	f000 80aa 	beq.w	8005776 <_vfiprintf_r+0x20e>
 8005622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005624:	445a      	add	r2, fp
 8005626:	9209      	str	r2, [sp, #36]	; 0x24
 8005628:	f89a 3000 	ldrb.w	r3, [sl]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80a2 	beq.w	8005776 <_vfiprintf_r+0x20e>
 8005632:	2300      	movs	r3, #0
 8005634:	f04f 32ff 	mov.w	r2, #4294967295
 8005638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800563c:	f10a 0a01 	add.w	sl, sl, #1
 8005640:	9304      	str	r3, [sp, #16]
 8005642:	9307      	str	r3, [sp, #28]
 8005644:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005648:	931a      	str	r3, [sp, #104]	; 0x68
 800564a:	4654      	mov	r4, sl
 800564c:	2205      	movs	r2, #5
 800564e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005652:	4858      	ldr	r0, [pc, #352]	; (80057b4 <_vfiprintf_r+0x24c>)
 8005654:	f7fa fdf4 	bl	8000240 <memchr>
 8005658:	9a04      	ldr	r2, [sp, #16]
 800565a:	b9d8      	cbnz	r0, 8005694 <_vfiprintf_r+0x12c>
 800565c:	06d1      	lsls	r1, r2, #27
 800565e:	bf44      	itt	mi
 8005660:	2320      	movmi	r3, #32
 8005662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005666:	0713      	lsls	r3, r2, #28
 8005668:	bf44      	itt	mi
 800566a:	232b      	movmi	r3, #43	; 0x2b
 800566c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005670:	f89a 3000 	ldrb.w	r3, [sl]
 8005674:	2b2a      	cmp	r3, #42	; 0x2a
 8005676:	d015      	beq.n	80056a4 <_vfiprintf_r+0x13c>
 8005678:	9a07      	ldr	r2, [sp, #28]
 800567a:	4654      	mov	r4, sl
 800567c:	2000      	movs	r0, #0
 800567e:	f04f 0c0a 	mov.w	ip, #10
 8005682:	4621      	mov	r1, r4
 8005684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005688:	3b30      	subs	r3, #48	; 0x30
 800568a:	2b09      	cmp	r3, #9
 800568c:	d94e      	bls.n	800572c <_vfiprintf_r+0x1c4>
 800568e:	b1b0      	cbz	r0, 80056be <_vfiprintf_r+0x156>
 8005690:	9207      	str	r2, [sp, #28]
 8005692:	e014      	b.n	80056be <_vfiprintf_r+0x156>
 8005694:	eba0 0308 	sub.w	r3, r0, r8
 8005698:	fa09 f303 	lsl.w	r3, r9, r3
 800569c:	4313      	orrs	r3, r2
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	46a2      	mov	sl, r4
 80056a2:	e7d2      	b.n	800564a <_vfiprintf_r+0xe2>
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	1d19      	adds	r1, r3, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	9103      	str	r1, [sp, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bfbb      	ittet	lt
 80056b0:	425b      	neglt	r3, r3
 80056b2:	f042 0202 	orrlt.w	r2, r2, #2
 80056b6:	9307      	strge	r3, [sp, #28]
 80056b8:	9307      	strlt	r3, [sp, #28]
 80056ba:	bfb8      	it	lt
 80056bc:	9204      	strlt	r2, [sp, #16]
 80056be:	7823      	ldrb	r3, [r4, #0]
 80056c0:	2b2e      	cmp	r3, #46	; 0x2e
 80056c2:	d10c      	bne.n	80056de <_vfiprintf_r+0x176>
 80056c4:	7863      	ldrb	r3, [r4, #1]
 80056c6:	2b2a      	cmp	r3, #42	; 0x2a
 80056c8:	d135      	bne.n	8005736 <_vfiprintf_r+0x1ce>
 80056ca:	9b03      	ldr	r3, [sp, #12]
 80056cc:	1d1a      	adds	r2, r3, #4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	9203      	str	r2, [sp, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bfb8      	it	lt
 80056d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80056da:	3402      	adds	r4, #2
 80056dc:	9305      	str	r3, [sp, #20]
 80056de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80057c4 <_vfiprintf_r+0x25c>
 80056e2:	7821      	ldrb	r1, [r4, #0]
 80056e4:	2203      	movs	r2, #3
 80056e6:	4650      	mov	r0, sl
 80056e8:	f7fa fdaa 	bl	8000240 <memchr>
 80056ec:	b140      	cbz	r0, 8005700 <_vfiprintf_r+0x198>
 80056ee:	2340      	movs	r3, #64	; 0x40
 80056f0:	eba0 000a 	sub.w	r0, r0, sl
 80056f4:	fa03 f000 	lsl.w	r0, r3, r0
 80056f8:	9b04      	ldr	r3, [sp, #16]
 80056fa:	4303      	orrs	r3, r0
 80056fc:	3401      	adds	r4, #1
 80056fe:	9304      	str	r3, [sp, #16]
 8005700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005704:	482c      	ldr	r0, [pc, #176]	; (80057b8 <_vfiprintf_r+0x250>)
 8005706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800570a:	2206      	movs	r2, #6
 800570c:	f7fa fd98 	bl	8000240 <memchr>
 8005710:	2800      	cmp	r0, #0
 8005712:	d03f      	beq.n	8005794 <_vfiprintf_r+0x22c>
 8005714:	4b29      	ldr	r3, [pc, #164]	; (80057bc <_vfiprintf_r+0x254>)
 8005716:	bb1b      	cbnz	r3, 8005760 <_vfiprintf_r+0x1f8>
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	3307      	adds	r3, #7
 800571c:	f023 0307 	bic.w	r3, r3, #7
 8005720:	3308      	adds	r3, #8
 8005722:	9303      	str	r3, [sp, #12]
 8005724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005726:	443b      	add	r3, r7
 8005728:	9309      	str	r3, [sp, #36]	; 0x24
 800572a:	e767      	b.n	80055fc <_vfiprintf_r+0x94>
 800572c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005730:	460c      	mov	r4, r1
 8005732:	2001      	movs	r0, #1
 8005734:	e7a5      	b.n	8005682 <_vfiprintf_r+0x11a>
 8005736:	2300      	movs	r3, #0
 8005738:	3401      	adds	r4, #1
 800573a:	9305      	str	r3, [sp, #20]
 800573c:	4619      	mov	r1, r3
 800573e:	f04f 0c0a 	mov.w	ip, #10
 8005742:	4620      	mov	r0, r4
 8005744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005748:	3a30      	subs	r2, #48	; 0x30
 800574a:	2a09      	cmp	r2, #9
 800574c:	d903      	bls.n	8005756 <_vfiprintf_r+0x1ee>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0c5      	beq.n	80056de <_vfiprintf_r+0x176>
 8005752:	9105      	str	r1, [sp, #20]
 8005754:	e7c3      	b.n	80056de <_vfiprintf_r+0x176>
 8005756:	fb0c 2101 	mla	r1, ip, r1, r2
 800575a:	4604      	mov	r4, r0
 800575c:	2301      	movs	r3, #1
 800575e:	e7f0      	b.n	8005742 <_vfiprintf_r+0x1da>
 8005760:	ab03      	add	r3, sp, #12
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	462a      	mov	r2, r5
 8005766:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <_vfiprintf_r+0x258>)
 8005768:	a904      	add	r1, sp, #16
 800576a:	4630      	mov	r0, r6
 800576c:	f3af 8000 	nop.w
 8005770:	4607      	mov	r7, r0
 8005772:	1c78      	adds	r0, r7, #1
 8005774:	d1d6      	bne.n	8005724 <_vfiprintf_r+0x1bc>
 8005776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005778:	07d9      	lsls	r1, r3, #31
 800577a:	d405      	bmi.n	8005788 <_vfiprintf_r+0x220>
 800577c:	89ab      	ldrh	r3, [r5, #12]
 800577e:	059a      	lsls	r2, r3, #22
 8005780:	d402      	bmi.n	8005788 <_vfiprintf_r+0x220>
 8005782:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005784:	f000 fc45 	bl	8006012 <__retarget_lock_release_recursive>
 8005788:	89ab      	ldrh	r3, [r5, #12]
 800578a:	065b      	lsls	r3, r3, #25
 800578c:	f53f af12 	bmi.w	80055b4 <_vfiprintf_r+0x4c>
 8005790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005792:	e711      	b.n	80055b8 <_vfiprintf_r+0x50>
 8005794:	ab03      	add	r3, sp, #12
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	462a      	mov	r2, r5
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <_vfiprintf_r+0x258>)
 800579c:	a904      	add	r1, sp, #16
 800579e:	4630      	mov	r0, r6
 80057a0:	f000 f880 	bl	80058a4 <_printf_i>
 80057a4:	e7e4      	b.n	8005770 <_vfiprintf_r+0x208>
 80057a6:	bf00      	nop
 80057a8:	08006648 	.word	0x08006648
 80057ac:	08006668 	.word	0x08006668
 80057b0:	08006628 	.word	0x08006628
 80057b4:	080065f5 	.word	0x080065f5
 80057b8:	080065ff 	.word	0x080065ff
 80057bc:	00000000 	.word	0x00000000
 80057c0:	08005543 	.word	0x08005543
 80057c4:	080065fb 	.word	0x080065fb

080057c8 <_printf_common>:
 80057c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	4616      	mov	r6, r2
 80057ce:	4699      	mov	r9, r3
 80057d0:	688a      	ldr	r2, [r1, #8]
 80057d2:	690b      	ldr	r3, [r1, #16]
 80057d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057d8:	4293      	cmp	r3, r2
 80057da:	bfb8      	it	lt
 80057dc:	4613      	movlt	r3, r2
 80057de:	6033      	str	r3, [r6, #0]
 80057e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057e4:	4607      	mov	r7, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	b10a      	cbz	r2, 80057ee <_printf_common+0x26>
 80057ea:	3301      	adds	r3, #1
 80057ec:	6033      	str	r3, [r6, #0]
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	0699      	lsls	r1, r3, #26
 80057f2:	bf42      	ittt	mi
 80057f4:	6833      	ldrmi	r3, [r6, #0]
 80057f6:	3302      	addmi	r3, #2
 80057f8:	6033      	strmi	r3, [r6, #0]
 80057fa:	6825      	ldr	r5, [r4, #0]
 80057fc:	f015 0506 	ands.w	r5, r5, #6
 8005800:	d106      	bne.n	8005810 <_printf_common+0x48>
 8005802:	f104 0a19 	add.w	sl, r4, #25
 8005806:	68e3      	ldr	r3, [r4, #12]
 8005808:	6832      	ldr	r2, [r6, #0]
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	42ab      	cmp	r3, r5
 800580e:	dc26      	bgt.n	800585e <_printf_common+0x96>
 8005810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005814:	1e13      	subs	r3, r2, #0
 8005816:	6822      	ldr	r2, [r4, #0]
 8005818:	bf18      	it	ne
 800581a:	2301      	movne	r3, #1
 800581c:	0692      	lsls	r2, r2, #26
 800581e:	d42b      	bmi.n	8005878 <_printf_common+0xb0>
 8005820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005824:	4649      	mov	r1, r9
 8005826:	4638      	mov	r0, r7
 8005828:	47c0      	blx	r8
 800582a:	3001      	adds	r0, #1
 800582c:	d01e      	beq.n	800586c <_printf_common+0xa4>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	68e5      	ldr	r5, [r4, #12]
 8005832:	6832      	ldr	r2, [r6, #0]
 8005834:	f003 0306 	and.w	r3, r3, #6
 8005838:	2b04      	cmp	r3, #4
 800583a:	bf08      	it	eq
 800583c:	1aad      	subeq	r5, r5, r2
 800583e:	68a3      	ldr	r3, [r4, #8]
 8005840:	6922      	ldr	r2, [r4, #16]
 8005842:	bf0c      	ite	eq
 8005844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005848:	2500      	movne	r5, #0
 800584a:	4293      	cmp	r3, r2
 800584c:	bfc4      	itt	gt
 800584e:	1a9b      	subgt	r3, r3, r2
 8005850:	18ed      	addgt	r5, r5, r3
 8005852:	2600      	movs	r6, #0
 8005854:	341a      	adds	r4, #26
 8005856:	42b5      	cmp	r5, r6
 8005858:	d11a      	bne.n	8005890 <_printf_common+0xc8>
 800585a:	2000      	movs	r0, #0
 800585c:	e008      	b.n	8005870 <_printf_common+0xa8>
 800585e:	2301      	movs	r3, #1
 8005860:	4652      	mov	r2, sl
 8005862:	4649      	mov	r1, r9
 8005864:	4638      	mov	r0, r7
 8005866:	47c0      	blx	r8
 8005868:	3001      	adds	r0, #1
 800586a:	d103      	bne.n	8005874 <_printf_common+0xac>
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005874:	3501      	adds	r5, #1
 8005876:	e7c6      	b.n	8005806 <_printf_common+0x3e>
 8005878:	18e1      	adds	r1, r4, r3
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	2030      	movs	r0, #48	; 0x30
 800587e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005882:	4422      	add	r2, r4
 8005884:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005888:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800588c:	3302      	adds	r3, #2
 800588e:	e7c7      	b.n	8005820 <_printf_common+0x58>
 8005890:	2301      	movs	r3, #1
 8005892:	4622      	mov	r2, r4
 8005894:	4649      	mov	r1, r9
 8005896:	4638      	mov	r0, r7
 8005898:	47c0      	blx	r8
 800589a:	3001      	adds	r0, #1
 800589c:	d0e6      	beq.n	800586c <_printf_common+0xa4>
 800589e:	3601      	adds	r6, #1
 80058a0:	e7d9      	b.n	8005856 <_printf_common+0x8e>
	...

080058a4 <_printf_i>:
 80058a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058a8:	7e0f      	ldrb	r7, [r1, #24]
 80058aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058ac:	2f78      	cmp	r7, #120	; 0x78
 80058ae:	4691      	mov	r9, r2
 80058b0:	4680      	mov	r8, r0
 80058b2:	460c      	mov	r4, r1
 80058b4:	469a      	mov	sl, r3
 80058b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058ba:	d807      	bhi.n	80058cc <_printf_i+0x28>
 80058bc:	2f62      	cmp	r7, #98	; 0x62
 80058be:	d80a      	bhi.n	80058d6 <_printf_i+0x32>
 80058c0:	2f00      	cmp	r7, #0
 80058c2:	f000 80d8 	beq.w	8005a76 <_printf_i+0x1d2>
 80058c6:	2f58      	cmp	r7, #88	; 0x58
 80058c8:	f000 80a3 	beq.w	8005a12 <_printf_i+0x16e>
 80058cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058d4:	e03a      	b.n	800594c <_printf_i+0xa8>
 80058d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058da:	2b15      	cmp	r3, #21
 80058dc:	d8f6      	bhi.n	80058cc <_printf_i+0x28>
 80058de:	a101      	add	r1, pc, #4	; (adr r1, 80058e4 <_printf_i+0x40>)
 80058e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058e4:	0800593d 	.word	0x0800593d
 80058e8:	08005951 	.word	0x08005951
 80058ec:	080058cd 	.word	0x080058cd
 80058f0:	080058cd 	.word	0x080058cd
 80058f4:	080058cd 	.word	0x080058cd
 80058f8:	080058cd 	.word	0x080058cd
 80058fc:	08005951 	.word	0x08005951
 8005900:	080058cd 	.word	0x080058cd
 8005904:	080058cd 	.word	0x080058cd
 8005908:	080058cd 	.word	0x080058cd
 800590c:	080058cd 	.word	0x080058cd
 8005910:	08005a5d 	.word	0x08005a5d
 8005914:	08005981 	.word	0x08005981
 8005918:	08005a3f 	.word	0x08005a3f
 800591c:	080058cd 	.word	0x080058cd
 8005920:	080058cd 	.word	0x080058cd
 8005924:	08005a7f 	.word	0x08005a7f
 8005928:	080058cd 	.word	0x080058cd
 800592c:	08005981 	.word	0x08005981
 8005930:	080058cd 	.word	0x080058cd
 8005934:	080058cd 	.word	0x080058cd
 8005938:	08005a47 	.word	0x08005a47
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	1d1a      	adds	r2, r3, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	602a      	str	r2, [r5, #0]
 8005944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800594c:	2301      	movs	r3, #1
 800594e:	e0a3      	b.n	8005a98 <_printf_i+0x1f4>
 8005950:	6820      	ldr	r0, [r4, #0]
 8005952:	6829      	ldr	r1, [r5, #0]
 8005954:	0606      	lsls	r6, r0, #24
 8005956:	f101 0304 	add.w	r3, r1, #4
 800595a:	d50a      	bpl.n	8005972 <_printf_i+0xce>
 800595c:	680e      	ldr	r6, [r1, #0]
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	2e00      	cmp	r6, #0
 8005962:	da03      	bge.n	800596c <_printf_i+0xc8>
 8005964:	232d      	movs	r3, #45	; 0x2d
 8005966:	4276      	negs	r6, r6
 8005968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800596c:	485e      	ldr	r0, [pc, #376]	; (8005ae8 <_printf_i+0x244>)
 800596e:	230a      	movs	r3, #10
 8005970:	e019      	b.n	80059a6 <_printf_i+0x102>
 8005972:	680e      	ldr	r6, [r1, #0]
 8005974:	602b      	str	r3, [r5, #0]
 8005976:	f010 0f40 	tst.w	r0, #64	; 0x40
 800597a:	bf18      	it	ne
 800597c:	b236      	sxthne	r6, r6
 800597e:	e7ef      	b.n	8005960 <_printf_i+0xbc>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	6820      	ldr	r0, [r4, #0]
 8005984:	1d19      	adds	r1, r3, #4
 8005986:	6029      	str	r1, [r5, #0]
 8005988:	0601      	lsls	r1, r0, #24
 800598a:	d501      	bpl.n	8005990 <_printf_i+0xec>
 800598c:	681e      	ldr	r6, [r3, #0]
 800598e:	e002      	b.n	8005996 <_printf_i+0xf2>
 8005990:	0646      	lsls	r6, r0, #25
 8005992:	d5fb      	bpl.n	800598c <_printf_i+0xe8>
 8005994:	881e      	ldrh	r6, [r3, #0]
 8005996:	4854      	ldr	r0, [pc, #336]	; (8005ae8 <_printf_i+0x244>)
 8005998:	2f6f      	cmp	r7, #111	; 0x6f
 800599a:	bf0c      	ite	eq
 800599c:	2308      	moveq	r3, #8
 800599e:	230a      	movne	r3, #10
 80059a0:	2100      	movs	r1, #0
 80059a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059a6:	6865      	ldr	r5, [r4, #4]
 80059a8:	60a5      	str	r5, [r4, #8]
 80059aa:	2d00      	cmp	r5, #0
 80059ac:	bfa2      	ittt	ge
 80059ae:	6821      	ldrge	r1, [r4, #0]
 80059b0:	f021 0104 	bicge.w	r1, r1, #4
 80059b4:	6021      	strge	r1, [r4, #0]
 80059b6:	b90e      	cbnz	r6, 80059bc <_printf_i+0x118>
 80059b8:	2d00      	cmp	r5, #0
 80059ba:	d04d      	beq.n	8005a58 <_printf_i+0x1b4>
 80059bc:	4615      	mov	r5, r2
 80059be:	fbb6 f1f3 	udiv	r1, r6, r3
 80059c2:	fb03 6711 	mls	r7, r3, r1, r6
 80059c6:	5dc7      	ldrb	r7, [r0, r7]
 80059c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059cc:	4637      	mov	r7, r6
 80059ce:	42bb      	cmp	r3, r7
 80059d0:	460e      	mov	r6, r1
 80059d2:	d9f4      	bls.n	80059be <_printf_i+0x11a>
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d10b      	bne.n	80059f0 <_printf_i+0x14c>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	07de      	lsls	r6, r3, #31
 80059dc:	d508      	bpl.n	80059f0 <_printf_i+0x14c>
 80059de:	6923      	ldr	r3, [r4, #16]
 80059e0:	6861      	ldr	r1, [r4, #4]
 80059e2:	4299      	cmp	r1, r3
 80059e4:	bfde      	ittt	le
 80059e6:	2330      	movle	r3, #48	; 0x30
 80059e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059f0:	1b52      	subs	r2, r2, r5
 80059f2:	6122      	str	r2, [r4, #16]
 80059f4:	f8cd a000 	str.w	sl, [sp]
 80059f8:	464b      	mov	r3, r9
 80059fa:	aa03      	add	r2, sp, #12
 80059fc:	4621      	mov	r1, r4
 80059fe:	4640      	mov	r0, r8
 8005a00:	f7ff fee2 	bl	80057c8 <_printf_common>
 8005a04:	3001      	adds	r0, #1
 8005a06:	d14c      	bne.n	8005aa2 <_printf_i+0x1fe>
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0c:	b004      	add	sp, #16
 8005a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a12:	4835      	ldr	r0, [pc, #212]	; (8005ae8 <_printf_i+0x244>)
 8005a14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a18:	6829      	ldr	r1, [r5, #0]
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a20:	6029      	str	r1, [r5, #0]
 8005a22:	061d      	lsls	r5, r3, #24
 8005a24:	d514      	bpl.n	8005a50 <_printf_i+0x1ac>
 8005a26:	07df      	lsls	r7, r3, #31
 8005a28:	bf44      	itt	mi
 8005a2a:	f043 0320 	orrmi.w	r3, r3, #32
 8005a2e:	6023      	strmi	r3, [r4, #0]
 8005a30:	b91e      	cbnz	r6, 8005a3a <_printf_i+0x196>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	f023 0320 	bic.w	r3, r3, #32
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	2310      	movs	r3, #16
 8005a3c:	e7b0      	b.n	80059a0 <_printf_i+0xfc>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	f043 0320 	orr.w	r3, r3, #32
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	2378      	movs	r3, #120	; 0x78
 8005a48:	4828      	ldr	r0, [pc, #160]	; (8005aec <_printf_i+0x248>)
 8005a4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a4e:	e7e3      	b.n	8005a18 <_printf_i+0x174>
 8005a50:	0659      	lsls	r1, r3, #25
 8005a52:	bf48      	it	mi
 8005a54:	b2b6      	uxthmi	r6, r6
 8005a56:	e7e6      	b.n	8005a26 <_printf_i+0x182>
 8005a58:	4615      	mov	r5, r2
 8005a5a:	e7bb      	b.n	80059d4 <_printf_i+0x130>
 8005a5c:	682b      	ldr	r3, [r5, #0]
 8005a5e:	6826      	ldr	r6, [r4, #0]
 8005a60:	6961      	ldr	r1, [r4, #20]
 8005a62:	1d18      	adds	r0, r3, #4
 8005a64:	6028      	str	r0, [r5, #0]
 8005a66:	0635      	lsls	r5, r6, #24
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	d501      	bpl.n	8005a70 <_printf_i+0x1cc>
 8005a6c:	6019      	str	r1, [r3, #0]
 8005a6e:	e002      	b.n	8005a76 <_printf_i+0x1d2>
 8005a70:	0670      	lsls	r0, r6, #25
 8005a72:	d5fb      	bpl.n	8005a6c <_printf_i+0x1c8>
 8005a74:	8019      	strh	r1, [r3, #0]
 8005a76:	2300      	movs	r3, #0
 8005a78:	6123      	str	r3, [r4, #16]
 8005a7a:	4615      	mov	r5, r2
 8005a7c:	e7ba      	b.n	80059f4 <_printf_i+0x150>
 8005a7e:	682b      	ldr	r3, [r5, #0]
 8005a80:	1d1a      	adds	r2, r3, #4
 8005a82:	602a      	str	r2, [r5, #0]
 8005a84:	681d      	ldr	r5, [r3, #0]
 8005a86:	6862      	ldr	r2, [r4, #4]
 8005a88:	2100      	movs	r1, #0
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	f7fa fbd8 	bl	8000240 <memchr>
 8005a90:	b108      	cbz	r0, 8005a96 <_printf_i+0x1f2>
 8005a92:	1b40      	subs	r0, r0, r5
 8005a94:	6060      	str	r0, [r4, #4]
 8005a96:	6863      	ldr	r3, [r4, #4]
 8005a98:	6123      	str	r3, [r4, #16]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa0:	e7a8      	b.n	80059f4 <_printf_i+0x150>
 8005aa2:	6923      	ldr	r3, [r4, #16]
 8005aa4:	462a      	mov	r2, r5
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	47d0      	blx	sl
 8005aac:	3001      	adds	r0, #1
 8005aae:	d0ab      	beq.n	8005a08 <_printf_i+0x164>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	079b      	lsls	r3, r3, #30
 8005ab4:	d413      	bmi.n	8005ade <_printf_i+0x23a>
 8005ab6:	68e0      	ldr	r0, [r4, #12]
 8005ab8:	9b03      	ldr	r3, [sp, #12]
 8005aba:	4298      	cmp	r0, r3
 8005abc:	bfb8      	it	lt
 8005abe:	4618      	movlt	r0, r3
 8005ac0:	e7a4      	b.n	8005a0c <_printf_i+0x168>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4632      	mov	r2, r6
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4640      	mov	r0, r8
 8005aca:	47d0      	blx	sl
 8005acc:	3001      	adds	r0, #1
 8005ace:	d09b      	beq.n	8005a08 <_printf_i+0x164>
 8005ad0:	3501      	adds	r5, #1
 8005ad2:	68e3      	ldr	r3, [r4, #12]
 8005ad4:	9903      	ldr	r1, [sp, #12]
 8005ad6:	1a5b      	subs	r3, r3, r1
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	dcf2      	bgt.n	8005ac2 <_printf_i+0x21e>
 8005adc:	e7eb      	b.n	8005ab6 <_printf_i+0x212>
 8005ade:	2500      	movs	r5, #0
 8005ae0:	f104 0619 	add.w	r6, r4, #25
 8005ae4:	e7f5      	b.n	8005ad2 <_printf_i+0x22e>
 8005ae6:	bf00      	nop
 8005ae8:	08006606 	.word	0x08006606
 8005aec:	08006617 	.word	0x08006617

08005af0 <_sbrk_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4d06      	ldr	r5, [pc, #24]	; (8005b0c <_sbrk_r+0x1c>)
 8005af4:	2300      	movs	r3, #0
 8005af6:	4604      	mov	r4, r0
 8005af8:	4608      	mov	r0, r1
 8005afa:	602b      	str	r3, [r5, #0]
 8005afc:	f7fb f9ca 	bl	8000e94 <_sbrk>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_sbrk_r+0x1a>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_sbrk_r+0x1a>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	20000338 	.word	0x20000338

08005b10 <__swbuf_r>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	460e      	mov	r6, r1
 8005b14:	4614      	mov	r4, r2
 8005b16:	4605      	mov	r5, r0
 8005b18:	b118      	cbz	r0, 8005b22 <__swbuf_r+0x12>
 8005b1a:	6983      	ldr	r3, [r0, #24]
 8005b1c:	b90b      	cbnz	r3, 8005b22 <__swbuf_r+0x12>
 8005b1e:	f000 f9d9 	bl	8005ed4 <__sinit>
 8005b22:	4b21      	ldr	r3, [pc, #132]	; (8005ba8 <__swbuf_r+0x98>)
 8005b24:	429c      	cmp	r4, r3
 8005b26:	d12b      	bne.n	8005b80 <__swbuf_r+0x70>
 8005b28:	686c      	ldr	r4, [r5, #4]
 8005b2a:	69a3      	ldr	r3, [r4, #24]
 8005b2c:	60a3      	str	r3, [r4, #8]
 8005b2e:	89a3      	ldrh	r3, [r4, #12]
 8005b30:	071a      	lsls	r2, r3, #28
 8005b32:	d52f      	bpl.n	8005b94 <__swbuf_r+0x84>
 8005b34:	6923      	ldr	r3, [r4, #16]
 8005b36:	b36b      	cbz	r3, 8005b94 <__swbuf_r+0x84>
 8005b38:	6923      	ldr	r3, [r4, #16]
 8005b3a:	6820      	ldr	r0, [r4, #0]
 8005b3c:	1ac0      	subs	r0, r0, r3
 8005b3e:	6963      	ldr	r3, [r4, #20]
 8005b40:	b2f6      	uxtb	r6, r6
 8005b42:	4283      	cmp	r3, r0
 8005b44:	4637      	mov	r7, r6
 8005b46:	dc04      	bgt.n	8005b52 <__swbuf_r+0x42>
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 f92e 	bl	8005dac <_fflush_r>
 8005b50:	bb30      	cbnz	r0, 8005ba0 <__swbuf_r+0x90>
 8005b52:	68a3      	ldr	r3, [r4, #8]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	60a3      	str	r3, [r4, #8]
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	6022      	str	r2, [r4, #0]
 8005b5e:	701e      	strb	r6, [r3, #0]
 8005b60:	6963      	ldr	r3, [r4, #20]
 8005b62:	3001      	adds	r0, #1
 8005b64:	4283      	cmp	r3, r0
 8005b66:	d004      	beq.n	8005b72 <__swbuf_r+0x62>
 8005b68:	89a3      	ldrh	r3, [r4, #12]
 8005b6a:	07db      	lsls	r3, r3, #31
 8005b6c:	d506      	bpl.n	8005b7c <__swbuf_r+0x6c>
 8005b6e:	2e0a      	cmp	r6, #10
 8005b70:	d104      	bne.n	8005b7c <__swbuf_r+0x6c>
 8005b72:	4621      	mov	r1, r4
 8005b74:	4628      	mov	r0, r5
 8005b76:	f000 f919 	bl	8005dac <_fflush_r>
 8005b7a:	b988      	cbnz	r0, 8005ba0 <__swbuf_r+0x90>
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b80:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <__swbuf_r+0x9c>)
 8005b82:	429c      	cmp	r4, r3
 8005b84:	d101      	bne.n	8005b8a <__swbuf_r+0x7a>
 8005b86:	68ac      	ldr	r4, [r5, #8]
 8005b88:	e7cf      	b.n	8005b2a <__swbuf_r+0x1a>
 8005b8a:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <__swbuf_r+0xa0>)
 8005b8c:	429c      	cmp	r4, r3
 8005b8e:	bf08      	it	eq
 8005b90:	68ec      	ldreq	r4, [r5, #12]
 8005b92:	e7ca      	b.n	8005b2a <__swbuf_r+0x1a>
 8005b94:	4621      	mov	r1, r4
 8005b96:	4628      	mov	r0, r5
 8005b98:	f000 f80c 	bl	8005bb4 <__swsetup_r>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d0cb      	beq.n	8005b38 <__swbuf_r+0x28>
 8005ba0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ba4:	e7ea      	b.n	8005b7c <__swbuf_r+0x6c>
 8005ba6:	bf00      	nop
 8005ba8:	08006648 	.word	0x08006648
 8005bac:	08006668 	.word	0x08006668
 8005bb0:	08006628 	.word	0x08006628

08005bb4 <__swsetup_r>:
 8005bb4:	4b32      	ldr	r3, [pc, #200]	; (8005c80 <__swsetup_r+0xcc>)
 8005bb6:	b570      	push	{r4, r5, r6, lr}
 8005bb8:	681d      	ldr	r5, [r3, #0]
 8005bba:	4606      	mov	r6, r0
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	b125      	cbz	r5, 8005bca <__swsetup_r+0x16>
 8005bc0:	69ab      	ldr	r3, [r5, #24]
 8005bc2:	b913      	cbnz	r3, 8005bca <__swsetup_r+0x16>
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f000 f985 	bl	8005ed4 <__sinit>
 8005bca:	4b2e      	ldr	r3, [pc, #184]	; (8005c84 <__swsetup_r+0xd0>)
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	d10f      	bne.n	8005bf0 <__swsetup_r+0x3c>
 8005bd0:	686c      	ldr	r4, [r5, #4]
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bd8:	0719      	lsls	r1, r3, #28
 8005bda:	d42c      	bmi.n	8005c36 <__swsetup_r+0x82>
 8005bdc:	06dd      	lsls	r5, r3, #27
 8005bde:	d411      	bmi.n	8005c04 <__swsetup_r+0x50>
 8005be0:	2309      	movs	r3, #9
 8005be2:	6033      	str	r3, [r6, #0]
 8005be4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005be8:	81a3      	strh	r3, [r4, #12]
 8005bea:	f04f 30ff 	mov.w	r0, #4294967295
 8005bee:	e03e      	b.n	8005c6e <__swsetup_r+0xba>
 8005bf0:	4b25      	ldr	r3, [pc, #148]	; (8005c88 <__swsetup_r+0xd4>)
 8005bf2:	429c      	cmp	r4, r3
 8005bf4:	d101      	bne.n	8005bfa <__swsetup_r+0x46>
 8005bf6:	68ac      	ldr	r4, [r5, #8]
 8005bf8:	e7eb      	b.n	8005bd2 <__swsetup_r+0x1e>
 8005bfa:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <__swsetup_r+0xd8>)
 8005bfc:	429c      	cmp	r4, r3
 8005bfe:	bf08      	it	eq
 8005c00:	68ec      	ldreq	r4, [r5, #12]
 8005c02:	e7e6      	b.n	8005bd2 <__swsetup_r+0x1e>
 8005c04:	0758      	lsls	r0, r3, #29
 8005c06:	d512      	bpl.n	8005c2e <__swsetup_r+0x7a>
 8005c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c0a:	b141      	cbz	r1, 8005c1e <__swsetup_r+0x6a>
 8005c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c10:	4299      	cmp	r1, r3
 8005c12:	d002      	beq.n	8005c1a <__swsetup_r+0x66>
 8005c14:	4630      	mov	r0, r6
 8005c16:	f7ff fa41 	bl	800509c <_free_r>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6363      	str	r3, [r4, #52]	; 0x34
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c24:	81a3      	strh	r3, [r4, #12]
 8005c26:	2300      	movs	r3, #0
 8005c28:	6063      	str	r3, [r4, #4]
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	f043 0308 	orr.w	r3, r3, #8
 8005c34:	81a3      	strh	r3, [r4, #12]
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	b94b      	cbnz	r3, 8005c4e <__swsetup_r+0x9a>
 8005c3a:	89a3      	ldrh	r3, [r4, #12]
 8005c3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c44:	d003      	beq.n	8005c4e <__swsetup_r+0x9a>
 8005c46:	4621      	mov	r1, r4
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f000 fa09 	bl	8006060 <__smakebuf_r>
 8005c4e:	89a0      	ldrh	r0, [r4, #12]
 8005c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c54:	f010 0301 	ands.w	r3, r0, #1
 8005c58:	d00a      	beq.n	8005c70 <__swsetup_r+0xbc>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60a3      	str	r3, [r4, #8]
 8005c5e:	6963      	ldr	r3, [r4, #20]
 8005c60:	425b      	negs	r3, r3
 8005c62:	61a3      	str	r3, [r4, #24]
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	b943      	cbnz	r3, 8005c7a <__swsetup_r+0xc6>
 8005c68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c6c:	d1ba      	bne.n	8005be4 <__swsetup_r+0x30>
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	0781      	lsls	r1, r0, #30
 8005c72:	bf58      	it	pl
 8005c74:	6963      	ldrpl	r3, [r4, #20]
 8005c76:	60a3      	str	r3, [r4, #8]
 8005c78:	e7f4      	b.n	8005c64 <__swsetup_r+0xb0>
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	e7f7      	b.n	8005c6e <__swsetup_r+0xba>
 8005c7e:	bf00      	nop
 8005c80:	20000180 	.word	0x20000180
 8005c84:	08006648 	.word	0x08006648
 8005c88:	08006668 	.word	0x08006668
 8005c8c:	08006628 	.word	0x08006628

08005c90 <abort>:
 8005c90:	b508      	push	{r3, lr}
 8005c92:	2006      	movs	r0, #6
 8005c94:	f000 fab0 	bl	80061f8 <raise>
 8005c98:	2001      	movs	r0, #1
 8005c9a:	f7fb f883 	bl	8000da4 <_exit>
	...

08005ca0 <__sflush_r>:
 8005ca0:	898a      	ldrh	r2, [r1, #12]
 8005ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	0710      	lsls	r0, r2, #28
 8005caa:	460c      	mov	r4, r1
 8005cac:	d458      	bmi.n	8005d60 <__sflush_r+0xc0>
 8005cae:	684b      	ldr	r3, [r1, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	dc05      	bgt.n	8005cc0 <__sflush_r+0x20>
 8005cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	dc02      	bgt.n	8005cc0 <__sflush_r+0x20>
 8005cba:	2000      	movs	r0, #0
 8005cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cc2:	2e00      	cmp	r6, #0
 8005cc4:	d0f9      	beq.n	8005cba <__sflush_r+0x1a>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ccc:	682f      	ldr	r7, [r5, #0]
 8005cce:	602b      	str	r3, [r5, #0]
 8005cd0:	d032      	beq.n	8005d38 <__sflush_r+0x98>
 8005cd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	075a      	lsls	r2, r3, #29
 8005cd8:	d505      	bpl.n	8005ce6 <__sflush_r+0x46>
 8005cda:	6863      	ldr	r3, [r4, #4]
 8005cdc:	1ac0      	subs	r0, r0, r3
 8005cde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ce0:	b10b      	cbz	r3, 8005ce6 <__sflush_r+0x46>
 8005ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ce4:	1ac0      	subs	r0, r0, r3
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	4602      	mov	r2, r0
 8005cea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cec:	6a21      	ldr	r1, [r4, #32]
 8005cee:	4628      	mov	r0, r5
 8005cf0:	47b0      	blx	r6
 8005cf2:	1c43      	adds	r3, r0, #1
 8005cf4:	89a3      	ldrh	r3, [r4, #12]
 8005cf6:	d106      	bne.n	8005d06 <__sflush_r+0x66>
 8005cf8:	6829      	ldr	r1, [r5, #0]
 8005cfa:	291d      	cmp	r1, #29
 8005cfc:	d82c      	bhi.n	8005d58 <__sflush_r+0xb8>
 8005cfe:	4a2a      	ldr	r2, [pc, #168]	; (8005da8 <__sflush_r+0x108>)
 8005d00:	40ca      	lsrs	r2, r1
 8005d02:	07d6      	lsls	r6, r2, #31
 8005d04:	d528      	bpl.n	8005d58 <__sflush_r+0xb8>
 8005d06:	2200      	movs	r2, #0
 8005d08:	6062      	str	r2, [r4, #4]
 8005d0a:	04d9      	lsls	r1, r3, #19
 8005d0c:	6922      	ldr	r2, [r4, #16]
 8005d0e:	6022      	str	r2, [r4, #0]
 8005d10:	d504      	bpl.n	8005d1c <__sflush_r+0x7c>
 8005d12:	1c42      	adds	r2, r0, #1
 8005d14:	d101      	bne.n	8005d1a <__sflush_r+0x7a>
 8005d16:	682b      	ldr	r3, [r5, #0]
 8005d18:	b903      	cbnz	r3, 8005d1c <__sflush_r+0x7c>
 8005d1a:	6560      	str	r0, [r4, #84]	; 0x54
 8005d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d1e:	602f      	str	r7, [r5, #0]
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d0ca      	beq.n	8005cba <__sflush_r+0x1a>
 8005d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	d002      	beq.n	8005d32 <__sflush_r+0x92>
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f7ff f9b5 	bl	800509c <_free_r>
 8005d32:	2000      	movs	r0, #0
 8005d34:	6360      	str	r0, [r4, #52]	; 0x34
 8005d36:	e7c1      	b.n	8005cbc <__sflush_r+0x1c>
 8005d38:	6a21      	ldr	r1, [r4, #32]
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b0      	blx	r6
 8005d40:	1c41      	adds	r1, r0, #1
 8005d42:	d1c7      	bne.n	8005cd4 <__sflush_r+0x34>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0c4      	beq.n	8005cd4 <__sflush_r+0x34>
 8005d4a:	2b1d      	cmp	r3, #29
 8005d4c:	d001      	beq.n	8005d52 <__sflush_r+0xb2>
 8005d4e:	2b16      	cmp	r3, #22
 8005d50:	d101      	bne.n	8005d56 <__sflush_r+0xb6>
 8005d52:	602f      	str	r7, [r5, #0]
 8005d54:	e7b1      	b.n	8005cba <__sflush_r+0x1a>
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5c:	81a3      	strh	r3, [r4, #12]
 8005d5e:	e7ad      	b.n	8005cbc <__sflush_r+0x1c>
 8005d60:	690f      	ldr	r7, [r1, #16]
 8005d62:	2f00      	cmp	r7, #0
 8005d64:	d0a9      	beq.n	8005cba <__sflush_r+0x1a>
 8005d66:	0793      	lsls	r3, r2, #30
 8005d68:	680e      	ldr	r6, [r1, #0]
 8005d6a:	bf08      	it	eq
 8005d6c:	694b      	ldreq	r3, [r1, #20]
 8005d6e:	600f      	str	r7, [r1, #0]
 8005d70:	bf18      	it	ne
 8005d72:	2300      	movne	r3, #0
 8005d74:	eba6 0807 	sub.w	r8, r6, r7
 8005d78:	608b      	str	r3, [r1, #8]
 8005d7a:	f1b8 0f00 	cmp.w	r8, #0
 8005d7e:	dd9c      	ble.n	8005cba <__sflush_r+0x1a>
 8005d80:	6a21      	ldr	r1, [r4, #32]
 8005d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d84:	4643      	mov	r3, r8
 8005d86:	463a      	mov	r2, r7
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b0      	blx	r6
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	dc06      	bgt.n	8005d9e <__sflush_r+0xfe>
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d96:	81a3      	strh	r3, [r4, #12]
 8005d98:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9c:	e78e      	b.n	8005cbc <__sflush_r+0x1c>
 8005d9e:	4407      	add	r7, r0
 8005da0:	eba8 0800 	sub.w	r8, r8, r0
 8005da4:	e7e9      	b.n	8005d7a <__sflush_r+0xda>
 8005da6:	bf00      	nop
 8005da8:	20400001 	.word	0x20400001

08005dac <_fflush_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	690b      	ldr	r3, [r1, #16]
 8005db0:	4605      	mov	r5, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	b913      	cbnz	r3, 8005dbc <_fflush_r+0x10>
 8005db6:	2500      	movs	r5, #0
 8005db8:	4628      	mov	r0, r5
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	b118      	cbz	r0, 8005dc6 <_fflush_r+0x1a>
 8005dbe:	6983      	ldr	r3, [r0, #24]
 8005dc0:	b90b      	cbnz	r3, 8005dc6 <_fflush_r+0x1a>
 8005dc2:	f000 f887 	bl	8005ed4 <__sinit>
 8005dc6:	4b14      	ldr	r3, [pc, #80]	; (8005e18 <_fflush_r+0x6c>)
 8005dc8:	429c      	cmp	r4, r3
 8005dca:	d11b      	bne.n	8005e04 <_fflush_r+0x58>
 8005dcc:	686c      	ldr	r4, [r5, #4]
 8005dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0ef      	beq.n	8005db6 <_fflush_r+0xa>
 8005dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005dd8:	07d0      	lsls	r0, r2, #31
 8005dda:	d404      	bmi.n	8005de6 <_fflush_r+0x3a>
 8005ddc:	0599      	lsls	r1, r3, #22
 8005dde:	d402      	bmi.n	8005de6 <_fflush_r+0x3a>
 8005de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005de2:	f000 f915 	bl	8006010 <__retarget_lock_acquire_recursive>
 8005de6:	4628      	mov	r0, r5
 8005de8:	4621      	mov	r1, r4
 8005dea:	f7ff ff59 	bl	8005ca0 <__sflush_r>
 8005dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005df0:	07da      	lsls	r2, r3, #31
 8005df2:	4605      	mov	r5, r0
 8005df4:	d4e0      	bmi.n	8005db8 <_fflush_r+0xc>
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	059b      	lsls	r3, r3, #22
 8005dfa:	d4dd      	bmi.n	8005db8 <_fflush_r+0xc>
 8005dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dfe:	f000 f908 	bl	8006012 <__retarget_lock_release_recursive>
 8005e02:	e7d9      	b.n	8005db8 <_fflush_r+0xc>
 8005e04:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <_fflush_r+0x70>)
 8005e06:	429c      	cmp	r4, r3
 8005e08:	d101      	bne.n	8005e0e <_fflush_r+0x62>
 8005e0a:	68ac      	ldr	r4, [r5, #8]
 8005e0c:	e7df      	b.n	8005dce <_fflush_r+0x22>
 8005e0e:	4b04      	ldr	r3, [pc, #16]	; (8005e20 <_fflush_r+0x74>)
 8005e10:	429c      	cmp	r4, r3
 8005e12:	bf08      	it	eq
 8005e14:	68ec      	ldreq	r4, [r5, #12]
 8005e16:	e7da      	b.n	8005dce <_fflush_r+0x22>
 8005e18:	08006648 	.word	0x08006648
 8005e1c:	08006668 	.word	0x08006668
 8005e20:	08006628 	.word	0x08006628

08005e24 <std>:
 8005e24:	2300      	movs	r3, #0
 8005e26:	b510      	push	{r4, lr}
 8005e28:	4604      	mov	r4, r0
 8005e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e32:	6083      	str	r3, [r0, #8]
 8005e34:	8181      	strh	r1, [r0, #12]
 8005e36:	6643      	str	r3, [r0, #100]	; 0x64
 8005e38:	81c2      	strh	r2, [r0, #14]
 8005e3a:	6183      	str	r3, [r0, #24]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	2208      	movs	r2, #8
 8005e40:	305c      	adds	r0, #92	; 0x5c
 8005e42:	f7fe ffe3 	bl	8004e0c <memset>
 8005e46:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <std+0x38>)
 8005e48:	6263      	str	r3, [r4, #36]	; 0x24
 8005e4a:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <std+0x3c>)
 8005e4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e4e:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <std+0x40>)
 8005e50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e52:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <std+0x44>)
 8005e54:	6224      	str	r4, [r4, #32]
 8005e56:	6323      	str	r3, [r4, #48]	; 0x30
 8005e58:	bd10      	pop	{r4, pc}
 8005e5a:	bf00      	nop
 8005e5c:	08006231 	.word	0x08006231
 8005e60:	08006253 	.word	0x08006253
 8005e64:	0800628b 	.word	0x0800628b
 8005e68:	080062af 	.word	0x080062af

08005e6c <_cleanup_r>:
 8005e6c:	4901      	ldr	r1, [pc, #4]	; (8005e74 <_cleanup_r+0x8>)
 8005e6e:	f000 b8af 	b.w	8005fd0 <_fwalk_reent>
 8005e72:	bf00      	nop
 8005e74:	08005dad 	.word	0x08005dad

08005e78 <__sfmoreglue>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	2268      	movs	r2, #104	; 0x68
 8005e7c:	1e4d      	subs	r5, r1, #1
 8005e7e:	4355      	muls	r5, r2
 8005e80:	460e      	mov	r6, r1
 8005e82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e86:	f7ff f975 	bl	8005174 <_malloc_r>
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	b140      	cbz	r0, 8005ea0 <__sfmoreglue+0x28>
 8005e8e:	2100      	movs	r1, #0
 8005e90:	e9c0 1600 	strd	r1, r6, [r0]
 8005e94:	300c      	adds	r0, #12
 8005e96:	60a0      	str	r0, [r4, #8]
 8005e98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e9c:	f7fe ffb6 	bl	8004e0c <memset>
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}

08005ea4 <__sfp_lock_acquire>:
 8005ea4:	4801      	ldr	r0, [pc, #4]	; (8005eac <__sfp_lock_acquire+0x8>)
 8005ea6:	f000 b8b3 	b.w	8006010 <__retarget_lock_acquire_recursive>
 8005eaa:	bf00      	nop
 8005eac:	20000335 	.word	0x20000335

08005eb0 <__sfp_lock_release>:
 8005eb0:	4801      	ldr	r0, [pc, #4]	; (8005eb8 <__sfp_lock_release+0x8>)
 8005eb2:	f000 b8ae 	b.w	8006012 <__retarget_lock_release_recursive>
 8005eb6:	bf00      	nop
 8005eb8:	20000335 	.word	0x20000335

08005ebc <__sinit_lock_acquire>:
 8005ebc:	4801      	ldr	r0, [pc, #4]	; (8005ec4 <__sinit_lock_acquire+0x8>)
 8005ebe:	f000 b8a7 	b.w	8006010 <__retarget_lock_acquire_recursive>
 8005ec2:	bf00      	nop
 8005ec4:	20000336 	.word	0x20000336

08005ec8 <__sinit_lock_release>:
 8005ec8:	4801      	ldr	r0, [pc, #4]	; (8005ed0 <__sinit_lock_release+0x8>)
 8005eca:	f000 b8a2 	b.w	8006012 <__retarget_lock_release_recursive>
 8005ece:	bf00      	nop
 8005ed0:	20000336 	.word	0x20000336

08005ed4 <__sinit>:
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	f7ff fff0 	bl	8005ebc <__sinit_lock_acquire>
 8005edc:	69a3      	ldr	r3, [r4, #24]
 8005ede:	b11b      	cbz	r3, 8005ee8 <__sinit+0x14>
 8005ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee4:	f7ff bff0 	b.w	8005ec8 <__sinit_lock_release>
 8005ee8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005eec:	6523      	str	r3, [r4, #80]	; 0x50
 8005eee:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <__sinit+0x68>)
 8005ef0:	4a13      	ldr	r2, [pc, #76]	; (8005f40 <__sinit+0x6c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ef6:	42a3      	cmp	r3, r4
 8005ef8:	bf04      	itt	eq
 8005efa:	2301      	moveq	r3, #1
 8005efc:	61a3      	streq	r3, [r4, #24]
 8005efe:	4620      	mov	r0, r4
 8005f00:	f000 f820 	bl	8005f44 <__sfp>
 8005f04:	6060      	str	r0, [r4, #4]
 8005f06:	4620      	mov	r0, r4
 8005f08:	f000 f81c 	bl	8005f44 <__sfp>
 8005f0c:	60a0      	str	r0, [r4, #8]
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f000 f818 	bl	8005f44 <__sfp>
 8005f14:	2200      	movs	r2, #0
 8005f16:	60e0      	str	r0, [r4, #12]
 8005f18:	2104      	movs	r1, #4
 8005f1a:	6860      	ldr	r0, [r4, #4]
 8005f1c:	f7ff ff82 	bl	8005e24 <std>
 8005f20:	68a0      	ldr	r0, [r4, #8]
 8005f22:	2201      	movs	r2, #1
 8005f24:	2109      	movs	r1, #9
 8005f26:	f7ff ff7d 	bl	8005e24 <std>
 8005f2a:	68e0      	ldr	r0, [r4, #12]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	2112      	movs	r1, #18
 8005f30:	f7ff ff78 	bl	8005e24 <std>
 8005f34:	2301      	movs	r3, #1
 8005f36:	61a3      	str	r3, [r4, #24]
 8005f38:	e7d2      	b.n	8005ee0 <__sinit+0xc>
 8005f3a:	bf00      	nop
 8005f3c:	08006440 	.word	0x08006440
 8005f40:	08005e6d 	.word	0x08005e6d

08005f44 <__sfp>:
 8005f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f46:	4607      	mov	r7, r0
 8005f48:	f7ff ffac 	bl	8005ea4 <__sfp_lock_acquire>
 8005f4c:	4b1e      	ldr	r3, [pc, #120]	; (8005fc8 <__sfp+0x84>)
 8005f4e:	681e      	ldr	r6, [r3, #0]
 8005f50:	69b3      	ldr	r3, [r6, #24]
 8005f52:	b913      	cbnz	r3, 8005f5a <__sfp+0x16>
 8005f54:	4630      	mov	r0, r6
 8005f56:	f7ff ffbd 	bl	8005ed4 <__sinit>
 8005f5a:	3648      	adds	r6, #72	; 0x48
 8005f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	d503      	bpl.n	8005f6c <__sfp+0x28>
 8005f64:	6833      	ldr	r3, [r6, #0]
 8005f66:	b30b      	cbz	r3, 8005fac <__sfp+0x68>
 8005f68:	6836      	ldr	r6, [r6, #0]
 8005f6a:	e7f7      	b.n	8005f5c <__sfp+0x18>
 8005f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f70:	b9d5      	cbnz	r5, 8005fa8 <__sfp+0x64>
 8005f72:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <__sfp+0x88>)
 8005f74:	60e3      	str	r3, [r4, #12]
 8005f76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f7a:	6665      	str	r5, [r4, #100]	; 0x64
 8005f7c:	f000 f847 	bl	800600e <__retarget_lock_init_recursive>
 8005f80:	f7ff ff96 	bl	8005eb0 <__sfp_lock_release>
 8005f84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f8c:	6025      	str	r5, [r4, #0]
 8005f8e:	61a5      	str	r5, [r4, #24]
 8005f90:	2208      	movs	r2, #8
 8005f92:	4629      	mov	r1, r5
 8005f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f98:	f7fe ff38 	bl	8004e0c <memset>
 8005f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa8:	3468      	adds	r4, #104	; 0x68
 8005faa:	e7d9      	b.n	8005f60 <__sfp+0x1c>
 8005fac:	2104      	movs	r1, #4
 8005fae:	4638      	mov	r0, r7
 8005fb0:	f7ff ff62 	bl	8005e78 <__sfmoreglue>
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	6030      	str	r0, [r6, #0]
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d1d5      	bne.n	8005f68 <__sfp+0x24>
 8005fbc:	f7ff ff78 	bl	8005eb0 <__sfp_lock_release>
 8005fc0:	230c      	movs	r3, #12
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	e7ee      	b.n	8005fa4 <__sfp+0x60>
 8005fc6:	bf00      	nop
 8005fc8:	08006440 	.word	0x08006440
 8005fcc:	ffff0001 	.word	0xffff0001

08005fd0 <_fwalk_reent>:
 8005fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	4688      	mov	r8, r1
 8005fd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005fdc:	2700      	movs	r7, #0
 8005fde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fe2:	f1b9 0901 	subs.w	r9, r9, #1
 8005fe6:	d505      	bpl.n	8005ff4 <_fwalk_reent+0x24>
 8005fe8:	6824      	ldr	r4, [r4, #0]
 8005fea:	2c00      	cmp	r4, #0
 8005fec:	d1f7      	bne.n	8005fde <_fwalk_reent+0xe>
 8005fee:	4638      	mov	r0, r7
 8005ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff4:	89ab      	ldrh	r3, [r5, #12]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d907      	bls.n	800600a <_fwalk_reent+0x3a>
 8005ffa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ffe:	3301      	adds	r3, #1
 8006000:	d003      	beq.n	800600a <_fwalk_reent+0x3a>
 8006002:	4629      	mov	r1, r5
 8006004:	4630      	mov	r0, r6
 8006006:	47c0      	blx	r8
 8006008:	4307      	orrs	r7, r0
 800600a:	3568      	adds	r5, #104	; 0x68
 800600c:	e7e9      	b.n	8005fe2 <_fwalk_reent+0x12>

0800600e <__retarget_lock_init_recursive>:
 800600e:	4770      	bx	lr

08006010 <__retarget_lock_acquire_recursive>:
 8006010:	4770      	bx	lr

08006012 <__retarget_lock_release_recursive>:
 8006012:	4770      	bx	lr

08006014 <__swhatbuf_r>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	460e      	mov	r6, r1
 8006018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800601c:	2900      	cmp	r1, #0
 800601e:	b096      	sub	sp, #88	; 0x58
 8006020:	4614      	mov	r4, r2
 8006022:	461d      	mov	r5, r3
 8006024:	da08      	bge.n	8006038 <__swhatbuf_r+0x24>
 8006026:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	602a      	str	r2, [r5, #0]
 800602e:	061a      	lsls	r2, r3, #24
 8006030:	d410      	bmi.n	8006054 <__swhatbuf_r+0x40>
 8006032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006036:	e00e      	b.n	8006056 <__swhatbuf_r+0x42>
 8006038:	466a      	mov	r2, sp
 800603a:	f000 f95f 	bl	80062fc <_fstat_r>
 800603e:	2800      	cmp	r0, #0
 8006040:	dbf1      	blt.n	8006026 <__swhatbuf_r+0x12>
 8006042:	9a01      	ldr	r2, [sp, #4]
 8006044:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006048:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800604c:	425a      	negs	r2, r3
 800604e:	415a      	adcs	r2, r3
 8006050:	602a      	str	r2, [r5, #0]
 8006052:	e7ee      	b.n	8006032 <__swhatbuf_r+0x1e>
 8006054:	2340      	movs	r3, #64	; 0x40
 8006056:	2000      	movs	r0, #0
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	b016      	add	sp, #88	; 0x58
 800605c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006060 <__smakebuf_r>:
 8006060:	898b      	ldrh	r3, [r1, #12]
 8006062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006064:	079d      	lsls	r5, r3, #30
 8006066:	4606      	mov	r6, r0
 8006068:	460c      	mov	r4, r1
 800606a:	d507      	bpl.n	800607c <__smakebuf_r+0x1c>
 800606c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	6123      	str	r3, [r4, #16]
 8006074:	2301      	movs	r3, #1
 8006076:	6163      	str	r3, [r4, #20]
 8006078:	b002      	add	sp, #8
 800607a:	bd70      	pop	{r4, r5, r6, pc}
 800607c:	ab01      	add	r3, sp, #4
 800607e:	466a      	mov	r2, sp
 8006080:	f7ff ffc8 	bl	8006014 <__swhatbuf_r>
 8006084:	9900      	ldr	r1, [sp, #0]
 8006086:	4605      	mov	r5, r0
 8006088:	4630      	mov	r0, r6
 800608a:	f7ff f873 	bl	8005174 <_malloc_r>
 800608e:	b948      	cbnz	r0, 80060a4 <__smakebuf_r+0x44>
 8006090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006094:	059a      	lsls	r2, r3, #22
 8006096:	d4ef      	bmi.n	8006078 <__smakebuf_r+0x18>
 8006098:	f023 0303 	bic.w	r3, r3, #3
 800609c:	f043 0302 	orr.w	r3, r3, #2
 80060a0:	81a3      	strh	r3, [r4, #12]
 80060a2:	e7e3      	b.n	800606c <__smakebuf_r+0xc>
 80060a4:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <__smakebuf_r+0x7c>)
 80060a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	6020      	str	r0, [r4, #0]
 80060ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b0:	81a3      	strh	r3, [r4, #12]
 80060b2:	9b00      	ldr	r3, [sp, #0]
 80060b4:	6163      	str	r3, [r4, #20]
 80060b6:	9b01      	ldr	r3, [sp, #4]
 80060b8:	6120      	str	r0, [r4, #16]
 80060ba:	b15b      	cbz	r3, 80060d4 <__smakebuf_r+0x74>
 80060bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060c0:	4630      	mov	r0, r6
 80060c2:	f000 f92d 	bl	8006320 <_isatty_r>
 80060c6:	b128      	cbz	r0, 80060d4 <__smakebuf_r+0x74>
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	f023 0303 	bic.w	r3, r3, #3
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	81a3      	strh	r3, [r4, #12]
 80060d4:	89a0      	ldrh	r0, [r4, #12]
 80060d6:	4305      	orrs	r5, r0
 80060d8:	81a5      	strh	r5, [r4, #12]
 80060da:	e7cd      	b.n	8006078 <__smakebuf_r+0x18>
 80060dc:	08005e6d 	.word	0x08005e6d

080060e0 <memcpy>:
 80060e0:	440a      	add	r2, r1
 80060e2:	4291      	cmp	r1, r2
 80060e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80060e8:	d100      	bne.n	80060ec <memcpy+0xc>
 80060ea:	4770      	bx	lr
 80060ec:	b510      	push	{r4, lr}
 80060ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060f6:	4291      	cmp	r1, r2
 80060f8:	d1f9      	bne.n	80060ee <memcpy+0xe>
 80060fa:	bd10      	pop	{r4, pc}

080060fc <memmove>:
 80060fc:	4288      	cmp	r0, r1
 80060fe:	b510      	push	{r4, lr}
 8006100:	eb01 0402 	add.w	r4, r1, r2
 8006104:	d902      	bls.n	800610c <memmove+0x10>
 8006106:	4284      	cmp	r4, r0
 8006108:	4623      	mov	r3, r4
 800610a:	d807      	bhi.n	800611c <memmove+0x20>
 800610c:	1e43      	subs	r3, r0, #1
 800610e:	42a1      	cmp	r1, r4
 8006110:	d008      	beq.n	8006124 <memmove+0x28>
 8006112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800611a:	e7f8      	b.n	800610e <memmove+0x12>
 800611c:	4402      	add	r2, r0
 800611e:	4601      	mov	r1, r0
 8006120:	428a      	cmp	r2, r1
 8006122:	d100      	bne.n	8006126 <memmove+0x2a>
 8006124:	bd10      	pop	{r4, pc}
 8006126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800612a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800612e:	e7f7      	b.n	8006120 <memmove+0x24>

08006130 <__malloc_lock>:
 8006130:	4801      	ldr	r0, [pc, #4]	; (8006138 <__malloc_lock+0x8>)
 8006132:	f7ff bf6d 	b.w	8006010 <__retarget_lock_acquire_recursive>
 8006136:	bf00      	nop
 8006138:	20000334 	.word	0x20000334

0800613c <__malloc_unlock>:
 800613c:	4801      	ldr	r0, [pc, #4]	; (8006144 <__malloc_unlock+0x8>)
 800613e:	f7ff bf68 	b.w	8006012 <__retarget_lock_release_recursive>
 8006142:	bf00      	nop
 8006144:	20000334 	.word	0x20000334

08006148 <_realloc_r>:
 8006148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614c:	4680      	mov	r8, r0
 800614e:	4614      	mov	r4, r2
 8006150:	460e      	mov	r6, r1
 8006152:	b921      	cbnz	r1, 800615e <_realloc_r+0x16>
 8006154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006158:	4611      	mov	r1, r2
 800615a:	f7ff b80b 	b.w	8005174 <_malloc_r>
 800615e:	b92a      	cbnz	r2, 800616c <_realloc_r+0x24>
 8006160:	f7fe ff9c 	bl	800509c <_free_r>
 8006164:	4625      	mov	r5, r4
 8006166:	4628      	mov	r0, r5
 8006168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800616c:	f000 f8fa 	bl	8006364 <_malloc_usable_size_r>
 8006170:	4284      	cmp	r4, r0
 8006172:	4607      	mov	r7, r0
 8006174:	d802      	bhi.n	800617c <_realloc_r+0x34>
 8006176:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800617a:	d812      	bhi.n	80061a2 <_realloc_r+0x5a>
 800617c:	4621      	mov	r1, r4
 800617e:	4640      	mov	r0, r8
 8006180:	f7fe fff8 	bl	8005174 <_malloc_r>
 8006184:	4605      	mov	r5, r0
 8006186:	2800      	cmp	r0, #0
 8006188:	d0ed      	beq.n	8006166 <_realloc_r+0x1e>
 800618a:	42bc      	cmp	r4, r7
 800618c:	4622      	mov	r2, r4
 800618e:	4631      	mov	r1, r6
 8006190:	bf28      	it	cs
 8006192:	463a      	movcs	r2, r7
 8006194:	f7ff ffa4 	bl	80060e0 <memcpy>
 8006198:	4631      	mov	r1, r6
 800619a:	4640      	mov	r0, r8
 800619c:	f7fe ff7e 	bl	800509c <_free_r>
 80061a0:	e7e1      	b.n	8006166 <_realloc_r+0x1e>
 80061a2:	4635      	mov	r5, r6
 80061a4:	e7df      	b.n	8006166 <_realloc_r+0x1e>

080061a6 <_raise_r>:
 80061a6:	291f      	cmp	r1, #31
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4604      	mov	r4, r0
 80061ac:	460d      	mov	r5, r1
 80061ae:	d904      	bls.n	80061ba <_raise_r+0x14>
 80061b0:	2316      	movs	r3, #22
 80061b2:	6003      	str	r3, [r0, #0]
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	bd38      	pop	{r3, r4, r5, pc}
 80061ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80061bc:	b112      	cbz	r2, 80061c4 <_raise_r+0x1e>
 80061be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061c2:	b94b      	cbnz	r3, 80061d8 <_raise_r+0x32>
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 f831 	bl	800622c <_getpid_r>
 80061ca:	462a      	mov	r2, r5
 80061cc:	4601      	mov	r1, r0
 80061ce:	4620      	mov	r0, r4
 80061d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061d4:	f000 b818 	b.w	8006208 <_kill_r>
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d00a      	beq.n	80061f2 <_raise_r+0x4c>
 80061dc:	1c59      	adds	r1, r3, #1
 80061de:	d103      	bne.n	80061e8 <_raise_r+0x42>
 80061e0:	2316      	movs	r3, #22
 80061e2:	6003      	str	r3, [r0, #0]
 80061e4:	2001      	movs	r0, #1
 80061e6:	e7e7      	b.n	80061b8 <_raise_r+0x12>
 80061e8:	2400      	movs	r4, #0
 80061ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061ee:	4628      	mov	r0, r5
 80061f0:	4798      	blx	r3
 80061f2:	2000      	movs	r0, #0
 80061f4:	e7e0      	b.n	80061b8 <_raise_r+0x12>
	...

080061f8 <raise>:
 80061f8:	4b02      	ldr	r3, [pc, #8]	; (8006204 <raise+0xc>)
 80061fa:	4601      	mov	r1, r0
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	f7ff bfd2 	b.w	80061a6 <_raise_r>
 8006202:	bf00      	nop
 8006204:	20000180 	.word	0x20000180

08006208 <_kill_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4d07      	ldr	r5, [pc, #28]	; (8006228 <_kill_r+0x20>)
 800620c:	2300      	movs	r3, #0
 800620e:	4604      	mov	r4, r0
 8006210:	4608      	mov	r0, r1
 8006212:	4611      	mov	r1, r2
 8006214:	602b      	str	r3, [r5, #0]
 8006216:	f7fa fdb5 	bl	8000d84 <_kill>
 800621a:	1c43      	adds	r3, r0, #1
 800621c:	d102      	bne.n	8006224 <_kill_r+0x1c>
 800621e:	682b      	ldr	r3, [r5, #0]
 8006220:	b103      	cbz	r3, 8006224 <_kill_r+0x1c>
 8006222:	6023      	str	r3, [r4, #0]
 8006224:	bd38      	pop	{r3, r4, r5, pc}
 8006226:	bf00      	nop
 8006228:	20000338 	.word	0x20000338

0800622c <_getpid_r>:
 800622c:	f7fa bda2 	b.w	8000d74 <_getpid>

08006230 <__sread>:
 8006230:	b510      	push	{r4, lr}
 8006232:	460c      	mov	r4, r1
 8006234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006238:	f000 f89c 	bl	8006374 <_read_r>
 800623c:	2800      	cmp	r0, #0
 800623e:	bfab      	itete	ge
 8006240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006242:	89a3      	ldrhlt	r3, [r4, #12]
 8006244:	181b      	addge	r3, r3, r0
 8006246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800624a:	bfac      	ite	ge
 800624c:	6563      	strge	r3, [r4, #84]	; 0x54
 800624e:	81a3      	strhlt	r3, [r4, #12]
 8006250:	bd10      	pop	{r4, pc}

08006252 <__swrite>:
 8006252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006256:	461f      	mov	r7, r3
 8006258:	898b      	ldrh	r3, [r1, #12]
 800625a:	05db      	lsls	r3, r3, #23
 800625c:	4605      	mov	r5, r0
 800625e:	460c      	mov	r4, r1
 8006260:	4616      	mov	r6, r2
 8006262:	d505      	bpl.n	8006270 <__swrite+0x1e>
 8006264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006268:	2302      	movs	r3, #2
 800626a:	2200      	movs	r2, #0
 800626c:	f000 f868 	bl	8006340 <_lseek_r>
 8006270:	89a3      	ldrh	r3, [r4, #12]
 8006272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800627a:	81a3      	strh	r3, [r4, #12]
 800627c:	4632      	mov	r2, r6
 800627e:	463b      	mov	r3, r7
 8006280:	4628      	mov	r0, r5
 8006282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006286:	f000 b817 	b.w	80062b8 <_write_r>

0800628a <__sseek>:
 800628a:	b510      	push	{r4, lr}
 800628c:	460c      	mov	r4, r1
 800628e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006292:	f000 f855 	bl	8006340 <_lseek_r>
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	bf15      	itete	ne
 800629c:	6560      	strne	r0, [r4, #84]	; 0x54
 800629e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062a6:	81a3      	strheq	r3, [r4, #12]
 80062a8:	bf18      	it	ne
 80062aa:	81a3      	strhne	r3, [r4, #12]
 80062ac:	bd10      	pop	{r4, pc}

080062ae <__sclose>:
 80062ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b2:	f000 b813 	b.w	80062dc <_close_r>
	...

080062b8 <_write_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4d07      	ldr	r5, [pc, #28]	; (80062d8 <_write_r+0x20>)
 80062bc:	4604      	mov	r4, r0
 80062be:	4608      	mov	r0, r1
 80062c0:	4611      	mov	r1, r2
 80062c2:	2200      	movs	r2, #0
 80062c4:	602a      	str	r2, [r5, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f7fa fd93 	bl	8000df2 <_write>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <_write_r+0x1e>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	b103      	cbz	r3, 80062d6 <_write_r+0x1e>
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	20000338 	.word	0x20000338

080062dc <_close_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4d06      	ldr	r5, [pc, #24]	; (80062f8 <_close_r+0x1c>)
 80062e0:	2300      	movs	r3, #0
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	602b      	str	r3, [r5, #0]
 80062e8:	f7fa fd9f 	bl	8000e2a <_close>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_close_r+0x1a>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_close_r+0x1a>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	20000338 	.word	0x20000338

080062fc <_fstat_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4d07      	ldr	r5, [pc, #28]	; (800631c <_fstat_r+0x20>)
 8006300:	2300      	movs	r3, #0
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	4611      	mov	r1, r2
 8006308:	602b      	str	r3, [r5, #0]
 800630a:	f7fa fd9a 	bl	8000e42 <_fstat>
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	d102      	bne.n	8006318 <_fstat_r+0x1c>
 8006312:	682b      	ldr	r3, [r5, #0]
 8006314:	b103      	cbz	r3, 8006318 <_fstat_r+0x1c>
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	bd38      	pop	{r3, r4, r5, pc}
 800631a:	bf00      	nop
 800631c:	20000338 	.word	0x20000338

08006320 <_isatty_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	4d06      	ldr	r5, [pc, #24]	; (800633c <_isatty_r+0x1c>)
 8006324:	2300      	movs	r3, #0
 8006326:	4604      	mov	r4, r0
 8006328:	4608      	mov	r0, r1
 800632a:	602b      	str	r3, [r5, #0]
 800632c:	f7fa fd99 	bl	8000e62 <_isatty>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_isatty_r+0x1a>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_isatty_r+0x1a>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	20000338 	.word	0x20000338

08006340 <_lseek_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d07      	ldr	r5, [pc, #28]	; (8006360 <_lseek_r+0x20>)
 8006344:	4604      	mov	r4, r0
 8006346:	4608      	mov	r0, r1
 8006348:	4611      	mov	r1, r2
 800634a:	2200      	movs	r2, #0
 800634c:	602a      	str	r2, [r5, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	f7fa fd92 	bl	8000e78 <_lseek>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d102      	bne.n	800635e <_lseek_r+0x1e>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	b103      	cbz	r3, 800635e <_lseek_r+0x1e>
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	20000338 	.word	0x20000338

08006364 <_malloc_usable_size_r>:
 8006364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006368:	1f18      	subs	r0, r3, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	bfbc      	itt	lt
 800636e:	580b      	ldrlt	r3, [r1, r0]
 8006370:	18c0      	addlt	r0, r0, r3
 8006372:	4770      	bx	lr

08006374 <_read_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d07      	ldr	r5, [pc, #28]	; (8006394 <_read_r+0x20>)
 8006378:	4604      	mov	r4, r0
 800637a:	4608      	mov	r0, r1
 800637c:	4611      	mov	r1, r2
 800637e:	2200      	movs	r2, #0
 8006380:	602a      	str	r2, [r5, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	f7fa fd18 	bl	8000db8 <_read>
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	d102      	bne.n	8006392 <_read_r+0x1e>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	b103      	cbz	r3, 8006392 <_read_r+0x1e>
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	20000338 	.word	0x20000338

08006398 <_init>:
 8006398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639a:	bf00      	nop
 800639c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639e:	bc08      	pop	{r3}
 80063a0:	469e      	mov	lr, r3
 80063a2:	4770      	bx	lr

080063a4 <_fini>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	bf00      	nop
 80063a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063aa:	bc08      	pop	{r3}
 80063ac:	469e      	mov	lr, r3
 80063ae:	4770      	bx	lr
