
NUCLEO-G431RB-MSC_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076e0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ba4  08007ba4  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bac  08007bac  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bac  08007bac  00017bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bb0  08007bb0  00017bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08007bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000210  08007dc4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08007dc4  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a19  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002805  00000000  00000000  00034c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00037460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00038578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0ad  00000000  00000000  00039598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013782  00000000  00000000  00058645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c788b  00000000  00000000  0006bdc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133652  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000544c  00000000  00000000  001336a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	080078a8 	.word	0x080078a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	080078a8 	.word	0x080078a8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09e      	sub	sp, #120	; 0x78
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fe2e 	bl	8001252 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f9bf 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fb15 	bl	8000c28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 fac7 	bl	8000b90 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000602:	f000 fa05 	bl	8000a10 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2224      	movs	r2, #36	; 0x24
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f005 fe85 	bl	800631c <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000616:	2240      	movs	r2, #64	; 0x40
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 fe7e 	bl	800631c <memset>
 8000620:	4bac      	ldr	r3, [pc, #688]	; (80008d4 <main+0x2f0>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000626:	2240      	movs	r2, #64	; 0x40
 8000628:	2100      	movs	r1, #0
 800062a:	48ab      	ldr	r0, [pc, #684]	; (80008d8 <main+0x2f4>)
 800062c:	f005 fe76 	bl	800631c <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000630:	2201      	movs	r2, #1
 8000632:	49a8      	ldr	r1, [pc, #672]	; (80008d4 <main+0x2f0>)
 8000634:	48a9      	ldr	r0, [pc, #676]	; (80008dc <main+0x2f8>)
 8000636:	f003 fee3 	bl	8004400 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f000 fe40 	bl	80012c0 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	2266      	movs	r2, #102	; 0x66
 8000646:	49a6      	ldr	r1, [pc, #664]	; (80008e0 <main+0x2fc>)
 8000648:	48a4      	ldr	r0, [pc, #656]	; (80008dc <main+0x2f8>)
 800064a:	f003 fe42 	bl	80042d2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	2218      	movs	r2, #24
 8000654:	49a3      	ldr	r1, [pc, #652]	; (80008e4 <main+0x300>)
 8000656:	48a1      	ldr	r0, [pc, #644]	; (80008dc <main+0x2f8>)
 8000658:	f003 fe3b 	bl	80042d2 <HAL_UART_Transmit>


	//Timers start
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800065c:	2100      	movs	r1, #0
 800065e:	48a2      	ldr	r0, [pc, #648]	; (80008e8 <main+0x304>)
 8000660:	f002 faa8 	bl	8002bb4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000664:	2104      	movs	r1, #4
 8000666:	48a0      	ldr	r0, [pc, #640]	; (80008e8 <main+0x304>)
 8000668:	f002 faa4 	bl	8002bb4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800066c:	2100      	movs	r1, #0
 800066e:	489e      	ldr	r0, [pc, #632]	; (80008e8 <main+0x304>)
 8000670:	f003 fb9e 	bl	8003db0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000674:	2104      	movs	r1, #4
 8000676:	489c      	ldr	r0, [pc, #624]	; (80008e8 <main+0x304>)
 8000678:	f003 fb9a 	bl	8003db0 <HAL_TIMEx_PWMN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 800067c:	4b9b      	ldr	r3, [pc, #620]	; (80008ec <main+0x308>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d06e      	beq.n	8000762 <main+0x17e>
			switch(uartRxBuffer[0]){
 8000684:	4b93      	ldr	r3, [pc, #588]	; (80008d4 <main+0x2f0>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b0d      	cmp	r3, #13
 800068a:	d002      	beq.n	8000692 <main+0xae>
 800068c:	2b7f      	cmp	r3, #127	; 0x7f
 800068e:	d045      	beq.n	800071c <main+0x138>
 8000690:	e054      	b.n	800073c <main+0x158>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	2203      	movs	r2, #3
 8000698:	4995      	ldr	r1, [pc, #596]	; (80008f0 <main+0x30c>)
 800069a:	4890      	ldr	r0, [pc, #576]	; (80008dc <main+0x2f8>)
 800069c:	f003 fe19 	bl	80042d2 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 80006a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80006a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006a6:	4413      	add	r3, r2
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
				argc = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 80006b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b4:	498f      	ldr	r1, [pc, #572]	; (80008f4 <main+0x310>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f005 fe58 	bl	800636c <strtok>
 80006bc:	4603      	mov	r3, r0
 80006be:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80006c0:	e00e      	b.n	80006e0 <main+0xfc>
					argv[argc++] = token;
 80006c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	673a      	str	r2, [r7, #112]	; 0x70
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	3378      	adds	r3, #120	; 0x78
 80006cc:	443b      	add	r3, r7
 80006ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80006d0:	f843 2c74 	str.w	r2, [r3, #-116]
					token = strtok(NULL, " ");
 80006d4:	4987      	ldr	r1, [pc, #540]	; (80008f4 <main+0x310>)
 80006d6:	2000      	movs	r0, #0
 80006d8:	f005 fe48 	bl	800636c <strtok>
 80006dc:	4603      	mov	r3, r0
 80006de:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80006e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1ed      	bne.n	80006c2 <main+0xde>
				}

				//requested echo transmission to check characters

				HAL_UART_Transmit(&huart2, "\r\n ", sizeof("\r\n "), HAL_MAX_DELAY);
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	2204      	movs	r2, #4
 80006ec:	4982      	ldr	r1, [pc, #520]	; (80008f8 <main+0x314>)
 80006ee:	487b      	ldr	r0, [pc, #492]	; (80008dc <main+0x2f8>)
 80006f0:	f003 fdef 	bl	80042d2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, cmdBuffer, sizeof(cmdBuffer), HAL_MAX_DELAY);
 80006f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295
 80006fc:	2240      	movs	r2, #64	; 0x40
 80006fe:	4877      	ldr	r0, [pc, #476]	; (80008dc <main+0x2f8>)
 8000700:	f003 fde7 	bl	80042d2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\r\n ", sizeof("\r\n "), HAL_MAX_DELAY);
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	2204      	movs	r2, #4
 800070a:	497b      	ldr	r1, [pc, #492]	; (80008f8 <main+0x314>)
 800070c:	4873      	ldr	r0, [pc, #460]	; (80008dc <main+0x2f8>)
 800070e:	f003 fde0 	bl	80042d2 <HAL_UART_Transmit>

				idx_cmd = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 8000716:	2301      	movs	r3, #1
 8000718:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 800071a:	e01f      	b.n	800075c <main+0x178>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 800071c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800071e:	1e5a      	subs	r2, r3, #1
 8000720:	677a      	str	r2, [r7, #116]	; 0x74
 8000722:	3378      	adds	r3, #120	; 0x78
 8000724:	443b      	add	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800072c:	f04f 33ff 	mov.w	r3, #4294967295
 8000730:	2201      	movs	r2, #1
 8000732:	4968      	ldr	r1, [pc, #416]	; (80008d4 <main+0x2f0>)
 8000734:	4869      	ldr	r0, [pc, #420]	; (80008dc <main+0x2f8>)
 8000736:	f003 fdcc 	bl	80042d2 <HAL_UART_Transmit>
				break;
 800073a:	e00f      	b.n	800075c <main+0x178>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800073c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	677a      	str	r2, [r7, #116]	; 0x74
 8000742:	4a64      	ldr	r2, [pc, #400]	; (80008d4 <main+0x2f0>)
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	3378      	adds	r3, #120	; 0x78
 8000748:	443b      	add	r3, r7
 800074a:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	2201      	movs	r2, #1
 8000754:	495f      	ldr	r1, [pc, #380]	; (80008d4 <main+0x2f0>)
 8000756:	4861      	ldr	r0, [pc, #388]	; (80008dc <main+0x2f8>)
 8000758:	f003 fdbb 	bl	80042d2 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 800075c:	4b63      	ldr	r3, [pc, #396]	; (80008ec <main+0x308>)
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8000762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000764:	2b00      	cmp	r3, #0
 8000766:	d089      	beq.n	800067c <main+0x98>
			if(strcmp(argv[0],"set")==0){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4964      	ldr	r1, [pc, #400]	; (80008fc <main+0x318>)
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fd57 	bl	8000220 <strcmp>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d12d      	bne.n	80007d4 <main+0x1f0>
				if(strcmp(argv[1],"PA5")==0){
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4961      	ldr	r1, [pc, #388]	; (8000900 <main+0x31c>)
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd4f 	bl	8000220 <strcmp>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d11d      	bne.n	80007c4 <main+0x1e0>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4618      	mov	r0, r3
 800078c:	f005 fd98 	bl	80062c0 <atoi>
 8000790:	4603      	mov	r3, r0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	461a      	mov	r2, r3
 8000796:	2120      	movs	r1, #32
 8000798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079c:	f001 f8d4 	bl	8001948 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 fd8c 	bl	80062c0 <atoi>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	4955      	ldr	r1, [pc, #340]	; (8000904 <main+0x320>)
 80007ae:	484a      	ldr	r0, [pc, #296]	; (80008d8 <main+0x2f4>)
 80007b0:	f005 fdbc 	bl	800632c <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	2220      	movs	r2, #32
 80007ba:	4947      	ldr	r1, [pc, #284]	; (80008d8 <main+0x2f4>)
 80007bc:	4847      	ldr	r0, [pc, #284]	; (80008dc <main+0x2f8>)
 80007be:	f003 fd88 	bl	80042d2 <HAL_UART_Transmit>
 80007c2:	e0c8      	b.n	8000956 <main+0x372>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	2214      	movs	r2, #20
 80007ca:	494f      	ldr	r1, [pc, #316]	; (8000908 <main+0x324>)
 80007cc:	4843      	ldr	r0, [pc, #268]	; (80008dc <main+0x2f8>)
 80007ce:	f003 fd80 	bl	80042d2 <HAL_UART_Transmit>
 80007d2:	e0c0      	b.n	8000956 <main+0x372>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	494d      	ldr	r1, [pc, #308]	; (800090c <main+0x328>)
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fd21 	bl	8000220 <strcmp>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d107      	bne.n	80007f4 <main+0x210>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	2214      	movs	r2, #20
 80007ea:	4947      	ldr	r1, [pc, #284]	; (8000908 <main+0x324>)
 80007ec:	483b      	ldr	r0, [pc, #236]	; (80008dc <main+0x2f8>)
 80007ee:	f003 fd70 	bl	80042d2 <HAL_UART_Transmit>
 80007f2:	e0b0      	b.n	8000956 <main+0x372>
			}

			// help function prints all the available commands
			else if(strcmp(argv[0],"help")==0){
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4946      	ldr	r1, [pc, #280]	; (8000910 <main+0x32c>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fd11 	bl	8000220 <strcmp>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d107      	bne.n	8000814 <main+0x230>
				HAL_UART_Transmit(&huart2, helpContent, sizeof(helpContent), HAL_MAX_DELAY);
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	223b      	movs	r2, #59	; 0x3b
 800080a:	4942      	ldr	r1, [pc, #264]	; (8000914 <main+0x330>)
 800080c:	4833      	ldr	r0, [pc, #204]	; (80008dc <main+0x2f8>)
 800080e:	f003 fd60 	bl	80042d2 <HAL_UART_Transmit>
 8000812:	e0a0      	b.n	8000956 <main+0x372>
			}
			else if(strcmp(argv[0],"pinout")==0){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4940      	ldr	r1, [pc, #256]	; (8000918 <main+0x334>)
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fd01 	bl	8000220 <strcmp>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d107      	bne.n	8000834 <main+0x250>
				HAL_UART_Transmit(&huart2, pinoutContent, sizeof(pinoutContent), HAL_MAX_DELAY);
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
 8000828:	2289      	movs	r2, #137	; 0x89
 800082a:	493c      	ldr	r1, [pc, #240]	; (800091c <main+0x338>)
 800082c:	482b      	ldr	r0, [pc, #172]	; (80008dc <main+0x2f8>)
 800082e:	f003 fd50 	bl	80042d2 <HAL_UART_Transmit>
 8000832:	e090      	b.n	8000956 <main+0x372>
			}
			else if(strcmp(argv[0],"start")==0){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	493a      	ldr	r1, [pc, #232]	; (8000920 <main+0x33c>)
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fcf1 	bl	8000220 <strcmp>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d107      	bne.n	8000854 <main+0x270>
				HAL_UART_Transmit(&huart2, startContent, sizeof(startContent), HAL_MAX_DELAY);
 8000844:	f04f 33ff 	mov.w	r3, #4294967295
 8000848:	220f      	movs	r2, #15
 800084a:	4936      	ldr	r1, [pc, #216]	; (8000924 <main+0x340>)
 800084c:	4823      	ldr	r0, [pc, #140]	; (80008dc <main+0x2f8>)
 800084e:	f003 fd40 	bl	80042d2 <HAL_UART_Transmit>
 8000852:	e080      	b.n	8000956 <main+0x372>
			}
			else if(strcmp(argv[0],"stop")==0){
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4934      	ldr	r1, [pc, #208]	; (8000928 <main+0x344>)
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fce1 	bl	8000220 <strcmp>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d107      	bne.n	8000874 <main+0x290>
				HAL_UART_Transmit(&huart2, stopContent, sizeof(stopContent), HAL_MAX_DELAY);
 8000864:	f04f 33ff 	mov.w	r3, #4294967295
 8000868:	2210      	movs	r2, #16
 800086a:	4930      	ldr	r1, [pc, #192]	; (800092c <main+0x348>)
 800086c:	481b      	ldr	r0, [pc, #108]	; (80008dc <main+0x2f8>)
 800086e:	f003 fd30 	bl	80042d2 <HAL_UART_Transmit>
 8000872:	e070      	b.n	8000956 <main+0x372>
			}
			else if(strcmp(argv[0],"dutycycle")==0){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	492e      	ldr	r1, [pc, #184]	; (8000930 <main+0x34c>)
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fcd1 	bl	8000220 <strcmp>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d161      	bne.n	8000948 <main+0x364>

				HAL_UART_Transmit(&huart2, dutyCycleChoiceContent, sizeof(dutyCycleChoiceContent), HAL_MAX_DELAY);
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	221e      	movs	r2, #30
 800088a:	492a      	ldr	r1, [pc, #168]	; (8000934 <main+0x350>)
 800088c:	4813      	ldr	r0, [pc, #76]	; (80008dc <main+0x2f8>)
 800088e:	f003 fd20 	bl	80042d2 <HAL_UART_Transmit>

				dutycycle= atoi(argv[1]);
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	4618      	mov	r0, r3
 8000896:	f005 fd13 	bl	80062c0 <atoi>
 800089a:	4603      	mov	r3, r0
 800089c:	4a26      	ldr	r2, [pc, #152]	; (8000938 <main+0x354>)
 800089e:	6013      	str	r3, [r2, #0]
				pulse=(dutycycle*TIM1->ARR)/100;
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <main+0x358>)
 80008a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a4:	4a24      	ldr	r2, [pc, #144]	; (8000938 <main+0x354>)
 80008a6:	6812      	ldr	r2, [r2, #0]
 80008a8:	fb02 f303 	mul.w	r3, r2, r3
 80008ac:	4a24      	ldr	r2, [pc, #144]	; (8000940 <main+0x35c>)
 80008ae:	fba2 2303 	umull	r2, r3, r2, r3
 80008b2:	095b      	lsrs	r3, r3, #5
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <main+0x360>)
 80008b8:	601a      	str	r2, [r3, #0]
				TIM1->CCR1=pulse;
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <main+0x360>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <main+0x358>)
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2=TIM1->ARR-pulse;
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <main+0x358>)
 80008c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c6:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <main+0x360>)
 80008c8:	6812      	ldr	r2, [r2, #0]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4a1b      	ldr	r2, [pc, #108]	; (800093c <main+0x358>)
 80008ce:	1a5b      	subs	r3, r3, r1
 80008d0:	6393      	str	r3, [r2, #56]	; 0x38
 80008d2:	e040      	b.n	8000956 <main+0x372>
 80008d4:	20000314 	.word	0x20000314
 80008d8:	20000318 	.word	0x20000318
 80008dc:	20000278 	.word	0x20000278
 80008e0:	20000018 	.word	0x20000018
 80008e4:	20000000 	.word	0x20000000
 80008e8:	2000022c 	.word	0x2000022c
 80008ec:	20000310 	.word	0x20000310
 80008f0:	20000080 	.word	0x20000080
 80008f4:	080078c0 	.word	0x080078c0
 80008f8:	080078c4 	.word	0x080078c4
 80008fc:	080078c8 	.word	0x080078c8
 8000900:	080078cc 	.word	0x080078cc
 8000904:	080078d0 	.word	0x080078d0
 8000908:	20000084 	.word	0x20000084
 800090c:	080078ec 	.word	0x080078ec
 8000910:	080078f0 	.word	0x080078f0
 8000914:	20000098 	.word	0x20000098
 8000918:	080078f8 	.word	0x080078f8
 800091c:	200000d4 	.word	0x200000d4
 8000920:	08007900 	.word	0x08007900
 8000924:	20000160 	.word	0x20000160
 8000928:	08007908 	.word	0x08007908
 800092c:	20000170 	.word	0x20000170
 8000930:	08007910 	.word	0x08007910
 8000934:	20000180 	.word	0x20000180
 8000938:	20000308 	.word	0x20000308
 800093c:	40012c00 	.word	0x40012c00
 8000940:	51eb851f 	.word	0x51eb851f
 8000944:	2000030c 	.word	0x2000030c

				//HAL_UART_Transmit(&huart2, &pulse, sizeof(pulse), HAL_MAX_DELAY);
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
 800094c:	2214      	movs	r2, #20
 800094e:	4907      	ldr	r1, [pc, #28]	; (800096c <main+0x388>)
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <main+0x38c>)
 8000952:	f003 fcbe 	bl	80042d2 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	2218      	movs	r2, #24
 800095c:	4905      	ldr	r1, [pc, #20]	; (8000974 <main+0x390>)
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <main+0x38c>)
 8000960:	f003 fcb7 	bl	80042d2 <HAL_UART_Transmit>
			newCmdReady = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 8000968:	e688      	b.n	800067c <main+0x98>
 800096a:	bf00      	nop
 800096c:	20000084 	.word	0x20000084
 8000970:	20000278 	.word	0x20000278
 8000974:	20000000 	.word	0x20000000

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	; 0x50
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0318 	add.w	r3, r7, #24
 8000982:	2238      	movs	r2, #56	; 0x38
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f005 fcc8 	bl	800631c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 ffec 	bl	8001978 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009aa:	2340      	movs	r3, #64	; 0x40
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ae:	2302      	movs	r3, #2
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b2:	2302      	movs	r3, #2
 80009b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80009ba:	2355      	movs	r3, #85	; 0x55
 80009bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009be:	2302      	movs	r3, #2
 80009c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 f876 	bl	8001ac0 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009da:	f000 f9a7 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2303      	movs	r3, #3
 80009e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2104      	movs	r1, #4
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fb7a 	bl	80020f0 <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a02:	f000 f993 	bl	8000d2c <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3750      	adds	r7, #80	; 0x50
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09c      	sub	sp, #112	; 0x70
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2234      	movs	r2, #52	; 0x34
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f005 fc66 	bl	800631c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a50:	4b4d      	ldr	r3, [pc, #308]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000a52:	4a4e      	ldr	r2, [pc, #312]	; (8000b8c <MX_TIM1_Init+0x17c>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a56:	4b4c      	ldr	r3, [pc, #304]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000a5c:	4b4a      	ldr	r3, [pc, #296]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000a5e:	2220      	movs	r2, #32
 8000a60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5312;
 8000a62:	4b49      	ldr	r3, [pc, #292]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000a64:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8000a68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6a:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a70:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a76:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a7c:	4842      	ldr	r0, [pc, #264]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000a7e:	f001 ff75 	bl	800296c <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a88:	f000 f950 	bl	8000d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a90:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a92:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a96:	4619      	mov	r1, r3
 8000a98:	483b      	ldr	r0, [pc, #236]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000a9a:	f002 fc1f 	bl	80032dc <HAL_TIM_ConfigClockSource>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000aa4:	f000 f942 	bl	8000d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aa8:	4837      	ldr	r0, [pc, #220]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000aaa:	f002 f821 	bl	8002af0 <HAL_TIM_PWM_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ab4:	f000 f93a 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ac8:	4619      	mov	r1, r3
 8000aca:	482f      	ldr	r0, [pc, #188]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000acc:	f003 fa24 	bl	8003f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000ad6:	f000 f929 	bl	8000d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ada:	2360      	movs	r3, #96	; 0x60
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1328;
 8000ade:	f44f 63a6 	mov.w	r3, #1328	; 0x530
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000afc:	2200      	movs	r2, #0
 8000afe:	4619      	mov	r1, r3
 8000b00:	4821      	ldr	r0, [pc, #132]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000b02:	f002 fad7 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000b0c:	f000 f90e 	bl	8000d2c <Error_Handler>
  }
  sConfigOC.Pulse = 3986;
 8000b10:	f640 7392 	movw	r3, #3986	; 0xf92
 8000b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481a      	ldr	r0, [pc, #104]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000b20:	f002 fac8 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000b2a:	f000 f8ff 	bl	8000d2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 8000b3a:	23cb      	movs	r3, #203	; 0xcb
 8000b3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000b6c:	f003 fa56 	bl	800401c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000b76:	f000 f8d9 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <MX_TIM1_Init+0x178>)
 8000b7c:	f000 f920 	bl	8000dc0 <HAL_TIM_MspPostInit>

}
 8000b80:	bf00      	nop
 8000b82:	3770      	adds	r7, #112	; 0x70
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000022c 	.word	0x2000022c
 8000b8c:	40012c00 	.word	0x40012c00

08000b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000b96:	4a23      	ldr	r2, [pc, #140]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd8:	4811      	ldr	r0, [pc, #68]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bda:	f003 fb2a 	bl	8004232 <HAL_UART_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000be4:	f000 f8a2 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be8:	2100      	movs	r1, #0
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bec:	f005 fa9d 	bl	800612a <HAL_UARTEx_SetTxFifoThreshold>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bf6:	f000 f899 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4808      	ldr	r0, [pc, #32]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bfe:	f005 fad2 	bl	80061a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c08:	f000 f890 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000c0e:	f005 fa53 	bl	80060b8 <HAL_UARTEx_DisableFifoMode>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c18:	f000 f888 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000278 	.word	0x20000278
 8000c24:	40004400 	.word	0x40004400

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <MX_GPIO_Init+0xac>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4a24      	ldr	r2, [pc, #144]	; (8000cd4 <MX_GPIO_Init+0xac>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_GPIO_Init+0xac>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_GPIO_Init+0xac>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <MX_GPIO_Init+0xac>)
 8000c5c:	f043 0320 	orr.w	r3, r3, #32
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_GPIO_Init+0xac>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0320 	and.w	r3, r3, #32
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_GPIO_Init+0xac>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <MX_GPIO_Init+0xac>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_GPIO_Init+0xac>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2120      	movs	r1, #32
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8e:	f000 fe5b 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <MX_GPIO_Init+0xb0>)
 8000caa:	f000 fccb 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f000 fcbc 	bl	8001644 <HAL_GPIO_Init>

}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	48000800 	.word	0x48000800

08000cdc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	uartRxReceived=1;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_UART_RxCpltCallback+0x20>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000cea:	2201      	movs	r2, #1
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <HAL_UART_RxCpltCallback+0x24>)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_UART_RxCpltCallback+0x28>)
 8000cf0:	f003 fb86 	bl	8004400 <HAL_UART_Receive_IT>

}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000310 	.word	0x20000310
 8000d00:	20000314 	.word	0x20000314
 8000d04:	20000278 	.word	0x20000278

08000d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1a:	f000 fab3 	bl	8001284 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40001000 	.word	0x40001000

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_MspInit+0x44>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d42:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <HAL_MspInit+0x44>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6613      	str	r3, [r2, #96]	; 0x60
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <HAL_MspInit+0x44>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_MspInit+0x44>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x44>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	6593      	str	r3, [r2, #88]	; 0x58
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x44>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_TIM_Base_MspInit+0x38>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d10b      	bne.n	8000daa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_TIM_Base_MspInit+0x3c>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <HAL_TIM_Base_MspInit+0x3c>)
 8000d98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <HAL_TIM_Base_MspInit+0x3c>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40012c00 	.word	0x40012c00
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <HAL_TIM_MspPostInit+0x68>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d11d      	bne.n	8000e1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_TIM_MspPostInit+0x6c>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <HAL_TIM_MspPostInit+0x6c>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_TIM_MspPostInit+0x6c>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000dfa:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000dfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e0c:	2306      	movs	r3, #6
 8000e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1a:	f000 fc13 	bl	8001644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3720      	adds	r7, #32
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40012c00 	.word	0x40012c00
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09a      	sub	sp, #104	; 0x68
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	2244      	movs	r2, #68	; 0x44
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 fa63 	bl	800631c <memset>
  if(huart->Instance==USART2)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d13e      	bne.n	8000ede <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 fb8d 	bl	800258c <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e78:	f7ff ff58 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_UART_MspInit+0xbc>)
 8000e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e80:	4a1a      	ldr	r2, [pc, #104]	; (8000eec <HAL_UART_MspInit+0xbc>)
 8000e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e86:	6593      	str	r3, [r2, #88]	; 0x58
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_UART_MspInit+0xbc>)
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_UART_MspInit+0xbc>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <HAL_UART_MspInit+0xbc>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_UART_MspInit+0xbc>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eac:	230c      	movs	r3, #12
 8000eae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f000 fbbb 	bl	8001644 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2026      	movs	r0, #38	; 0x26
 8000ed4:	f000 face 	bl	8001474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ed8:	2026      	movs	r0, #38	; 0x26
 8000eda:	f000 fae5 	bl	80014a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3768      	adds	r7, #104	; 0x68
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40004400 	.word	0x40004400
 8000eec:	40021000 	.word	0x40021000

08000ef0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f06:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <HAL_InitTick+0xcc>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	4a2c      	ldr	r2, [pc, #176]	; (8000fbc <HAL_InitTick+0xcc>)
 8000f0c:	f043 0310 	orr.w	r3, r3, #16
 8000f10:	6593      	str	r3, [r2, #88]	; 0x58
 8000f12:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <HAL_InitTick+0xcc>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	f003 0310 	and.w	r3, r3, #16
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f1e:	f107 020c 	add.w	r2, r7, #12
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 fab7 	bl	800249c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f2e:	f001 fa89 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8000f32:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <HAL_InitTick+0xd0>)
 8000f38:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3c:	0c9b      	lsrs	r3, r3, #18
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <HAL_InitTick+0xd4>)
 8000f44:	4a20      	ldr	r2, [pc, #128]	; (8000fc8 <HAL_InitTick+0xd8>)
 8000f46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_InitTick+0xd4>)
 8000f4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f50:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <HAL_InitTick+0xd4>)
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_InitTick+0xd4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_InitTick+0xd4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000f62:	4818      	ldr	r0, [pc, #96]	; (8000fc4 <HAL_InitTick+0xd4>)
 8000f64:	f001 fd02 	bl	800296c <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d11b      	bne.n	8000fae <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f76:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <HAL_InitTick+0xd4>)
 8000f78:	f001 fd50 	bl	8002a1c <HAL_TIM_Base_Start_IT>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d111      	bne.n	8000fae <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f8a:	2036      	movs	r0, #54	; 0x36
 8000f8c:	f000 fa8c 	bl	80014a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	d808      	bhi.n	8000fa8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f96:	2200      	movs	r2, #0
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	2036      	movs	r0, #54	; 0x36
 8000f9c:	f000 fa6a 	bl	8001474 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_InitTick+0xdc>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e002      	b.n	8000fae <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3730      	adds	r7, #48	; 0x30
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	431bde83 	.word	0x431bde83
 8000fc4:	20000358 	.word	0x20000358
 8000fc8:	40001000 	.word	0x40001000
 8000fcc:	200001a4 	.word	0x200001a4

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <USART2_IRQHandler+0x10>)
 800102e:	f003 fa3d 	bl	80044ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000278 	.word	0x20000278

0800103c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <TIM6_DAC_IRQHandler+0x10>)
 8001042:	f001 feb7 	bl	8002db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000358 	.word	0x20000358

08001050 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	return 1;
 8001054:	2301      	movs	r3, #1
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_kill>:

int _kill(int pid, int sig)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800106a:	f005 f92d 	bl	80062c8 <__errno>
 800106e:	4603      	mov	r3, r0
 8001070:	2216      	movs	r2, #22
 8001072:	601a      	str	r2, [r3, #0]
	return -1;
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_exit>:

void _exit (int status)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffe7 	bl	8001060 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001092:	e7fe      	b.n	8001092 <_exit+0x12>

08001094 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e00a      	b.n	80010bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010a6:	f3af 8000 	nop.w
 80010aa:	4601      	mov	r1, r0
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60ba      	str	r2, [r7, #8]
 80010b2:	b2ca      	uxtb	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbf0      	blt.n	80010a6 <_read+0x12>
	}

return len;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e009      	b.n	80010f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbf1      	blt.n	80010e0 <_write+0x12>
	}
	return len;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_close>:

int _close(int file)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
	return -1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112e:	605a      	str	r2, [r3, #4]
	return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_isatty>:

int _isatty(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	return 1;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
	return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f005 f892 	bl	80062c8 <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20008000 	.word	0x20008000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	200003a4 	.word	0x200003a4
 80011d8:	200003c0 	.word	0x200003c0

080011dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001202:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <LoopForever+0x6>)
  ldr r1, =_edata
 8001206:	490e      	ldr	r1, [pc, #56]	; (8001240 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001208:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <LoopForever+0xe>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <LoopForever+0x12>)
  ldr r4, =_ebss
 800121c:	4c0b      	ldr	r4, [pc, #44]	; (800124c <LoopForever+0x16>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800122a:	f7ff ffd7 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f005 f851 	bl	80062d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001232:	f7ff f9d7 	bl	80005e4 <main>

08001236 <LoopForever>:

LoopForever:
    b LoopForever
 8001236:	e7fe      	b.n	8001236 <LoopForever>
  ldr   r0, =_estack
 8001238:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001244:	08007bb4 	.word	0x08007bb4
  ldr r2, =_sbss
 8001248:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800124c:	200003bc 	.word	0x200003bc

08001250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC1_2_IRQHandler>

08001252 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125c:	2003      	movs	r0, #3
 800125e:	f000 f8fe 	bl	800145e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001262:	200f      	movs	r0, #15
 8001264:	f7ff fe44 	bl	8000ef0 <HAL_InitTick>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	e001      	b.n	8001278 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001274:	f7ff fd60 	bl	8000d38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001278:	79fb      	ldrb	r3, [r7, #7]

}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x1c>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_IncTick+0x20>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4413      	add	r3, r2
 8001292:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <HAL_IncTick+0x1c>)
 8001294:	6013      	str	r3, [r2, #0]
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	200003a8 	.word	0x200003a8
 80012a4:	200001a8 	.word	0x200001a8

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200003a8 	.word	0x200003a8

080012c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff ffee 	bl	80012a8 <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d004      	beq.n	80012e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_Delay+0x40>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e4:	bf00      	nop
 80012e6:	f7ff ffdf 	bl	80012a8 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d8f7      	bhi.n	80012e6 <HAL_Delay+0x26>
  {
  }
}
 80012f6:	bf00      	nop
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200001a8 	.word	0x200001a8

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <__NVIC_EnableIRQ+0x38>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff4c 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001482:	f7ff ff63 	bl	800134c <__NVIC_GetPriorityGrouping>
 8001486:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	6978      	ldr	r0, [r7, #20]
 800148e:	f7ff ffb3 	bl	80013f8 <NVIC_EncodePriority>
 8001492:	4602      	mov	r2, r0
 8001494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff82 	bl	80013a4 <__NVIC_SetPriority>
}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff56 	bl	8001368 <__NVIC_EnableIRQ>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d005      	beq.n	80014e8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2204      	movs	r2, #4
 80014e0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	73fb      	strb	r3, [r7, #15]
 80014e6:	e037      	b.n	8001558 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 020e 	bic.w	r2, r2, #14
 80014f6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001506:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	2101      	movs	r1, #1
 8001526:	fa01 f202 	lsl.w	r2, r1, r2
 800152a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001534:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00c      	beq.n	8001558 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800154c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001556:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d00d      	beq.n	80015aa <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2204      	movs	r2, #4
 8001592:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e047      	b.n	800163a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 020e 	bic.w	r2, r2, #14
 80015b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0201 	bic.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f003 021f 	and.w	r2, r3, #31
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00c      	beq.n	800161a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800160e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001618:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	4798      	blx	r3
    }
  }
  return status;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001652:	e15a      	b.n	800190a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2101      	movs	r1, #1
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 814c 	beq.w	8001904 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b01      	cmp	r3, #1
 8001676:	d005      	beq.n	8001684 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001680:	2b02      	cmp	r3, #2
 8001682:	d130      	bne.n	80016e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ba:	2201      	movs	r2, #1
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f003 0201 	and.w	r2, r3, #1
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d017      	beq.n	8001722 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	2203      	movs	r2, #3
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d123      	bne.n	8001776 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	08da      	lsrs	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3208      	adds	r2, #8
 8001736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	6939      	ldr	r1, [r7, #16]
 8001772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0203 	and.w	r2, r3, #3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 80a6 	beq.w	8001904 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b8:	4b5b      	ldr	r3, [pc, #364]	; (8001928 <HAL_GPIO_Init+0x2e4>)
 80017ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017bc:	4a5a      	ldr	r2, [pc, #360]	; (8001928 <HAL_GPIO_Init+0x2e4>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6613      	str	r3, [r2, #96]	; 0x60
 80017c4:	4b58      	ldr	r3, [pc, #352]	; (8001928 <HAL_GPIO_Init+0x2e4>)
 80017c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d0:	4a56      	ldr	r2, [pc, #344]	; (800192c <HAL_GPIO_Init+0x2e8>)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	220f      	movs	r2, #15
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017fa:	d01f      	beq.n	800183c <HAL_GPIO_Init+0x1f8>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a4c      	ldr	r2, [pc, #304]	; (8001930 <HAL_GPIO_Init+0x2ec>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d019      	beq.n	8001838 <HAL_GPIO_Init+0x1f4>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a4b      	ldr	r2, [pc, #300]	; (8001934 <HAL_GPIO_Init+0x2f0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d013      	beq.n	8001834 <HAL_GPIO_Init+0x1f0>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a4a      	ldr	r2, [pc, #296]	; (8001938 <HAL_GPIO_Init+0x2f4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d00d      	beq.n	8001830 <HAL_GPIO_Init+0x1ec>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a49      	ldr	r2, [pc, #292]	; (800193c <HAL_GPIO_Init+0x2f8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d007      	beq.n	800182c <HAL_GPIO_Init+0x1e8>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a48      	ldr	r2, [pc, #288]	; (8001940 <HAL_GPIO_Init+0x2fc>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_GPIO_Init+0x1e4>
 8001824:	2305      	movs	r3, #5
 8001826:	e00a      	b.n	800183e <HAL_GPIO_Init+0x1fa>
 8001828:	2306      	movs	r3, #6
 800182a:	e008      	b.n	800183e <HAL_GPIO_Init+0x1fa>
 800182c:	2304      	movs	r3, #4
 800182e:	e006      	b.n	800183e <HAL_GPIO_Init+0x1fa>
 8001830:	2303      	movs	r3, #3
 8001832:	e004      	b.n	800183e <HAL_GPIO_Init+0x1fa>
 8001834:	2302      	movs	r3, #2
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x1fa>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <HAL_GPIO_Init+0x1fa>
 800183c:	2300      	movs	r3, #0
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	f002 0203 	and.w	r2, r2, #3
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	4093      	lsls	r3, r2
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800184e:	4937      	ldr	r1, [pc, #220]	; (800192c <HAL_GPIO_Init+0x2e8>)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800185c:	4b39      	ldr	r3, [pc, #228]	; (8001944 <HAL_GPIO_Init+0x300>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001880:	4a30      	ldr	r2, [pc, #192]	; (8001944 <HAL_GPIO_Init+0x300>)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001886:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <HAL_GPIO_Init+0x300>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018aa:	4a26      	ldr	r2, [pc, #152]	; (8001944 <HAL_GPIO_Init+0x300>)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018b0:	4b24      	ldr	r3, [pc, #144]	; (8001944 <HAL_GPIO_Init+0x300>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018d4:	4a1b      	ldr	r2, [pc, #108]	; (8001944 <HAL_GPIO_Init+0x300>)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018da:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_GPIO_Init+0x300>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018fe:	4a11      	ldr	r2, [pc, #68]	; (8001944 <HAL_GPIO_Init+0x300>)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	f47f ae9d 	bne.w	8001654 <HAL_GPIO_Init+0x10>
  }
}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000
 8001930:	48000400 	.word	0x48000400
 8001934:	48000800 	.word	0x48000800
 8001938:	48000c00 	.word	0x48000c00
 800193c:	48001000 	.word	0x48001000
 8001940:	48001400 	.word	0x48001400
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001958:	787b      	ldrb	r3, [r7, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001964:	e002      	b.n	800196c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d141      	bne.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001986:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800198e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001992:	d131      	bne.n	80019f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001994:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800199a:	4a46      	ldr	r2, [pc, #280]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a4:	4b43      	ldr	r3, [pc, #268]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ac:	4a41      	ldr	r2, [pc, #260]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019b4:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2232      	movs	r2, #50	; 0x32
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	4a3f      	ldr	r2, [pc, #252]	; (8001abc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	0c9b      	lsrs	r3, r3, #18
 80019c6:	3301      	adds	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ca:	e002      	b.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d2:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019de:	d102      	bne.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f2      	bne.n	80019cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e6:	4b33      	ldr	r3, [pc, #204]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f2:	d158      	bne.n	8001aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e057      	b.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019f8:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019fe:	4a2d      	ldr	r2, [pc, #180]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a08:	e04d      	b.n	8001aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a10:	d141      	bne.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a12:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1e:	d131      	bne.n	8001a84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a26:	4a23      	ldr	r2, [pc, #140]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a30:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a38:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2232      	movs	r2, #50	; 0x32
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a50:	0c9b      	lsrs	r3, r3, #18
 8001a52:	3301      	adds	r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a56:	e002      	b.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6a:	d102      	bne.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f2      	bne.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7e:	d112      	bne.n	8001aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e011      	b.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a94:	e007      	b.n	8001aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	200001a0 	.word	0x200001a0
 8001abc:	431bde83 	.word	0x431bde83

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e306      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d075      	beq.n	8001bca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ade:	4b97      	ldr	r3, [pc, #604]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae8:	4b94      	ldr	r3, [pc, #592]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	d102      	bne.n	8001afe <HAL_RCC_OscConfig+0x3e>
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d002      	beq.n	8001b04 <HAL_RCC_OscConfig+0x44>
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d10b      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	4b8d      	ldr	r3, [pc, #564]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d05b      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x108>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d157      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e2e1      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b24:	d106      	bne.n	8001b34 <HAL_RCC_OscConfig+0x74>
 8001b26:	4b85      	ldr	r3, [pc, #532]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a84      	ldr	r2, [pc, #528]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e01d      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x98>
 8001b3e:	4b7f      	ldr	r3, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a7e      	ldr	r2, [pc, #504]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b7c      	ldr	r3, [pc, #496]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a7b      	ldr	r2, [pc, #492]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b58:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a77      	ldr	r2, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b75      	ldr	r3, [pc, #468]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a74      	ldr	r2, [pc, #464]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d013      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff fb96 	bl	80012a8 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff fb92 	bl	80012a8 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e2a6      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b92:	4b6a      	ldr	r3, [pc, #424]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0xc0>
 8001b9e:	e014      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fb82 	bl	80012a8 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fb7e 	bl	80012a8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e292      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bba:	4b60      	ldr	r3, [pc, #384]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xe8>
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d075      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd6:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be0:	4b56      	ldr	r3, [pc, #344]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b0c      	cmp	r3, #12
 8001bee:	d102      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x136>
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d002      	beq.n	8001bfc <HAL_RCC_OscConfig+0x13c>
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d11f      	bne.n	8001c3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bfc:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_OscConfig+0x154>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e265      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	061b      	lsls	r3, r3, #24
 8001c22:	4946      	ldr	r1, [pc, #280]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c28:	4b45      	ldr	r3, [pc, #276]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f95f 	bl	8000ef0 <HAL_InitTick>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d043      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e251      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d023      	beq.n	8001c8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c44:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a3c      	ldr	r2, [pc, #240]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff fb2a 	bl	80012a8 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c58:	f7ff fb26 	bl	80012a8 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e23a      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c6a:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c76:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	061b      	lsls	r3, r3, #24
 8001c84:	492d      	ldr	r1, [pc, #180]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
 8001c8a:	e01a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a2a      	ldr	r2, [pc, #168]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff fb06 	bl	80012a8 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fb02 	bl	80012a8 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e216      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x1e0>
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d041      	beq.n	8001d52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cdc:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fadf 	bl	80012a8 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cee:	f7ff fadb 	bl	80012a8 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1ef      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0ef      	beq.n	8001cee <HAL_RCC_OscConfig+0x22e>
 8001d0e:	e020      	b.n	8001d52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d16:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001d18:	f023 0301 	bic.w	r3, r3, #1
 8001d1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d20:	f7ff fac2 	bl	80012a8 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d26:	e00d      	b.n	8001d44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff fabe 	bl	80012a8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d906      	bls.n	8001d44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1d2      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	200001a4 	.word	0x200001a4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d44:	4b8c      	ldr	r3, [pc, #560]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1ea      	bne.n	8001d28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80a6 	beq.w	8001eac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d60:	2300      	movs	r3, #0
 8001d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d64:	4b84      	ldr	r3, [pc, #528]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_OscConfig+0x2b4>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x2b6>
 8001d74:	2300      	movs	r3, #0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00d      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b7f      	ldr	r3, [pc, #508]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	4a7e      	ldr	r2, [pc, #504]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6593      	str	r3, [r2, #88]	; 0x58
 8001d86:	4b7c      	ldr	r3, [pc, #496]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d92:	2301      	movs	r3, #1
 8001d94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d96:	4b79      	ldr	r3, [pc, #484]	; (8001f7c <HAL_RCC_OscConfig+0x4bc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d118      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da2:	4b76      	ldr	r3, [pc, #472]	; (8001f7c <HAL_RCC_OscConfig+0x4bc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a75      	ldr	r2, [pc, #468]	; (8001f7c <HAL_RCC_OscConfig+0x4bc>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dae:	f7ff fa7b 	bl	80012a8 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db6:	f7ff fa77 	bl	80012a8 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e18b      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc8:	4b6c      	ldr	r3, [pc, #432]	; (8001f7c <HAL_RCC_OscConfig+0x4bc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d108      	bne.n	8001dee <HAL_RCC_OscConfig+0x32e>
 8001ddc:	4b66      	ldr	r3, [pc, #408]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	4a65      	ldr	r2, [pc, #404]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dec:	e024      	b.n	8001e38 <HAL_RCC_OscConfig+0x378>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b05      	cmp	r3, #5
 8001df4:	d110      	bne.n	8001e18 <HAL_RCC_OscConfig+0x358>
 8001df6:	4b60      	ldr	r3, [pc, #384]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfc:	4a5e      	ldr	r2, [pc, #376]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e06:	4b5c      	ldr	r3, [pc, #368]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0c:	4a5a      	ldr	r2, [pc, #360]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e16:	e00f      	b.n	8001e38 <HAL_RCC_OscConfig+0x378>
 8001e18:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1e:	4a56      	ldr	r2, [pc, #344]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e28:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2e:	4a52      	ldr	r2, [pc, #328]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d016      	beq.n	8001e6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff fa32 	bl	80012a8 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7ff fa2e 	bl	80012a8 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e140      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5e:	4b46      	ldr	r3, [pc, #280]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0ed      	beq.n	8001e48 <HAL_RCC_OscConfig+0x388>
 8001e6c:	e015      	b.n	8001e9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fa1b 	bl	80012a8 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7ff fa17 	bl	80012a8 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e129      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e8c:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1ed      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e9a:	7ffb      	ldrb	r3, [r7, #31]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea0:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	4a34      	ldr	r2, [pc, #208]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d03c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01c      	beq.n	8001efa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ec6:	4a2c      	ldr	r2, [pc, #176]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff f9ea 	bl	80012a8 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed8:	f7ff f9e6 	bl	80012a8 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e0fa      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eea:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ef      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x418>
 8001ef8:	e01b      	b.n	8001f32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001efa:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0a:	f7ff f9cd 	bl	80012a8 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f12:	f7ff f9c9 	bl	80012a8 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0dd      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1ef      	bne.n	8001f12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 80d1 	beq.w	80020de <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b0c      	cmp	r3, #12
 8001f46:	f000 808b 	beq.w	8002060 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d15e      	bne.n	8002010 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <HAL_RCC_OscConfig+0x4b8>)
 8001f58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7ff f9a3 	bl	80012a8 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f64:	e00c      	b.n	8001f80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff f99f 	bl	80012a8 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d905      	bls.n	8001f80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0b3      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f80:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1ec      	bne.n	8001f66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f8c:	4b56      	ldr	r3, [pc, #344]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	4b56      	ldr	r3, [pc, #344]	; (80020ec <HAL_RCC_OscConfig+0x62c>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6a11      	ldr	r1, [r2, #32]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f9c:	3a01      	subs	r2, #1
 8001f9e:	0112      	lsls	r2, r2, #4
 8001fa0:	4311      	orrs	r1, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fa6:	0212      	lsls	r2, r2, #8
 8001fa8:	4311      	orrs	r1, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fae:	0852      	lsrs	r2, r2, #1
 8001fb0:	3a01      	subs	r2, #1
 8001fb2:	0552      	lsls	r2, r2, #21
 8001fb4:	4311      	orrs	r1, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fba:	0852      	lsrs	r2, r2, #1
 8001fbc:	3a01      	subs	r2, #1
 8001fbe:	0652      	lsls	r2, r2, #25
 8001fc0:	4311      	orrs	r1, r2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fc6:	06d2      	lsls	r2, r2, #27
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	4947      	ldr	r1, [pc, #284]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd0:	4b45      	ldr	r3, [pc, #276]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a44      	ldr	r2, [pc, #272]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8001fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fdc:	4b42      	ldr	r3, [pc, #264]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4a41      	ldr	r2, [pc, #260]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8001fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f95e 	bl	80012a8 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff f95a 	bl	80012a8 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e06e      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002002:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x530>
 800200e:	e066      	b.n	80020de <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b35      	ldr	r3, [pc, #212]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a34      	ldr	r2, [pc, #208]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8002016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800201c:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4a31      	ldr	r2, [pc, #196]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002028:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4a2e      	ldr	r2, [pc, #184]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 800202e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002036:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff f936 	bl	80012a8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002040:	f7ff f932 	bl	80012a8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e046      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002052:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x580>
 800205e:	e03e      	b.n	80020de <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e039      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	429a      	cmp	r2, r3
 800207e:	d12c      	bne.n	80020da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	3b01      	subs	r3, #1
 800208c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d123      	bne.n	80020da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d11b      	bne.n	80020da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d113      	bne.n	80020da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	085b      	lsrs	r3, r3, #1
 80020be:	3b01      	subs	r3, #1
 80020c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d109      	bne.n	80020da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	3b01      	subs	r3, #1
 80020d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	019f800c 	.word	0x019f800c

080020f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e11e      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002108:	4b91      	ldr	r3, [pc, #580]	; (8002350 <HAL_RCC_ClockConfig+0x260>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d910      	bls.n	8002138 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b8e      	ldr	r3, [pc, #568]	; (8002350 <HAL_RCC_ClockConfig+0x260>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 020f 	bic.w	r2, r3, #15
 800211e:	498c      	ldr	r1, [pc, #560]	; (8002350 <HAL_RCC_ClockConfig+0x260>)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b8a      	ldr	r3, [pc, #552]	; (8002350 <HAL_RCC_ClockConfig+0x260>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e106      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d073      	beq.n	800222c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d129      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214c:	4b81      	ldr	r3, [pc, #516]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0f4      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800215c:	f000 f9d0 	bl	8002500 <RCC_GetSysClockFreqFromPLLSource>
 8002160:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4a7c      	ldr	r2, [pc, #496]	; (8002358 <HAL_RCC_ClockConfig+0x268>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d93f      	bls.n	80021ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800216a:	4b7a      	ldr	r3, [pc, #488]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800217e:	2b00      	cmp	r3, #0
 8002180:	d033      	beq.n	80021ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002186:	2b00      	cmp	r3, #0
 8002188:	d12f      	bne.n	80021ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800218a:	4b72      	ldr	r3, [pc, #456]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002192:	4a70      	ldr	r2, [pc, #448]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002198:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e024      	b.n	80021ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a8:	4b6a      	ldr	r3, [pc, #424]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d109      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0c6      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b8:	4b66      	ldr	r3, [pc, #408]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0be      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021c8:	f000 f8ce 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4a61      	ldr	r2, [pc, #388]	; (8002358 <HAL_RCC_ClockConfig+0x268>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d909      	bls.n	80021ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021d6:	4b5f      	ldr	r3, [pc, #380]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021de:	4a5d      	ldr	r2, [pc, #372]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 80021e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b5a      	ldr	r3, [pc, #360]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4957      	ldr	r1, [pc, #348]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021fc:	f7ff f854 	bl	80012a8 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7ff f850 	bl	80012a8 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e095      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b4e      	ldr	r3, [pc, #312]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d023      	beq.n	8002280 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002244:	4b43      	ldr	r3, [pc, #268]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a42      	ldr	r2, [pc, #264]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 800224a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800224e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800225c:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002264:	4a3b      	ldr	r2, [pc, #236]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002266:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800226a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4936      	ldr	r1, [pc, #216]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
 800227e:	e008      	b.n	8002292 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b80      	cmp	r3, #128	; 0x80
 8002284:	d105      	bne.n	8002292 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002286:	4b33      	ldr	r3, [pc, #204]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	4a32      	ldr	r2, [pc, #200]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 800228c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002290:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002292:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <HAL_RCC_ClockConfig+0x260>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d21d      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_RCC_ClockConfig+0x260>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 020f 	bic.w	r2, r3, #15
 80022a8:	4929      	ldr	r1, [pc, #164]	; (8002350 <HAL_RCC_ClockConfig+0x260>)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022b0:	f7fe fffa 	bl	80012a8 <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b8:	f7fe fff6 	bl	80012a8 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e03b      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_RCC_ClockConfig+0x260>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d1ed      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4917      	ldr	r1, [pc, #92]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002306:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	490f      	ldr	r1, [pc, #60]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800231a:	f000 f825 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 800231e:	4602      	mov	r2, r0
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	490c      	ldr	r1, [pc, #48]	; (800235c <HAL_RCC_ClockConfig+0x26c>)
 800232c:	5ccb      	ldrb	r3, [r1, r3]
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_RCC_ClockConfig+0x270>)
 8002338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_RCC_ClockConfig+0x274>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fdd6 	bl	8000ef0 <HAL_InitTick>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40022000 	.word	0x40022000
 8002354:	40021000 	.word	0x40021000
 8002358:	04c4b400 	.word	0x04c4b400
 800235c:	0800791c 	.word	0x0800791c
 8002360:	200001a0 	.word	0x200001a0
 8002364:	200001a4 	.word	0x200001a4

08002368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800236e:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b04      	cmp	r3, #4
 8002378:	d102      	bne.n	8002380 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800237a:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_GetSysClockFreq+0xbc>)
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	e047      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002380:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d102      	bne.n	8002392 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800238c:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_GetSysClockFreq+0xc0>)
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	e03e      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002392:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d136      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800239e:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	3301      	adds	r3, #1
 80023b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023bc:	4a1a      	ldr	r2, [pc, #104]	; (8002428 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c6:	68d2      	ldr	r2, [r2, #12]
 80023c8:	0a12      	lsrs	r2, r2, #8
 80023ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	617b      	str	r3, [r7, #20]
      break;
 80023d4:	e00c      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023d6:	4a13      	ldr	r2, [pc, #76]	; (8002424 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	4a10      	ldr	r2, [pc, #64]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e0:	68d2      	ldr	r2, [r2, #12]
 80023e2:	0a12      	lsrs	r2, r2, #8
 80023e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023e8:	fb02 f303 	mul.w	r3, r2, r3
 80023ec:	617b      	str	r3, [r7, #20]
      break;
 80023ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0e5b      	lsrs	r3, r3, #25
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	3301      	adds	r3, #1
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	e001      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002410:	693b      	ldr	r3, [r7, #16]
}
 8002412:	4618      	mov	r0, r3
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	00f42400 	.word	0x00f42400
 8002428:	016e3600 	.word	0x016e3600

0800242c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_RCC_GetHCLKFreq+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	200001a0 	.word	0x200001a0

08002444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002448:	f7ff fff0 	bl	800242c <HAL_RCC_GetHCLKFreq>
 800244c:	4602      	mov	r2, r0
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4904      	ldr	r1, [pc, #16]	; (800246c <HAL_RCC_GetPCLK1Freq+0x28>)
 800245a:	5ccb      	ldrb	r3, [r1, r3]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	0800792c 	.word	0x0800792c

08002470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002474:	f7ff ffda 	bl	800242c <HAL_RCC_GetHCLKFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	0adb      	lsrs	r3, r3, #11
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4904      	ldr	r1, [pc, #16]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002486:	5ccb      	ldrb	r3, [r1, r3]
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	0800792c 	.word	0x0800792c

0800249c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	220f      	movs	r2, #15
 80024aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_RCC_GetClockConfig+0x5c>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0203 	and.w	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_RCC_GetClockConfig+0x5c>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_RCC_GetClockConfig+0x5c>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_RCC_GetClockConfig+0x5c>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	08db      	lsrs	r3, r3, #3
 80024d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_RCC_GetClockConfig+0x60>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 020f 	and.w	r2, r3, #15
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	601a      	str	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40022000 	.word	0x40022000

08002500 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	3301      	adds	r3, #1
 800251c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d10c      	bne.n	800253e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002524:	4a17      	ldr	r2, [pc, #92]	; (8002584 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	4a14      	ldr	r2, [pc, #80]	; (8002580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800252e:	68d2      	ldr	r2, [r2, #12]
 8002530:	0a12      	lsrs	r2, r2, #8
 8002532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	617b      	str	r3, [r7, #20]
    break;
 800253c:	e00c      	b.n	8002558 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800253e:	4a12      	ldr	r2, [pc, #72]	; (8002588 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002548:	68d2      	ldr	r2, [r2, #12]
 800254a:	0a12      	lsrs	r2, r2, #8
 800254c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	617b      	str	r3, [r7, #20]
    break;
 8002556:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0e5b      	lsrs	r3, r3, #25
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	3301      	adds	r3, #1
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002572:	687b      	ldr	r3, [r7, #4]
}
 8002574:	4618      	mov	r0, r3
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	40021000 	.word	0x40021000
 8002584:	016e3600 	.word	0x016e3600
 8002588:	00f42400 	.word	0x00f42400

0800258c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002594:	2300      	movs	r3, #0
 8002596:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002598:	2300      	movs	r3, #0
 800259a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 8098 	beq.w	80026da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ae:	4b43      	ldr	r3, [pc, #268]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10d      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	4b40      	ldr	r3, [pc, #256]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	4a3f      	ldr	r2, [pc, #252]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6593      	str	r3, [r2, #88]	; 0x58
 80025c6:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d2:	2301      	movs	r3, #1
 80025d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d6:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a39      	ldr	r2, [pc, #228]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025e2:	f7fe fe61 	bl	80012a8 <HAL_GetTick>
 80025e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025e8:	e009      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ea:	f7fe fe5d 	bl	80012a8 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d902      	bls.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	74fb      	strb	r3, [r7, #19]
        break;
 80025fc:	e005      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025fe:	4b30      	ldr	r3, [pc, #192]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0ef      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d159      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002610:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01e      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	429a      	cmp	r2, r3
 800262a:	d019      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800262c:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002636:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002638:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264e:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002658:	4a18      	ldr	r2, [pc, #96]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d016      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fe1d 	bl	80012a8 <HAL_GetTick>
 800266e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002670:	e00b      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fe19 	bl	80012a8 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d902      	bls.n	800268a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	74fb      	strb	r3, [r7, #19]
            break;
 8002688:	e006      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ec      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10b      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	4903      	ldr	r1, [pc, #12]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026b4:	e008      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	74bb      	strb	r3, [r7, #18]
 80026ba:	e005      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c8:	7c7b      	ldrb	r3, [r7, #17]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d105      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ce:	4ba6      	ldr	r3, [pc, #664]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	4aa5      	ldr	r2, [pc, #660]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e6:	4ba0      	ldr	r3, [pc, #640]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ec:	f023 0203 	bic.w	r2, r3, #3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	499c      	ldr	r1, [pc, #624]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002708:	4b97      	ldr	r3, [pc, #604]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	f023 020c 	bic.w	r2, r3, #12
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	4994      	ldr	r1, [pc, #592]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800272a:	4b8f      	ldr	r3, [pc, #572]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002730:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	498b      	ldr	r1, [pc, #556]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800274c:	4b86      	ldr	r3, [pc, #536]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	4983      	ldr	r1, [pc, #524]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800276e:	4b7e      	ldr	r3, [pc, #504]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002774:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	497a      	ldr	r1, [pc, #488]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002790:	4b75      	ldr	r3, [pc, #468]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	4972      	ldr	r1, [pc, #456]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027b2:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	4969      	ldr	r1, [pc, #420]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027d4:	4b64      	ldr	r3, [pc, #400]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4961      	ldr	r1, [pc, #388]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027f6:	4b5c      	ldr	r3, [pc, #368]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	4958      	ldr	r1, [pc, #352]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002818:	4b53      	ldr	r3, [pc, #332]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002826:	4950      	ldr	r1, [pc, #320]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002836:	d105      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a4a      	ldr	r2, [pc, #296]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002842:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800284c:	2b00      	cmp	r3, #0
 800284e:	d015      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002850:	4b45      	ldr	r3, [pc, #276]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	4942      	ldr	r1, [pc, #264]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286e:	d105      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002870:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a3c      	ldr	r2, [pc, #240]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002888:	4b37      	ldr	r3, [pc, #220]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4934      	ldr	r1, [pc, #208]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a6:	d105      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a8:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a2e      	ldr	r2, [pc, #184]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d015      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028c0:	4b29      	ldr	r3, [pc, #164]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ce:	4926      	ldr	r1, [pc, #152]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028de:	d105      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e0:	4b21      	ldr	r3, [pc, #132]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a20      	ldr	r2, [pc, #128]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d015      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	4918      	ldr	r1, [pc, #96]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002916:	d105      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a12      	ldr	r2, [pc, #72]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002922:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d015      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	490a      	ldr	r1, [pc, #40]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800294e:	d105      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800295c:	7cbb      	ldrb	r3, [r7, #18]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000

0800296c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e049      	b.n	8002a12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7fe f9f4 	bl	8000d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f000 fdb8 	bl	8003520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d001      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e04a      	b.n	8002aca <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d018      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x6c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5e:	d013      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x6c>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <HAL_TIM_Base_Start_IT+0xc0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00e      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x6c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d009      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x6c>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d004      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x6c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d115      	bne.n	8002ab4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	4b17      	ldr	r3, [pc, #92]	; (8002aec <HAL_TIM_Base_Start_IT+0xd0>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d015      	beq.n	8002ac6 <HAL_TIM_Base_Start_IT+0xaa>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d011      	beq.n	8002ac6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	e008      	b.n	8002ac6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e000      	b.n	8002ac8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000800 	.word	0x40000800
 8002ae4:	40013400 	.word	0x40013400
 8002ae8:	40014000 	.word	0x40014000
 8002aec:	00010007 	.word	0x00010007

08002af0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e049      	b.n	8002b96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f841 	bl	8002b9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f000 fcf6 	bl	8003520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <HAL_TIM_PWM_Start+0x24>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e03c      	b.n	8002c52 <HAL_TIM_PWM_Start+0x9e>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d109      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0x3e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	bf14      	ite	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2300      	moveq	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	e02f      	b.n	8002c52 <HAL_TIM_PWM_Start+0x9e>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d109      	bne.n	8002c0c <HAL_TIM_PWM_Start+0x58>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e022      	b.n	8002c52 <HAL_TIM_PWM_Start+0x9e>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d109      	bne.n	8002c26 <HAL_TIM_PWM_Start+0x72>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	bf14      	ite	ne
 8002c1e:	2301      	movne	r3, #1
 8002c20:	2300      	moveq	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	e015      	b.n	8002c52 <HAL_TIM_PWM_Start+0x9e>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d109      	bne.n	8002c40 <HAL_TIM_PWM_Start+0x8c>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e008      	b.n	8002c52 <HAL_TIM_PWM_Start+0x9e>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	bf14      	ite	ne
 8002c4c:	2301      	movne	r3, #1
 8002c4e:	2300      	moveq	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e097      	b.n	8002d8a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d104      	bne.n	8002c6a <HAL_TIM_PWM_Start+0xb6>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c68:	e023      	b.n	8002cb2 <HAL_TIM_PWM_Start+0xfe>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d104      	bne.n	8002c7a <HAL_TIM_PWM_Start+0xc6>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c78:	e01b      	b.n	8002cb2 <HAL_TIM_PWM_Start+0xfe>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d104      	bne.n	8002c8a <HAL_TIM_PWM_Start+0xd6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c88:	e013      	b.n	8002cb2 <HAL_TIM_PWM_Start+0xfe>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_PWM_Start+0xe6>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c98:	e00b      	b.n	8002cb2 <HAL_TIM_PWM_Start+0xfe>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b10      	cmp	r3, #16
 8002c9e:	d104      	bne.n	8002caa <HAL_TIM_PWM_Start+0xf6>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca8:	e003      	b.n	8002cb2 <HAL_TIM_PWM_Start+0xfe>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2202      	movs	r2, #2
 8002cae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	6839      	ldr	r1, [r7, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f001 f852 	bl	8003d64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a33      	ldr	r2, [pc, #204]	; (8002d94 <HAL_TIM_PWM_Start+0x1e0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0x13e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a32      	ldr	r2, [pc, #200]	; (8002d98 <HAL_TIM_PWM_Start+0x1e4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00e      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0x13e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a30      	ldr	r2, [pc, #192]	; (8002d9c <HAL_TIM_PWM_Start+0x1e8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d009      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0x13e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2f      	ldr	r2, [pc, #188]	; (8002da0 <HAL_TIM_PWM_Start+0x1ec>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d004      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0x13e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a2d      	ldr	r2, [pc, #180]	; (8002da4 <HAL_TIM_PWM_Start+0x1f0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_PWM_Start+0x142>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_TIM_PWM_Start+0x144>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d007      	beq.n	8002d0c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <HAL_TIM_PWM_Start+0x1e0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d018      	beq.n	8002d48 <HAL_TIM_PWM_Start+0x194>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1e:	d013      	beq.n	8002d48 <HAL_TIM_PWM_Start+0x194>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a20      	ldr	r2, [pc, #128]	; (8002da8 <HAL_TIM_PWM_Start+0x1f4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00e      	beq.n	8002d48 <HAL_TIM_PWM_Start+0x194>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1f      	ldr	r2, [pc, #124]	; (8002dac <HAL_TIM_PWM_Start+0x1f8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d009      	beq.n	8002d48 <HAL_TIM_PWM_Start+0x194>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <HAL_TIM_PWM_Start+0x1e4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d004      	beq.n	8002d48 <HAL_TIM_PWM_Start+0x194>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_TIM_PWM_Start+0x1e8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d115      	bne.n	8002d74 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <HAL_TIM_PWM_Start+0x1fc>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d015      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x1d2>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d60:	d011      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d72:	e008      	b.n	8002d86 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e000      	b.n	8002d88 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40013400 	.word	0x40013400
 8002d9c:	40014000 	.word	0x40014000
 8002da0:	40014400 	.word	0x40014400
 8002da4:	40014800 	.word	0x40014800
 8002da8:	40000400 	.word	0x40000400
 8002dac:	40000800 	.word	0x40000800
 8002db0:	00010007 	.word	0x00010007

08002db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d122      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d11b      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0202 	mvn.w	r2, #2
 8002de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fb74 	bl	80034e4 <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fb66 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fb77 	bl	80034f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d122      	bne.n	8002e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d11b      	bne.n	8002e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0204 	mvn.w	r2, #4
 8002e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fb4a 	bl	80034e4 <HAL_TIM_IC_CaptureCallback>
 8002e50:	e005      	b.n	8002e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fb3c 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fb4d 	bl	80034f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d122      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d11b      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0208 	mvn.w	r2, #8
 8002e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fb20 	bl	80034e4 <HAL_TIM_IC_CaptureCallback>
 8002ea4:	e005      	b.n	8002eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fb12 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fb23 	bl	80034f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d122      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d11b      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0210 	mvn.w	r2, #16
 8002edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 faf6 	bl	80034e4 <HAL_TIM_IC_CaptureCallback>
 8002ef8:	e005      	b.n	8002f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fae8 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 faf9 	bl	80034f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d10e      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d107      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0201 	mvn.w	r2, #1
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fd fee8 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b80      	cmp	r3, #128	; 0x80
 8002f44:	d10e      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f50:	2b80      	cmp	r3, #128	; 0x80
 8002f52:	d107      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f001 f906 	bl	8004170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f72:	d10e      	bne.n	8002f92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7e:	2b80      	cmp	r3, #128	; 0x80
 8002f80:	d107      	bne.n	8002f92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f001 f8f9 	bl	8004184 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d10e      	bne.n	8002fbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b40      	cmp	r3, #64	; 0x40
 8002fac:	d107      	bne.n	8002fbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 faa7 	bl	800350c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d10e      	bne.n	8002fea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d107      	bne.n	8002fea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f06f 0220 	mvn.w	r2, #32
 8002fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f001 f8b9 	bl	800415c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff8:	d10f      	bne.n	800301a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003008:	d107      	bne.n	800301a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f001 f8bf 	bl	8004198 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003024:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003028:	d10f      	bne.n	800304a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003034:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003038:	d107      	bne.n	800304a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f001 f8b1 	bl	80041ac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003058:	d10f      	bne.n	800307a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003068:	d107      	bne.n	800307a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f001 f8a3 	bl	80041c0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003084:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003088:	d10f      	bne.n	80030aa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003094:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003098:	d107      	bne.n	80030aa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80030a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f001 f895 	bl	80041d4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e0ff      	b.n	80032d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b14      	cmp	r3, #20
 80030de:	f200 80f0 	bhi.w	80032c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80030e2:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e8:	0800313d 	.word	0x0800313d
 80030ec:	080032c3 	.word	0x080032c3
 80030f0:	080032c3 	.word	0x080032c3
 80030f4:	080032c3 	.word	0x080032c3
 80030f8:	0800317d 	.word	0x0800317d
 80030fc:	080032c3 	.word	0x080032c3
 8003100:	080032c3 	.word	0x080032c3
 8003104:	080032c3 	.word	0x080032c3
 8003108:	080031bf 	.word	0x080031bf
 800310c:	080032c3 	.word	0x080032c3
 8003110:	080032c3 	.word	0x080032c3
 8003114:	080032c3 	.word	0x080032c3
 8003118:	080031ff 	.word	0x080031ff
 800311c:	080032c3 	.word	0x080032c3
 8003120:	080032c3 	.word	0x080032c3
 8003124:	080032c3 	.word	0x080032c3
 8003128:	08003241 	.word	0x08003241
 800312c:	080032c3 	.word	0x080032c3
 8003130:	080032c3 	.word	0x080032c3
 8003134:	080032c3 	.word	0x080032c3
 8003138:	08003281 	.word	0x08003281
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fa7c 	bl	8003640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0208 	orr.w	r2, r2, #8
 8003156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0204 	bic.w	r2, r2, #4
 8003166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6999      	ldr	r1, [r3, #24]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	619a      	str	r2, [r3, #24]
      break;
 800317a:	e0a5      	b.n	80032c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 faec 	bl	8003760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6999      	ldr	r1, [r3, #24]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	021a      	lsls	r2, r3, #8
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	619a      	str	r2, [r3, #24]
      break;
 80031bc:	e084      	b.n	80032c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fb55 	bl	8003874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0208 	orr.w	r2, r2, #8
 80031d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0204 	bic.w	r2, r2, #4
 80031e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69d9      	ldr	r1, [r3, #28]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	61da      	str	r2, [r3, #28]
      break;
 80031fc:	e064      	b.n	80032c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fbbd 	bl	8003984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69d9      	ldr	r1, [r3, #28]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	021a      	lsls	r2, r3, #8
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	61da      	str	r2, [r3, #28]
      break;
 800323e:	e043      	b.n	80032c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fc26 	bl	8003a98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0208 	orr.w	r2, r2, #8
 800325a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0204 	bic.w	r2, r2, #4
 800326a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800327e:	e023      	b.n	80032c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fc6a 	bl	8003b60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800329a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	021a      	lsls	r2, r3, #8
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80032c0:	e002      	b.n	80032c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]
      break;
 80032c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop

080032dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_TIM_ConfigClockSource+0x1c>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e0de      	b.n	80034b6 <HAL_TIM_ConfigClockSource+0x1da>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800331a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a63      	ldr	r2, [pc, #396]	; (80034c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	f000 80a9 	beq.w	800348a <HAL_TIM_ConfigClockSource+0x1ae>
 8003338:	4a61      	ldr	r2, [pc, #388]	; (80034c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	f200 80ae 	bhi.w	800349c <HAL_TIM_ConfigClockSource+0x1c0>
 8003340:	4a60      	ldr	r2, [pc, #384]	; (80034c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f000 80a1 	beq.w	800348a <HAL_TIM_ConfigClockSource+0x1ae>
 8003348:	4a5e      	ldr	r2, [pc, #376]	; (80034c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	f200 80a6 	bhi.w	800349c <HAL_TIM_ConfigClockSource+0x1c0>
 8003350:	4a5d      	ldr	r2, [pc, #372]	; (80034c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003352:	4293      	cmp	r3, r2
 8003354:	f000 8099 	beq.w	800348a <HAL_TIM_ConfigClockSource+0x1ae>
 8003358:	4a5b      	ldr	r2, [pc, #364]	; (80034c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800335a:	4293      	cmp	r3, r2
 800335c:	f200 809e 	bhi.w	800349c <HAL_TIM_ConfigClockSource+0x1c0>
 8003360:	4a5a      	ldr	r2, [pc, #360]	; (80034cc <HAL_TIM_ConfigClockSource+0x1f0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	f000 8091 	beq.w	800348a <HAL_TIM_ConfigClockSource+0x1ae>
 8003368:	4a58      	ldr	r2, [pc, #352]	; (80034cc <HAL_TIM_ConfigClockSource+0x1f0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	f200 8096 	bhi.w	800349c <HAL_TIM_ConfigClockSource+0x1c0>
 8003370:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003374:	f000 8089 	beq.w	800348a <HAL_TIM_ConfigClockSource+0x1ae>
 8003378:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800337c:	f200 808e 	bhi.w	800349c <HAL_TIM_ConfigClockSource+0x1c0>
 8003380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003384:	d03e      	beq.n	8003404 <HAL_TIM_ConfigClockSource+0x128>
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338a:	f200 8087 	bhi.w	800349c <HAL_TIM_ConfigClockSource+0x1c0>
 800338e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003392:	f000 8086 	beq.w	80034a2 <HAL_TIM_ConfigClockSource+0x1c6>
 8003396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339a:	d87f      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x1c0>
 800339c:	2b70      	cmp	r3, #112	; 0x70
 800339e:	d01a      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0xfa>
 80033a0:	2b70      	cmp	r3, #112	; 0x70
 80033a2:	d87b      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x1c0>
 80033a4:	2b60      	cmp	r3, #96	; 0x60
 80033a6:	d050      	beq.n	800344a <HAL_TIM_ConfigClockSource+0x16e>
 80033a8:	2b60      	cmp	r3, #96	; 0x60
 80033aa:	d877      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x1c0>
 80033ac:	2b50      	cmp	r3, #80	; 0x50
 80033ae:	d03c      	beq.n	800342a <HAL_TIM_ConfigClockSource+0x14e>
 80033b0:	2b50      	cmp	r3, #80	; 0x50
 80033b2:	d873      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x1c0>
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	d058      	beq.n	800346a <HAL_TIM_ConfigClockSource+0x18e>
 80033b8:	2b40      	cmp	r3, #64	; 0x40
 80033ba:	d86f      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x1c0>
 80033bc:	2b30      	cmp	r3, #48	; 0x30
 80033be:	d064      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x1ae>
 80033c0:	2b30      	cmp	r3, #48	; 0x30
 80033c2:	d86b      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x1c0>
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d060      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x1ae>
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d867      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x1c0>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d05c      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x1ae>
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d05a      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x1ae>
 80033d4:	e062      	b.n	800349c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6899      	ldr	r1, [r3, #8]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f000 fc9d 	bl	8003d24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	609a      	str	r2, [r3, #8]
      break;
 8003402:	e04f      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	6899      	ldr	r1, [r3, #8]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f000 fc86 	bl	8003d24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003426:	609a      	str	r2, [r3, #8]
      break;
 8003428:	e03c      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6859      	ldr	r1, [r3, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	461a      	mov	r2, r3
 8003438:	f000 fbf8 	bl	8003c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2150      	movs	r1, #80	; 0x50
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fc51 	bl	8003cea <TIM_ITRx_SetConfig>
      break;
 8003448:	e02c      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6859      	ldr	r1, [r3, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	461a      	mov	r2, r3
 8003458:	f000 fc17 	bl	8003c8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2160      	movs	r1, #96	; 0x60
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fc41 	bl	8003cea <TIM_ITRx_SetConfig>
      break;
 8003468:	e01c      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6859      	ldr	r1, [r3, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	461a      	mov	r2, r3
 8003478:	f000 fbd8 	bl	8003c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2140      	movs	r1, #64	; 0x40
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fc31 	bl	8003cea <TIM_ITRx_SetConfig>
      break;
 8003488:	e00c      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4619      	mov	r1, r3
 8003494:	4610      	mov	r0, r2
 8003496:	f000 fc28 	bl	8003cea <TIM_ITRx_SetConfig>
      break;
 800349a:	e003      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
      break;
 80034a0:	e000      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80034a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	00100070 	.word	0x00100070
 80034c4:	00100040 	.word	0x00100040
 80034c8:	00100030 	.word	0x00100030
 80034cc:	00100020 	.word	0x00100020

080034d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a3c      	ldr	r2, [pc, #240]	; (8003624 <TIM_Base_SetConfig+0x104>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00f      	beq.n	8003558 <TIM_Base_SetConfig+0x38>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353e:	d00b      	beq.n	8003558 <TIM_Base_SetConfig+0x38>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a39      	ldr	r2, [pc, #228]	; (8003628 <TIM_Base_SetConfig+0x108>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d007      	beq.n	8003558 <TIM_Base_SetConfig+0x38>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a38      	ldr	r2, [pc, #224]	; (800362c <TIM_Base_SetConfig+0x10c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d003      	beq.n	8003558 <TIM_Base_SetConfig+0x38>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a37      	ldr	r2, [pc, #220]	; (8003630 <TIM_Base_SetConfig+0x110>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d108      	bne.n	800356a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2d      	ldr	r2, [pc, #180]	; (8003624 <TIM_Base_SetConfig+0x104>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01b      	beq.n	80035aa <TIM_Base_SetConfig+0x8a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003578:	d017      	beq.n	80035aa <TIM_Base_SetConfig+0x8a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a2a      	ldr	r2, [pc, #168]	; (8003628 <TIM_Base_SetConfig+0x108>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <TIM_Base_SetConfig+0x8a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a29      	ldr	r2, [pc, #164]	; (800362c <TIM_Base_SetConfig+0x10c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00f      	beq.n	80035aa <TIM_Base_SetConfig+0x8a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a28      	ldr	r2, [pc, #160]	; (8003630 <TIM_Base_SetConfig+0x110>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00b      	beq.n	80035aa <TIM_Base_SetConfig+0x8a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a27      	ldr	r2, [pc, #156]	; (8003634 <TIM_Base_SetConfig+0x114>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <TIM_Base_SetConfig+0x8a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a26      	ldr	r2, [pc, #152]	; (8003638 <TIM_Base_SetConfig+0x118>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d003      	beq.n	80035aa <TIM_Base_SetConfig+0x8a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a25      	ldr	r2, [pc, #148]	; (800363c <TIM_Base_SetConfig+0x11c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d108      	bne.n	80035bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a10      	ldr	r2, [pc, #64]	; (8003624 <TIM_Base_SetConfig+0x104>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00f      	beq.n	8003608 <TIM_Base_SetConfig+0xe8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a11      	ldr	r2, [pc, #68]	; (8003630 <TIM_Base_SetConfig+0x110>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00b      	beq.n	8003608 <TIM_Base_SetConfig+0xe8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a10      	ldr	r2, [pc, #64]	; (8003634 <TIM_Base_SetConfig+0x114>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <TIM_Base_SetConfig+0xe8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a0f      	ldr	r2, [pc, #60]	; (8003638 <TIM_Base_SetConfig+0x118>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d003      	beq.n	8003608 <TIM_Base_SetConfig+0xe8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a0e      	ldr	r2, [pc, #56]	; (800363c <TIM_Base_SetConfig+0x11c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d103      	bne.n	8003610 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	615a      	str	r2, [r3, #20]
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40012c00 	.word	0x40012c00
 8003628:	40000400 	.word	0x40000400
 800362c:	40000800 	.word	0x40000800
 8003630:	40013400 	.word	0x40013400
 8003634:	40014000 	.word	0x40014000
 8003638:	40014400 	.word	0x40014400
 800363c:	40014800 	.word	0x40014800

08003640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f023 0201 	bic.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 0302 	bic.w	r3, r3, #2
 800368c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a2c      	ldr	r2, [pc, #176]	; (800374c <TIM_OC1_SetConfig+0x10c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00f      	beq.n	80036c0 <TIM_OC1_SetConfig+0x80>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a2b      	ldr	r2, [pc, #172]	; (8003750 <TIM_OC1_SetConfig+0x110>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00b      	beq.n	80036c0 <TIM_OC1_SetConfig+0x80>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a2a      	ldr	r2, [pc, #168]	; (8003754 <TIM_OC1_SetConfig+0x114>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d007      	beq.n	80036c0 <TIM_OC1_SetConfig+0x80>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a29      	ldr	r2, [pc, #164]	; (8003758 <TIM_OC1_SetConfig+0x118>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d003      	beq.n	80036c0 <TIM_OC1_SetConfig+0x80>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a28      	ldr	r2, [pc, #160]	; (800375c <TIM_OC1_SetConfig+0x11c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d10c      	bne.n	80036da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f023 0308 	bic.w	r3, r3, #8
 80036c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f023 0304 	bic.w	r3, r3, #4
 80036d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1b      	ldr	r2, [pc, #108]	; (800374c <TIM_OC1_SetConfig+0x10c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00f      	beq.n	8003702 <TIM_OC1_SetConfig+0xc2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <TIM_OC1_SetConfig+0x110>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00b      	beq.n	8003702 <TIM_OC1_SetConfig+0xc2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a19      	ldr	r2, [pc, #100]	; (8003754 <TIM_OC1_SetConfig+0x114>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <TIM_OC1_SetConfig+0xc2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a18      	ldr	r2, [pc, #96]	; (8003758 <TIM_OC1_SetConfig+0x118>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <TIM_OC1_SetConfig+0xc2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a17      	ldr	r2, [pc, #92]	; (800375c <TIM_OC1_SetConfig+0x11c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d111      	bne.n	8003726 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	621a      	str	r2, [r3, #32]
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40013400 	.word	0x40013400
 8003754:	40014000 	.word	0x40014000
 8003758:	40014400 	.word	0x40014400
 800375c:	40014800 	.word	0x40014800

08003760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f023 0210 	bic.w	r2, r3, #16
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f023 0320 	bic.w	r3, r3, #32
 80037ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a28      	ldr	r2, [pc, #160]	; (8003860 <TIM_OC2_SetConfig+0x100>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d003      	beq.n	80037cc <TIM_OC2_SetConfig+0x6c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a27      	ldr	r2, [pc, #156]	; (8003864 <TIM_OC2_SetConfig+0x104>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d10d      	bne.n	80037e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <TIM_OC2_SetConfig+0x100>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00f      	beq.n	8003810 <TIM_OC2_SetConfig+0xb0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <TIM_OC2_SetConfig+0x104>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00b      	beq.n	8003810 <TIM_OC2_SetConfig+0xb0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <TIM_OC2_SetConfig+0x108>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d007      	beq.n	8003810 <TIM_OC2_SetConfig+0xb0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a1a      	ldr	r2, [pc, #104]	; (800386c <TIM_OC2_SetConfig+0x10c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_OC2_SetConfig+0xb0>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a19      	ldr	r2, [pc, #100]	; (8003870 <TIM_OC2_SetConfig+0x110>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d113      	bne.n	8003838 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800381e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	621a      	str	r2, [r3, #32]
}
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40012c00 	.word	0x40012c00
 8003864:	40013400 	.word	0x40013400
 8003868:	40014000 	.word	0x40014000
 800386c:	40014400 	.word	0x40014400
 8003870:	40014800 	.word	0x40014800

08003874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a27      	ldr	r2, [pc, #156]	; (8003970 <TIM_OC3_SetConfig+0xfc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d003      	beq.n	80038de <TIM_OC3_SetConfig+0x6a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a26      	ldr	r2, [pc, #152]	; (8003974 <TIM_OC3_SetConfig+0x100>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10d      	bne.n	80038fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <TIM_OC3_SetConfig+0xfc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00f      	beq.n	8003922 <TIM_OC3_SetConfig+0xae>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <TIM_OC3_SetConfig+0x100>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00b      	beq.n	8003922 <TIM_OC3_SetConfig+0xae>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1a      	ldr	r2, [pc, #104]	; (8003978 <TIM_OC3_SetConfig+0x104>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <TIM_OC3_SetConfig+0xae>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a19      	ldr	r2, [pc, #100]	; (800397c <TIM_OC3_SetConfig+0x108>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <TIM_OC3_SetConfig+0xae>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a18      	ldr	r2, [pc, #96]	; (8003980 <TIM_OC3_SetConfig+0x10c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d113      	bne.n	800394a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	621a      	str	r2, [r3, #32]
}
 8003964:	bf00      	nop
 8003966:	371c      	adds	r7, #28
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40013400 	.word	0x40013400
 8003978:	40014000 	.word	0x40014000
 800397c:	40014400 	.word	0x40014400
 8003980:	40014800 	.word	0x40014800

08003984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	031b      	lsls	r3, r3, #12
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a28      	ldr	r2, [pc, #160]	; (8003a84 <TIM_OC4_SetConfig+0x100>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <TIM_OC4_SetConfig+0x6c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <TIM_OC4_SetConfig+0x104>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d10d      	bne.n	8003a0c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	031b      	lsls	r3, r3, #12
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <TIM_OC4_SetConfig+0x100>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00f      	beq.n	8003a34 <TIM_OC4_SetConfig+0xb0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <TIM_OC4_SetConfig+0x104>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_OC4_SetConfig+0xb0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a1b      	ldr	r2, [pc, #108]	; (8003a8c <TIM_OC4_SetConfig+0x108>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <TIM_OC4_SetConfig+0xb0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a1a      	ldr	r2, [pc, #104]	; (8003a90 <TIM_OC4_SetConfig+0x10c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_OC4_SetConfig+0xb0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a19      	ldr	r2, [pc, #100]	; (8003a94 <TIM_OC4_SetConfig+0x110>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d113      	bne.n	8003a5c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a42:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	019b      	lsls	r3, r3, #6
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	019b      	lsls	r3, r3, #6
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	621a      	str	r2, [r3, #32]
}
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40012c00 	.word	0x40012c00
 8003a88:	40013400 	.word	0x40013400
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400
 8003a94:	40014800 	.word	0x40014800

08003a98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003adc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <TIM_OC5_SetConfig+0xb4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00f      	beq.n	8003b12 <TIM_OC5_SetConfig+0x7a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <TIM_OC5_SetConfig+0xb8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <TIM_OC5_SetConfig+0x7a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <TIM_OC5_SetConfig+0xbc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <TIM_OC5_SetConfig+0x7a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a14      	ldr	r2, [pc, #80]	; (8003b58 <TIM_OC5_SetConfig+0xc0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_OC5_SetConfig+0x7a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <TIM_OC5_SetConfig+0xc4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d109      	bne.n	8003b26 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	621a      	str	r2, [r3, #32]
}
 8003b40:	bf00      	nop
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40013400 	.word	0x40013400
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800

08003b60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	051b      	lsls	r3, r3, #20
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <TIM_OC6_SetConfig+0xb8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00f      	beq.n	8003bdc <TIM_OC6_SetConfig+0x7c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a17      	ldr	r2, [pc, #92]	; (8003c1c <TIM_OC6_SetConfig+0xbc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00b      	beq.n	8003bdc <TIM_OC6_SetConfig+0x7c>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <TIM_OC6_SetConfig+0xc0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <TIM_OC6_SetConfig+0x7c>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <TIM_OC6_SetConfig+0xc4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_OC6_SetConfig+0x7c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <TIM_OC6_SetConfig+0xc8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d109      	bne.n	8003bf0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	029b      	lsls	r3, r3, #10
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40013400 	.word	0x40013400
 8003c20:	40014000 	.word	0x40014000
 8003c24:	40014400 	.word	0x40014400
 8003c28:	40014800 	.word	0x40014800

08003c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f023 0201 	bic.w	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f023 030a 	bic.w	r3, r3, #10
 8003c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b087      	sub	sp, #28
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f023 0210 	bic.w	r2, r3, #16
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	031b      	lsls	r3, r3, #12
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	621a      	str	r2, [r3, #32]
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f043 0307 	orr.w	r3, r3, #7
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	021a      	lsls	r2, r3, #8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	2201      	movs	r2, #1
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1a      	ldr	r2, [r3, #32]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	43db      	mvns	r3, r3
 8003d86:	401a      	ands	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1a      	ldr	r2, [r3, #32]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	621a      	str	r2, [r3, #32]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d109      	bne.n	8003dd4 <HAL_TIMEx_PWMN_Start+0x24>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	bf14      	ite	ne
 8003dcc:	2301      	movne	r3, #1
 8003dce:	2300      	moveq	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e022      	b.n	8003e1a <HAL_TIMEx_PWMN_Start+0x6a>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d109      	bne.n	8003dee <HAL_TIMEx_PWMN_Start+0x3e>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	bf14      	ite	ne
 8003de6:	2301      	movne	r3, #1
 8003de8:	2300      	moveq	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	e015      	b.n	8003e1a <HAL_TIMEx_PWMN_Start+0x6a>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d109      	bne.n	8003e08 <HAL_TIMEx_PWMN_Start+0x58>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	bf14      	ite	ne
 8003e00:	2301      	movne	r3, #1
 8003e02:	2300      	moveq	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e008      	b.n	8003e1a <HAL_TIMEx_PWMN_Start+0x6a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	bf14      	ite	ne
 8003e14:	2301      	movne	r3, #1
 8003e16:	2300      	moveq	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e069      	b.n	8003ef6 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <HAL_TIMEx_PWMN_Start+0x82>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e30:	e013      	b.n	8003e5a <HAL_TIMEx_PWMN_Start+0xaa>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d104      	bne.n	8003e42 <HAL_TIMEx_PWMN_Start+0x92>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e40:	e00b      	b.n	8003e5a <HAL_TIMEx_PWMN_Start+0xaa>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d104      	bne.n	8003e52 <HAL_TIMEx_PWMN_Start+0xa2>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e50:	e003      	b.n	8003e5a <HAL_TIMEx_PWMN_Start+0xaa>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2204      	movs	r2, #4
 8003e60:	6839      	ldr	r1, [r7, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f9c0 	bl	80041e8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a20      	ldr	r2, [pc, #128]	; (8003f00 <HAL_TIMEx_PWMN_Start+0x150>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d018      	beq.n	8003eb4 <HAL_TIMEx_PWMN_Start+0x104>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d013      	beq.n	8003eb4 <HAL_TIMEx_PWMN_Start+0x104>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <HAL_TIMEx_PWMN_Start+0x154>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <HAL_TIMEx_PWMN_Start+0x104>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <HAL_TIMEx_PWMN_Start+0x158>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d009      	beq.n	8003eb4 <HAL_TIMEx_PWMN_Start+0x104>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_TIMEx_PWMN_Start+0x15c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_TIMEx_PWMN_Start+0x104>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_TIMEx_PWMN_Start+0x160>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d115      	bne.n	8003ee0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <HAL_TIMEx_PWMN_Start+0x164>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d015      	beq.n	8003ef2 <HAL_TIMEx_PWMN_Start+0x142>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ecc:	d011      	beq.n	8003ef2 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0201 	orr.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ede:	e008      	b.n	8003ef2 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e000      	b.n	8003ef4 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	40013400 	.word	0x40013400
 8003f10:	40014000 	.word	0x40014000
 8003f14:	00010007 	.word	0x00010007

08003f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e065      	b.n	8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2c      	ldr	r2, [pc, #176]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2b      	ldr	r2, [pc, #172]	; (800400c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d108      	bne.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d018      	beq.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa6:	d013      	beq.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a18      	ldr	r2, [pc, #96]	; (8004010 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a17      	ldr	r2, [pc, #92]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d009      	beq.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a12      	ldr	r2, [pc, #72]	; (800400c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a13      	ldr	r2, [pc, #76]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d10c      	bne.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	40012c00 	.word	0x40012c00
 800400c:	40013400 	.word	0x40013400
 8004010:	40000400 	.word	0x40000400
 8004014:	40000800 	.word	0x40000800
 8004018:	40014000 	.word	0x40014000

0800401c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004034:	2302      	movs	r3, #2
 8004036:	e087      	b.n	8004148 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a27      	ldr	r2, [pc, #156]	; (8004154 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a25      	ldr	r2, [pc, #148]	; (8004158 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d106      	bne.n	80040d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1e      	ldr	r2, [pc, #120]	; (8004154 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d126      	bne.n	8004136 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	051b      	lsls	r3, r3, #20
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a0e      	ldr	r2, [pc, #56]	; (8004154 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a0d      	ldr	r2, [pc, #52]	; (8004158 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d106      	bne.n	8004136 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40013400 	.word	0x40013400

0800415c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	2204      	movs	r2, #4
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1a      	ldr	r2, [r3, #32]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	43db      	mvns	r3, r3
 800420a:	401a      	ands	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a1a      	ldr	r2, [r3, #32]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	431a      	orrs	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e042      	b.n	80042ca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc fdea 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	; 0x24
 8004260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fc51 	bl	8004b1c <UART_SetConfig>
 800427a:	4603      	mov	r3, r0
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e022      	b.n	80042ca <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 ff11 	bl	80050b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0201 	orr.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 ff98 	bl	80051f8 <UART_CheckIdleState>
 80042c8:	4603      	mov	r3, r0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b08a      	sub	sp, #40	; 0x28
 80042d6:	af02      	add	r7, sp, #8
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	f040 8083 	bne.w	80043f4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_UART_Transmit+0x28>
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e07b      	b.n	80043f6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_UART_Transmit+0x3a>
 8004308:	2302      	movs	r3, #2
 800430a:	e074      	b.n	80043f6 <HAL_UART_Transmit+0x124>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2221      	movs	r2, #33	; 0x21
 8004320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004324:	f7fc ffc0 	bl	80012a8 <HAL_GetTick>
 8004328:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	88fa      	ldrh	r2, [r7, #6]
 800432e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	88fa      	ldrh	r2, [r7, #6]
 8004336:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	d108      	bne.n	8004356 <HAL_UART_Transmit+0x84>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800434c:	2300      	movs	r3, #0
 800434e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	e003      	b.n	800435e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800435a:	2300      	movs	r3, #0
 800435c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004366:	e02c      	b.n	80043c2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2200      	movs	r2, #0
 8004370:	2180      	movs	r1, #128	; 0x80
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 ff8b 	bl	800528e <UART_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e039      	b.n	80043f6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10b      	bne.n	80043a0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004396:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	3302      	adds	r3, #2
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	e007      	b.n	80043b0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	781a      	ldrb	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	3301      	adds	r3, #1
 80043ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1cc      	bne.n	8004368 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2140      	movs	r1, #64	; 0x40
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 ff58 	bl	800528e <UART_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e006      	b.n	80043f6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	2b20      	cmp	r3, #32
 8004416:	d142      	bne.n	800449e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_UART_Receive_IT+0x24>
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e03b      	b.n	80044a0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_UART_Receive_IT+0x36>
 8004432:	2302      	movs	r3, #2
 8004434:	e034      	b.n	80044a0 <HAL_UART_Receive_IT+0xa0>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <HAL_UART_Receive_IT+0xa8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01f      	beq.n	800448e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d018      	beq.n	800448e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	613b      	str	r3, [r7, #16]
   return(result);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	69f9      	ldr	r1, [r7, #28]
 8004480:	6a3a      	ldr	r2, [r7, #32]
 8004482:	e841 2300 	strex	r3, r2, [r1]
 8004486:	61bb      	str	r3, [r7, #24]
   return(result);
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e6      	bne.n	800445c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	461a      	mov	r2, r3
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 ffc3 	bl	8005420 <UART_Start_Receive_IT>
 800449a:	4603      	mov	r3, r0
 800449c:	e000      	b.n	80044a0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3728      	adds	r7, #40	; 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40008000 	.word	0x40008000

080044ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b0ba      	sub	sp, #232	; 0xe8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80044d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80044da:	4013      	ands	r3, r2
 80044dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80044e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d11b      	bne.n	8004520 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80044e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d015      	beq.n	8004520 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80044f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d009      	beq.n	8004520 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 82d6 	beq.w	8004ac2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
      }
      return;
 800451e:	e2d0      	b.n	8004ac2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004520:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 811f 	beq.w	8004768 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800452a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800452e:	4b8b      	ldr	r3, [pc, #556]	; (800475c <HAL_UART_IRQHandler+0x2b0>)
 8004530:	4013      	ands	r3, r2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004536:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800453a:	4b89      	ldr	r3, [pc, #548]	; (8004760 <HAL_UART_IRQHandler+0x2b4>)
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 8112 	beq.w	8004768 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d011      	beq.n	8004574 <HAL_UART_IRQHandler+0xc8>
 8004550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00b      	beq.n	8004574 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2201      	movs	r2, #1
 8004562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d011      	beq.n	80045a4 <HAL_UART_IRQHandler+0xf8>
 8004580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2202      	movs	r2, #2
 8004592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800459a:	f043 0204 	orr.w	r2, r3, #4
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d011      	beq.n	80045d4 <HAL_UART_IRQHandler+0x128>
 80045b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00b      	beq.n	80045d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2204      	movs	r2, #4
 80045c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ca:	f043 0202 	orr.w	r2, r3, #2
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d017      	beq.n	8004610 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d105      	bne.n	80045f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80045ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80045f0:	4b5a      	ldr	r3, [pc, #360]	; (800475c <HAL_UART_IRQHandler+0x2b0>)
 80045f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2208      	movs	r2, #8
 80045fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004606:	f043 0208 	orr.w	r2, r3, #8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004618:	2b00      	cmp	r3, #0
 800461a:	d012      	beq.n	8004642 <HAL_UART_IRQHandler+0x196>
 800461c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00c      	beq.n	8004642 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004630:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 823c 	beq.w	8004ac6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800464e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d013      	beq.n	8004682 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800465a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d105      	bne.n	8004672 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004688:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004696:	2b40      	cmp	r3, #64	; 0x40
 8004698:	d005      	beq.n	80046a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800469a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800469e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d04f      	beq.n	8004746 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 ffe4 	bl	8005674 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b6:	2b40      	cmp	r3, #64	; 0x40
 80046b8:	d141      	bne.n	800473e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3308      	adds	r3, #8
 80046c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3308      	adds	r3, #8
 80046e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1d9      	bne.n	80046ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d013      	beq.n	8004736 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004712:	4a14      	ldr	r2, [pc, #80]	; (8004764 <HAL_UART_IRQHandler+0x2b8>)
 8004714:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800471a:	4618      	mov	r0, r3
 800471c:	f7fc ff2b 	bl	8001576 <HAL_DMA_Abort_IT>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d017      	beq.n	8004756 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004730:	4610      	mov	r0, r2
 8004732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004734:	e00f      	b.n	8004756 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f9da 	bl	8004af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473c:	e00b      	b.n	8004756 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f9d6 	bl	8004af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004744:	e007      	b.n	8004756 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f9d2 	bl	8004af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004754:	e1b7      	b.n	8004ac6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004756:	bf00      	nop
    return;
 8004758:	e1b5      	b.n	8004ac6 <HAL_UART_IRQHandler+0x61a>
 800475a:	bf00      	nop
 800475c:	10000001 	.word	0x10000001
 8004760:	04000120 	.word	0x04000120
 8004764:	08005741 	.word	0x08005741

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800476c:	2b01      	cmp	r3, #1
 800476e:	f040 814a 	bne.w	8004a06 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8143 	beq.w	8004a06 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 813c 	beq.w	8004a06 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2210      	movs	r2, #16
 8004794:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b40      	cmp	r3, #64	; 0x40
 80047a2:	f040 80b5 	bne.w	8004910 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8187 	beq.w	8004aca <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047c6:	429a      	cmp	r2, r3
 80047c8:	f080 817f 	bcs.w	8004aca <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 8086 	bne.w	80048f4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004804:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004812:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004816:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800481e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800482a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1da      	bne.n	80047e8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3308      	adds	r3, #8
 8004838:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004856:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800485a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800485e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e1      	bne.n	8004832 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3308      	adds	r3, #8
 8004874:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800487e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004884:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3308      	adds	r3, #8
 800488e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004892:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004894:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004898:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e3      	bne.n	800486e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c4:	f023 0310 	bic.w	r3, r3, #16
 80048c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80048d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e4      	bne.n	80048b4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fc fde8 	bl	80014c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004900:	b29b      	uxth	r3, r3
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	b29b      	uxth	r3, r3
 8004906:	4619      	mov	r1, r3
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f8fb 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800490e:	e0dc      	b.n	8004aca <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800491c:	b29b      	uxth	r3, r3
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 80ce 	beq.w	8004ace <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004932:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 80c9 	beq.w	8004ace <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800494a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800495e:	647b      	str	r3, [r7, #68]	; 0x44
 8004960:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800496c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e4      	bne.n	800493c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3308      	adds	r3, #8
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	623b      	str	r3, [r7, #32]
   return(result);
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3308      	adds	r3, #8
 8004996:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800499a:	633a      	str	r2, [r7, #48]	; 0x30
 800499c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e1      	bne.n	8004972 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0310 	bic.w	r3, r3, #16
 80049d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	69b9      	ldr	r1, [r7, #24]
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	617b      	str	r3, [r7, #20]
   return(result);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e4      	bne.n	80049c2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f880 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a04:	e063      	b.n	8004ace <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00e      	beq.n	8004a30 <HAL_UART_IRQHandler+0x584>
 8004a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f001 fb27 	bl	800607c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a2e:	e051      	b.n	8004ad4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d014      	beq.n	8004a66 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d105      	bne.n	8004a54 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d03a      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
    }
    return;
 8004a64:	e035      	b.n	8004ad2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <HAL_UART_IRQHandler+0x5da>
 8004a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fe74 	bl	800576c <UART_EndTransmit_IT>
    return;
 8004a84:	e026      	b.n	8004ad4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x5fa>
 8004a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f001 fb00 	bl	80060a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004aa4:	e016      	b.n	8004ad4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d010      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x628>
 8004ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	da0c      	bge.n	8004ad4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f001 fae8 	bl	8006090 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ac0:	e008      	b.n	8004ad4 <HAL_UART_IRQHandler+0x628>
      return;
 8004ac2:	bf00      	nop
 8004ac4:	e006      	b.n	8004ad4 <HAL_UART_IRQHandler+0x628>
    return;
 8004ac6:	bf00      	nop
 8004ac8:	e004      	b.n	8004ad4 <HAL_UART_IRQHandler+0x628>
      return;
 8004aca:	bf00      	nop
 8004acc:	e002      	b.n	8004ad4 <HAL_UART_IRQHandler+0x628>
      return;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <HAL_UART_IRQHandler+0x628>
    return;
 8004ad2:	bf00      	nop
  }
}
 8004ad4:	37e8      	adds	r7, #232	; 0xe8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop

08004adc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b20:	b08c      	sub	sp, #48	; 0x30
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4bab      	ldr	r3, [pc, #684]	; (8004df8 <UART_SetConfig+0x2dc>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4aa0      	ldr	r2, [pc, #640]	; (8004dfc <UART_SetConfig+0x2e0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d004      	beq.n	8004b88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b84:	4313      	orrs	r3, r2
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	6812      	ldr	r2, [r2, #0]
 8004b9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	f023 010f 	bic.w	r1, r3, #15
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a91      	ldr	r2, [pc, #580]	; (8004e00 <UART_SetConfig+0x2e4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d125      	bne.n	8004c0c <UART_SetConfig+0xf0>
 8004bc0:	4b90      	ldr	r3, [pc, #576]	; (8004e04 <UART_SetConfig+0x2e8>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d81a      	bhi.n	8004c04 <UART_SetConfig+0xe8>
 8004bce:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <UART_SetConfig+0xb8>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004be5 	.word	0x08004be5
 8004bd8:	08004bf5 	.word	0x08004bf5
 8004bdc:	08004bed 	.word	0x08004bed
 8004be0:	08004bfd 	.word	0x08004bfd
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bea:	e0d6      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004bec:	2302      	movs	r3, #2
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf2:	e0d2      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bfa:	e0ce      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c02:	e0ca      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004c04:	2310      	movs	r3, #16
 8004c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c0a:	e0c6      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a7d      	ldr	r2, [pc, #500]	; (8004e08 <UART_SetConfig+0x2ec>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d138      	bne.n	8004c88 <UART_SetConfig+0x16c>
 8004c16:	4b7b      	ldr	r3, [pc, #492]	; (8004e04 <UART_SetConfig+0x2e8>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	d82d      	bhi.n	8004c80 <UART_SetConfig+0x164>
 8004c24:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <UART_SetConfig+0x110>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004c61 	.word	0x08004c61
 8004c30:	08004c81 	.word	0x08004c81
 8004c34:	08004c81 	.word	0x08004c81
 8004c38:	08004c81 	.word	0x08004c81
 8004c3c:	08004c71 	.word	0x08004c71
 8004c40:	08004c81 	.word	0x08004c81
 8004c44:	08004c81 	.word	0x08004c81
 8004c48:	08004c81 	.word	0x08004c81
 8004c4c:	08004c69 	.word	0x08004c69
 8004c50:	08004c81 	.word	0x08004c81
 8004c54:	08004c81 	.word	0x08004c81
 8004c58:	08004c81 	.word	0x08004c81
 8004c5c:	08004c79 	.word	0x08004c79
 8004c60:	2300      	movs	r3, #0
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c66:	e098      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c6e:	e094      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004c70:	2304      	movs	r3, #4
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c76:	e090      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004c78:	2308      	movs	r3, #8
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c7e:	e08c      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004c80:	2310      	movs	r3, #16
 8004c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c86:	e088      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a5f      	ldr	r2, [pc, #380]	; (8004e0c <UART_SetConfig+0x2f0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d125      	bne.n	8004cde <UART_SetConfig+0x1c2>
 8004c92:	4b5c      	ldr	r3, [pc, #368]	; (8004e04 <UART_SetConfig+0x2e8>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c9c:	2b30      	cmp	r3, #48	; 0x30
 8004c9e:	d016      	beq.n	8004cce <UART_SetConfig+0x1b2>
 8004ca0:	2b30      	cmp	r3, #48	; 0x30
 8004ca2:	d818      	bhi.n	8004cd6 <UART_SetConfig+0x1ba>
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d00a      	beq.n	8004cbe <UART_SetConfig+0x1a2>
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d814      	bhi.n	8004cd6 <UART_SetConfig+0x1ba>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <UART_SetConfig+0x19a>
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d008      	beq.n	8004cc6 <UART_SetConfig+0x1aa>
 8004cb4:	e00f      	b.n	8004cd6 <UART_SetConfig+0x1ba>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cbc:	e06d      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cc4:	e069      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004cc6:	2304      	movs	r3, #4
 8004cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ccc:	e065      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004cce:	2308      	movs	r3, #8
 8004cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cd4:	e061      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004cd6:	2310      	movs	r3, #16
 8004cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cdc:	e05d      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a4b      	ldr	r2, [pc, #300]	; (8004e10 <UART_SetConfig+0x2f4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d125      	bne.n	8004d34 <UART_SetConfig+0x218>
 8004ce8:	4b46      	ldr	r3, [pc, #280]	; (8004e04 <UART_SetConfig+0x2e8>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cf2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cf4:	d016      	beq.n	8004d24 <UART_SetConfig+0x208>
 8004cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8004cf8:	d818      	bhi.n	8004d2c <UART_SetConfig+0x210>
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d00a      	beq.n	8004d14 <UART_SetConfig+0x1f8>
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d814      	bhi.n	8004d2c <UART_SetConfig+0x210>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <UART_SetConfig+0x1f0>
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d008      	beq.n	8004d1c <UART_SetConfig+0x200>
 8004d0a:	e00f      	b.n	8004d2c <UART_SetConfig+0x210>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d12:	e042      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004d14:	2302      	movs	r3, #2
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1a:	e03e      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d22:	e03a      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004d24:	2308      	movs	r3, #8
 8004d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d2a:	e036      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d32:	e032      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a30      	ldr	r2, [pc, #192]	; (8004dfc <UART_SetConfig+0x2e0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d12a      	bne.n	8004d94 <UART_SetConfig+0x278>
 8004d3e:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <UART_SetConfig+0x2e8>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d4c:	d01a      	beq.n	8004d84 <UART_SetConfig+0x268>
 8004d4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d52:	d81b      	bhi.n	8004d8c <UART_SetConfig+0x270>
 8004d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d58:	d00c      	beq.n	8004d74 <UART_SetConfig+0x258>
 8004d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5e:	d815      	bhi.n	8004d8c <UART_SetConfig+0x270>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <UART_SetConfig+0x250>
 8004d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d68:	d008      	beq.n	8004d7c <UART_SetConfig+0x260>
 8004d6a:	e00f      	b.n	8004d8c <UART_SetConfig+0x270>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d72:	e012      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004d74:	2302      	movs	r3, #2
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d7a:	e00e      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d82:	e00a      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004d84:	2308      	movs	r3, #8
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d8a:	e006      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d92:	e002      	b.n	8004d9a <UART_SetConfig+0x27e>
 8004d94:	2310      	movs	r3, #16
 8004d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a17      	ldr	r2, [pc, #92]	; (8004dfc <UART_SetConfig+0x2e0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	f040 80a8 	bne.w	8004ef6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004da6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d834      	bhi.n	8004e18 <UART_SetConfig+0x2fc>
 8004dae:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <UART_SetConfig+0x298>)
 8004db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db4:	08004dd9 	.word	0x08004dd9
 8004db8:	08004e19 	.word	0x08004e19
 8004dbc:	08004de1 	.word	0x08004de1
 8004dc0:	08004e19 	.word	0x08004e19
 8004dc4:	08004de7 	.word	0x08004de7
 8004dc8:	08004e19 	.word	0x08004e19
 8004dcc:	08004e19 	.word	0x08004e19
 8004dd0:	08004e19 	.word	0x08004e19
 8004dd4:	08004def 	.word	0x08004def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd8:	f7fd fb34 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8004ddc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dde:	e021      	b.n	8004e24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <UART_SetConfig+0x2f8>)
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004de4:	e01e      	b.n	8004e24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de6:	f7fd fabf 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8004dea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dec:	e01a      	b.n	8004e24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004df4:	e016      	b.n	8004e24 <UART_SetConfig+0x308>
 8004df6:	bf00      	nop
 8004df8:	cfff69f3 	.word	0xcfff69f3
 8004dfc:	40008000 	.word	0x40008000
 8004e00:	40013800 	.word	0x40013800
 8004e04:	40021000 	.word	0x40021000
 8004e08:	40004400 	.word	0x40004400
 8004e0c:	40004800 	.word	0x40004800
 8004e10:	40004c00 	.word	0x40004c00
 8004e14:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 812a 	beq.w	8005080 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	4a9e      	ldr	r2, [pc, #632]	; (80050ac <UART_SetConfig+0x590>)
 8004e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e36:	461a      	mov	r2, r3
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	4413      	add	r3, r2
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d305      	bcc.n	8004e5c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d903      	bls.n	8004e64 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e62:	e10d      	b.n	8005080 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	2200      	movs	r2, #0
 8004e68:	60bb      	str	r3, [r7, #8]
 8004e6a:	60fa      	str	r2, [r7, #12]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	4a8e      	ldr	r2, [pc, #568]	; (80050ac <UART_SetConfig+0x590>)
 8004e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2200      	movs	r2, #0
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e86:	f7fb fa2b 	bl	80002e0 <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	020b      	lsls	r3, r1, #8
 8004e9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ea0:	0202      	lsls	r2, r0, #8
 8004ea2:	6979      	ldr	r1, [r7, #20]
 8004ea4:	6849      	ldr	r1, [r1, #4]
 8004ea6:	0849      	lsrs	r1, r1, #1
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	460c      	mov	r4, r1
 8004eac:	4605      	mov	r5, r0
 8004eae:	eb12 0804 	adds.w	r8, r2, r4
 8004eb2:	eb43 0905 	adc.w	r9, r3, r5
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	469a      	mov	sl, r3
 8004ebe:	4693      	mov	fp, r2
 8004ec0:	4652      	mov	r2, sl
 8004ec2:	465b      	mov	r3, fp
 8004ec4:	4640      	mov	r0, r8
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	f7fb fa0a 	bl	80002e0 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eda:	d308      	bcc.n	8004eee <UART_SetConfig+0x3d2>
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee2:	d204      	bcs.n	8004eee <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6a3a      	ldr	r2, [r7, #32]
 8004eea:	60da      	str	r2, [r3, #12]
 8004eec:	e0c8      	b.n	8005080 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ef4:	e0c4      	b.n	8005080 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efe:	d167      	bne.n	8004fd0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004f00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d828      	bhi.n	8004f5a <UART_SetConfig+0x43e>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <UART_SetConfig+0x3f4>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f35 	.word	0x08004f35
 8004f14:	08004f3d 	.word	0x08004f3d
 8004f18:	08004f45 	.word	0x08004f45
 8004f1c:	08004f5b 	.word	0x08004f5b
 8004f20:	08004f4b 	.word	0x08004f4b
 8004f24:	08004f5b 	.word	0x08004f5b
 8004f28:	08004f5b 	.word	0x08004f5b
 8004f2c:	08004f5b 	.word	0x08004f5b
 8004f30:	08004f53 	.word	0x08004f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f34:	f7fd fa86 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8004f38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f3a:	e014      	b.n	8004f66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f3c:	f7fd fa98 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 8004f40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f42:	e010      	b.n	8004f66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f44:	4b5a      	ldr	r3, [pc, #360]	; (80050b0 <UART_SetConfig+0x594>)
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f48:	e00d      	b.n	8004f66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4a:	f7fd fa0d 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8004f4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f50:	e009      	b.n	8004f66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f58:	e005      	b.n	8004f66 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8089 	beq.w	8005080 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	4a4e      	ldr	r2, [pc, #312]	; (80050ac <UART_SetConfig+0x590>)
 8004f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f80:	005a      	lsls	r2, r3, #1
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	441a      	add	r2, r3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	2b0f      	cmp	r3, #15
 8004f98:	d916      	bls.n	8004fc8 <UART_SetConfig+0x4ac>
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa0:	d212      	bcs.n	8004fc8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f023 030f 	bic.w	r3, r3, #15
 8004faa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	8bfb      	ldrh	r3, [r7, #30]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	8bfa      	ldrh	r2, [r7, #30]
 8004fc4:	60da      	str	r2, [r3, #12]
 8004fc6:	e05b      	b.n	8005080 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fce:	e057      	b.n	8005080 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d828      	bhi.n	800502a <UART_SetConfig+0x50e>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0x4c4>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	0800500d 	.word	0x0800500d
 8004fe8:	08005015 	.word	0x08005015
 8004fec:	0800502b 	.word	0x0800502b
 8004ff0:	0800501b 	.word	0x0800501b
 8004ff4:	0800502b 	.word	0x0800502b
 8004ff8:	0800502b 	.word	0x0800502b
 8004ffc:	0800502b 	.word	0x0800502b
 8005000:	08005023 	.word	0x08005023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7fd fa1e 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8005008:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800500a:	e014      	b.n	8005036 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800500c:	f7fd fa30 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 8005010:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005012:	e010      	b.n	8005036 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005014:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <UART_SetConfig+0x594>)
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005018:	e00d      	b.n	8005036 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501a:	f7fd f9a5 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 800501e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005020:	e009      	b.n	8005036 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005028:	e005      	b.n	8005036 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005034:	bf00      	nop
    }

    if (pclk != 0U)
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d021      	beq.n	8005080 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	4a1a      	ldr	r2, [pc, #104]	; (80050ac <UART_SetConfig+0x590>)
 8005042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005046:	461a      	mov	r2, r3
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	fbb3 f2f2 	udiv	r2, r3, r2
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	441a      	add	r2, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	2b0f      	cmp	r3, #15
 8005064:	d909      	bls.n	800507a <UART_SetConfig+0x55e>
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506c:	d205      	bcs.n	800507a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	b29a      	uxth	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	e002      	b.n	8005080 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2201      	movs	r2, #1
 8005084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2201      	movs	r2, #1
 800508c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2200      	movs	r2, #0
 8005094:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800509c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3730      	adds	r7, #48	; 0x30
 80050a4:	46bd      	mov	sp, r7
 80050a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050aa:	bf00      	nop
 80050ac:	08007934 	.word	0x08007934
 80050b0:	00f42400 	.word	0x00f42400

080050b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01a      	beq.n	80051ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b2:	d10a      	bne.n	80051ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
  }
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005208:	f7fc f84e 	bl	80012a8 <HAL_GetTick>
 800520c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b08      	cmp	r3, #8
 800521a:	d10e      	bne.n	800523a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800521c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f82f 	bl	800528e <UART_WaitOnFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e025      	b.n	8005286 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b04      	cmp	r3, #4
 8005246:	d10e      	bne.n	8005266 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f819 	bl	800528e <UART_WaitOnFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e00f      	b.n	8005286 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b09c      	sub	sp, #112	; 0x70
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	4613      	mov	r3, r2
 800529c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800529e:	e0a9      	b.n	80053f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a6:	f000 80a5 	beq.w	80053f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052aa:	f7fb fffd 	bl	80012a8 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d302      	bcc.n	80052c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80052ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d140      	bne.n	8005342 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052d4:	667b      	str	r3, [r7, #100]	; 0x64
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e6      	bne.n	80052c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3308      	adds	r3, #8
 80052f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	f023 0301 	bic.w	r3, r3, #1
 8005308:	663b      	str	r3, [r7, #96]	; 0x60
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3308      	adds	r3, #8
 8005310:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005312:	64ba      	str	r2, [r7, #72]	; 0x48
 8005314:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e5      	bne.n	80052f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e069      	b.n	8005416 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d051      	beq.n	80053f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800535a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535e:	d149      	bne.n	80053f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005368:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800537e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005388:	637b      	str	r3, [r7, #52]	; 0x34
 800538a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800538e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e6      	bne.n	800536a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3308      	adds	r3, #8
 80053a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	613b      	str	r3, [r7, #16]
   return(result);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3308      	adds	r3, #8
 80053ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053bc:	623a      	str	r2, [r7, #32]
 80053be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	69f9      	ldr	r1, [r7, #28]
 80053c2:	6a3a      	ldr	r2, [r7, #32]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e010      	b.n	8005416 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	4013      	ands	r3, r2
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	429a      	cmp	r2, r3
 8005402:	bf0c      	ite	eq
 8005404:	2301      	moveq	r3, #1
 8005406:	2300      	movne	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	429a      	cmp	r2, r3
 8005410:	f43f af46 	beq.w	80052a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3770      	adds	r7, #112	; 0x70
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005420:	b480      	push	{r7}
 8005422:	b0a3      	sub	sp, #140	; 0x8c
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	4613      	mov	r3, r2
 800542c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	88fa      	ldrh	r2, [r7, #6]
 8005440:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005452:	d10e      	bne.n	8005472 <UART_Start_Receive_IT+0x52>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d105      	bne.n	8005468 <UART_Start_Receive_IT+0x48>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005462:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005466:	e02d      	b.n	80054c4 <UART_Start_Receive_IT+0xa4>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	22ff      	movs	r2, #255	; 0xff
 800546c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005470:	e028      	b.n	80054c4 <UART_Start_Receive_IT+0xa4>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10d      	bne.n	8005496 <UART_Start_Receive_IT+0x76>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <UART_Start_Receive_IT+0x6c>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	22ff      	movs	r2, #255	; 0xff
 8005486:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800548a:	e01b      	b.n	80054c4 <UART_Start_Receive_IT+0xa4>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	227f      	movs	r2, #127	; 0x7f
 8005490:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005494:	e016      	b.n	80054c4 <UART_Start_Receive_IT+0xa4>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800549e:	d10d      	bne.n	80054bc <UART_Start_Receive_IT+0x9c>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d104      	bne.n	80054b2 <UART_Start_Receive_IT+0x92>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	227f      	movs	r2, #127	; 0x7f
 80054ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054b0:	e008      	b.n	80054c4 <UART_Start_Receive_IT+0xa4>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	223f      	movs	r2, #63	; 0x3f
 80054b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054ba:	e003      	b.n	80054c4 <UART_Start_Receive_IT+0xa4>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2222      	movs	r2, #34	; 0x22
 80054d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3308      	adds	r3, #8
 80054da:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80054e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3308      	adds	r3, #8
 80054f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80054f8:	673a      	str	r2, [r7, #112]	; 0x70
 80054fa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80054fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e3      	bne.n	80054d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005514:	d153      	bne.n	80055be <UART_Start_Receive_IT+0x19e>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800551c:	88fa      	ldrh	r2, [r7, #6]
 800551e:	429a      	cmp	r2, r3
 8005520:	d34d      	bcc.n	80055be <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552a:	d107      	bne.n	800553c <UART_Start_Receive_IT+0x11c>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d103      	bne.n	800553c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4a4b      	ldr	r2, [pc, #300]	; (8005664 <UART_Start_Receive_IT+0x244>)
 8005538:	671a      	str	r2, [r3, #112]	; 0x70
 800553a:	e002      	b.n	8005542 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a4a      	ldr	r2, [pc, #296]	; (8005668 <UART_Start_Receive_IT+0x248>)
 8005540:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01a      	beq.n	8005588 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005566:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005576:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800557a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e4      	bne.n	8005552 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3308      	adds	r3, #8
 800558e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3308      	adds	r3, #8
 80055a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80055a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80055aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e5      	bne.n	8005588 <UART_Start_Receive_IT+0x168>
 80055bc:	e04a      	b.n	8005654 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c6:	d107      	bne.n	80055d8 <UART_Start_Receive_IT+0x1b8>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d103      	bne.n	80055d8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a26      	ldr	r2, [pc, #152]	; (800566c <UART_Start_Receive_IT+0x24c>)
 80055d4:	671a      	str	r2, [r3, #112]	; 0x70
 80055d6:	e002      	b.n	80055de <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4a25      	ldr	r2, [pc, #148]	; (8005670 <UART_Start_Receive_IT+0x250>)
 80055dc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d019      	beq.n	8005622 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005602:	677b      	str	r3, [r7, #116]	; 0x74
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
 800560e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e6      	bne.n	80055ee <UART_Start_Receive_IT+0x1ce>
 8005620:	e018      	b.n	8005654 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	613b      	str	r3, [r7, #16]
   return(result);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f043 0320 	orr.w	r3, r3, #32
 8005636:	67bb      	str	r3, [r7, #120]	; 0x78
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005640:	623b      	str	r3, [r7, #32]
 8005642:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	69f9      	ldr	r1, [r7, #28]
 8005646:	6a3a      	ldr	r2, [r7, #32]
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	61bb      	str	r3, [r7, #24]
   return(result);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e6      	bne.n	8005622 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	378c      	adds	r7, #140	; 0x8c
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	08005d7d 	.word	0x08005d7d
 8005668:	08005a85 	.word	0x08005a85
 800566c:	08005923 	.word	0x08005923
 8005670:	080057c3 	.word	0x080057c3

08005674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b095      	sub	sp, #84	; 0x54
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800569a:	643b      	str	r3, [r7, #64]	; 0x40
 800569c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e6      	bne.n	800567c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056c4:	f023 0301 	bic.w	r3, r3, #1
 80056c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3308      	adds	r3, #8
 80056d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e3      	bne.n	80056ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d118      	bne.n	8005720 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f023 0310 	bic.w	r3, r3, #16
 8005702:	647b      	str	r3, [r7, #68]	; 0x44
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6979      	ldr	r1, [r7, #20]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	613b      	str	r3, [r7, #16]
   return(result);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e6      	bne.n	80056ee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005734:	bf00      	nop
 8005736:	3754      	adds	r7, #84	; 0x54
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f7ff f9c6 	bl	8004af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	60bb      	str	r3, [r7, #8]
   return(result);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	61bb      	str	r3, [r7, #24]
 8005794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6979      	ldr	r1, [r7, #20]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	613b      	str	r3, [r7, #16]
   return(result);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e6      	bne.n	8005774 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7ff f991 	bl	8004adc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ba:	bf00      	nop
 80057bc:	3720      	adds	r7, #32
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b096      	sub	sp, #88	; 0x58
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80057d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057da:	2b22      	cmp	r3, #34	; 0x22
 80057dc:	f040 8095 	bne.w	800590a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057ea:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80057ee:	b2d9      	uxtb	r1, r3
 80057f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fa:	400a      	ands	r2, r1
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d178      	bne.n	800591a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005838:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800583c:	653b      	str	r3, [r7, #80]	; 0x50
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005846:	647b      	str	r3, [r7, #68]	; 0x44
 8005848:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800584c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e6      	bne.n	8005828 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3308      	adds	r3, #8
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	623b      	str	r3, [r7, #32]
   return(result);
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3308      	adds	r3, #8
 8005878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800587a:	633a      	str	r2, [r7, #48]	; 0x30
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e5      	bne.n	800585a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2220      	movs	r2, #32
 8005892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d12e      	bne.n	8005902 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0310 	bic.w	r3, r3, #16
 80058be:	64bb      	str	r3, [r7, #72]	; 0x48
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	69b9      	ldr	r1, [r7, #24]
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	617b      	str	r3, [r7, #20]
   return(result);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e6      	bne.n	80058aa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f003 0310 	and.w	r3, r3, #16
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	d103      	bne.n	80058f2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2210      	movs	r2, #16
 80058f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff f902 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005900:	e00b      	b.n	800591a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fb f9ea 	bl	8000cdc <HAL_UART_RxCpltCallback>
}
 8005908:	e007      	b.n	800591a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	699a      	ldr	r2, [r3, #24]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0208 	orr.w	r2, r2, #8
 8005918:	619a      	str	r2, [r3, #24]
}
 800591a:	bf00      	nop
 800591c:	3758      	adds	r7, #88	; 0x58
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b096      	sub	sp, #88	; 0x58
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005930:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593a:	2b22      	cmp	r3, #34	; 0x22
 800593c:	f040 8095 	bne.w	8005a6a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005950:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005954:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005958:	4013      	ands	r3, r2
 800595a:	b29a      	uxth	r2, r3
 800595c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800595e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	1c9a      	adds	r2, r3, #2
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d178      	bne.n	8005a7a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800599c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a6:	643b      	str	r3, [r7, #64]	; 0x40
 80059a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e6      	bne.n	8005988 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3308      	adds	r3, #8
 80059c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e5      	bne.n	80059ba <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d12e      	bne.n	8005a62 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f023 0310 	bic.w	r3, r3, #16
 8005a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6979      	ldr	r1, [r7, #20]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	613b      	str	r3, [r7, #16]
   return(result);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e6      	bne.n	8005a0a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b10      	cmp	r3, #16
 8005a48:	d103      	bne.n	8005a52 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2210      	movs	r2, #16
 8005a50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7ff f852 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a60:	e00b      	b.n	8005a7a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fb f93a 	bl	8000cdc <HAL_UART_RxCpltCallback>
}
 8005a68:	e007      	b.n	8005a7a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699a      	ldr	r2, [r3, #24]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f042 0208 	orr.w	r2, r2, #8
 8005a78:	619a      	str	r2, [r3, #24]
}
 8005a7a:	bf00      	nop
 8005a7c:	3758      	adds	r7, #88	; 0x58
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b0a6      	sub	sp, #152	; 0x98
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a92:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aba:	2b22      	cmp	r3, #34	; 0x22
 8005abc:	f040 814f 	bne.w	8005d5e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ac6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005aca:	e0f6      	b.n	8005cba <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ad6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005ada:	b2d9      	uxtb	r1, r3
 8005adc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae6:	400a      	ands	r2, r1
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d053      	beq.n	8005bc6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d011      	beq.n	8005b4e <UART_RxISR_8BIT_FIFOEN+0xca>
 8005b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00b      	beq.n	8005b4e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b44:	f043 0201 	orr.w	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d011      	beq.n	8005b7e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005b5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b74:	f043 0204 	orr.w	r2, r3, #4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d011      	beq.n	8005bae <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00b      	beq.n	8005bae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba4:	f043 0202 	orr.w	r2, r3, #2
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d006      	beq.n	8005bc6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fe ff99 	bl	8004af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d173      	bne.n	8005cba <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005be2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005be6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bf6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005bfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e4      	bne.n	8005bd2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005c2c:	657a      	str	r2, [r7, #84]	; 0x54
 8005c2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e3      	bne.n	8005c08 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d12e      	bne.n	8005cb4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	f023 0310 	bic.w	r3, r3, #16
 8005c70:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e6      	bne.n	8005c5c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b10      	cmp	r3, #16
 8005c9a:	d103      	bne.n	8005ca4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2210      	movs	r2, #16
 8005ca2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005caa:	4619      	mov	r1, r3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7fe ff29 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
 8005cb2:	e002      	b.n	8005cba <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7fb f811 	bl	8000cdc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d006      	beq.n	8005cd0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005cc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f47f aefe 	bne.w	8005acc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005cda:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d045      	beq.n	8005d6e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ce8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d23e      	bcs.n	8005d6e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d06:	673b      	str	r3, [r7, #112]	; 0x70
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005d10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e5      	bne.n	8005cf0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a14      	ldr	r2, [pc, #80]	; (8005d78 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005d28:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f043 0320 	orr.w	r3, r3, #32
 8005d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6979      	ldr	r1, [r7, #20]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	613b      	str	r3, [r7, #16]
   return(result);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e6      	bne.n	8005d2a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d5c:	e007      	b.n	8005d6e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699a      	ldr	r2, [r3, #24]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0208 	orr.w	r2, r2, #8
 8005d6c:	619a      	str	r2, [r3, #24]
}
 8005d6e:	bf00      	nop
 8005d70:	3798      	adds	r7, #152	; 0x98
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	080057c3 	.word	0x080057c3

08005d7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b0a8      	sub	sp, #160	; 0xa0
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d8a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db2:	2b22      	cmp	r3, #34	; 0x22
 8005db4:	f040 8153 	bne.w	800605e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005dbe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005dc2:	e0fa      	b.n	8005fba <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005dd6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005dda:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005dde:	4013      	ands	r3, r2
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005de6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dec:	1c9a      	adds	r2, r3, #2
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d053      	beq.n	8005ec2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d011      	beq.n	8005e4a <UART_RxISR_16BIT_FIFOEN+0xce>
 8005e26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2201      	movs	r2, #1
 8005e38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e40:	f043 0201 	orr.w	r2, r3, #1
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d011      	beq.n	8005e7a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2202      	movs	r2, #2
 8005e68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e70:	f043 0204 	orr.w	r2, r3, #4
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d011      	beq.n	8005eaa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2204      	movs	r2, #4
 8005e98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea0:	f043 0202 	orr.w	r2, r3, #2
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d006      	beq.n	8005ec2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7fe fe1b 	bl	8004af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d175      	bne.n	8005fba <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed6:	e853 3f00 	ldrex	r3, [r3]
 8005eda:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ef2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ef6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ef8:	e841 2300 	strex	r3, r2, [r1]
 8005efc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e4      	bne.n	8005ece <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3308      	adds	r3, #8
 8005f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f1a:	f023 0301 	bic.w	r3, r3, #1
 8005f1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3308      	adds	r3, #8
 8005f28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f34:	e841 2300 	strex	r3, r2, [r1]
 8005f38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e1      	bne.n	8005f04 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d12e      	bne.n	8005fb4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6c:	f023 0310 	bic.w	r3, r3, #16
 8005f70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e6      	bne.n	8005f5c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	2b10      	cmp	r3, #16
 8005f9a:	d103      	bne.n	8005fa4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2210      	movs	r2, #16
 8005fa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7fe fda9 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
 8005fb2:	e002      	b.n	8005fba <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7fa fe91 	bl	8000cdc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005fba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d006      	beq.n	8005fd0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005fc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f47f aefa 	bne.w	8005dc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fd6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005fda:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d045      	beq.n	800606e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005fe8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d23e      	bcs.n	800606e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	623b      	str	r3, [r7, #32]
   return(result);
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006006:	677b      	str	r3, [r7, #116]	; 0x74
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3308      	adds	r3, #8
 800600e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006010:	633a      	str	r2, [r7, #48]	; 0x30
 8006012:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006018:	e841 2300 	strex	r3, r2, [r1]
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e5      	bne.n	8005ff0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a14      	ldr	r2, [pc, #80]	; (8006078 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006028:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	60fb      	str	r3, [r7, #12]
   return(result);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f043 0320 	orr.w	r3, r3, #32
 800603e:	673b      	str	r3, [r7, #112]	; 0x70
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006048:	61fb      	str	r3, [r7, #28]
 800604a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	69b9      	ldr	r1, [r7, #24]
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	617b      	str	r3, [r7, #20]
   return(result);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e6      	bne.n	800602a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800605c:	e007      	b.n	800606e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699a      	ldr	r2, [r3, #24]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0208 	orr.w	r2, r2, #8
 800606c:	619a      	str	r2, [r3, #24]
}
 800606e:	bf00      	nop
 8006070:	37a0      	adds	r7, #160	; 0xa0
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	08005923 	.word	0x08005923

0800607c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_UARTEx_DisableFifoMode+0x16>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e027      	b.n	800611e <HAL_UARTEx_DisableFifoMode+0x66>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2224      	movs	r2, #36	; 0x24
 80060da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0201 	bic.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800613e:	2302      	movs	r3, #2
 8006140:	e02d      	b.n	800619e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2224      	movs	r2, #36	; 0x24
 800614e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f850 	bl	8006224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e02d      	b.n	800621a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2224      	movs	r2, #36	; 0x24
 80061ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0201 	bic.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f812 	bl	8006224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006230:	2b00      	cmp	r3, #0
 8006232:	d108      	bne.n	8006246 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006244:	e031      	b.n	80062aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006246:	2308      	movs	r3, #8
 8006248:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800624a:	2308      	movs	r3, #8
 800624c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	0e5b      	lsrs	r3, r3, #25
 8006256:	b2db      	uxtb	r3, r3
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	0f5b      	lsrs	r3, r3, #29
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800626e:	7bbb      	ldrb	r3, [r7, #14]
 8006270:	7b3a      	ldrb	r2, [r7, #12]
 8006272:	4911      	ldr	r1, [pc, #68]	; (80062b8 <UARTEx_SetNbDataToProcess+0x94>)
 8006274:	5c8a      	ldrb	r2, [r1, r2]
 8006276:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800627a:	7b3a      	ldrb	r2, [r7, #12]
 800627c:	490f      	ldr	r1, [pc, #60]	; (80062bc <UARTEx_SetNbDataToProcess+0x98>)
 800627e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006280:	fb93 f3f2 	sdiv	r3, r3, r2
 8006284:	b29a      	uxth	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	7b7a      	ldrb	r2, [r7, #13]
 8006290:	4909      	ldr	r1, [pc, #36]	; (80062b8 <UARTEx_SetNbDataToProcess+0x94>)
 8006292:	5c8a      	ldrb	r2, [r1, r2]
 8006294:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006298:	7b7a      	ldrb	r2, [r7, #13]
 800629a:	4908      	ldr	r1, [pc, #32]	; (80062bc <UARTEx_SetNbDataToProcess+0x98>)
 800629c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800629e:	fb93 f3f2 	sdiv	r3, r3, r2
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80062aa:	bf00      	nop
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	0800794c 	.word	0x0800794c
 80062bc:	08007954 	.word	0x08007954

080062c0 <atoi>:
 80062c0:	220a      	movs	r2, #10
 80062c2:	2100      	movs	r1, #0
 80062c4:	f000 b930 	b.w	8006528 <strtol>

080062c8 <__errno>:
 80062c8:	4b01      	ldr	r3, [pc, #4]	; (80062d0 <__errno+0x8>)
 80062ca:	6818      	ldr	r0, [r3, #0]
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	200001ac 	.word	0x200001ac

080062d4 <__libc_init_array>:
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	4d0d      	ldr	r5, [pc, #52]	; (800630c <__libc_init_array+0x38>)
 80062d8:	4c0d      	ldr	r4, [pc, #52]	; (8006310 <__libc_init_array+0x3c>)
 80062da:	1b64      	subs	r4, r4, r5
 80062dc:	10a4      	asrs	r4, r4, #2
 80062de:	2600      	movs	r6, #0
 80062e0:	42a6      	cmp	r6, r4
 80062e2:	d109      	bne.n	80062f8 <__libc_init_array+0x24>
 80062e4:	4d0b      	ldr	r5, [pc, #44]	; (8006314 <__libc_init_array+0x40>)
 80062e6:	4c0c      	ldr	r4, [pc, #48]	; (8006318 <__libc_init_array+0x44>)
 80062e8:	f001 fade 	bl	80078a8 <_init>
 80062ec:	1b64      	subs	r4, r4, r5
 80062ee:	10a4      	asrs	r4, r4, #2
 80062f0:	2600      	movs	r6, #0
 80062f2:	42a6      	cmp	r6, r4
 80062f4:	d105      	bne.n	8006302 <__libc_init_array+0x2e>
 80062f6:	bd70      	pop	{r4, r5, r6, pc}
 80062f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062fc:	4798      	blx	r3
 80062fe:	3601      	adds	r6, #1
 8006300:	e7ee      	b.n	80062e0 <__libc_init_array+0xc>
 8006302:	f855 3b04 	ldr.w	r3, [r5], #4
 8006306:	4798      	blx	r3
 8006308:	3601      	adds	r6, #1
 800630a:	e7f2      	b.n	80062f2 <__libc_init_array+0x1e>
 800630c:	08007bac 	.word	0x08007bac
 8006310:	08007bac 	.word	0x08007bac
 8006314:	08007bac 	.word	0x08007bac
 8006318:	08007bb0 	.word	0x08007bb0

0800631c <memset>:
 800631c:	4402      	add	r2, r0
 800631e:	4603      	mov	r3, r0
 8006320:	4293      	cmp	r3, r2
 8006322:	d100      	bne.n	8006326 <memset+0xa>
 8006324:	4770      	bx	lr
 8006326:	f803 1b01 	strb.w	r1, [r3], #1
 800632a:	e7f9      	b.n	8006320 <memset+0x4>

0800632c <siprintf>:
 800632c:	b40e      	push	{r1, r2, r3}
 800632e:	b500      	push	{lr}
 8006330:	b09c      	sub	sp, #112	; 0x70
 8006332:	ab1d      	add	r3, sp, #116	; 0x74
 8006334:	9002      	str	r0, [sp, #8]
 8006336:	9006      	str	r0, [sp, #24]
 8006338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800633c:	4809      	ldr	r0, [pc, #36]	; (8006364 <siprintf+0x38>)
 800633e:	9107      	str	r1, [sp, #28]
 8006340:	9104      	str	r1, [sp, #16]
 8006342:	4909      	ldr	r1, [pc, #36]	; (8006368 <siprintf+0x3c>)
 8006344:	f853 2b04 	ldr.w	r2, [r3], #4
 8006348:	9105      	str	r1, [sp, #20]
 800634a:	6800      	ldr	r0, [r0, #0]
 800634c:	9301      	str	r3, [sp, #4]
 800634e:	a902      	add	r1, sp, #8
 8006350:	f000 fa68 	bl	8006824 <_svfiprintf_r>
 8006354:	9b02      	ldr	r3, [sp, #8]
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	b01c      	add	sp, #112	; 0x70
 800635c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006360:	b003      	add	sp, #12
 8006362:	4770      	bx	lr
 8006364:	200001ac 	.word	0x200001ac
 8006368:	ffff0208 	.word	0xffff0208

0800636c <strtok>:
 800636c:	4b16      	ldr	r3, [pc, #88]	; (80063c8 <strtok+0x5c>)
 800636e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006370:	681e      	ldr	r6, [r3, #0]
 8006372:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006374:	4605      	mov	r5, r0
 8006376:	b9fc      	cbnz	r4, 80063b8 <strtok+0x4c>
 8006378:	2050      	movs	r0, #80	; 0x50
 800637a:	9101      	str	r1, [sp, #4]
 800637c:	f000 f90e 	bl	800659c <malloc>
 8006380:	9901      	ldr	r1, [sp, #4]
 8006382:	65b0      	str	r0, [r6, #88]	; 0x58
 8006384:	4602      	mov	r2, r0
 8006386:	b920      	cbnz	r0, 8006392 <strtok+0x26>
 8006388:	4b10      	ldr	r3, [pc, #64]	; (80063cc <strtok+0x60>)
 800638a:	4811      	ldr	r0, [pc, #68]	; (80063d0 <strtok+0x64>)
 800638c:	2157      	movs	r1, #87	; 0x57
 800638e:	f000 f8d5 	bl	800653c <__assert_func>
 8006392:	e9c0 4400 	strd	r4, r4, [r0]
 8006396:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800639a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800639e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80063a2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80063a6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80063aa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80063ae:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80063b2:	6184      	str	r4, [r0, #24]
 80063b4:	7704      	strb	r4, [r0, #28]
 80063b6:	6244      	str	r4, [r0, #36]	; 0x24
 80063b8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80063ba:	2301      	movs	r3, #1
 80063bc:	4628      	mov	r0, r5
 80063be:	b002      	add	sp, #8
 80063c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063c4:	f000 b806 	b.w	80063d4 <__strtok_r>
 80063c8:	200001ac 	.word	0x200001ac
 80063cc:	08007960 	.word	0x08007960
 80063d0:	08007977 	.word	0x08007977

080063d4 <__strtok_r>:
 80063d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063d6:	b908      	cbnz	r0, 80063dc <__strtok_r+0x8>
 80063d8:	6810      	ldr	r0, [r2, #0]
 80063da:	b188      	cbz	r0, 8006400 <__strtok_r+0x2c>
 80063dc:	4604      	mov	r4, r0
 80063de:	4620      	mov	r0, r4
 80063e0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80063e4:	460f      	mov	r7, r1
 80063e6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80063ea:	b91e      	cbnz	r6, 80063f4 <__strtok_r+0x20>
 80063ec:	b965      	cbnz	r5, 8006408 <__strtok_r+0x34>
 80063ee:	6015      	str	r5, [r2, #0]
 80063f0:	4628      	mov	r0, r5
 80063f2:	e005      	b.n	8006400 <__strtok_r+0x2c>
 80063f4:	42b5      	cmp	r5, r6
 80063f6:	d1f6      	bne.n	80063e6 <__strtok_r+0x12>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1f0      	bne.n	80063de <__strtok_r+0xa>
 80063fc:	6014      	str	r4, [r2, #0]
 80063fe:	7003      	strb	r3, [r0, #0]
 8006400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006402:	461c      	mov	r4, r3
 8006404:	e00c      	b.n	8006420 <__strtok_r+0x4c>
 8006406:	b915      	cbnz	r5, 800640e <__strtok_r+0x3a>
 8006408:	f814 3b01 	ldrb.w	r3, [r4], #1
 800640c:	460e      	mov	r6, r1
 800640e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006412:	42ab      	cmp	r3, r5
 8006414:	d1f7      	bne.n	8006406 <__strtok_r+0x32>
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0f3      	beq.n	8006402 <__strtok_r+0x2e>
 800641a:	2300      	movs	r3, #0
 800641c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006420:	6014      	str	r4, [r2, #0]
 8006422:	e7ed      	b.n	8006400 <__strtok_r+0x2c>

08006424 <_strtol_l.constprop.0>:
 8006424:	2b01      	cmp	r3, #1
 8006426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800642a:	d001      	beq.n	8006430 <_strtol_l.constprop.0+0xc>
 800642c:	2b24      	cmp	r3, #36	; 0x24
 800642e:	d906      	bls.n	800643e <_strtol_l.constprop.0+0x1a>
 8006430:	f7ff ff4a 	bl	80062c8 <__errno>
 8006434:	2316      	movs	r3, #22
 8006436:	6003      	str	r3, [r0, #0]
 8006438:	2000      	movs	r0, #0
 800643a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006524 <_strtol_l.constprop.0+0x100>
 8006442:	460d      	mov	r5, r1
 8006444:	462e      	mov	r6, r5
 8006446:	f815 4b01 	ldrb.w	r4, [r5], #1
 800644a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800644e:	f017 0708 	ands.w	r7, r7, #8
 8006452:	d1f7      	bne.n	8006444 <_strtol_l.constprop.0+0x20>
 8006454:	2c2d      	cmp	r4, #45	; 0x2d
 8006456:	d132      	bne.n	80064be <_strtol_l.constprop.0+0x9a>
 8006458:	782c      	ldrb	r4, [r5, #0]
 800645a:	2701      	movs	r7, #1
 800645c:	1cb5      	adds	r5, r6, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d05b      	beq.n	800651a <_strtol_l.constprop.0+0xf6>
 8006462:	2b10      	cmp	r3, #16
 8006464:	d109      	bne.n	800647a <_strtol_l.constprop.0+0x56>
 8006466:	2c30      	cmp	r4, #48	; 0x30
 8006468:	d107      	bne.n	800647a <_strtol_l.constprop.0+0x56>
 800646a:	782c      	ldrb	r4, [r5, #0]
 800646c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006470:	2c58      	cmp	r4, #88	; 0x58
 8006472:	d14d      	bne.n	8006510 <_strtol_l.constprop.0+0xec>
 8006474:	786c      	ldrb	r4, [r5, #1]
 8006476:	2310      	movs	r3, #16
 8006478:	3502      	adds	r5, #2
 800647a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800647e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006482:	f04f 0c00 	mov.w	ip, #0
 8006486:	fbb8 f9f3 	udiv	r9, r8, r3
 800648a:	4666      	mov	r6, ip
 800648c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006490:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006494:	f1be 0f09 	cmp.w	lr, #9
 8006498:	d816      	bhi.n	80064c8 <_strtol_l.constprop.0+0xa4>
 800649a:	4674      	mov	r4, lr
 800649c:	42a3      	cmp	r3, r4
 800649e:	dd24      	ble.n	80064ea <_strtol_l.constprop.0+0xc6>
 80064a0:	f1bc 0f00 	cmp.w	ip, #0
 80064a4:	db1e      	blt.n	80064e4 <_strtol_l.constprop.0+0xc0>
 80064a6:	45b1      	cmp	r9, r6
 80064a8:	d31c      	bcc.n	80064e4 <_strtol_l.constprop.0+0xc0>
 80064aa:	d101      	bne.n	80064b0 <_strtol_l.constprop.0+0x8c>
 80064ac:	45a2      	cmp	sl, r4
 80064ae:	db19      	blt.n	80064e4 <_strtol_l.constprop.0+0xc0>
 80064b0:	fb06 4603 	mla	r6, r6, r3, r4
 80064b4:	f04f 0c01 	mov.w	ip, #1
 80064b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064bc:	e7e8      	b.n	8006490 <_strtol_l.constprop.0+0x6c>
 80064be:	2c2b      	cmp	r4, #43	; 0x2b
 80064c0:	bf04      	itt	eq
 80064c2:	782c      	ldrbeq	r4, [r5, #0]
 80064c4:	1cb5      	addeq	r5, r6, #2
 80064c6:	e7ca      	b.n	800645e <_strtol_l.constprop.0+0x3a>
 80064c8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80064cc:	f1be 0f19 	cmp.w	lr, #25
 80064d0:	d801      	bhi.n	80064d6 <_strtol_l.constprop.0+0xb2>
 80064d2:	3c37      	subs	r4, #55	; 0x37
 80064d4:	e7e2      	b.n	800649c <_strtol_l.constprop.0+0x78>
 80064d6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80064da:	f1be 0f19 	cmp.w	lr, #25
 80064de:	d804      	bhi.n	80064ea <_strtol_l.constprop.0+0xc6>
 80064e0:	3c57      	subs	r4, #87	; 0x57
 80064e2:	e7db      	b.n	800649c <_strtol_l.constprop.0+0x78>
 80064e4:	f04f 3cff 	mov.w	ip, #4294967295
 80064e8:	e7e6      	b.n	80064b8 <_strtol_l.constprop.0+0x94>
 80064ea:	f1bc 0f00 	cmp.w	ip, #0
 80064ee:	da05      	bge.n	80064fc <_strtol_l.constprop.0+0xd8>
 80064f0:	2322      	movs	r3, #34	; 0x22
 80064f2:	6003      	str	r3, [r0, #0]
 80064f4:	4646      	mov	r6, r8
 80064f6:	b942      	cbnz	r2, 800650a <_strtol_l.constprop.0+0xe6>
 80064f8:	4630      	mov	r0, r6
 80064fa:	e79e      	b.n	800643a <_strtol_l.constprop.0+0x16>
 80064fc:	b107      	cbz	r7, 8006500 <_strtol_l.constprop.0+0xdc>
 80064fe:	4276      	negs	r6, r6
 8006500:	2a00      	cmp	r2, #0
 8006502:	d0f9      	beq.n	80064f8 <_strtol_l.constprop.0+0xd4>
 8006504:	f1bc 0f00 	cmp.w	ip, #0
 8006508:	d000      	beq.n	800650c <_strtol_l.constprop.0+0xe8>
 800650a:	1e69      	subs	r1, r5, #1
 800650c:	6011      	str	r1, [r2, #0]
 800650e:	e7f3      	b.n	80064f8 <_strtol_l.constprop.0+0xd4>
 8006510:	2430      	movs	r4, #48	; 0x30
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1b1      	bne.n	800647a <_strtol_l.constprop.0+0x56>
 8006516:	2308      	movs	r3, #8
 8006518:	e7af      	b.n	800647a <_strtol_l.constprop.0+0x56>
 800651a:	2c30      	cmp	r4, #48	; 0x30
 800651c:	d0a5      	beq.n	800646a <_strtol_l.constprop.0+0x46>
 800651e:	230a      	movs	r3, #10
 8006520:	e7ab      	b.n	800647a <_strtol_l.constprop.0+0x56>
 8006522:	bf00      	nop
 8006524:	08007a11 	.word	0x08007a11

08006528 <strtol>:
 8006528:	4613      	mov	r3, r2
 800652a:	460a      	mov	r2, r1
 800652c:	4601      	mov	r1, r0
 800652e:	4802      	ldr	r0, [pc, #8]	; (8006538 <strtol+0x10>)
 8006530:	6800      	ldr	r0, [r0, #0]
 8006532:	f7ff bf77 	b.w	8006424 <_strtol_l.constprop.0>
 8006536:	bf00      	nop
 8006538:	200001ac 	.word	0x200001ac

0800653c <__assert_func>:
 800653c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800653e:	4614      	mov	r4, r2
 8006540:	461a      	mov	r2, r3
 8006542:	4b09      	ldr	r3, [pc, #36]	; (8006568 <__assert_func+0x2c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4605      	mov	r5, r0
 8006548:	68d8      	ldr	r0, [r3, #12]
 800654a:	b14c      	cbz	r4, 8006560 <__assert_func+0x24>
 800654c:	4b07      	ldr	r3, [pc, #28]	; (800656c <__assert_func+0x30>)
 800654e:	9100      	str	r1, [sp, #0]
 8006550:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006554:	4906      	ldr	r1, [pc, #24]	; (8006570 <__assert_func+0x34>)
 8006556:	462b      	mov	r3, r5
 8006558:	f000 f80e 	bl	8006578 <fiprintf>
 800655c:	f000 fe20 	bl	80071a0 <abort>
 8006560:	4b04      	ldr	r3, [pc, #16]	; (8006574 <__assert_func+0x38>)
 8006562:	461c      	mov	r4, r3
 8006564:	e7f3      	b.n	800654e <__assert_func+0x12>
 8006566:	bf00      	nop
 8006568:	200001ac 	.word	0x200001ac
 800656c:	080079d4 	.word	0x080079d4
 8006570:	080079e1 	.word	0x080079e1
 8006574:	08007a0f 	.word	0x08007a0f

08006578 <fiprintf>:
 8006578:	b40e      	push	{r1, r2, r3}
 800657a:	b503      	push	{r0, r1, lr}
 800657c:	4601      	mov	r1, r0
 800657e:	ab03      	add	r3, sp, #12
 8006580:	4805      	ldr	r0, [pc, #20]	; (8006598 <fiprintf+0x20>)
 8006582:	f853 2b04 	ldr.w	r2, [r3], #4
 8006586:	6800      	ldr	r0, [r0, #0]
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	f000 fa75 	bl	8006a78 <_vfiprintf_r>
 800658e:	b002      	add	sp, #8
 8006590:	f85d eb04 	ldr.w	lr, [sp], #4
 8006594:	b003      	add	sp, #12
 8006596:	4770      	bx	lr
 8006598:	200001ac 	.word	0x200001ac

0800659c <malloc>:
 800659c:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <malloc+0xc>)
 800659e:	4601      	mov	r1, r0
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	f000 b86f 	b.w	8006684 <_malloc_r>
 80065a6:	bf00      	nop
 80065a8:	200001ac 	.word	0x200001ac

080065ac <_free_r>:
 80065ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065ae:	2900      	cmp	r1, #0
 80065b0:	d044      	beq.n	800663c <_free_r+0x90>
 80065b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065b6:	9001      	str	r0, [sp, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f1a1 0404 	sub.w	r4, r1, #4
 80065be:	bfb8      	it	lt
 80065c0:	18e4      	addlt	r4, r4, r3
 80065c2:	f001 f83d 	bl	8007640 <__malloc_lock>
 80065c6:	4a1e      	ldr	r2, [pc, #120]	; (8006640 <_free_r+0x94>)
 80065c8:	9801      	ldr	r0, [sp, #4]
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	b933      	cbnz	r3, 80065dc <_free_r+0x30>
 80065ce:	6063      	str	r3, [r4, #4]
 80065d0:	6014      	str	r4, [r2, #0]
 80065d2:	b003      	add	sp, #12
 80065d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065d8:	f001 b838 	b.w	800764c <__malloc_unlock>
 80065dc:	42a3      	cmp	r3, r4
 80065de:	d908      	bls.n	80065f2 <_free_r+0x46>
 80065e0:	6825      	ldr	r5, [r4, #0]
 80065e2:	1961      	adds	r1, r4, r5
 80065e4:	428b      	cmp	r3, r1
 80065e6:	bf01      	itttt	eq
 80065e8:	6819      	ldreq	r1, [r3, #0]
 80065ea:	685b      	ldreq	r3, [r3, #4]
 80065ec:	1949      	addeq	r1, r1, r5
 80065ee:	6021      	streq	r1, [r4, #0]
 80065f0:	e7ed      	b.n	80065ce <_free_r+0x22>
 80065f2:	461a      	mov	r2, r3
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	b10b      	cbz	r3, 80065fc <_free_r+0x50>
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	d9fa      	bls.n	80065f2 <_free_r+0x46>
 80065fc:	6811      	ldr	r1, [r2, #0]
 80065fe:	1855      	adds	r5, r2, r1
 8006600:	42a5      	cmp	r5, r4
 8006602:	d10b      	bne.n	800661c <_free_r+0x70>
 8006604:	6824      	ldr	r4, [r4, #0]
 8006606:	4421      	add	r1, r4
 8006608:	1854      	adds	r4, r2, r1
 800660a:	42a3      	cmp	r3, r4
 800660c:	6011      	str	r1, [r2, #0]
 800660e:	d1e0      	bne.n	80065d2 <_free_r+0x26>
 8006610:	681c      	ldr	r4, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	6053      	str	r3, [r2, #4]
 8006616:	4421      	add	r1, r4
 8006618:	6011      	str	r1, [r2, #0]
 800661a:	e7da      	b.n	80065d2 <_free_r+0x26>
 800661c:	d902      	bls.n	8006624 <_free_r+0x78>
 800661e:	230c      	movs	r3, #12
 8006620:	6003      	str	r3, [r0, #0]
 8006622:	e7d6      	b.n	80065d2 <_free_r+0x26>
 8006624:	6825      	ldr	r5, [r4, #0]
 8006626:	1961      	adds	r1, r4, r5
 8006628:	428b      	cmp	r3, r1
 800662a:	bf04      	itt	eq
 800662c:	6819      	ldreq	r1, [r3, #0]
 800662e:	685b      	ldreq	r3, [r3, #4]
 8006630:	6063      	str	r3, [r4, #4]
 8006632:	bf04      	itt	eq
 8006634:	1949      	addeq	r1, r1, r5
 8006636:	6021      	streq	r1, [r4, #0]
 8006638:	6054      	str	r4, [r2, #4]
 800663a:	e7ca      	b.n	80065d2 <_free_r+0x26>
 800663c:	b003      	add	sp, #12
 800663e:	bd30      	pop	{r4, r5, pc}
 8006640:	200003ac 	.word	0x200003ac

08006644 <sbrk_aligned>:
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	4e0e      	ldr	r6, [pc, #56]	; (8006680 <sbrk_aligned+0x3c>)
 8006648:	460c      	mov	r4, r1
 800664a:	6831      	ldr	r1, [r6, #0]
 800664c:	4605      	mov	r5, r0
 800664e:	b911      	cbnz	r1, 8006656 <sbrk_aligned+0x12>
 8006650:	f000 fcd6 	bl	8007000 <_sbrk_r>
 8006654:	6030      	str	r0, [r6, #0]
 8006656:	4621      	mov	r1, r4
 8006658:	4628      	mov	r0, r5
 800665a:	f000 fcd1 	bl	8007000 <_sbrk_r>
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	d00a      	beq.n	8006678 <sbrk_aligned+0x34>
 8006662:	1cc4      	adds	r4, r0, #3
 8006664:	f024 0403 	bic.w	r4, r4, #3
 8006668:	42a0      	cmp	r0, r4
 800666a:	d007      	beq.n	800667c <sbrk_aligned+0x38>
 800666c:	1a21      	subs	r1, r4, r0
 800666e:	4628      	mov	r0, r5
 8006670:	f000 fcc6 	bl	8007000 <_sbrk_r>
 8006674:	3001      	adds	r0, #1
 8006676:	d101      	bne.n	800667c <sbrk_aligned+0x38>
 8006678:	f04f 34ff 	mov.w	r4, #4294967295
 800667c:	4620      	mov	r0, r4
 800667e:	bd70      	pop	{r4, r5, r6, pc}
 8006680:	200003b0 	.word	0x200003b0

08006684 <_malloc_r>:
 8006684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006688:	1ccd      	adds	r5, r1, #3
 800668a:	f025 0503 	bic.w	r5, r5, #3
 800668e:	3508      	adds	r5, #8
 8006690:	2d0c      	cmp	r5, #12
 8006692:	bf38      	it	cc
 8006694:	250c      	movcc	r5, #12
 8006696:	2d00      	cmp	r5, #0
 8006698:	4607      	mov	r7, r0
 800669a:	db01      	blt.n	80066a0 <_malloc_r+0x1c>
 800669c:	42a9      	cmp	r1, r5
 800669e:	d905      	bls.n	80066ac <_malloc_r+0x28>
 80066a0:	230c      	movs	r3, #12
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	2600      	movs	r6, #0
 80066a6:	4630      	mov	r0, r6
 80066a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ac:	4e2e      	ldr	r6, [pc, #184]	; (8006768 <_malloc_r+0xe4>)
 80066ae:	f000 ffc7 	bl	8007640 <__malloc_lock>
 80066b2:	6833      	ldr	r3, [r6, #0]
 80066b4:	461c      	mov	r4, r3
 80066b6:	bb34      	cbnz	r4, 8006706 <_malloc_r+0x82>
 80066b8:	4629      	mov	r1, r5
 80066ba:	4638      	mov	r0, r7
 80066bc:	f7ff ffc2 	bl	8006644 <sbrk_aligned>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	4604      	mov	r4, r0
 80066c4:	d14d      	bne.n	8006762 <_malloc_r+0xde>
 80066c6:	6834      	ldr	r4, [r6, #0]
 80066c8:	4626      	mov	r6, r4
 80066ca:	2e00      	cmp	r6, #0
 80066cc:	d140      	bne.n	8006750 <_malloc_r+0xcc>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	4631      	mov	r1, r6
 80066d2:	4638      	mov	r0, r7
 80066d4:	eb04 0803 	add.w	r8, r4, r3
 80066d8:	f000 fc92 	bl	8007000 <_sbrk_r>
 80066dc:	4580      	cmp	r8, r0
 80066de:	d13a      	bne.n	8006756 <_malloc_r+0xd2>
 80066e0:	6821      	ldr	r1, [r4, #0]
 80066e2:	3503      	adds	r5, #3
 80066e4:	1a6d      	subs	r5, r5, r1
 80066e6:	f025 0503 	bic.w	r5, r5, #3
 80066ea:	3508      	adds	r5, #8
 80066ec:	2d0c      	cmp	r5, #12
 80066ee:	bf38      	it	cc
 80066f0:	250c      	movcc	r5, #12
 80066f2:	4629      	mov	r1, r5
 80066f4:	4638      	mov	r0, r7
 80066f6:	f7ff ffa5 	bl	8006644 <sbrk_aligned>
 80066fa:	3001      	adds	r0, #1
 80066fc:	d02b      	beq.n	8006756 <_malloc_r+0xd2>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	442b      	add	r3, r5
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	e00e      	b.n	8006724 <_malloc_r+0xa0>
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	1b52      	subs	r2, r2, r5
 800670a:	d41e      	bmi.n	800674a <_malloc_r+0xc6>
 800670c:	2a0b      	cmp	r2, #11
 800670e:	d916      	bls.n	800673e <_malloc_r+0xba>
 8006710:	1961      	adds	r1, r4, r5
 8006712:	42a3      	cmp	r3, r4
 8006714:	6025      	str	r5, [r4, #0]
 8006716:	bf18      	it	ne
 8006718:	6059      	strne	r1, [r3, #4]
 800671a:	6863      	ldr	r3, [r4, #4]
 800671c:	bf08      	it	eq
 800671e:	6031      	streq	r1, [r6, #0]
 8006720:	5162      	str	r2, [r4, r5]
 8006722:	604b      	str	r3, [r1, #4]
 8006724:	4638      	mov	r0, r7
 8006726:	f104 060b 	add.w	r6, r4, #11
 800672a:	f000 ff8f 	bl	800764c <__malloc_unlock>
 800672e:	f026 0607 	bic.w	r6, r6, #7
 8006732:	1d23      	adds	r3, r4, #4
 8006734:	1af2      	subs	r2, r6, r3
 8006736:	d0b6      	beq.n	80066a6 <_malloc_r+0x22>
 8006738:	1b9b      	subs	r3, r3, r6
 800673a:	50a3      	str	r3, [r4, r2]
 800673c:	e7b3      	b.n	80066a6 <_malloc_r+0x22>
 800673e:	6862      	ldr	r2, [r4, #4]
 8006740:	42a3      	cmp	r3, r4
 8006742:	bf0c      	ite	eq
 8006744:	6032      	streq	r2, [r6, #0]
 8006746:	605a      	strne	r2, [r3, #4]
 8006748:	e7ec      	b.n	8006724 <_malloc_r+0xa0>
 800674a:	4623      	mov	r3, r4
 800674c:	6864      	ldr	r4, [r4, #4]
 800674e:	e7b2      	b.n	80066b6 <_malloc_r+0x32>
 8006750:	4634      	mov	r4, r6
 8006752:	6876      	ldr	r6, [r6, #4]
 8006754:	e7b9      	b.n	80066ca <_malloc_r+0x46>
 8006756:	230c      	movs	r3, #12
 8006758:	603b      	str	r3, [r7, #0]
 800675a:	4638      	mov	r0, r7
 800675c:	f000 ff76 	bl	800764c <__malloc_unlock>
 8006760:	e7a1      	b.n	80066a6 <_malloc_r+0x22>
 8006762:	6025      	str	r5, [r4, #0]
 8006764:	e7de      	b.n	8006724 <_malloc_r+0xa0>
 8006766:	bf00      	nop
 8006768:	200003ac 	.word	0x200003ac

0800676c <__ssputs_r>:
 800676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	688e      	ldr	r6, [r1, #8]
 8006772:	429e      	cmp	r6, r3
 8006774:	4682      	mov	sl, r0
 8006776:	460c      	mov	r4, r1
 8006778:	4690      	mov	r8, r2
 800677a:	461f      	mov	r7, r3
 800677c:	d838      	bhi.n	80067f0 <__ssputs_r+0x84>
 800677e:	898a      	ldrh	r2, [r1, #12]
 8006780:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006784:	d032      	beq.n	80067ec <__ssputs_r+0x80>
 8006786:	6825      	ldr	r5, [r4, #0]
 8006788:	6909      	ldr	r1, [r1, #16]
 800678a:	eba5 0901 	sub.w	r9, r5, r1
 800678e:	6965      	ldr	r5, [r4, #20]
 8006790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006794:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006798:	3301      	adds	r3, #1
 800679a:	444b      	add	r3, r9
 800679c:	106d      	asrs	r5, r5, #1
 800679e:	429d      	cmp	r5, r3
 80067a0:	bf38      	it	cc
 80067a2:	461d      	movcc	r5, r3
 80067a4:	0553      	lsls	r3, r2, #21
 80067a6:	d531      	bpl.n	800680c <__ssputs_r+0xa0>
 80067a8:	4629      	mov	r1, r5
 80067aa:	f7ff ff6b 	bl	8006684 <_malloc_r>
 80067ae:	4606      	mov	r6, r0
 80067b0:	b950      	cbnz	r0, 80067c8 <__ssputs_r+0x5c>
 80067b2:	230c      	movs	r3, #12
 80067b4:	f8ca 3000 	str.w	r3, [sl]
 80067b8:	89a3      	ldrh	r3, [r4, #12]
 80067ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067be:	81a3      	strh	r3, [r4, #12]
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295
 80067c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c8:	6921      	ldr	r1, [r4, #16]
 80067ca:	464a      	mov	r2, r9
 80067cc:	f000 ff10 	bl	80075f0 <memcpy>
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	6126      	str	r6, [r4, #16]
 80067de:	6165      	str	r5, [r4, #20]
 80067e0:	444e      	add	r6, r9
 80067e2:	eba5 0509 	sub.w	r5, r5, r9
 80067e6:	6026      	str	r6, [r4, #0]
 80067e8:	60a5      	str	r5, [r4, #8]
 80067ea:	463e      	mov	r6, r7
 80067ec:	42be      	cmp	r6, r7
 80067ee:	d900      	bls.n	80067f2 <__ssputs_r+0x86>
 80067f0:	463e      	mov	r6, r7
 80067f2:	6820      	ldr	r0, [r4, #0]
 80067f4:	4632      	mov	r2, r6
 80067f6:	4641      	mov	r1, r8
 80067f8:	f000 ff08 	bl	800760c <memmove>
 80067fc:	68a3      	ldr	r3, [r4, #8]
 80067fe:	1b9b      	subs	r3, r3, r6
 8006800:	60a3      	str	r3, [r4, #8]
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	4433      	add	r3, r6
 8006806:	6023      	str	r3, [r4, #0]
 8006808:	2000      	movs	r0, #0
 800680a:	e7db      	b.n	80067c4 <__ssputs_r+0x58>
 800680c:	462a      	mov	r2, r5
 800680e:	f000 ff23 	bl	8007658 <_realloc_r>
 8006812:	4606      	mov	r6, r0
 8006814:	2800      	cmp	r0, #0
 8006816:	d1e1      	bne.n	80067dc <__ssputs_r+0x70>
 8006818:	6921      	ldr	r1, [r4, #16]
 800681a:	4650      	mov	r0, sl
 800681c:	f7ff fec6 	bl	80065ac <_free_r>
 8006820:	e7c7      	b.n	80067b2 <__ssputs_r+0x46>
	...

08006824 <_svfiprintf_r>:
 8006824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006828:	4698      	mov	r8, r3
 800682a:	898b      	ldrh	r3, [r1, #12]
 800682c:	061b      	lsls	r3, r3, #24
 800682e:	b09d      	sub	sp, #116	; 0x74
 8006830:	4607      	mov	r7, r0
 8006832:	460d      	mov	r5, r1
 8006834:	4614      	mov	r4, r2
 8006836:	d50e      	bpl.n	8006856 <_svfiprintf_r+0x32>
 8006838:	690b      	ldr	r3, [r1, #16]
 800683a:	b963      	cbnz	r3, 8006856 <_svfiprintf_r+0x32>
 800683c:	2140      	movs	r1, #64	; 0x40
 800683e:	f7ff ff21 	bl	8006684 <_malloc_r>
 8006842:	6028      	str	r0, [r5, #0]
 8006844:	6128      	str	r0, [r5, #16]
 8006846:	b920      	cbnz	r0, 8006852 <_svfiprintf_r+0x2e>
 8006848:	230c      	movs	r3, #12
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	f04f 30ff 	mov.w	r0, #4294967295
 8006850:	e0d1      	b.n	80069f6 <_svfiprintf_r+0x1d2>
 8006852:	2340      	movs	r3, #64	; 0x40
 8006854:	616b      	str	r3, [r5, #20]
 8006856:	2300      	movs	r3, #0
 8006858:	9309      	str	r3, [sp, #36]	; 0x24
 800685a:	2320      	movs	r3, #32
 800685c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006860:	f8cd 800c 	str.w	r8, [sp, #12]
 8006864:	2330      	movs	r3, #48	; 0x30
 8006866:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a10 <_svfiprintf_r+0x1ec>
 800686a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800686e:	f04f 0901 	mov.w	r9, #1
 8006872:	4623      	mov	r3, r4
 8006874:	469a      	mov	sl, r3
 8006876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800687a:	b10a      	cbz	r2, 8006880 <_svfiprintf_r+0x5c>
 800687c:	2a25      	cmp	r2, #37	; 0x25
 800687e:	d1f9      	bne.n	8006874 <_svfiprintf_r+0x50>
 8006880:	ebba 0b04 	subs.w	fp, sl, r4
 8006884:	d00b      	beq.n	800689e <_svfiprintf_r+0x7a>
 8006886:	465b      	mov	r3, fp
 8006888:	4622      	mov	r2, r4
 800688a:	4629      	mov	r1, r5
 800688c:	4638      	mov	r0, r7
 800688e:	f7ff ff6d 	bl	800676c <__ssputs_r>
 8006892:	3001      	adds	r0, #1
 8006894:	f000 80aa 	beq.w	80069ec <_svfiprintf_r+0x1c8>
 8006898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800689a:	445a      	add	r2, fp
 800689c:	9209      	str	r2, [sp, #36]	; 0x24
 800689e:	f89a 3000 	ldrb.w	r3, [sl]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 80a2 	beq.w	80069ec <_svfiprintf_r+0x1c8>
 80068a8:	2300      	movs	r3, #0
 80068aa:	f04f 32ff 	mov.w	r2, #4294967295
 80068ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068b2:	f10a 0a01 	add.w	sl, sl, #1
 80068b6:	9304      	str	r3, [sp, #16]
 80068b8:	9307      	str	r3, [sp, #28]
 80068ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068be:	931a      	str	r3, [sp, #104]	; 0x68
 80068c0:	4654      	mov	r4, sl
 80068c2:	2205      	movs	r2, #5
 80068c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c8:	4851      	ldr	r0, [pc, #324]	; (8006a10 <_svfiprintf_r+0x1ec>)
 80068ca:	f7f9 fcb9 	bl	8000240 <memchr>
 80068ce:	9a04      	ldr	r2, [sp, #16]
 80068d0:	b9d8      	cbnz	r0, 800690a <_svfiprintf_r+0xe6>
 80068d2:	06d0      	lsls	r0, r2, #27
 80068d4:	bf44      	itt	mi
 80068d6:	2320      	movmi	r3, #32
 80068d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068dc:	0711      	lsls	r1, r2, #28
 80068de:	bf44      	itt	mi
 80068e0:	232b      	movmi	r3, #43	; 0x2b
 80068e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068e6:	f89a 3000 	ldrb.w	r3, [sl]
 80068ea:	2b2a      	cmp	r3, #42	; 0x2a
 80068ec:	d015      	beq.n	800691a <_svfiprintf_r+0xf6>
 80068ee:	9a07      	ldr	r2, [sp, #28]
 80068f0:	4654      	mov	r4, sl
 80068f2:	2000      	movs	r0, #0
 80068f4:	f04f 0c0a 	mov.w	ip, #10
 80068f8:	4621      	mov	r1, r4
 80068fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068fe:	3b30      	subs	r3, #48	; 0x30
 8006900:	2b09      	cmp	r3, #9
 8006902:	d94e      	bls.n	80069a2 <_svfiprintf_r+0x17e>
 8006904:	b1b0      	cbz	r0, 8006934 <_svfiprintf_r+0x110>
 8006906:	9207      	str	r2, [sp, #28]
 8006908:	e014      	b.n	8006934 <_svfiprintf_r+0x110>
 800690a:	eba0 0308 	sub.w	r3, r0, r8
 800690e:	fa09 f303 	lsl.w	r3, r9, r3
 8006912:	4313      	orrs	r3, r2
 8006914:	9304      	str	r3, [sp, #16]
 8006916:	46a2      	mov	sl, r4
 8006918:	e7d2      	b.n	80068c0 <_svfiprintf_r+0x9c>
 800691a:	9b03      	ldr	r3, [sp, #12]
 800691c:	1d19      	adds	r1, r3, #4
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	9103      	str	r1, [sp, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	bfbb      	ittet	lt
 8006926:	425b      	neglt	r3, r3
 8006928:	f042 0202 	orrlt.w	r2, r2, #2
 800692c:	9307      	strge	r3, [sp, #28]
 800692e:	9307      	strlt	r3, [sp, #28]
 8006930:	bfb8      	it	lt
 8006932:	9204      	strlt	r2, [sp, #16]
 8006934:	7823      	ldrb	r3, [r4, #0]
 8006936:	2b2e      	cmp	r3, #46	; 0x2e
 8006938:	d10c      	bne.n	8006954 <_svfiprintf_r+0x130>
 800693a:	7863      	ldrb	r3, [r4, #1]
 800693c:	2b2a      	cmp	r3, #42	; 0x2a
 800693e:	d135      	bne.n	80069ac <_svfiprintf_r+0x188>
 8006940:	9b03      	ldr	r3, [sp, #12]
 8006942:	1d1a      	adds	r2, r3, #4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	9203      	str	r2, [sp, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	bfb8      	it	lt
 800694c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006950:	3402      	adds	r4, #2
 8006952:	9305      	str	r3, [sp, #20]
 8006954:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a20 <_svfiprintf_r+0x1fc>
 8006958:	7821      	ldrb	r1, [r4, #0]
 800695a:	2203      	movs	r2, #3
 800695c:	4650      	mov	r0, sl
 800695e:	f7f9 fc6f 	bl	8000240 <memchr>
 8006962:	b140      	cbz	r0, 8006976 <_svfiprintf_r+0x152>
 8006964:	2340      	movs	r3, #64	; 0x40
 8006966:	eba0 000a 	sub.w	r0, r0, sl
 800696a:	fa03 f000 	lsl.w	r0, r3, r0
 800696e:	9b04      	ldr	r3, [sp, #16]
 8006970:	4303      	orrs	r3, r0
 8006972:	3401      	adds	r4, #1
 8006974:	9304      	str	r3, [sp, #16]
 8006976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800697a:	4826      	ldr	r0, [pc, #152]	; (8006a14 <_svfiprintf_r+0x1f0>)
 800697c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006980:	2206      	movs	r2, #6
 8006982:	f7f9 fc5d 	bl	8000240 <memchr>
 8006986:	2800      	cmp	r0, #0
 8006988:	d038      	beq.n	80069fc <_svfiprintf_r+0x1d8>
 800698a:	4b23      	ldr	r3, [pc, #140]	; (8006a18 <_svfiprintf_r+0x1f4>)
 800698c:	bb1b      	cbnz	r3, 80069d6 <_svfiprintf_r+0x1b2>
 800698e:	9b03      	ldr	r3, [sp, #12]
 8006990:	3307      	adds	r3, #7
 8006992:	f023 0307 	bic.w	r3, r3, #7
 8006996:	3308      	adds	r3, #8
 8006998:	9303      	str	r3, [sp, #12]
 800699a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800699c:	4433      	add	r3, r6
 800699e:	9309      	str	r3, [sp, #36]	; 0x24
 80069a0:	e767      	b.n	8006872 <_svfiprintf_r+0x4e>
 80069a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069a6:	460c      	mov	r4, r1
 80069a8:	2001      	movs	r0, #1
 80069aa:	e7a5      	b.n	80068f8 <_svfiprintf_r+0xd4>
 80069ac:	2300      	movs	r3, #0
 80069ae:	3401      	adds	r4, #1
 80069b0:	9305      	str	r3, [sp, #20]
 80069b2:	4619      	mov	r1, r3
 80069b4:	f04f 0c0a 	mov.w	ip, #10
 80069b8:	4620      	mov	r0, r4
 80069ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069be:	3a30      	subs	r2, #48	; 0x30
 80069c0:	2a09      	cmp	r2, #9
 80069c2:	d903      	bls.n	80069cc <_svfiprintf_r+0x1a8>
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0c5      	beq.n	8006954 <_svfiprintf_r+0x130>
 80069c8:	9105      	str	r1, [sp, #20]
 80069ca:	e7c3      	b.n	8006954 <_svfiprintf_r+0x130>
 80069cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80069d0:	4604      	mov	r4, r0
 80069d2:	2301      	movs	r3, #1
 80069d4:	e7f0      	b.n	80069b8 <_svfiprintf_r+0x194>
 80069d6:	ab03      	add	r3, sp, #12
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	462a      	mov	r2, r5
 80069dc:	4b0f      	ldr	r3, [pc, #60]	; (8006a1c <_svfiprintf_r+0x1f8>)
 80069de:	a904      	add	r1, sp, #16
 80069e0:	4638      	mov	r0, r7
 80069e2:	f3af 8000 	nop.w
 80069e6:	1c42      	adds	r2, r0, #1
 80069e8:	4606      	mov	r6, r0
 80069ea:	d1d6      	bne.n	800699a <_svfiprintf_r+0x176>
 80069ec:	89ab      	ldrh	r3, [r5, #12]
 80069ee:	065b      	lsls	r3, r3, #25
 80069f0:	f53f af2c 	bmi.w	800684c <_svfiprintf_r+0x28>
 80069f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069f6:	b01d      	add	sp, #116	; 0x74
 80069f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fc:	ab03      	add	r3, sp, #12
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	462a      	mov	r2, r5
 8006a02:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <_svfiprintf_r+0x1f8>)
 8006a04:	a904      	add	r1, sp, #16
 8006a06:	4638      	mov	r0, r7
 8006a08:	f000 f9d4 	bl	8006db4 <_printf_i>
 8006a0c:	e7eb      	b.n	80069e6 <_svfiprintf_r+0x1c2>
 8006a0e:	bf00      	nop
 8006a10:	08007b11 	.word	0x08007b11
 8006a14:	08007b1b 	.word	0x08007b1b
 8006a18:	00000000 	.word	0x00000000
 8006a1c:	0800676d 	.word	0x0800676d
 8006a20:	08007b17 	.word	0x08007b17

08006a24 <__sfputc_r>:
 8006a24:	6893      	ldr	r3, [r2, #8]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	b410      	push	{r4}
 8006a2c:	6093      	str	r3, [r2, #8]
 8006a2e:	da08      	bge.n	8006a42 <__sfputc_r+0x1e>
 8006a30:	6994      	ldr	r4, [r2, #24]
 8006a32:	42a3      	cmp	r3, r4
 8006a34:	db01      	blt.n	8006a3a <__sfputc_r+0x16>
 8006a36:	290a      	cmp	r1, #10
 8006a38:	d103      	bne.n	8006a42 <__sfputc_r+0x1e>
 8006a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a3e:	f000 baef 	b.w	8007020 <__swbuf_r>
 8006a42:	6813      	ldr	r3, [r2, #0]
 8006a44:	1c58      	adds	r0, r3, #1
 8006a46:	6010      	str	r0, [r2, #0]
 8006a48:	7019      	strb	r1, [r3, #0]
 8006a4a:	4608      	mov	r0, r1
 8006a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <__sfputs_r>:
 8006a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a54:	4606      	mov	r6, r0
 8006a56:	460f      	mov	r7, r1
 8006a58:	4614      	mov	r4, r2
 8006a5a:	18d5      	adds	r5, r2, r3
 8006a5c:	42ac      	cmp	r4, r5
 8006a5e:	d101      	bne.n	8006a64 <__sfputs_r+0x12>
 8006a60:	2000      	movs	r0, #0
 8006a62:	e007      	b.n	8006a74 <__sfputs_r+0x22>
 8006a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a68:	463a      	mov	r2, r7
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f7ff ffda 	bl	8006a24 <__sfputc_r>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d1f3      	bne.n	8006a5c <__sfputs_r+0xa>
 8006a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a78 <_vfiprintf_r>:
 8006a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	460d      	mov	r5, r1
 8006a7e:	b09d      	sub	sp, #116	; 0x74
 8006a80:	4614      	mov	r4, r2
 8006a82:	4698      	mov	r8, r3
 8006a84:	4606      	mov	r6, r0
 8006a86:	b118      	cbz	r0, 8006a90 <_vfiprintf_r+0x18>
 8006a88:	6983      	ldr	r3, [r0, #24]
 8006a8a:	b90b      	cbnz	r3, 8006a90 <_vfiprintf_r+0x18>
 8006a8c:	f000 fcaa 	bl	80073e4 <__sinit>
 8006a90:	4b89      	ldr	r3, [pc, #548]	; (8006cb8 <_vfiprintf_r+0x240>)
 8006a92:	429d      	cmp	r5, r3
 8006a94:	d11b      	bne.n	8006ace <_vfiprintf_r+0x56>
 8006a96:	6875      	ldr	r5, [r6, #4]
 8006a98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a9a:	07d9      	lsls	r1, r3, #31
 8006a9c:	d405      	bmi.n	8006aaa <_vfiprintf_r+0x32>
 8006a9e:	89ab      	ldrh	r3, [r5, #12]
 8006aa0:	059a      	lsls	r2, r3, #22
 8006aa2:	d402      	bmi.n	8006aaa <_vfiprintf_r+0x32>
 8006aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006aa6:	f000 fd3b 	bl	8007520 <__retarget_lock_acquire_recursive>
 8006aaa:	89ab      	ldrh	r3, [r5, #12]
 8006aac:	071b      	lsls	r3, r3, #28
 8006aae:	d501      	bpl.n	8006ab4 <_vfiprintf_r+0x3c>
 8006ab0:	692b      	ldr	r3, [r5, #16]
 8006ab2:	b9eb      	cbnz	r3, 8006af0 <_vfiprintf_r+0x78>
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f000 fb04 	bl	80070c4 <__swsetup_r>
 8006abc:	b1c0      	cbz	r0, 8006af0 <_vfiprintf_r+0x78>
 8006abe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ac0:	07dc      	lsls	r4, r3, #31
 8006ac2:	d50e      	bpl.n	8006ae2 <_vfiprintf_r+0x6a>
 8006ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac8:	b01d      	add	sp, #116	; 0x74
 8006aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ace:	4b7b      	ldr	r3, [pc, #492]	; (8006cbc <_vfiprintf_r+0x244>)
 8006ad0:	429d      	cmp	r5, r3
 8006ad2:	d101      	bne.n	8006ad8 <_vfiprintf_r+0x60>
 8006ad4:	68b5      	ldr	r5, [r6, #8]
 8006ad6:	e7df      	b.n	8006a98 <_vfiprintf_r+0x20>
 8006ad8:	4b79      	ldr	r3, [pc, #484]	; (8006cc0 <_vfiprintf_r+0x248>)
 8006ada:	429d      	cmp	r5, r3
 8006adc:	bf08      	it	eq
 8006ade:	68f5      	ldreq	r5, [r6, #12]
 8006ae0:	e7da      	b.n	8006a98 <_vfiprintf_r+0x20>
 8006ae2:	89ab      	ldrh	r3, [r5, #12]
 8006ae4:	0598      	lsls	r0, r3, #22
 8006ae6:	d4ed      	bmi.n	8006ac4 <_vfiprintf_r+0x4c>
 8006ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006aea:	f000 fd1a 	bl	8007522 <__retarget_lock_release_recursive>
 8006aee:	e7e9      	b.n	8006ac4 <_vfiprintf_r+0x4c>
 8006af0:	2300      	movs	r3, #0
 8006af2:	9309      	str	r3, [sp, #36]	; 0x24
 8006af4:	2320      	movs	r3, #32
 8006af6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006afa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006afe:	2330      	movs	r3, #48	; 0x30
 8006b00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006cc4 <_vfiprintf_r+0x24c>
 8006b04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b08:	f04f 0901 	mov.w	r9, #1
 8006b0c:	4623      	mov	r3, r4
 8006b0e:	469a      	mov	sl, r3
 8006b10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b14:	b10a      	cbz	r2, 8006b1a <_vfiprintf_r+0xa2>
 8006b16:	2a25      	cmp	r2, #37	; 0x25
 8006b18:	d1f9      	bne.n	8006b0e <_vfiprintf_r+0x96>
 8006b1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b1e:	d00b      	beq.n	8006b38 <_vfiprintf_r+0xc0>
 8006b20:	465b      	mov	r3, fp
 8006b22:	4622      	mov	r2, r4
 8006b24:	4629      	mov	r1, r5
 8006b26:	4630      	mov	r0, r6
 8006b28:	f7ff ff93 	bl	8006a52 <__sfputs_r>
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	f000 80aa 	beq.w	8006c86 <_vfiprintf_r+0x20e>
 8006b32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b34:	445a      	add	r2, fp
 8006b36:	9209      	str	r2, [sp, #36]	; 0x24
 8006b38:	f89a 3000 	ldrb.w	r3, [sl]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80a2 	beq.w	8006c86 <_vfiprintf_r+0x20e>
 8006b42:	2300      	movs	r3, #0
 8006b44:	f04f 32ff 	mov.w	r2, #4294967295
 8006b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b4c:	f10a 0a01 	add.w	sl, sl, #1
 8006b50:	9304      	str	r3, [sp, #16]
 8006b52:	9307      	str	r3, [sp, #28]
 8006b54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b58:	931a      	str	r3, [sp, #104]	; 0x68
 8006b5a:	4654      	mov	r4, sl
 8006b5c:	2205      	movs	r2, #5
 8006b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b62:	4858      	ldr	r0, [pc, #352]	; (8006cc4 <_vfiprintf_r+0x24c>)
 8006b64:	f7f9 fb6c 	bl	8000240 <memchr>
 8006b68:	9a04      	ldr	r2, [sp, #16]
 8006b6a:	b9d8      	cbnz	r0, 8006ba4 <_vfiprintf_r+0x12c>
 8006b6c:	06d1      	lsls	r1, r2, #27
 8006b6e:	bf44      	itt	mi
 8006b70:	2320      	movmi	r3, #32
 8006b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b76:	0713      	lsls	r3, r2, #28
 8006b78:	bf44      	itt	mi
 8006b7a:	232b      	movmi	r3, #43	; 0x2b
 8006b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b80:	f89a 3000 	ldrb.w	r3, [sl]
 8006b84:	2b2a      	cmp	r3, #42	; 0x2a
 8006b86:	d015      	beq.n	8006bb4 <_vfiprintf_r+0x13c>
 8006b88:	9a07      	ldr	r2, [sp, #28]
 8006b8a:	4654      	mov	r4, sl
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	f04f 0c0a 	mov.w	ip, #10
 8006b92:	4621      	mov	r1, r4
 8006b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b98:	3b30      	subs	r3, #48	; 0x30
 8006b9a:	2b09      	cmp	r3, #9
 8006b9c:	d94e      	bls.n	8006c3c <_vfiprintf_r+0x1c4>
 8006b9e:	b1b0      	cbz	r0, 8006bce <_vfiprintf_r+0x156>
 8006ba0:	9207      	str	r2, [sp, #28]
 8006ba2:	e014      	b.n	8006bce <_vfiprintf_r+0x156>
 8006ba4:	eba0 0308 	sub.w	r3, r0, r8
 8006ba8:	fa09 f303 	lsl.w	r3, r9, r3
 8006bac:	4313      	orrs	r3, r2
 8006bae:	9304      	str	r3, [sp, #16]
 8006bb0:	46a2      	mov	sl, r4
 8006bb2:	e7d2      	b.n	8006b5a <_vfiprintf_r+0xe2>
 8006bb4:	9b03      	ldr	r3, [sp, #12]
 8006bb6:	1d19      	adds	r1, r3, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	9103      	str	r1, [sp, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	bfbb      	ittet	lt
 8006bc0:	425b      	neglt	r3, r3
 8006bc2:	f042 0202 	orrlt.w	r2, r2, #2
 8006bc6:	9307      	strge	r3, [sp, #28]
 8006bc8:	9307      	strlt	r3, [sp, #28]
 8006bca:	bfb8      	it	lt
 8006bcc:	9204      	strlt	r2, [sp, #16]
 8006bce:	7823      	ldrb	r3, [r4, #0]
 8006bd0:	2b2e      	cmp	r3, #46	; 0x2e
 8006bd2:	d10c      	bne.n	8006bee <_vfiprintf_r+0x176>
 8006bd4:	7863      	ldrb	r3, [r4, #1]
 8006bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd8:	d135      	bne.n	8006c46 <_vfiprintf_r+0x1ce>
 8006bda:	9b03      	ldr	r3, [sp, #12]
 8006bdc:	1d1a      	adds	r2, r3, #4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	9203      	str	r2, [sp, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	bfb8      	it	lt
 8006be6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bea:	3402      	adds	r4, #2
 8006bec:	9305      	str	r3, [sp, #20]
 8006bee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006cd4 <_vfiprintf_r+0x25c>
 8006bf2:	7821      	ldrb	r1, [r4, #0]
 8006bf4:	2203      	movs	r2, #3
 8006bf6:	4650      	mov	r0, sl
 8006bf8:	f7f9 fb22 	bl	8000240 <memchr>
 8006bfc:	b140      	cbz	r0, 8006c10 <_vfiprintf_r+0x198>
 8006bfe:	2340      	movs	r3, #64	; 0x40
 8006c00:	eba0 000a 	sub.w	r0, r0, sl
 8006c04:	fa03 f000 	lsl.w	r0, r3, r0
 8006c08:	9b04      	ldr	r3, [sp, #16]
 8006c0a:	4303      	orrs	r3, r0
 8006c0c:	3401      	adds	r4, #1
 8006c0e:	9304      	str	r3, [sp, #16]
 8006c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c14:	482c      	ldr	r0, [pc, #176]	; (8006cc8 <_vfiprintf_r+0x250>)
 8006c16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c1a:	2206      	movs	r2, #6
 8006c1c:	f7f9 fb10 	bl	8000240 <memchr>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d03f      	beq.n	8006ca4 <_vfiprintf_r+0x22c>
 8006c24:	4b29      	ldr	r3, [pc, #164]	; (8006ccc <_vfiprintf_r+0x254>)
 8006c26:	bb1b      	cbnz	r3, 8006c70 <_vfiprintf_r+0x1f8>
 8006c28:	9b03      	ldr	r3, [sp, #12]
 8006c2a:	3307      	adds	r3, #7
 8006c2c:	f023 0307 	bic.w	r3, r3, #7
 8006c30:	3308      	adds	r3, #8
 8006c32:	9303      	str	r3, [sp, #12]
 8006c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c36:	443b      	add	r3, r7
 8006c38:	9309      	str	r3, [sp, #36]	; 0x24
 8006c3a:	e767      	b.n	8006b0c <_vfiprintf_r+0x94>
 8006c3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c40:	460c      	mov	r4, r1
 8006c42:	2001      	movs	r0, #1
 8006c44:	e7a5      	b.n	8006b92 <_vfiprintf_r+0x11a>
 8006c46:	2300      	movs	r3, #0
 8006c48:	3401      	adds	r4, #1
 8006c4a:	9305      	str	r3, [sp, #20]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	f04f 0c0a 	mov.w	ip, #10
 8006c52:	4620      	mov	r0, r4
 8006c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c58:	3a30      	subs	r2, #48	; 0x30
 8006c5a:	2a09      	cmp	r2, #9
 8006c5c:	d903      	bls.n	8006c66 <_vfiprintf_r+0x1ee>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0c5      	beq.n	8006bee <_vfiprintf_r+0x176>
 8006c62:	9105      	str	r1, [sp, #20]
 8006c64:	e7c3      	b.n	8006bee <_vfiprintf_r+0x176>
 8006c66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e7f0      	b.n	8006c52 <_vfiprintf_r+0x1da>
 8006c70:	ab03      	add	r3, sp, #12
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	462a      	mov	r2, r5
 8006c76:	4b16      	ldr	r3, [pc, #88]	; (8006cd0 <_vfiprintf_r+0x258>)
 8006c78:	a904      	add	r1, sp, #16
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	f3af 8000 	nop.w
 8006c80:	4607      	mov	r7, r0
 8006c82:	1c78      	adds	r0, r7, #1
 8006c84:	d1d6      	bne.n	8006c34 <_vfiprintf_r+0x1bc>
 8006c86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c88:	07d9      	lsls	r1, r3, #31
 8006c8a:	d405      	bmi.n	8006c98 <_vfiprintf_r+0x220>
 8006c8c:	89ab      	ldrh	r3, [r5, #12]
 8006c8e:	059a      	lsls	r2, r3, #22
 8006c90:	d402      	bmi.n	8006c98 <_vfiprintf_r+0x220>
 8006c92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c94:	f000 fc45 	bl	8007522 <__retarget_lock_release_recursive>
 8006c98:	89ab      	ldrh	r3, [r5, #12]
 8006c9a:	065b      	lsls	r3, r3, #25
 8006c9c:	f53f af12 	bmi.w	8006ac4 <_vfiprintf_r+0x4c>
 8006ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ca2:	e711      	b.n	8006ac8 <_vfiprintf_r+0x50>
 8006ca4:	ab03      	add	r3, sp, #12
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	462a      	mov	r2, r5
 8006caa:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <_vfiprintf_r+0x258>)
 8006cac:	a904      	add	r1, sp, #16
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f000 f880 	bl	8006db4 <_printf_i>
 8006cb4:	e7e4      	b.n	8006c80 <_vfiprintf_r+0x208>
 8006cb6:	bf00      	nop
 8006cb8:	08007b64 	.word	0x08007b64
 8006cbc:	08007b84 	.word	0x08007b84
 8006cc0:	08007b44 	.word	0x08007b44
 8006cc4:	08007b11 	.word	0x08007b11
 8006cc8:	08007b1b 	.word	0x08007b1b
 8006ccc:	00000000 	.word	0x00000000
 8006cd0:	08006a53 	.word	0x08006a53
 8006cd4:	08007b17 	.word	0x08007b17

08006cd8 <_printf_common>:
 8006cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cdc:	4616      	mov	r6, r2
 8006cde:	4699      	mov	r9, r3
 8006ce0:	688a      	ldr	r2, [r1, #8]
 8006ce2:	690b      	ldr	r3, [r1, #16]
 8006ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	bfb8      	it	lt
 8006cec:	4613      	movlt	r3, r2
 8006cee:	6033      	str	r3, [r6, #0]
 8006cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	b10a      	cbz	r2, 8006cfe <_printf_common+0x26>
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	6033      	str	r3, [r6, #0]
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	0699      	lsls	r1, r3, #26
 8006d02:	bf42      	ittt	mi
 8006d04:	6833      	ldrmi	r3, [r6, #0]
 8006d06:	3302      	addmi	r3, #2
 8006d08:	6033      	strmi	r3, [r6, #0]
 8006d0a:	6825      	ldr	r5, [r4, #0]
 8006d0c:	f015 0506 	ands.w	r5, r5, #6
 8006d10:	d106      	bne.n	8006d20 <_printf_common+0x48>
 8006d12:	f104 0a19 	add.w	sl, r4, #25
 8006d16:	68e3      	ldr	r3, [r4, #12]
 8006d18:	6832      	ldr	r2, [r6, #0]
 8006d1a:	1a9b      	subs	r3, r3, r2
 8006d1c:	42ab      	cmp	r3, r5
 8006d1e:	dc26      	bgt.n	8006d6e <_printf_common+0x96>
 8006d20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d24:	1e13      	subs	r3, r2, #0
 8006d26:	6822      	ldr	r2, [r4, #0]
 8006d28:	bf18      	it	ne
 8006d2a:	2301      	movne	r3, #1
 8006d2c:	0692      	lsls	r2, r2, #26
 8006d2e:	d42b      	bmi.n	8006d88 <_printf_common+0xb0>
 8006d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d34:	4649      	mov	r1, r9
 8006d36:	4638      	mov	r0, r7
 8006d38:	47c0      	blx	r8
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d01e      	beq.n	8006d7c <_printf_common+0xa4>
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	68e5      	ldr	r5, [r4, #12]
 8006d42:	6832      	ldr	r2, [r6, #0]
 8006d44:	f003 0306 	and.w	r3, r3, #6
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	bf08      	it	eq
 8006d4c:	1aad      	subeq	r5, r5, r2
 8006d4e:	68a3      	ldr	r3, [r4, #8]
 8006d50:	6922      	ldr	r2, [r4, #16]
 8006d52:	bf0c      	ite	eq
 8006d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d58:	2500      	movne	r5, #0
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	bfc4      	itt	gt
 8006d5e:	1a9b      	subgt	r3, r3, r2
 8006d60:	18ed      	addgt	r5, r5, r3
 8006d62:	2600      	movs	r6, #0
 8006d64:	341a      	adds	r4, #26
 8006d66:	42b5      	cmp	r5, r6
 8006d68:	d11a      	bne.n	8006da0 <_printf_common+0xc8>
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	e008      	b.n	8006d80 <_printf_common+0xa8>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4652      	mov	r2, sl
 8006d72:	4649      	mov	r1, r9
 8006d74:	4638      	mov	r0, r7
 8006d76:	47c0      	blx	r8
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d103      	bne.n	8006d84 <_printf_common+0xac>
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d84:	3501      	adds	r5, #1
 8006d86:	e7c6      	b.n	8006d16 <_printf_common+0x3e>
 8006d88:	18e1      	adds	r1, r4, r3
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	2030      	movs	r0, #48	; 0x30
 8006d8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d92:	4422      	add	r2, r4
 8006d94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d9c:	3302      	adds	r3, #2
 8006d9e:	e7c7      	b.n	8006d30 <_printf_common+0x58>
 8006da0:	2301      	movs	r3, #1
 8006da2:	4622      	mov	r2, r4
 8006da4:	4649      	mov	r1, r9
 8006da6:	4638      	mov	r0, r7
 8006da8:	47c0      	blx	r8
 8006daa:	3001      	adds	r0, #1
 8006dac:	d0e6      	beq.n	8006d7c <_printf_common+0xa4>
 8006dae:	3601      	adds	r6, #1
 8006db0:	e7d9      	b.n	8006d66 <_printf_common+0x8e>
	...

08006db4 <_printf_i>:
 8006db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db8:	7e0f      	ldrb	r7, [r1, #24]
 8006dba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006dbc:	2f78      	cmp	r7, #120	; 0x78
 8006dbe:	4691      	mov	r9, r2
 8006dc0:	4680      	mov	r8, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	469a      	mov	sl, r3
 8006dc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dca:	d807      	bhi.n	8006ddc <_printf_i+0x28>
 8006dcc:	2f62      	cmp	r7, #98	; 0x62
 8006dce:	d80a      	bhi.n	8006de6 <_printf_i+0x32>
 8006dd0:	2f00      	cmp	r7, #0
 8006dd2:	f000 80d8 	beq.w	8006f86 <_printf_i+0x1d2>
 8006dd6:	2f58      	cmp	r7, #88	; 0x58
 8006dd8:	f000 80a3 	beq.w	8006f22 <_printf_i+0x16e>
 8006ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006de4:	e03a      	b.n	8006e5c <_printf_i+0xa8>
 8006de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dea:	2b15      	cmp	r3, #21
 8006dec:	d8f6      	bhi.n	8006ddc <_printf_i+0x28>
 8006dee:	a101      	add	r1, pc, #4	; (adr r1, 8006df4 <_printf_i+0x40>)
 8006df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006df4:	08006e4d 	.word	0x08006e4d
 8006df8:	08006e61 	.word	0x08006e61
 8006dfc:	08006ddd 	.word	0x08006ddd
 8006e00:	08006ddd 	.word	0x08006ddd
 8006e04:	08006ddd 	.word	0x08006ddd
 8006e08:	08006ddd 	.word	0x08006ddd
 8006e0c:	08006e61 	.word	0x08006e61
 8006e10:	08006ddd 	.word	0x08006ddd
 8006e14:	08006ddd 	.word	0x08006ddd
 8006e18:	08006ddd 	.word	0x08006ddd
 8006e1c:	08006ddd 	.word	0x08006ddd
 8006e20:	08006f6d 	.word	0x08006f6d
 8006e24:	08006e91 	.word	0x08006e91
 8006e28:	08006f4f 	.word	0x08006f4f
 8006e2c:	08006ddd 	.word	0x08006ddd
 8006e30:	08006ddd 	.word	0x08006ddd
 8006e34:	08006f8f 	.word	0x08006f8f
 8006e38:	08006ddd 	.word	0x08006ddd
 8006e3c:	08006e91 	.word	0x08006e91
 8006e40:	08006ddd 	.word	0x08006ddd
 8006e44:	08006ddd 	.word	0x08006ddd
 8006e48:	08006f57 	.word	0x08006f57
 8006e4c:	682b      	ldr	r3, [r5, #0]
 8006e4e:	1d1a      	adds	r2, r3, #4
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	602a      	str	r2, [r5, #0]
 8006e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0a3      	b.n	8006fa8 <_printf_i+0x1f4>
 8006e60:	6820      	ldr	r0, [r4, #0]
 8006e62:	6829      	ldr	r1, [r5, #0]
 8006e64:	0606      	lsls	r6, r0, #24
 8006e66:	f101 0304 	add.w	r3, r1, #4
 8006e6a:	d50a      	bpl.n	8006e82 <_printf_i+0xce>
 8006e6c:	680e      	ldr	r6, [r1, #0]
 8006e6e:	602b      	str	r3, [r5, #0]
 8006e70:	2e00      	cmp	r6, #0
 8006e72:	da03      	bge.n	8006e7c <_printf_i+0xc8>
 8006e74:	232d      	movs	r3, #45	; 0x2d
 8006e76:	4276      	negs	r6, r6
 8006e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e7c:	485e      	ldr	r0, [pc, #376]	; (8006ff8 <_printf_i+0x244>)
 8006e7e:	230a      	movs	r3, #10
 8006e80:	e019      	b.n	8006eb6 <_printf_i+0x102>
 8006e82:	680e      	ldr	r6, [r1, #0]
 8006e84:	602b      	str	r3, [r5, #0]
 8006e86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e8a:	bf18      	it	ne
 8006e8c:	b236      	sxthne	r6, r6
 8006e8e:	e7ef      	b.n	8006e70 <_printf_i+0xbc>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	6820      	ldr	r0, [r4, #0]
 8006e94:	1d19      	adds	r1, r3, #4
 8006e96:	6029      	str	r1, [r5, #0]
 8006e98:	0601      	lsls	r1, r0, #24
 8006e9a:	d501      	bpl.n	8006ea0 <_printf_i+0xec>
 8006e9c:	681e      	ldr	r6, [r3, #0]
 8006e9e:	e002      	b.n	8006ea6 <_printf_i+0xf2>
 8006ea0:	0646      	lsls	r6, r0, #25
 8006ea2:	d5fb      	bpl.n	8006e9c <_printf_i+0xe8>
 8006ea4:	881e      	ldrh	r6, [r3, #0]
 8006ea6:	4854      	ldr	r0, [pc, #336]	; (8006ff8 <_printf_i+0x244>)
 8006ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8006eaa:	bf0c      	ite	eq
 8006eac:	2308      	moveq	r3, #8
 8006eae:	230a      	movne	r3, #10
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eb6:	6865      	ldr	r5, [r4, #4]
 8006eb8:	60a5      	str	r5, [r4, #8]
 8006eba:	2d00      	cmp	r5, #0
 8006ebc:	bfa2      	ittt	ge
 8006ebe:	6821      	ldrge	r1, [r4, #0]
 8006ec0:	f021 0104 	bicge.w	r1, r1, #4
 8006ec4:	6021      	strge	r1, [r4, #0]
 8006ec6:	b90e      	cbnz	r6, 8006ecc <_printf_i+0x118>
 8006ec8:	2d00      	cmp	r5, #0
 8006eca:	d04d      	beq.n	8006f68 <_printf_i+0x1b4>
 8006ecc:	4615      	mov	r5, r2
 8006ece:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ed2:	fb03 6711 	mls	r7, r3, r1, r6
 8006ed6:	5dc7      	ldrb	r7, [r0, r7]
 8006ed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006edc:	4637      	mov	r7, r6
 8006ede:	42bb      	cmp	r3, r7
 8006ee0:	460e      	mov	r6, r1
 8006ee2:	d9f4      	bls.n	8006ece <_printf_i+0x11a>
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d10b      	bne.n	8006f00 <_printf_i+0x14c>
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	07de      	lsls	r6, r3, #31
 8006eec:	d508      	bpl.n	8006f00 <_printf_i+0x14c>
 8006eee:	6923      	ldr	r3, [r4, #16]
 8006ef0:	6861      	ldr	r1, [r4, #4]
 8006ef2:	4299      	cmp	r1, r3
 8006ef4:	bfde      	ittt	le
 8006ef6:	2330      	movle	r3, #48	; 0x30
 8006ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006efc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f00:	1b52      	subs	r2, r2, r5
 8006f02:	6122      	str	r2, [r4, #16]
 8006f04:	f8cd a000 	str.w	sl, [sp]
 8006f08:	464b      	mov	r3, r9
 8006f0a:	aa03      	add	r2, sp, #12
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	4640      	mov	r0, r8
 8006f10:	f7ff fee2 	bl	8006cd8 <_printf_common>
 8006f14:	3001      	adds	r0, #1
 8006f16:	d14c      	bne.n	8006fb2 <_printf_i+0x1fe>
 8006f18:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1c:	b004      	add	sp, #16
 8006f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f22:	4835      	ldr	r0, [pc, #212]	; (8006ff8 <_printf_i+0x244>)
 8006f24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f28:	6829      	ldr	r1, [r5, #0]
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f30:	6029      	str	r1, [r5, #0]
 8006f32:	061d      	lsls	r5, r3, #24
 8006f34:	d514      	bpl.n	8006f60 <_printf_i+0x1ac>
 8006f36:	07df      	lsls	r7, r3, #31
 8006f38:	bf44      	itt	mi
 8006f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f3e:	6023      	strmi	r3, [r4, #0]
 8006f40:	b91e      	cbnz	r6, 8006f4a <_printf_i+0x196>
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	f023 0320 	bic.w	r3, r3, #32
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	2310      	movs	r3, #16
 8006f4c:	e7b0      	b.n	8006eb0 <_printf_i+0xfc>
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	f043 0320 	orr.w	r3, r3, #32
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	2378      	movs	r3, #120	; 0x78
 8006f58:	4828      	ldr	r0, [pc, #160]	; (8006ffc <_printf_i+0x248>)
 8006f5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f5e:	e7e3      	b.n	8006f28 <_printf_i+0x174>
 8006f60:	0659      	lsls	r1, r3, #25
 8006f62:	bf48      	it	mi
 8006f64:	b2b6      	uxthmi	r6, r6
 8006f66:	e7e6      	b.n	8006f36 <_printf_i+0x182>
 8006f68:	4615      	mov	r5, r2
 8006f6a:	e7bb      	b.n	8006ee4 <_printf_i+0x130>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	6826      	ldr	r6, [r4, #0]
 8006f70:	6961      	ldr	r1, [r4, #20]
 8006f72:	1d18      	adds	r0, r3, #4
 8006f74:	6028      	str	r0, [r5, #0]
 8006f76:	0635      	lsls	r5, r6, #24
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	d501      	bpl.n	8006f80 <_printf_i+0x1cc>
 8006f7c:	6019      	str	r1, [r3, #0]
 8006f7e:	e002      	b.n	8006f86 <_printf_i+0x1d2>
 8006f80:	0670      	lsls	r0, r6, #25
 8006f82:	d5fb      	bpl.n	8006f7c <_printf_i+0x1c8>
 8006f84:	8019      	strh	r1, [r3, #0]
 8006f86:	2300      	movs	r3, #0
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	4615      	mov	r5, r2
 8006f8c:	e7ba      	b.n	8006f04 <_printf_i+0x150>
 8006f8e:	682b      	ldr	r3, [r5, #0]
 8006f90:	1d1a      	adds	r2, r3, #4
 8006f92:	602a      	str	r2, [r5, #0]
 8006f94:	681d      	ldr	r5, [r3, #0]
 8006f96:	6862      	ldr	r2, [r4, #4]
 8006f98:	2100      	movs	r1, #0
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f7f9 f950 	bl	8000240 <memchr>
 8006fa0:	b108      	cbz	r0, 8006fa6 <_printf_i+0x1f2>
 8006fa2:	1b40      	subs	r0, r0, r5
 8006fa4:	6060      	str	r0, [r4, #4]
 8006fa6:	6863      	ldr	r3, [r4, #4]
 8006fa8:	6123      	str	r3, [r4, #16]
 8006faa:	2300      	movs	r3, #0
 8006fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fb0:	e7a8      	b.n	8006f04 <_printf_i+0x150>
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	462a      	mov	r2, r5
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	4640      	mov	r0, r8
 8006fba:	47d0      	blx	sl
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d0ab      	beq.n	8006f18 <_printf_i+0x164>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	079b      	lsls	r3, r3, #30
 8006fc4:	d413      	bmi.n	8006fee <_printf_i+0x23a>
 8006fc6:	68e0      	ldr	r0, [r4, #12]
 8006fc8:	9b03      	ldr	r3, [sp, #12]
 8006fca:	4298      	cmp	r0, r3
 8006fcc:	bfb8      	it	lt
 8006fce:	4618      	movlt	r0, r3
 8006fd0:	e7a4      	b.n	8006f1c <_printf_i+0x168>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	4632      	mov	r2, r6
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	4640      	mov	r0, r8
 8006fda:	47d0      	blx	sl
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d09b      	beq.n	8006f18 <_printf_i+0x164>
 8006fe0:	3501      	adds	r5, #1
 8006fe2:	68e3      	ldr	r3, [r4, #12]
 8006fe4:	9903      	ldr	r1, [sp, #12]
 8006fe6:	1a5b      	subs	r3, r3, r1
 8006fe8:	42ab      	cmp	r3, r5
 8006fea:	dcf2      	bgt.n	8006fd2 <_printf_i+0x21e>
 8006fec:	e7eb      	b.n	8006fc6 <_printf_i+0x212>
 8006fee:	2500      	movs	r5, #0
 8006ff0:	f104 0619 	add.w	r6, r4, #25
 8006ff4:	e7f5      	b.n	8006fe2 <_printf_i+0x22e>
 8006ff6:	bf00      	nop
 8006ff8:	08007b22 	.word	0x08007b22
 8006ffc:	08007b33 	.word	0x08007b33

08007000 <_sbrk_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d06      	ldr	r5, [pc, #24]	; (800701c <_sbrk_r+0x1c>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7fa f8b0 	bl	8001170 <_sbrk>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_sbrk_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_sbrk_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	200003b8 	.word	0x200003b8

08007020 <__swbuf_r>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	460e      	mov	r6, r1
 8007024:	4614      	mov	r4, r2
 8007026:	4605      	mov	r5, r0
 8007028:	b118      	cbz	r0, 8007032 <__swbuf_r+0x12>
 800702a:	6983      	ldr	r3, [r0, #24]
 800702c:	b90b      	cbnz	r3, 8007032 <__swbuf_r+0x12>
 800702e:	f000 f9d9 	bl	80073e4 <__sinit>
 8007032:	4b21      	ldr	r3, [pc, #132]	; (80070b8 <__swbuf_r+0x98>)
 8007034:	429c      	cmp	r4, r3
 8007036:	d12b      	bne.n	8007090 <__swbuf_r+0x70>
 8007038:	686c      	ldr	r4, [r5, #4]
 800703a:	69a3      	ldr	r3, [r4, #24]
 800703c:	60a3      	str	r3, [r4, #8]
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	071a      	lsls	r2, r3, #28
 8007042:	d52f      	bpl.n	80070a4 <__swbuf_r+0x84>
 8007044:	6923      	ldr	r3, [r4, #16]
 8007046:	b36b      	cbz	r3, 80070a4 <__swbuf_r+0x84>
 8007048:	6923      	ldr	r3, [r4, #16]
 800704a:	6820      	ldr	r0, [r4, #0]
 800704c:	1ac0      	subs	r0, r0, r3
 800704e:	6963      	ldr	r3, [r4, #20]
 8007050:	b2f6      	uxtb	r6, r6
 8007052:	4283      	cmp	r3, r0
 8007054:	4637      	mov	r7, r6
 8007056:	dc04      	bgt.n	8007062 <__swbuf_r+0x42>
 8007058:	4621      	mov	r1, r4
 800705a:	4628      	mov	r0, r5
 800705c:	f000 f92e 	bl	80072bc <_fflush_r>
 8007060:	bb30      	cbnz	r0, 80070b0 <__swbuf_r+0x90>
 8007062:	68a3      	ldr	r3, [r4, #8]
 8007064:	3b01      	subs	r3, #1
 8007066:	60a3      	str	r3, [r4, #8]
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	6022      	str	r2, [r4, #0]
 800706e:	701e      	strb	r6, [r3, #0]
 8007070:	6963      	ldr	r3, [r4, #20]
 8007072:	3001      	adds	r0, #1
 8007074:	4283      	cmp	r3, r0
 8007076:	d004      	beq.n	8007082 <__swbuf_r+0x62>
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	07db      	lsls	r3, r3, #31
 800707c:	d506      	bpl.n	800708c <__swbuf_r+0x6c>
 800707e:	2e0a      	cmp	r6, #10
 8007080:	d104      	bne.n	800708c <__swbuf_r+0x6c>
 8007082:	4621      	mov	r1, r4
 8007084:	4628      	mov	r0, r5
 8007086:	f000 f919 	bl	80072bc <_fflush_r>
 800708a:	b988      	cbnz	r0, 80070b0 <__swbuf_r+0x90>
 800708c:	4638      	mov	r0, r7
 800708e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007090:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <__swbuf_r+0x9c>)
 8007092:	429c      	cmp	r4, r3
 8007094:	d101      	bne.n	800709a <__swbuf_r+0x7a>
 8007096:	68ac      	ldr	r4, [r5, #8]
 8007098:	e7cf      	b.n	800703a <__swbuf_r+0x1a>
 800709a:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <__swbuf_r+0xa0>)
 800709c:	429c      	cmp	r4, r3
 800709e:	bf08      	it	eq
 80070a0:	68ec      	ldreq	r4, [r5, #12]
 80070a2:	e7ca      	b.n	800703a <__swbuf_r+0x1a>
 80070a4:	4621      	mov	r1, r4
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 f80c 	bl	80070c4 <__swsetup_r>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d0cb      	beq.n	8007048 <__swbuf_r+0x28>
 80070b0:	f04f 37ff 	mov.w	r7, #4294967295
 80070b4:	e7ea      	b.n	800708c <__swbuf_r+0x6c>
 80070b6:	bf00      	nop
 80070b8:	08007b64 	.word	0x08007b64
 80070bc:	08007b84 	.word	0x08007b84
 80070c0:	08007b44 	.word	0x08007b44

080070c4 <__swsetup_r>:
 80070c4:	4b32      	ldr	r3, [pc, #200]	; (8007190 <__swsetup_r+0xcc>)
 80070c6:	b570      	push	{r4, r5, r6, lr}
 80070c8:	681d      	ldr	r5, [r3, #0]
 80070ca:	4606      	mov	r6, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	b125      	cbz	r5, 80070da <__swsetup_r+0x16>
 80070d0:	69ab      	ldr	r3, [r5, #24]
 80070d2:	b913      	cbnz	r3, 80070da <__swsetup_r+0x16>
 80070d4:	4628      	mov	r0, r5
 80070d6:	f000 f985 	bl	80073e4 <__sinit>
 80070da:	4b2e      	ldr	r3, [pc, #184]	; (8007194 <__swsetup_r+0xd0>)
 80070dc:	429c      	cmp	r4, r3
 80070de:	d10f      	bne.n	8007100 <__swsetup_r+0x3c>
 80070e0:	686c      	ldr	r4, [r5, #4]
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070e8:	0719      	lsls	r1, r3, #28
 80070ea:	d42c      	bmi.n	8007146 <__swsetup_r+0x82>
 80070ec:	06dd      	lsls	r5, r3, #27
 80070ee:	d411      	bmi.n	8007114 <__swsetup_r+0x50>
 80070f0:	2309      	movs	r3, #9
 80070f2:	6033      	str	r3, [r6, #0]
 80070f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070f8:	81a3      	strh	r3, [r4, #12]
 80070fa:	f04f 30ff 	mov.w	r0, #4294967295
 80070fe:	e03e      	b.n	800717e <__swsetup_r+0xba>
 8007100:	4b25      	ldr	r3, [pc, #148]	; (8007198 <__swsetup_r+0xd4>)
 8007102:	429c      	cmp	r4, r3
 8007104:	d101      	bne.n	800710a <__swsetup_r+0x46>
 8007106:	68ac      	ldr	r4, [r5, #8]
 8007108:	e7eb      	b.n	80070e2 <__swsetup_r+0x1e>
 800710a:	4b24      	ldr	r3, [pc, #144]	; (800719c <__swsetup_r+0xd8>)
 800710c:	429c      	cmp	r4, r3
 800710e:	bf08      	it	eq
 8007110:	68ec      	ldreq	r4, [r5, #12]
 8007112:	e7e6      	b.n	80070e2 <__swsetup_r+0x1e>
 8007114:	0758      	lsls	r0, r3, #29
 8007116:	d512      	bpl.n	800713e <__swsetup_r+0x7a>
 8007118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800711a:	b141      	cbz	r1, 800712e <__swsetup_r+0x6a>
 800711c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007120:	4299      	cmp	r1, r3
 8007122:	d002      	beq.n	800712a <__swsetup_r+0x66>
 8007124:	4630      	mov	r0, r6
 8007126:	f7ff fa41 	bl	80065ac <_free_r>
 800712a:	2300      	movs	r3, #0
 800712c:	6363      	str	r3, [r4, #52]	; 0x34
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007134:	81a3      	strh	r3, [r4, #12]
 8007136:	2300      	movs	r3, #0
 8007138:	6063      	str	r3, [r4, #4]
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	f043 0308 	orr.w	r3, r3, #8
 8007144:	81a3      	strh	r3, [r4, #12]
 8007146:	6923      	ldr	r3, [r4, #16]
 8007148:	b94b      	cbnz	r3, 800715e <__swsetup_r+0x9a>
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007154:	d003      	beq.n	800715e <__swsetup_r+0x9a>
 8007156:	4621      	mov	r1, r4
 8007158:	4630      	mov	r0, r6
 800715a:	f000 fa09 	bl	8007570 <__smakebuf_r>
 800715e:	89a0      	ldrh	r0, [r4, #12]
 8007160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007164:	f010 0301 	ands.w	r3, r0, #1
 8007168:	d00a      	beq.n	8007180 <__swsetup_r+0xbc>
 800716a:	2300      	movs	r3, #0
 800716c:	60a3      	str	r3, [r4, #8]
 800716e:	6963      	ldr	r3, [r4, #20]
 8007170:	425b      	negs	r3, r3
 8007172:	61a3      	str	r3, [r4, #24]
 8007174:	6923      	ldr	r3, [r4, #16]
 8007176:	b943      	cbnz	r3, 800718a <__swsetup_r+0xc6>
 8007178:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800717c:	d1ba      	bne.n	80070f4 <__swsetup_r+0x30>
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	0781      	lsls	r1, r0, #30
 8007182:	bf58      	it	pl
 8007184:	6963      	ldrpl	r3, [r4, #20]
 8007186:	60a3      	str	r3, [r4, #8]
 8007188:	e7f4      	b.n	8007174 <__swsetup_r+0xb0>
 800718a:	2000      	movs	r0, #0
 800718c:	e7f7      	b.n	800717e <__swsetup_r+0xba>
 800718e:	bf00      	nop
 8007190:	200001ac 	.word	0x200001ac
 8007194:	08007b64 	.word	0x08007b64
 8007198:	08007b84 	.word	0x08007b84
 800719c:	08007b44 	.word	0x08007b44

080071a0 <abort>:
 80071a0:	b508      	push	{r3, lr}
 80071a2:	2006      	movs	r0, #6
 80071a4:	f000 fab0 	bl	8007708 <raise>
 80071a8:	2001      	movs	r0, #1
 80071aa:	f7f9 ff69 	bl	8001080 <_exit>
	...

080071b0 <__sflush_r>:
 80071b0:	898a      	ldrh	r2, [r1, #12]
 80071b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b6:	4605      	mov	r5, r0
 80071b8:	0710      	lsls	r0, r2, #28
 80071ba:	460c      	mov	r4, r1
 80071bc:	d458      	bmi.n	8007270 <__sflush_r+0xc0>
 80071be:	684b      	ldr	r3, [r1, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	dc05      	bgt.n	80071d0 <__sflush_r+0x20>
 80071c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	dc02      	bgt.n	80071d0 <__sflush_r+0x20>
 80071ca:	2000      	movs	r0, #0
 80071cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071d2:	2e00      	cmp	r6, #0
 80071d4:	d0f9      	beq.n	80071ca <__sflush_r+0x1a>
 80071d6:	2300      	movs	r3, #0
 80071d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071dc:	682f      	ldr	r7, [r5, #0]
 80071de:	602b      	str	r3, [r5, #0]
 80071e0:	d032      	beq.n	8007248 <__sflush_r+0x98>
 80071e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071e4:	89a3      	ldrh	r3, [r4, #12]
 80071e6:	075a      	lsls	r2, r3, #29
 80071e8:	d505      	bpl.n	80071f6 <__sflush_r+0x46>
 80071ea:	6863      	ldr	r3, [r4, #4]
 80071ec:	1ac0      	subs	r0, r0, r3
 80071ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071f0:	b10b      	cbz	r3, 80071f6 <__sflush_r+0x46>
 80071f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071f4:	1ac0      	subs	r0, r0, r3
 80071f6:	2300      	movs	r3, #0
 80071f8:	4602      	mov	r2, r0
 80071fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071fc:	6a21      	ldr	r1, [r4, #32]
 80071fe:	4628      	mov	r0, r5
 8007200:	47b0      	blx	r6
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	d106      	bne.n	8007216 <__sflush_r+0x66>
 8007208:	6829      	ldr	r1, [r5, #0]
 800720a:	291d      	cmp	r1, #29
 800720c:	d82c      	bhi.n	8007268 <__sflush_r+0xb8>
 800720e:	4a2a      	ldr	r2, [pc, #168]	; (80072b8 <__sflush_r+0x108>)
 8007210:	40ca      	lsrs	r2, r1
 8007212:	07d6      	lsls	r6, r2, #31
 8007214:	d528      	bpl.n	8007268 <__sflush_r+0xb8>
 8007216:	2200      	movs	r2, #0
 8007218:	6062      	str	r2, [r4, #4]
 800721a:	04d9      	lsls	r1, r3, #19
 800721c:	6922      	ldr	r2, [r4, #16]
 800721e:	6022      	str	r2, [r4, #0]
 8007220:	d504      	bpl.n	800722c <__sflush_r+0x7c>
 8007222:	1c42      	adds	r2, r0, #1
 8007224:	d101      	bne.n	800722a <__sflush_r+0x7a>
 8007226:	682b      	ldr	r3, [r5, #0]
 8007228:	b903      	cbnz	r3, 800722c <__sflush_r+0x7c>
 800722a:	6560      	str	r0, [r4, #84]	; 0x54
 800722c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800722e:	602f      	str	r7, [r5, #0]
 8007230:	2900      	cmp	r1, #0
 8007232:	d0ca      	beq.n	80071ca <__sflush_r+0x1a>
 8007234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007238:	4299      	cmp	r1, r3
 800723a:	d002      	beq.n	8007242 <__sflush_r+0x92>
 800723c:	4628      	mov	r0, r5
 800723e:	f7ff f9b5 	bl	80065ac <_free_r>
 8007242:	2000      	movs	r0, #0
 8007244:	6360      	str	r0, [r4, #52]	; 0x34
 8007246:	e7c1      	b.n	80071cc <__sflush_r+0x1c>
 8007248:	6a21      	ldr	r1, [r4, #32]
 800724a:	2301      	movs	r3, #1
 800724c:	4628      	mov	r0, r5
 800724e:	47b0      	blx	r6
 8007250:	1c41      	adds	r1, r0, #1
 8007252:	d1c7      	bne.n	80071e4 <__sflush_r+0x34>
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0c4      	beq.n	80071e4 <__sflush_r+0x34>
 800725a:	2b1d      	cmp	r3, #29
 800725c:	d001      	beq.n	8007262 <__sflush_r+0xb2>
 800725e:	2b16      	cmp	r3, #22
 8007260:	d101      	bne.n	8007266 <__sflush_r+0xb6>
 8007262:	602f      	str	r7, [r5, #0]
 8007264:	e7b1      	b.n	80071ca <__sflush_r+0x1a>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800726c:	81a3      	strh	r3, [r4, #12]
 800726e:	e7ad      	b.n	80071cc <__sflush_r+0x1c>
 8007270:	690f      	ldr	r7, [r1, #16]
 8007272:	2f00      	cmp	r7, #0
 8007274:	d0a9      	beq.n	80071ca <__sflush_r+0x1a>
 8007276:	0793      	lsls	r3, r2, #30
 8007278:	680e      	ldr	r6, [r1, #0]
 800727a:	bf08      	it	eq
 800727c:	694b      	ldreq	r3, [r1, #20]
 800727e:	600f      	str	r7, [r1, #0]
 8007280:	bf18      	it	ne
 8007282:	2300      	movne	r3, #0
 8007284:	eba6 0807 	sub.w	r8, r6, r7
 8007288:	608b      	str	r3, [r1, #8]
 800728a:	f1b8 0f00 	cmp.w	r8, #0
 800728e:	dd9c      	ble.n	80071ca <__sflush_r+0x1a>
 8007290:	6a21      	ldr	r1, [r4, #32]
 8007292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007294:	4643      	mov	r3, r8
 8007296:	463a      	mov	r2, r7
 8007298:	4628      	mov	r0, r5
 800729a:	47b0      	blx	r6
 800729c:	2800      	cmp	r0, #0
 800729e:	dc06      	bgt.n	80072ae <__sflush_r+0xfe>
 80072a0:	89a3      	ldrh	r3, [r4, #12]
 80072a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072a6:	81a3      	strh	r3, [r4, #12]
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	e78e      	b.n	80071cc <__sflush_r+0x1c>
 80072ae:	4407      	add	r7, r0
 80072b0:	eba8 0800 	sub.w	r8, r8, r0
 80072b4:	e7e9      	b.n	800728a <__sflush_r+0xda>
 80072b6:	bf00      	nop
 80072b8:	20400001 	.word	0x20400001

080072bc <_fflush_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	690b      	ldr	r3, [r1, #16]
 80072c0:	4605      	mov	r5, r0
 80072c2:	460c      	mov	r4, r1
 80072c4:	b913      	cbnz	r3, 80072cc <_fflush_r+0x10>
 80072c6:	2500      	movs	r5, #0
 80072c8:	4628      	mov	r0, r5
 80072ca:	bd38      	pop	{r3, r4, r5, pc}
 80072cc:	b118      	cbz	r0, 80072d6 <_fflush_r+0x1a>
 80072ce:	6983      	ldr	r3, [r0, #24]
 80072d0:	b90b      	cbnz	r3, 80072d6 <_fflush_r+0x1a>
 80072d2:	f000 f887 	bl	80073e4 <__sinit>
 80072d6:	4b14      	ldr	r3, [pc, #80]	; (8007328 <_fflush_r+0x6c>)
 80072d8:	429c      	cmp	r4, r3
 80072da:	d11b      	bne.n	8007314 <_fflush_r+0x58>
 80072dc:	686c      	ldr	r4, [r5, #4]
 80072de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0ef      	beq.n	80072c6 <_fflush_r+0xa>
 80072e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072e8:	07d0      	lsls	r0, r2, #31
 80072ea:	d404      	bmi.n	80072f6 <_fflush_r+0x3a>
 80072ec:	0599      	lsls	r1, r3, #22
 80072ee:	d402      	bmi.n	80072f6 <_fflush_r+0x3a>
 80072f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072f2:	f000 f915 	bl	8007520 <__retarget_lock_acquire_recursive>
 80072f6:	4628      	mov	r0, r5
 80072f8:	4621      	mov	r1, r4
 80072fa:	f7ff ff59 	bl	80071b0 <__sflush_r>
 80072fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007300:	07da      	lsls	r2, r3, #31
 8007302:	4605      	mov	r5, r0
 8007304:	d4e0      	bmi.n	80072c8 <_fflush_r+0xc>
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	059b      	lsls	r3, r3, #22
 800730a:	d4dd      	bmi.n	80072c8 <_fflush_r+0xc>
 800730c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800730e:	f000 f908 	bl	8007522 <__retarget_lock_release_recursive>
 8007312:	e7d9      	b.n	80072c8 <_fflush_r+0xc>
 8007314:	4b05      	ldr	r3, [pc, #20]	; (800732c <_fflush_r+0x70>)
 8007316:	429c      	cmp	r4, r3
 8007318:	d101      	bne.n	800731e <_fflush_r+0x62>
 800731a:	68ac      	ldr	r4, [r5, #8]
 800731c:	e7df      	b.n	80072de <_fflush_r+0x22>
 800731e:	4b04      	ldr	r3, [pc, #16]	; (8007330 <_fflush_r+0x74>)
 8007320:	429c      	cmp	r4, r3
 8007322:	bf08      	it	eq
 8007324:	68ec      	ldreq	r4, [r5, #12]
 8007326:	e7da      	b.n	80072de <_fflush_r+0x22>
 8007328:	08007b64 	.word	0x08007b64
 800732c:	08007b84 	.word	0x08007b84
 8007330:	08007b44 	.word	0x08007b44

08007334 <std>:
 8007334:	2300      	movs	r3, #0
 8007336:	b510      	push	{r4, lr}
 8007338:	4604      	mov	r4, r0
 800733a:	e9c0 3300 	strd	r3, r3, [r0]
 800733e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007342:	6083      	str	r3, [r0, #8]
 8007344:	8181      	strh	r1, [r0, #12]
 8007346:	6643      	str	r3, [r0, #100]	; 0x64
 8007348:	81c2      	strh	r2, [r0, #14]
 800734a:	6183      	str	r3, [r0, #24]
 800734c:	4619      	mov	r1, r3
 800734e:	2208      	movs	r2, #8
 8007350:	305c      	adds	r0, #92	; 0x5c
 8007352:	f7fe ffe3 	bl	800631c <memset>
 8007356:	4b05      	ldr	r3, [pc, #20]	; (800736c <std+0x38>)
 8007358:	6263      	str	r3, [r4, #36]	; 0x24
 800735a:	4b05      	ldr	r3, [pc, #20]	; (8007370 <std+0x3c>)
 800735c:	62a3      	str	r3, [r4, #40]	; 0x28
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <std+0x40>)
 8007360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007362:	4b05      	ldr	r3, [pc, #20]	; (8007378 <std+0x44>)
 8007364:	6224      	str	r4, [r4, #32]
 8007366:	6323      	str	r3, [r4, #48]	; 0x30
 8007368:	bd10      	pop	{r4, pc}
 800736a:	bf00      	nop
 800736c:	08007741 	.word	0x08007741
 8007370:	08007763 	.word	0x08007763
 8007374:	0800779b 	.word	0x0800779b
 8007378:	080077bf 	.word	0x080077bf

0800737c <_cleanup_r>:
 800737c:	4901      	ldr	r1, [pc, #4]	; (8007384 <_cleanup_r+0x8>)
 800737e:	f000 b8af 	b.w	80074e0 <_fwalk_reent>
 8007382:	bf00      	nop
 8007384:	080072bd 	.word	0x080072bd

08007388 <__sfmoreglue>:
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	2268      	movs	r2, #104	; 0x68
 800738c:	1e4d      	subs	r5, r1, #1
 800738e:	4355      	muls	r5, r2
 8007390:	460e      	mov	r6, r1
 8007392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007396:	f7ff f975 	bl	8006684 <_malloc_r>
 800739a:	4604      	mov	r4, r0
 800739c:	b140      	cbz	r0, 80073b0 <__sfmoreglue+0x28>
 800739e:	2100      	movs	r1, #0
 80073a0:	e9c0 1600 	strd	r1, r6, [r0]
 80073a4:	300c      	adds	r0, #12
 80073a6:	60a0      	str	r0, [r4, #8]
 80073a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073ac:	f7fe ffb6 	bl	800631c <memset>
 80073b0:	4620      	mov	r0, r4
 80073b2:	bd70      	pop	{r4, r5, r6, pc}

080073b4 <__sfp_lock_acquire>:
 80073b4:	4801      	ldr	r0, [pc, #4]	; (80073bc <__sfp_lock_acquire+0x8>)
 80073b6:	f000 b8b3 	b.w	8007520 <__retarget_lock_acquire_recursive>
 80073ba:	bf00      	nop
 80073bc:	200003b5 	.word	0x200003b5

080073c0 <__sfp_lock_release>:
 80073c0:	4801      	ldr	r0, [pc, #4]	; (80073c8 <__sfp_lock_release+0x8>)
 80073c2:	f000 b8ae 	b.w	8007522 <__retarget_lock_release_recursive>
 80073c6:	bf00      	nop
 80073c8:	200003b5 	.word	0x200003b5

080073cc <__sinit_lock_acquire>:
 80073cc:	4801      	ldr	r0, [pc, #4]	; (80073d4 <__sinit_lock_acquire+0x8>)
 80073ce:	f000 b8a7 	b.w	8007520 <__retarget_lock_acquire_recursive>
 80073d2:	bf00      	nop
 80073d4:	200003b6 	.word	0x200003b6

080073d8 <__sinit_lock_release>:
 80073d8:	4801      	ldr	r0, [pc, #4]	; (80073e0 <__sinit_lock_release+0x8>)
 80073da:	f000 b8a2 	b.w	8007522 <__retarget_lock_release_recursive>
 80073de:	bf00      	nop
 80073e0:	200003b6 	.word	0x200003b6

080073e4 <__sinit>:
 80073e4:	b510      	push	{r4, lr}
 80073e6:	4604      	mov	r4, r0
 80073e8:	f7ff fff0 	bl	80073cc <__sinit_lock_acquire>
 80073ec:	69a3      	ldr	r3, [r4, #24]
 80073ee:	b11b      	cbz	r3, 80073f8 <__sinit+0x14>
 80073f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f4:	f7ff bff0 	b.w	80073d8 <__sinit_lock_release>
 80073f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073fc:	6523      	str	r3, [r4, #80]	; 0x50
 80073fe:	4b13      	ldr	r3, [pc, #76]	; (800744c <__sinit+0x68>)
 8007400:	4a13      	ldr	r2, [pc, #76]	; (8007450 <__sinit+0x6c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	62a2      	str	r2, [r4, #40]	; 0x28
 8007406:	42a3      	cmp	r3, r4
 8007408:	bf04      	itt	eq
 800740a:	2301      	moveq	r3, #1
 800740c:	61a3      	streq	r3, [r4, #24]
 800740e:	4620      	mov	r0, r4
 8007410:	f000 f820 	bl	8007454 <__sfp>
 8007414:	6060      	str	r0, [r4, #4]
 8007416:	4620      	mov	r0, r4
 8007418:	f000 f81c 	bl	8007454 <__sfp>
 800741c:	60a0      	str	r0, [r4, #8]
 800741e:	4620      	mov	r0, r4
 8007420:	f000 f818 	bl	8007454 <__sfp>
 8007424:	2200      	movs	r2, #0
 8007426:	60e0      	str	r0, [r4, #12]
 8007428:	2104      	movs	r1, #4
 800742a:	6860      	ldr	r0, [r4, #4]
 800742c:	f7ff ff82 	bl	8007334 <std>
 8007430:	68a0      	ldr	r0, [r4, #8]
 8007432:	2201      	movs	r2, #1
 8007434:	2109      	movs	r1, #9
 8007436:	f7ff ff7d 	bl	8007334 <std>
 800743a:	68e0      	ldr	r0, [r4, #12]
 800743c:	2202      	movs	r2, #2
 800743e:	2112      	movs	r1, #18
 8007440:	f7ff ff78 	bl	8007334 <std>
 8007444:	2301      	movs	r3, #1
 8007446:	61a3      	str	r3, [r4, #24]
 8007448:	e7d2      	b.n	80073f0 <__sinit+0xc>
 800744a:	bf00      	nop
 800744c:	0800795c 	.word	0x0800795c
 8007450:	0800737d 	.word	0x0800737d

08007454 <__sfp>:
 8007454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007456:	4607      	mov	r7, r0
 8007458:	f7ff ffac 	bl	80073b4 <__sfp_lock_acquire>
 800745c:	4b1e      	ldr	r3, [pc, #120]	; (80074d8 <__sfp+0x84>)
 800745e:	681e      	ldr	r6, [r3, #0]
 8007460:	69b3      	ldr	r3, [r6, #24]
 8007462:	b913      	cbnz	r3, 800746a <__sfp+0x16>
 8007464:	4630      	mov	r0, r6
 8007466:	f7ff ffbd 	bl	80073e4 <__sinit>
 800746a:	3648      	adds	r6, #72	; 0x48
 800746c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007470:	3b01      	subs	r3, #1
 8007472:	d503      	bpl.n	800747c <__sfp+0x28>
 8007474:	6833      	ldr	r3, [r6, #0]
 8007476:	b30b      	cbz	r3, 80074bc <__sfp+0x68>
 8007478:	6836      	ldr	r6, [r6, #0]
 800747a:	e7f7      	b.n	800746c <__sfp+0x18>
 800747c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007480:	b9d5      	cbnz	r5, 80074b8 <__sfp+0x64>
 8007482:	4b16      	ldr	r3, [pc, #88]	; (80074dc <__sfp+0x88>)
 8007484:	60e3      	str	r3, [r4, #12]
 8007486:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800748a:	6665      	str	r5, [r4, #100]	; 0x64
 800748c:	f000 f847 	bl	800751e <__retarget_lock_init_recursive>
 8007490:	f7ff ff96 	bl	80073c0 <__sfp_lock_release>
 8007494:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007498:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800749c:	6025      	str	r5, [r4, #0]
 800749e:	61a5      	str	r5, [r4, #24]
 80074a0:	2208      	movs	r2, #8
 80074a2:	4629      	mov	r1, r5
 80074a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074a8:	f7fe ff38 	bl	800631c <memset>
 80074ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074b4:	4620      	mov	r0, r4
 80074b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b8:	3468      	adds	r4, #104	; 0x68
 80074ba:	e7d9      	b.n	8007470 <__sfp+0x1c>
 80074bc:	2104      	movs	r1, #4
 80074be:	4638      	mov	r0, r7
 80074c0:	f7ff ff62 	bl	8007388 <__sfmoreglue>
 80074c4:	4604      	mov	r4, r0
 80074c6:	6030      	str	r0, [r6, #0]
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d1d5      	bne.n	8007478 <__sfp+0x24>
 80074cc:	f7ff ff78 	bl	80073c0 <__sfp_lock_release>
 80074d0:	230c      	movs	r3, #12
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	e7ee      	b.n	80074b4 <__sfp+0x60>
 80074d6:	bf00      	nop
 80074d8:	0800795c 	.word	0x0800795c
 80074dc:	ffff0001 	.word	0xffff0001

080074e0 <_fwalk_reent>:
 80074e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e4:	4606      	mov	r6, r0
 80074e6:	4688      	mov	r8, r1
 80074e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074ec:	2700      	movs	r7, #0
 80074ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074f2:	f1b9 0901 	subs.w	r9, r9, #1
 80074f6:	d505      	bpl.n	8007504 <_fwalk_reent+0x24>
 80074f8:	6824      	ldr	r4, [r4, #0]
 80074fa:	2c00      	cmp	r4, #0
 80074fc:	d1f7      	bne.n	80074ee <_fwalk_reent+0xe>
 80074fe:	4638      	mov	r0, r7
 8007500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007504:	89ab      	ldrh	r3, [r5, #12]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d907      	bls.n	800751a <_fwalk_reent+0x3a>
 800750a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800750e:	3301      	adds	r3, #1
 8007510:	d003      	beq.n	800751a <_fwalk_reent+0x3a>
 8007512:	4629      	mov	r1, r5
 8007514:	4630      	mov	r0, r6
 8007516:	47c0      	blx	r8
 8007518:	4307      	orrs	r7, r0
 800751a:	3568      	adds	r5, #104	; 0x68
 800751c:	e7e9      	b.n	80074f2 <_fwalk_reent+0x12>

0800751e <__retarget_lock_init_recursive>:
 800751e:	4770      	bx	lr

08007520 <__retarget_lock_acquire_recursive>:
 8007520:	4770      	bx	lr

08007522 <__retarget_lock_release_recursive>:
 8007522:	4770      	bx	lr

08007524 <__swhatbuf_r>:
 8007524:	b570      	push	{r4, r5, r6, lr}
 8007526:	460e      	mov	r6, r1
 8007528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752c:	2900      	cmp	r1, #0
 800752e:	b096      	sub	sp, #88	; 0x58
 8007530:	4614      	mov	r4, r2
 8007532:	461d      	mov	r5, r3
 8007534:	da08      	bge.n	8007548 <__swhatbuf_r+0x24>
 8007536:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	602a      	str	r2, [r5, #0]
 800753e:	061a      	lsls	r2, r3, #24
 8007540:	d410      	bmi.n	8007564 <__swhatbuf_r+0x40>
 8007542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007546:	e00e      	b.n	8007566 <__swhatbuf_r+0x42>
 8007548:	466a      	mov	r2, sp
 800754a:	f000 f95f 	bl	800780c <_fstat_r>
 800754e:	2800      	cmp	r0, #0
 8007550:	dbf1      	blt.n	8007536 <__swhatbuf_r+0x12>
 8007552:	9a01      	ldr	r2, [sp, #4]
 8007554:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007558:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800755c:	425a      	negs	r2, r3
 800755e:	415a      	adcs	r2, r3
 8007560:	602a      	str	r2, [r5, #0]
 8007562:	e7ee      	b.n	8007542 <__swhatbuf_r+0x1e>
 8007564:	2340      	movs	r3, #64	; 0x40
 8007566:	2000      	movs	r0, #0
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	b016      	add	sp, #88	; 0x58
 800756c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007570 <__smakebuf_r>:
 8007570:	898b      	ldrh	r3, [r1, #12]
 8007572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007574:	079d      	lsls	r5, r3, #30
 8007576:	4606      	mov	r6, r0
 8007578:	460c      	mov	r4, r1
 800757a:	d507      	bpl.n	800758c <__smakebuf_r+0x1c>
 800757c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	6123      	str	r3, [r4, #16]
 8007584:	2301      	movs	r3, #1
 8007586:	6163      	str	r3, [r4, #20]
 8007588:	b002      	add	sp, #8
 800758a:	bd70      	pop	{r4, r5, r6, pc}
 800758c:	ab01      	add	r3, sp, #4
 800758e:	466a      	mov	r2, sp
 8007590:	f7ff ffc8 	bl	8007524 <__swhatbuf_r>
 8007594:	9900      	ldr	r1, [sp, #0]
 8007596:	4605      	mov	r5, r0
 8007598:	4630      	mov	r0, r6
 800759a:	f7ff f873 	bl	8006684 <_malloc_r>
 800759e:	b948      	cbnz	r0, 80075b4 <__smakebuf_r+0x44>
 80075a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a4:	059a      	lsls	r2, r3, #22
 80075a6:	d4ef      	bmi.n	8007588 <__smakebuf_r+0x18>
 80075a8:	f023 0303 	bic.w	r3, r3, #3
 80075ac:	f043 0302 	orr.w	r3, r3, #2
 80075b0:	81a3      	strh	r3, [r4, #12]
 80075b2:	e7e3      	b.n	800757c <__smakebuf_r+0xc>
 80075b4:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <__smakebuf_r+0x7c>)
 80075b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	6020      	str	r0, [r4, #0]
 80075bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c0:	81a3      	strh	r3, [r4, #12]
 80075c2:	9b00      	ldr	r3, [sp, #0]
 80075c4:	6163      	str	r3, [r4, #20]
 80075c6:	9b01      	ldr	r3, [sp, #4]
 80075c8:	6120      	str	r0, [r4, #16]
 80075ca:	b15b      	cbz	r3, 80075e4 <__smakebuf_r+0x74>
 80075cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075d0:	4630      	mov	r0, r6
 80075d2:	f000 f92d 	bl	8007830 <_isatty_r>
 80075d6:	b128      	cbz	r0, 80075e4 <__smakebuf_r+0x74>
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	f023 0303 	bic.w	r3, r3, #3
 80075de:	f043 0301 	orr.w	r3, r3, #1
 80075e2:	81a3      	strh	r3, [r4, #12]
 80075e4:	89a0      	ldrh	r0, [r4, #12]
 80075e6:	4305      	orrs	r5, r0
 80075e8:	81a5      	strh	r5, [r4, #12]
 80075ea:	e7cd      	b.n	8007588 <__smakebuf_r+0x18>
 80075ec:	0800737d 	.word	0x0800737d

080075f0 <memcpy>:
 80075f0:	440a      	add	r2, r1
 80075f2:	4291      	cmp	r1, r2
 80075f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80075f8:	d100      	bne.n	80075fc <memcpy+0xc>
 80075fa:	4770      	bx	lr
 80075fc:	b510      	push	{r4, lr}
 80075fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007606:	4291      	cmp	r1, r2
 8007608:	d1f9      	bne.n	80075fe <memcpy+0xe>
 800760a:	bd10      	pop	{r4, pc}

0800760c <memmove>:
 800760c:	4288      	cmp	r0, r1
 800760e:	b510      	push	{r4, lr}
 8007610:	eb01 0402 	add.w	r4, r1, r2
 8007614:	d902      	bls.n	800761c <memmove+0x10>
 8007616:	4284      	cmp	r4, r0
 8007618:	4623      	mov	r3, r4
 800761a:	d807      	bhi.n	800762c <memmove+0x20>
 800761c:	1e43      	subs	r3, r0, #1
 800761e:	42a1      	cmp	r1, r4
 8007620:	d008      	beq.n	8007634 <memmove+0x28>
 8007622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007626:	f803 2f01 	strb.w	r2, [r3, #1]!
 800762a:	e7f8      	b.n	800761e <memmove+0x12>
 800762c:	4402      	add	r2, r0
 800762e:	4601      	mov	r1, r0
 8007630:	428a      	cmp	r2, r1
 8007632:	d100      	bne.n	8007636 <memmove+0x2a>
 8007634:	bd10      	pop	{r4, pc}
 8007636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800763a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800763e:	e7f7      	b.n	8007630 <memmove+0x24>

08007640 <__malloc_lock>:
 8007640:	4801      	ldr	r0, [pc, #4]	; (8007648 <__malloc_lock+0x8>)
 8007642:	f7ff bf6d 	b.w	8007520 <__retarget_lock_acquire_recursive>
 8007646:	bf00      	nop
 8007648:	200003b4 	.word	0x200003b4

0800764c <__malloc_unlock>:
 800764c:	4801      	ldr	r0, [pc, #4]	; (8007654 <__malloc_unlock+0x8>)
 800764e:	f7ff bf68 	b.w	8007522 <__retarget_lock_release_recursive>
 8007652:	bf00      	nop
 8007654:	200003b4 	.word	0x200003b4

08007658 <_realloc_r>:
 8007658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800765c:	4680      	mov	r8, r0
 800765e:	4614      	mov	r4, r2
 8007660:	460e      	mov	r6, r1
 8007662:	b921      	cbnz	r1, 800766e <_realloc_r+0x16>
 8007664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007668:	4611      	mov	r1, r2
 800766a:	f7ff b80b 	b.w	8006684 <_malloc_r>
 800766e:	b92a      	cbnz	r2, 800767c <_realloc_r+0x24>
 8007670:	f7fe ff9c 	bl	80065ac <_free_r>
 8007674:	4625      	mov	r5, r4
 8007676:	4628      	mov	r0, r5
 8007678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800767c:	f000 f8fa 	bl	8007874 <_malloc_usable_size_r>
 8007680:	4284      	cmp	r4, r0
 8007682:	4607      	mov	r7, r0
 8007684:	d802      	bhi.n	800768c <_realloc_r+0x34>
 8007686:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800768a:	d812      	bhi.n	80076b2 <_realloc_r+0x5a>
 800768c:	4621      	mov	r1, r4
 800768e:	4640      	mov	r0, r8
 8007690:	f7fe fff8 	bl	8006684 <_malloc_r>
 8007694:	4605      	mov	r5, r0
 8007696:	2800      	cmp	r0, #0
 8007698:	d0ed      	beq.n	8007676 <_realloc_r+0x1e>
 800769a:	42bc      	cmp	r4, r7
 800769c:	4622      	mov	r2, r4
 800769e:	4631      	mov	r1, r6
 80076a0:	bf28      	it	cs
 80076a2:	463a      	movcs	r2, r7
 80076a4:	f7ff ffa4 	bl	80075f0 <memcpy>
 80076a8:	4631      	mov	r1, r6
 80076aa:	4640      	mov	r0, r8
 80076ac:	f7fe ff7e 	bl	80065ac <_free_r>
 80076b0:	e7e1      	b.n	8007676 <_realloc_r+0x1e>
 80076b2:	4635      	mov	r5, r6
 80076b4:	e7df      	b.n	8007676 <_realloc_r+0x1e>

080076b6 <_raise_r>:
 80076b6:	291f      	cmp	r1, #31
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4604      	mov	r4, r0
 80076bc:	460d      	mov	r5, r1
 80076be:	d904      	bls.n	80076ca <_raise_r+0x14>
 80076c0:	2316      	movs	r3, #22
 80076c2:	6003      	str	r3, [r0, #0]
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295
 80076c8:	bd38      	pop	{r3, r4, r5, pc}
 80076ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80076cc:	b112      	cbz	r2, 80076d4 <_raise_r+0x1e>
 80076ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076d2:	b94b      	cbnz	r3, 80076e8 <_raise_r+0x32>
 80076d4:	4620      	mov	r0, r4
 80076d6:	f000 f831 	bl	800773c <_getpid_r>
 80076da:	462a      	mov	r2, r5
 80076dc:	4601      	mov	r1, r0
 80076de:	4620      	mov	r0, r4
 80076e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076e4:	f000 b818 	b.w	8007718 <_kill_r>
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d00a      	beq.n	8007702 <_raise_r+0x4c>
 80076ec:	1c59      	adds	r1, r3, #1
 80076ee:	d103      	bne.n	80076f8 <_raise_r+0x42>
 80076f0:	2316      	movs	r3, #22
 80076f2:	6003      	str	r3, [r0, #0]
 80076f4:	2001      	movs	r0, #1
 80076f6:	e7e7      	b.n	80076c8 <_raise_r+0x12>
 80076f8:	2400      	movs	r4, #0
 80076fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076fe:	4628      	mov	r0, r5
 8007700:	4798      	blx	r3
 8007702:	2000      	movs	r0, #0
 8007704:	e7e0      	b.n	80076c8 <_raise_r+0x12>
	...

08007708 <raise>:
 8007708:	4b02      	ldr	r3, [pc, #8]	; (8007714 <raise+0xc>)
 800770a:	4601      	mov	r1, r0
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	f7ff bfd2 	b.w	80076b6 <_raise_r>
 8007712:	bf00      	nop
 8007714:	200001ac 	.word	0x200001ac

08007718 <_kill_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4d07      	ldr	r5, [pc, #28]	; (8007738 <_kill_r+0x20>)
 800771c:	2300      	movs	r3, #0
 800771e:	4604      	mov	r4, r0
 8007720:	4608      	mov	r0, r1
 8007722:	4611      	mov	r1, r2
 8007724:	602b      	str	r3, [r5, #0]
 8007726:	f7f9 fc9b 	bl	8001060 <_kill>
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	d102      	bne.n	8007734 <_kill_r+0x1c>
 800772e:	682b      	ldr	r3, [r5, #0]
 8007730:	b103      	cbz	r3, 8007734 <_kill_r+0x1c>
 8007732:	6023      	str	r3, [r4, #0]
 8007734:	bd38      	pop	{r3, r4, r5, pc}
 8007736:	bf00      	nop
 8007738:	200003b8 	.word	0x200003b8

0800773c <_getpid_r>:
 800773c:	f7f9 bc88 	b.w	8001050 <_getpid>

08007740 <__sread>:
 8007740:	b510      	push	{r4, lr}
 8007742:	460c      	mov	r4, r1
 8007744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007748:	f000 f89c 	bl	8007884 <_read_r>
 800774c:	2800      	cmp	r0, #0
 800774e:	bfab      	itete	ge
 8007750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007752:	89a3      	ldrhlt	r3, [r4, #12]
 8007754:	181b      	addge	r3, r3, r0
 8007756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800775a:	bfac      	ite	ge
 800775c:	6563      	strge	r3, [r4, #84]	; 0x54
 800775e:	81a3      	strhlt	r3, [r4, #12]
 8007760:	bd10      	pop	{r4, pc}

08007762 <__swrite>:
 8007762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007766:	461f      	mov	r7, r3
 8007768:	898b      	ldrh	r3, [r1, #12]
 800776a:	05db      	lsls	r3, r3, #23
 800776c:	4605      	mov	r5, r0
 800776e:	460c      	mov	r4, r1
 8007770:	4616      	mov	r6, r2
 8007772:	d505      	bpl.n	8007780 <__swrite+0x1e>
 8007774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007778:	2302      	movs	r3, #2
 800777a:	2200      	movs	r2, #0
 800777c:	f000 f868 	bl	8007850 <_lseek_r>
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	4632      	mov	r2, r6
 800778e:	463b      	mov	r3, r7
 8007790:	4628      	mov	r0, r5
 8007792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007796:	f000 b817 	b.w	80077c8 <_write_r>

0800779a <__sseek>:
 800779a:	b510      	push	{r4, lr}
 800779c:	460c      	mov	r4, r1
 800779e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a2:	f000 f855 	bl	8007850 <_lseek_r>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	bf15      	itete	ne
 80077ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80077ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077b6:	81a3      	strheq	r3, [r4, #12]
 80077b8:	bf18      	it	ne
 80077ba:	81a3      	strhne	r3, [r4, #12]
 80077bc:	bd10      	pop	{r4, pc}

080077be <__sclose>:
 80077be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c2:	f000 b813 	b.w	80077ec <_close_r>
	...

080077c8 <_write_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4d07      	ldr	r5, [pc, #28]	; (80077e8 <_write_r+0x20>)
 80077cc:	4604      	mov	r4, r0
 80077ce:	4608      	mov	r0, r1
 80077d0:	4611      	mov	r1, r2
 80077d2:	2200      	movs	r2, #0
 80077d4:	602a      	str	r2, [r5, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f7f9 fc79 	bl	80010ce <_write>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_write_r+0x1e>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_write_r+0x1e>
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	200003b8 	.word	0x200003b8

080077ec <_close_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4d06      	ldr	r5, [pc, #24]	; (8007808 <_close_r+0x1c>)
 80077f0:	2300      	movs	r3, #0
 80077f2:	4604      	mov	r4, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	602b      	str	r3, [r5, #0]
 80077f8:	f7f9 fc85 	bl	8001106 <_close>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d102      	bne.n	8007806 <_close_r+0x1a>
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	b103      	cbz	r3, 8007806 <_close_r+0x1a>
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	200003b8 	.word	0x200003b8

0800780c <_fstat_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4d07      	ldr	r5, [pc, #28]	; (800782c <_fstat_r+0x20>)
 8007810:	2300      	movs	r3, #0
 8007812:	4604      	mov	r4, r0
 8007814:	4608      	mov	r0, r1
 8007816:	4611      	mov	r1, r2
 8007818:	602b      	str	r3, [r5, #0]
 800781a:	f7f9 fc80 	bl	800111e <_fstat>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	d102      	bne.n	8007828 <_fstat_r+0x1c>
 8007822:	682b      	ldr	r3, [r5, #0]
 8007824:	b103      	cbz	r3, 8007828 <_fstat_r+0x1c>
 8007826:	6023      	str	r3, [r4, #0]
 8007828:	bd38      	pop	{r3, r4, r5, pc}
 800782a:	bf00      	nop
 800782c:	200003b8 	.word	0x200003b8

08007830 <_isatty_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4d06      	ldr	r5, [pc, #24]	; (800784c <_isatty_r+0x1c>)
 8007834:	2300      	movs	r3, #0
 8007836:	4604      	mov	r4, r0
 8007838:	4608      	mov	r0, r1
 800783a:	602b      	str	r3, [r5, #0]
 800783c:	f7f9 fc7f 	bl	800113e <_isatty>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_isatty_r+0x1a>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_isatty_r+0x1a>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	200003b8 	.word	0x200003b8

08007850 <_lseek_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d07      	ldr	r5, [pc, #28]	; (8007870 <_lseek_r+0x20>)
 8007854:	4604      	mov	r4, r0
 8007856:	4608      	mov	r0, r1
 8007858:	4611      	mov	r1, r2
 800785a:	2200      	movs	r2, #0
 800785c:	602a      	str	r2, [r5, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	f7f9 fc78 	bl	8001154 <_lseek>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_lseek_r+0x1e>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_lseek_r+0x1e>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	200003b8 	.word	0x200003b8

08007874 <_malloc_usable_size_r>:
 8007874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007878:	1f18      	subs	r0, r3, #4
 800787a:	2b00      	cmp	r3, #0
 800787c:	bfbc      	itt	lt
 800787e:	580b      	ldrlt	r3, [r1, r0]
 8007880:	18c0      	addlt	r0, r0, r3
 8007882:	4770      	bx	lr

08007884 <_read_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4d07      	ldr	r5, [pc, #28]	; (80078a4 <_read_r+0x20>)
 8007888:	4604      	mov	r4, r0
 800788a:	4608      	mov	r0, r1
 800788c:	4611      	mov	r1, r2
 800788e:	2200      	movs	r2, #0
 8007890:	602a      	str	r2, [r5, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	f7f9 fbfe 	bl	8001094 <_read>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d102      	bne.n	80078a2 <_read_r+0x1e>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b103      	cbz	r3, 80078a2 <_read_r+0x1e>
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	200003b8 	.word	0x200003b8

080078a8 <_init>:
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	bf00      	nop
 80078ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ae:	bc08      	pop	{r3}
 80078b0:	469e      	mov	lr, r3
 80078b2:	4770      	bx	lr

080078b4 <_fini>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	bf00      	nop
 80078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ba:	bc08      	pop	{r3}
 80078bc:	469e      	mov	lr, r3
 80078be:	4770      	bx	lr
