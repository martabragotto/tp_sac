
NUCLEO-G431RB-MSC_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e358  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800e538  0800e538  0001e538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eaf0  0800eaf0  00020380  2**0
                  CONTENTS
  4 .ARM          00000008  0800eaf0  0800eaf0  0001eaf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eaf8  0800eaf8  00020380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eaf8  0800eaf8  0001eaf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eafc  0800eafc  0001eafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  0800eb00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000380  0800ee80  00020380  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  0800ee80  00020730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0a4  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e4a  00000000  00000000  0003a454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0003d2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  0003e850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002162d  00000000  00000000  0003fce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001798d  00000000  00000000  00061315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd6ae  00000000  00000000  00078ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073e0  00000000  00000000  001563a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000380 	.word	0x20000380
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e520 	.word	0x0800e520

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000384 	.word	0x20000384
 800021c:	0800e520 	.word	0x0800e520

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9aa 	b.w	8001064 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468e      	mov	lr, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14d      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da2:	428a      	cmp	r2, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	d969      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b152      	cbz	r2, 8000dc4 <__udivmoddi4+0x30>
 8000dae:	fa01 f302 	lsl.w	r3, r1, r2
 8000db2:	f1c2 0120 	rsb	r1, r2, #32
 8000db6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	fbbe f6f8 	udiv	r6, lr, r8
 8000dce:	fa1f f78c 	uxth.w	r7, ip
 8000dd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dda:	fb06 f107 	mul.w	r1, r6, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dea:	f080 811f 	bcs.w	800102c <__udivmoddi4+0x298>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 811c 	bls.w	800102c <__udivmoddi4+0x298>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb00 f707 	mul.w	r7, r0, r7
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x92>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e18:	f080 810a 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	f240 8107 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	b11d      	cbz	r5, 8000e38 <__udivmoddi4+0xa4>
 8000e30:	40d4      	lsrs	r4, r2
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c5 4300 	strd	r4, r3, [r5]
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80ef 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	469e      	mov	lr, r3
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0e0      	beq.n	8000e38 <__udivmoddi4+0xa4>
 8000e76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e7a:	e7dd      	b.n	8000e38 <__udivmoddi4+0xa4>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8092 	bne.w	8000fae <__udivmoddi4+0x21a>
 8000e8a:	eba1 010c 	sub.w	r1, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	0c20      	lsrs	r0, r4, #16
 8000e9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ea2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	4288      	cmp	r0, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ecc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x9a>
 8000ef4:	f1c6 0720 	rsb	r7, r6, #32
 8000ef8:	40b3      	lsls	r3, r6
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40f9      	lsrs	r1, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f306 	lsl.w	r3, r0, r6
 8000f16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 1118 	mls	r1, r9, r8, r1
 8000f24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f54:	fb09 1110 	mls	r1, r9, r0, r1
 8000f58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	458e      	cmp	lr, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	458e      	cmp	lr, r1
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba1 010e 	sub.w	r1, r1, lr
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb61 010e 	sbc.w	r1, r1, lr
 8000f96:	fa01 f707 	lsl.w	r7, r1, r7
 8000f9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f9e:	40f1      	lsrs	r1, r6
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	f1c2 0320 	rsb	r3, r2, #32
 8000fb2:	40d8      	lsrs	r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd0:	0c0b      	lsrs	r3, r1, #16
 8000fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	429e      	cmp	r6, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ffc:	fb07 3316 	mls	r3, r7, r6, r3
 8001000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001004:	fb06 f30e 	mul.w	r3, r6, lr
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0101 	adds.w	r1, ip, r1
 8001010:	f106 38ff 	add.w	r8, r6, #4294967295
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	428b      	cmp	r3, r1
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3e02      	subs	r6, #2
 800101c:	4461      	add	r1, ip
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e705      	b.n	8000e38 <__udivmoddi4+0xa4>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e3      	b.n	8000df8 <__udivmoddi4+0x64>
 8001030:	4618      	mov	r0, r3
 8001032:	e6f8      	b.n	8000e26 <__udivmoddi4+0x92>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4646      	mov	r6, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4640      	mov	r0, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4461      	add	r1, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4630      	mov	r0, r6
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <ISO_RESET>:
 * using a for cycle to delay the operation
 * @param None
 * @retval None
 */
void ISO_RESET()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2102      	movs	r1, #2
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <ISO_RESET+0x38>)
 8001072:	f003 fde1 	bl	8004c38 <HAL_GPIO_WritePin>
	for(i=0; i<ISO_RESET_TIME; i++)
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <ISO_RESET+0x3c>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e004      	b.n	8001088 <ISO_RESET+0x20>
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <ISO_RESET+0x3c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <ISO_RESET+0x3c>)
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <ISO_RESET+0x3c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b45      	cmp	r3, #69	; 0x45
 800108e:	ddf6      	ble.n	800107e <ISO_RESET+0x16>
	{
		//wait for at least 2microSec
	}
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2102      	movs	r1, #2
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <ISO_RESET+0x38>)
 8001096:	f003 fdcf 	bl	8004c38 <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	48000800 	.word	0x48000800
 80010a4:	20000690 	.word	0x20000690

080010a8 <StartPWM>:
 * after ISO_RESET command the PWM timers are started to command the power supply and then the motor
 * @param None
 * @retval None
 */
void StartPWM()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	//Timers start
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010ac:	2100      	movs	r1, #0
 80010ae:	4808      	ldr	r0, [pc, #32]	; (80010d0 <StartPWM+0x28>)
 80010b0:	f004 ff5a 	bl	8005f68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80010b4:	2104      	movs	r1, #4
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <StartPWM+0x28>)
 80010b8:	f004 ff56 	bl	8005f68 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80010bc:	2100      	movs	r1, #0
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <StartPWM+0x28>)
 80010c0:	f006 fa3a 	bl	8007538 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80010c4:	2104      	movs	r1, #4
 80010c6:	4802      	ldr	r0, [pc, #8]	; (80010d0 <StartPWM+0x28>)
 80010c8:	f006 fa36 	bl	8007538 <HAL_TIMEx_PWMN_Start>
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000468 	.word	0x20000468

080010d4 <StopPWM>:
 * PWM timers are stopped and then the motor is stopped
 * @param None
 * @retval None
 */
void StopPWM()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	//Timers stop
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80010d8:	2100      	movs	r1, #0
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <StopPWM+0x28>)
 80010dc:	f005 f844 	bl	8006168 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80010e0:	2104      	movs	r1, #4
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <StopPWM+0x28>)
 80010e4:	f005 f840 	bl	8006168 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	4804      	ldr	r0, [pc, #16]	; (80010fc <StopPWM+0x28>)
 80010ec:	f006 fad8 	bl	80076a0 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80010f0:	2104      	movs	r1, #4
 80010f2:	4802      	ldr	r0, [pc, #8]	; (80010fc <StopPWM+0x28>)
 80010f4:	f006 fad4 	bl	80076a0 <HAL_TIMEx_PWMN_Stop>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000468 	.word	0x20000468

08001100 <CurrentConversion>:
 * @note   This function converts raw voltage data from ADC to current value to be used in the controller
 * @param None
 * @retval float
 */
float CurrentConversion()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit(&huart2, "DMA current recieved\r\n ", sizeof("DMA current recieved\r\n"), HAL_MAX_DELAY);
	Raw_Data_Sum=0;
 8001104:	4b44      	ldr	r3, [pc, #272]	; (8001218 <CurrentConversion+0x118>)
 8001106:	2200      	movs	r2, #0
 8001108:	801a      	strh	r2, [r3, #0]
	for(i=0;i<10;i++){
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <CurrentConversion+0x11c>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e00f      	b.n	8001132 <CurrentConversion+0x32>
		Raw_Data_Sum=Raw_Data_Sum+ADC_buffer[i];
 8001112:	4b42      	ldr	r3, [pc, #264]	; (800121c <CurrentConversion+0x11c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a42      	ldr	r2, [pc, #264]	; (8001220 <CurrentConversion+0x120>)
 8001118:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800111c:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <CurrentConversion+0x118>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4413      	add	r3, r2
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b3c      	ldr	r3, [pc, #240]	; (8001218 <CurrentConversion+0x118>)
 8001126:	801a      	strh	r2, [r3, #0]
	for(i=0;i<10;i++){
 8001128:	4b3c      	ldr	r3, [pc, #240]	; (800121c <CurrentConversion+0x11c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	4a3b      	ldr	r2, [pc, #236]	; (800121c <CurrentConversion+0x11c>)
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b3a      	ldr	r3, [pc, #232]	; (800121c <CurrentConversion+0x11c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b09      	cmp	r3, #9
 8001138:	ddeb      	ble.n	8001112 <CurrentConversion+0x12>
	}
	Average_Voltage=Raw_Data_Sum/ADC_BUFF_SIZE;
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <CurrentConversion+0x118>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	4a39      	ldr	r2, [pc, #228]	; (8001224 <CurrentConversion+0x124>)
 8001140:	fba2 2303 	umull	r2, r3, r2, r3
 8001144:	08db      	lsrs	r3, r3, #3
 8001146:	b29b      	uxth	r3, r3
 8001148:	ee07 3a90 	vmov	s15, r3
 800114c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001150:	4b35      	ldr	r3, [pc, #212]	; (8001228 <CurrentConversion+0x128>)
 8001152:	edc3 7a00 	vstr	s15, [r3]
	Converted_Average_Voltage=(Average_Voltage/4095.0)*3.3;
 8001156:	4b34      	ldr	r3, [pc, #208]	; (8001228 <CurrentConversion+0x128>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fa2c 	bl	80005b8 <__aeabi_f2d>
 8001160:	a329      	add	r3, pc, #164	; (adr r3, 8001208 <CurrentConversion+0x108>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fba9 	bl	80008bc <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	a327      	add	r3, pc, #156	; (adr r3, 8001210 <CurrentConversion+0x110>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff fa76 	bl	8000668 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fd68 	bl	8000c58 <__aeabi_d2f>
 8001188:	4603      	mov	r3, r0
 800118a:	4a28      	ldr	r2, [pc, #160]	; (800122c <CurrentConversion+0x12c>)
 800118c:	6013      	str	r3, [r2, #0]
	Sensed_Current_Value=12*(Converted_Average_Voltage -2.5);
 800118e:	4b27      	ldr	r3, [pc, #156]	; (800122c <CurrentConversion+0x12c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fa10 	bl	80005b8 <__aeabi_f2d>
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <CurrentConversion+0x130>)
 800119e:	f7ff f8ab 	bl	80002f8 <__aeabi_dsub>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <CurrentConversion+0x134>)
 80011b0:	f7ff fa5a 	bl	8000668 <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fd4c 	bl	8000c58 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <CurrentConversion+0x138>)
 80011c4:	6013      	str	r3, [r2, #0]
	sprintf(Current_Sensed, "current sensed is %.3f \r\n", Sensed_Current_Value);
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <CurrentConversion+0x138>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9f4 	bl	80005b8 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4919      	ldr	r1, [pc, #100]	; (800123c <CurrentConversion+0x13c>)
 80011d6:	481a      	ldr	r0, [pc, #104]	; (8001240 <CurrentConversion+0x140>)
 80011d8:	f009 fb4a 	bl	800a870 <siprintf>
	//for debug - prints current value
	if(k==100000){
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <CurrentConversion+0x144>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a19      	ldr	r2, [pc, #100]	; (8001248 <CurrentConversion+0x148>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d109      	bne.n	80011fa <CurrentConversion+0xfa>
		HAL_UART_Transmit(&huart2, Current_Sensed, sizeof(Current_Sensed), HAL_MAX_DELAY);
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	221e      	movs	r2, #30
 80011ec:	4914      	ldr	r1, [pc, #80]	; (8001240 <CurrentConversion+0x140>)
 80011ee:	4817      	ldr	r0, [pc, #92]	; (800124c <CurrentConversion+0x14c>)
 80011f0:	f006 fc91 	bl	8007b16 <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart2, ADC_buffer, sizeof(ADC_buffer), HAL_MAX_DELAY);
		k=0;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <CurrentConversion+0x144>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
	}
	return Sensed_Current_Value;
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <CurrentConversion+0x138>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	ee07 3a90 	vmov	s15, r3
}
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	bd80      	pop	{r7, pc}
 8001208:	00000000 	.word	0x00000000
 800120c:	40affe00 	.word	0x40affe00
 8001210:	66666666 	.word	0x66666666
 8001214:	400a6666 	.word	0x400a6666
 8001218:	20000694 	.word	0x20000694
 800121c:	20000690 	.word	0x20000690
 8001220:	2000067c 	.word	0x2000067c
 8001224:	cccccccd 	.word	0xcccccccd
 8001228:	20000698 	.word	0x20000698
 800122c:	2000069c 	.word	0x2000069c
 8001230:	40040000 	.word	0x40040000
 8001234:	40280000 	.word	0x40280000
 8001238:	200006a0 	.word	0x200006a0
 800123c:	0800e538 	.word	0x0800e538
 8001240:	200006a8 	.word	0x200006a8
 8001244:	200006c8 	.word	0x200006c8
 8001248:	000186a0 	.word	0x000186a0
 800124c:	20000598 	.word	0x20000598

08001250 <DutyCycleFuncDef>:
 * @note   This function converts raw voltage data from ADC to current value to be used in the controller
 * @param int
 * @retval None
 */
void DutyCycleFuncDef(int dutycycleIN)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	pulse=(dutycycleIN*TIM1_ARR)/100;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <DutyCycleFuncDef+0x44>)
 8001264:	fb82 1203 	smull	r1, r2, r2, r3
 8001268:	1152      	asrs	r2, r2, #5
 800126a:	17db      	asrs	r3, r3, #31
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <DutyCycleFuncDef+0x48>)
 8001270:	6013      	str	r3, [r2, #0]
	TIM1->CCR1=pulse;
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <DutyCycleFuncDef+0x48>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <DutyCycleFuncDef+0x4c>)
 8001278:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=TIM1_ARR-pulse;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <DutyCycleFuncDef+0x48>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f5c3 52a6 	rsb	r2, r3, #5312	; 0x14c0
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <DutyCycleFuncDef+0x4c>)
 8001284:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	51eb851f 	.word	0x51eb851f
 8001298:	2000062c 	.word	0x2000062c
 800129c:	40012c00 	.word	0x40012c00

080012a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b09e      	sub	sp, #120	; 0x78
 80012a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	66bb      	str	r3, [r7, #104]	; 0x68
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012ae:	f001 f926 	bl	80024fe <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012b2:	f000 f9db 	bl	800166c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012b6:	f000 fcd1 	bl	8001c5c <MX_GPIO_Init>
	MX_DMA_Init();
 80012ba:	f000 fca5 	bl	8001c08 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80012be:	f000 fc57 	bl	8001b70 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 80012c2:	f000 fa99 	bl	80017f8 <MX_TIM1_Init>
	MX_ADC1_Init();
 80012c6:	f000 fa1d 	bl	8001704 <MX_ADC1_Init>
	MX_TIM8_Init();
 80012ca:	f000 fbfd 	bl	8001ac8 <MX_TIM8_Init>
	MX_TIM3_Init();
 80012ce:	f000 fb53 	bl	8001978 <MX_TIM3_Init>
	MX_TIM4_Init();
 80012d2:	f000 fba9 	bl	8001a28 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2224      	movs	r2, #36	; 0x24
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f008 fc3f 	bl	8009b60 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	2240      	movs	r2, #64	; 0x40
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f008 fc38 	bl	8009b60 <memset>
 80012f0:	4ba7      	ldr	r3, [pc, #668]	; (8001590 <main+0x2f0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80012f6:	2240      	movs	r2, #64	; 0x40
 80012f8:	2100      	movs	r1, #0
 80012fa:	48a6      	ldr	r0, [pc, #664]	; (8001594 <main+0x2f4>)
 80012fc:	f008 fc30 	bl	8009b60 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001300:	2201      	movs	r2, #1
 8001302:	49a3      	ldr	r1, [pc, #652]	; (8001590 <main+0x2f0>)
 8001304:	48a4      	ldr	r0, [pc, #656]	; (8001598 <main+0x2f8>)
 8001306:	f006 fc9d 	bl	8007c44 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800130a:	200a      	movs	r0, #10
 800130c:	f001 f92e 	bl	800256c <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	2266      	movs	r2, #102	; 0x66
 8001316:	49a1      	ldr	r1, [pc, #644]	; (800159c <main+0x2fc>)
 8001318:	489f      	ldr	r0, [pc, #636]	; (8001598 <main+0x2f8>)
 800131a:	f006 fbfc 	bl	8007b16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	2218      	movs	r2, #24
 8001324:	499e      	ldr	r1, [pc, #632]	; (80015a0 <main+0x300>)
 8001326:	489c      	ldr	r0, [pc, #624]	; (8001598 <main+0x2f8>)
 8001328:	f006 fbf5 	bl	8007b16 <HAL_UART_Transmit>

	//ADC starting functions
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 800132c:	217f      	movs	r1, #127	; 0x7f
 800132e:	489d      	ldr	r0, [pc, #628]	; (80015a4 <main+0x304>)
 8001330:	f002 fdb6 	bl	8003ea0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, ADC_buffer, ADC_BUFF_SIZE);
 8001334:	220a      	movs	r2, #10
 8001336:	499c      	ldr	r1, [pc, #624]	; (80015a8 <main+0x308>)
 8001338:	489a      	ldr	r0, [pc, #616]	; (80015a4 <main+0x304>)
 800133a:	f001 fd2d 	bl	8002d98 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim8);
 800133e:	489b      	ldr	r0, [pc, #620]	; (80015ac <main+0x30c>)
 8001340:	f004 fce4 	bl	8005d0c <HAL_TIM_Base_Start>

	//Encoder mode TIM3 starting
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001344:	213c      	movs	r1, #60	; 0x3c
 8001346:	489a      	ldr	r0, [pc, #616]	; (80015b0 <main+0x310>)
 8001348:	f005 f84a 	bl	80063e0 <HAL_TIM_Encoder_Start_IT>
	// TIM4 start. Used to measure the time and determine speed
	HAL_TIM_Base_Start_IT(&htim4);
 800134c:	4899      	ldr	r0, [pc, #612]	; (80015b4 <main+0x314>)
 800134e:	f004 fd3f 	bl	8005dd0 <HAL_TIM_Base_Start_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8001352:	4b99      	ldr	r3, [pc, #612]	; (80015b8 <main+0x318>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d06e      	beq.n	8001438 <main+0x198>
			switch(uartRxBuffer[0]){
 800135a:	4b8d      	ldr	r3, [pc, #564]	; (8001590 <main+0x2f0>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b0d      	cmp	r3, #13
 8001360:	d002      	beq.n	8001368 <main+0xc8>
 8001362:	2b7f      	cmp	r3, #127	; 0x7f
 8001364:	d045      	beq.n	80013f2 <main+0x152>
 8001366:	e054      	b.n	8001412 <main+0x172>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	2203      	movs	r2, #3
 800136e:	4993      	ldr	r1, [pc, #588]	; (80015bc <main+0x31c>)
 8001370:	4889      	ldr	r0, [pc, #548]	; (8001598 <main+0x2f8>)
 8001372:	f006 fbd0 	bl	8007b16 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8001376:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800137a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800137c:	4413      	add	r3, r2
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 8001386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138a:	498d      	ldr	r1, [pc, #564]	; (80015c0 <main+0x320>)
 800138c:	4618      	mov	r0, r3
 800138e:	f00a f8b7 	bl	800b500 <strtok>
 8001392:	4603      	mov	r3, r0
 8001394:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 8001396:	e00e      	b.n	80013b6 <main+0x116>
					argv[argc++] = token;
 8001398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	673a      	str	r2, [r7, #112]	; 0x70
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	3378      	adds	r3, #120	; 0x78
 80013a2:	443b      	add	r3, r7
 80013a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013a6:	f843 2c74 	str.w	r2, [r3, #-116]
					token = strtok(NULL, " ");
 80013aa:	4985      	ldr	r1, [pc, #532]	; (80015c0 <main+0x320>)
 80013ac:	2000      	movs	r0, #0
 80013ae:	f00a f8a7 	bl	800b500 <strtok>
 80013b2:	4603      	mov	r3, r0
 80013b4:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80013b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1ed      	bne.n	8001398 <main+0xf8>
				}

				//requested echo transmission to check characters

				HAL_UART_Transmit(&huart2, "\r\n ", sizeof("\r\n "), HAL_MAX_DELAY);
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	2204      	movs	r2, #4
 80013c2:	4980      	ldr	r1, [pc, #512]	; (80015c4 <main+0x324>)
 80013c4:	4874      	ldr	r0, [pc, #464]	; (8001598 <main+0x2f8>)
 80013c6:	f006 fba6 	bl	8007b16 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, cmdBuffer, sizeof(cmdBuffer), HAL_MAX_DELAY);
 80013ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	2240      	movs	r2, #64	; 0x40
 80013d4:	4870      	ldr	r0, [pc, #448]	; (8001598 <main+0x2f8>)
 80013d6:	f006 fb9e 	bl	8007b16 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\r\n ", sizeof("\r\n "), HAL_MAX_DELAY);
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	2204      	movs	r2, #4
 80013e0:	4978      	ldr	r1, [pc, #480]	; (80015c4 <main+0x324>)
 80013e2:	486d      	ldr	r0, [pc, #436]	; (8001598 <main+0x2f8>)
 80013e4:	f006 fb97 	bl	8007b16 <HAL_UART_Transmit>

				idx_cmd = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80013f0:	e01f      	b.n	8001432 <main+0x192>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80013f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013f4:	1e5a      	subs	r2, r3, #1
 80013f6:	677a      	str	r2, [r7, #116]	; 0x74
 80013f8:	3378      	adds	r3, #120	; 0x78
 80013fa:	443b      	add	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	2201      	movs	r2, #1
 8001408:	4961      	ldr	r1, [pc, #388]	; (8001590 <main+0x2f0>)
 800140a:	4863      	ldr	r0, [pc, #396]	; (8001598 <main+0x2f8>)
 800140c:	f006 fb83 	bl	8007b16 <HAL_UART_Transmit>
				break;
 8001410:	e00f      	b.n	8001432 <main+0x192>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001414:	1c5a      	adds	r2, r3, #1
 8001416:	677a      	str	r2, [r7, #116]	; 0x74
 8001418:	4a5d      	ldr	r2, [pc, #372]	; (8001590 <main+0x2f0>)
 800141a:	7812      	ldrb	r2, [r2, #0]
 800141c:	3378      	adds	r3, #120	; 0x78
 800141e:	443b      	add	r3, r7
 8001420:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	2201      	movs	r2, #1
 800142a:	4959      	ldr	r1, [pc, #356]	; (8001590 <main+0x2f0>)
 800142c:	485a      	ldr	r0, [pc, #360]	; (8001598 <main+0x2f8>)
 800142e:	f006 fb72 	bl	8007b16 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8001432:	4b61      	ldr	r3, [pc, #388]	; (80015b8 <main+0x318>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8001438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 80f4 	beq.w	8001628 <main+0x388>
			if(strcmp(argv[0],"set")==0){
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4961      	ldr	r1, [pc, #388]	; (80015c8 <main+0x328>)
 8001444:	4618      	mov	r0, r3
 8001446:	f7fe feeb 	bl	8000220 <strcmp>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d12d      	bne.n	80014ac <main+0x20c>
				if(strcmp(argv[1],"PA5")==0){
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	495e      	ldr	r1, [pc, #376]	; (80015cc <main+0x32c>)
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe fee3 	bl	8000220 <strcmp>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d11d      	bne.n	800149c <main+0x1fc>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4618      	mov	r0, r3
 8001464:	f008 fb4e 	bl	8009b04 <atoi>
 8001468:	4603      	mov	r3, r0
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	2120      	movs	r1, #32
 8001470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001474:	f003 fbe0 	bl	8004c38 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4618      	mov	r0, r3
 800147c:	f008 fb42 	bl	8009b04 <atoi>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	4952      	ldr	r1, [pc, #328]	; (80015d0 <main+0x330>)
 8001486:	4843      	ldr	r0, [pc, #268]	; (8001594 <main+0x2f4>)
 8001488:	f009 f9f2 	bl	800a870 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	2220      	movs	r2, #32
 8001492:	4940      	ldr	r1, [pc, #256]	; (8001594 <main+0x2f4>)
 8001494:	4840      	ldr	r0, [pc, #256]	; (8001598 <main+0x2f8>)
 8001496:	f006 fb3e 	bl	8007b16 <HAL_UART_Transmit>
 800149a:	e0bc      	b.n	8001616 <main+0x376>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	2214      	movs	r2, #20
 80014a2:	494c      	ldr	r1, [pc, #304]	; (80015d4 <main+0x334>)
 80014a4:	483c      	ldr	r0, [pc, #240]	; (8001598 <main+0x2f8>)
 80014a6:	f006 fb36 	bl	8007b16 <HAL_UART_Transmit>
 80014aa:	e0b4      	b.n	8001616 <main+0x376>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	494a      	ldr	r1, [pc, #296]	; (80015d8 <main+0x338>)
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe feb5 	bl	8000220 <strcmp>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d107      	bne.n	80014cc <main+0x22c>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	2214      	movs	r2, #20
 80014c2:	4944      	ldr	r1, [pc, #272]	; (80015d4 <main+0x334>)
 80014c4:	4834      	ldr	r0, [pc, #208]	; (8001598 <main+0x2f8>)
 80014c6:	f006 fb26 	bl	8007b16 <HAL_UART_Transmit>
 80014ca:	e0a4      	b.n	8001616 <main+0x376>
			}

			// help function prints all the available commands
			else if(strcmp(argv[0],"help")==0){
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4943      	ldr	r1, [pc, #268]	; (80015dc <main+0x33c>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe fea5 	bl	8000220 <strcmp>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d107      	bne.n	80014ec <main+0x24c>
				HAL_UART_Transmit(&huart2, helpContent, sizeof(helpContent), HAL_MAX_DELAY);
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	223b      	movs	r2, #59	; 0x3b
 80014e2:	493f      	ldr	r1, [pc, #252]	; (80015e0 <main+0x340>)
 80014e4:	482c      	ldr	r0, [pc, #176]	; (8001598 <main+0x2f8>)
 80014e6:	f006 fb16 	bl	8007b16 <HAL_UART_Transmit>
 80014ea:	e094      	b.n	8001616 <main+0x376>
			}
			else if(strcmp(argv[0],"pinout")==0){
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	493d      	ldr	r1, [pc, #244]	; (80015e4 <main+0x344>)
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe fe95 	bl	8000220 <strcmp>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <main+0x26c>
				HAL_UART_Transmit(&huart2, pinoutContent, sizeof(pinoutContent), HAL_MAX_DELAY);
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001500:	2289      	movs	r2, #137	; 0x89
 8001502:	4939      	ldr	r1, [pc, #228]	; (80015e8 <main+0x348>)
 8001504:	4824      	ldr	r0, [pc, #144]	; (8001598 <main+0x2f8>)
 8001506:	f006 fb06 	bl	8007b16 <HAL_UART_Transmit>
 800150a:	e084      	b.n	8001616 <main+0x376>
			}
			else if(strcmp(argv[0],"start")==0){
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4937      	ldr	r1, [pc, #220]	; (80015ec <main+0x34c>)
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe fe85 	bl	8000220 <strcmp>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10b      	bne.n	8001534 <main+0x294>
				HAL_UART_Transmit(&huart2, startContent, sizeof(startContent), HAL_MAX_DELAY);
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
 8001520:	220f      	movs	r2, #15
 8001522:	4933      	ldr	r1, [pc, #204]	; (80015f0 <main+0x350>)
 8001524:	481c      	ldr	r0, [pc, #112]	; (8001598 <main+0x2f8>)
 8001526:	f006 faf6 	bl	8007b16 <HAL_UART_Transmit>
				//ISO_RESET code
				ISO_RESET();
 800152a:	f7ff fd9d 	bl	8001068 <ISO_RESET>
					//wait for at least 2microSec
				}
				HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);*/

				//Timers start
				StartPWM();
 800152e:	f7ff fdbb 	bl	80010a8 <StartPWM>
 8001532:	e070      	b.n	8001616 <main+0x376>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);*/

			}
			else if(strcmp(argv[0],"stop")==0){
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	492f      	ldr	r1, [pc, #188]	; (80015f4 <main+0x354>)
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fe71 	bl	8000220 <strcmp>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d109      	bne.n	8001558 <main+0x2b8>
				HAL_UART_Transmit(&huart2, stopContent, sizeof(stopContent), HAL_MAX_DELAY);
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
 8001548:	2210      	movs	r2, #16
 800154a:	492b      	ldr	r1, [pc, #172]	; (80015f8 <main+0x358>)
 800154c:	4812      	ldr	r0, [pc, #72]	; (8001598 <main+0x2f8>)
 800154e:	f006 fae2 	bl	8007b16 <HAL_UART_Transmit>
				StopPWM();
 8001552:	f7ff fdbf 	bl	80010d4 <StopPWM>
 8001556:	e05e      	b.n	8001616 <main+0x376>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);*/
			}
			else if(strcmp(argv[0],"dutycycle")==0){
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4928      	ldr	r1, [pc, #160]	; (80015fc <main+0x35c>)
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe fe5f 	bl	8000220 <strcmp>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d14f      	bne.n	8001608 <main+0x368>

				HAL_UART_Transmit(&huart2, dutyCycleChoiceContent, sizeof(dutyCycleChoiceContent), HAL_MAX_DELAY);
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	221e      	movs	r2, #30
 800156e:	4924      	ldr	r1, [pc, #144]	; (8001600 <main+0x360>)
 8001570:	4809      	ldr	r0, [pc, #36]	; (8001598 <main+0x2f8>)
 8001572:	f006 fad0 	bl	8007b16 <HAL_UART_Transmit>

				dutycycle= atoi(argv[1]);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	4618      	mov	r0, r3
 800157a:	f008 fac3 	bl	8009b04 <atoi>
 800157e:	4603      	mov	r3, r0
 8001580:	4a20      	ldr	r2, [pc, #128]	; (8001604 <main+0x364>)
 8001582:	6013      	str	r3, [r2, #0]
				DutyCycleFuncDef(dutycycle);
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <main+0x364>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fe61 	bl	8001250 <DutyCycleFuncDef>
 800158e:	e042      	b.n	8001616 <main+0x376>
 8001590:	20000638 	.word	0x20000638
 8001594:	2000063c 	.word	0x2000063c
 8001598:	20000598 	.word	0x20000598
 800159c:	20000018 	.word	0x20000018
 80015a0:	20000000 	.word	0x20000000
 80015a4:	2000039c 	.word	0x2000039c
 80015a8:	2000067c 	.word	0x2000067c
 80015ac:	2000054c 	.word	0x2000054c
 80015b0:	200004b4 	.word	0x200004b4
 80015b4:	20000500 	.word	0x20000500
 80015b8:	20000630 	.word	0x20000630
 80015bc:	20000080 	.word	0x20000080
 80015c0:	0800e554 	.word	0x0800e554
 80015c4:	0800e558 	.word	0x0800e558
 80015c8:	0800e55c 	.word	0x0800e55c
 80015cc:	0800e560 	.word	0x0800e560
 80015d0:	0800e564 	.word	0x0800e564
 80015d4:	20000084 	.word	0x20000084
 80015d8:	0800e580 	.word	0x0800e580
 80015dc:	0800e584 	.word	0x0800e584
 80015e0:	20000098 	.word	0x20000098
 80015e4:	0800e58c 	.word	0x0800e58c
 80015e8:	200000d4 	.word	0x200000d4
 80015ec:	0800e594 	.word	0x0800e594
 80015f0:	20000160 	.word	0x20000160
 80015f4:	0800e59c 	.word	0x0800e59c
 80015f8:	20000170 	.word	0x20000170
 80015fc:	0800e5a4 	.word	0x0800e5a4
 8001600:	20000180 	.word	0x20000180
 8001604:	20000628 	.word	0x20000628
				TIM1->CCR2=TIM1_ARR-pulse;*/

				//HAL_UART_Transmit(&huart2, &pulse, sizeof(pulse), HAL_MAX_DELAY);
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
 800160c:	2214      	movs	r2, #20
 800160e:	4911      	ldr	r1, [pc, #68]	; (8001654 <main+0x3b4>)
 8001610:	4811      	ldr	r0, [pc, #68]	; (8001658 <main+0x3b8>)
 8001612:	f006 fa80 	bl	8007b16 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	2218      	movs	r2, #24
 800161c:	490f      	ldr	r1, [pc, #60]	; (800165c <main+0x3bc>)
 800161e:	480e      	ldr	r0, [pc, #56]	; (8001658 <main+0x3b8>)
 8001620:	f006 fa79 	bl	8007b16 <HAL_UART_Transmit>
			newCmdReady = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		if(DMA_Received)
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <main+0x3c0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f43f ae90 	beq.w	8001352 <main+0xb2>
		{
			CurrentValueFloat=CurrentConversion();
 8001632:	f7ff fd65 	bl	8001100 <CurrentConversion>
 8001636:	eef0 7a40 	vmov.f32	s15, s0
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <main+0x3c4>)
 800163c:	edc3 7a00 	vstr	s15, [r3]
			{
				HAL_UART_Transmit(&huart2, Current_Sensed, sizeof(Current_Sensed), HAL_MAX_DELAY);
				//HAL_UART_Transmit(&huart2, ADC_buffer, sizeof(ADC_buffer), HAL_MAX_DELAY);
				k=0;
			}*/
			k++; //value used for debug
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <main+0x3c8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <main+0x3c8>)
 8001648:	6013      	str	r3, [r2, #0]
			DMA_Received=0;
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <main+0x3c0>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
		if(uartRxReceived){
 8001650:	e67f      	b.n	8001352 <main+0xb2>
 8001652:	bf00      	nop
 8001654:	20000084 	.word	0x20000084
 8001658:	20000598 	.word	0x20000598
 800165c:	20000000 	.word	0x20000000
 8001660:	20000634 	.word	0x20000634
 8001664:	200006a4 	.word	0x200006a4
 8001668:	200006c8 	.word	0x200006c8

0800166c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b094      	sub	sp, #80	; 0x50
 8001670:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0318 	add.w	r3, r7, #24
 8001676:	2238      	movs	r2, #56	; 0x38
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f008 fa70 	bl	8009b60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800168e:	2000      	movs	r0, #0
 8001690:	f003 faea 	bl	8004c68 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800169e:	2340      	movs	r3, #64	; 0x40
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a2:	2302      	movs	r3, #2
 80016a4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a6:	2302      	movs	r3, #2
 80016a8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80016aa:	2304      	movs	r3, #4
 80016ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80016ae:	2355      	movs	r3, #85	; 0x55
 80016b0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016b6:	2302      	movs	r3, #2
 80016b8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016ba:	2302      	movs	r3, #2
 80016bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016be:	f107 0318 	add.w	r3, r7, #24
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 fb74 	bl	8004db0 <HAL_RCC_OscConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0x66>
	{
		Error_Handler();
 80016ce:	f000 fb6b 	bl	8001da8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d2:	230f      	movs	r3, #15
 80016d4:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d6:	2303      	movs	r3, #3
 80016d8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2104      	movs	r1, #4
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 fe78 	bl	80053e0 <HAL_RCC_ClockConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80016f6:	f000 fb57 	bl	8001da8 <Error_Handler>
	}
}
 80016fa:	bf00      	nop
 80016fc:	3750      	adds	r7, #80	; 0x50
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 800170a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2220      	movs	r2, #32
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f008 fa1f 	bl	8009b60 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <MX_ADC1_Init+0xec>)
 8001724:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001728:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <MX_ADC1_Init+0xec>)
 800172c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001730:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001732:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <MX_ADC1_Init+0xec>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <MX_ADC1_Init+0xec>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <MX_ADC1_Init+0xec>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001744:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <MX_ADC1_Init+0xec>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <MX_ADC1_Init+0xec>)
 800174c:	2204      	movs	r2, #4
 800174e:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <MX_ADC1_Init+0xec>)
 8001752:	2200      	movs	r2, #0
 8001754:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <MX_ADC1_Init+0xec>)
 8001758:	2200      	movs	r2, #0
 800175a:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 800175c:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <MX_ADC1_Init+0xec>)
 800175e:	2201      	movs	r2, #1
 8001760:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <MX_ADC1_Init+0xec>)
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_ADC1_Init+0xec>)
 800176c:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8001770:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <MX_ADC1_Init+0xec>)
 8001774:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001778:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_ADC1_Init+0xec>)
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <MX_ADC1_Init+0xec>)
 8001784:	2200      	movs	r2, #0
 8001786:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_ADC1_Init+0xec>)
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001790:	4817      	ldr	r0, [pc, #92]	; (80017f0 <MX_ADC1_Init+0xec>)
 8001792:	f001 f977 	bl	8002a84 <HAL_ADC_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0x9c>
	{
		Error_Handler();
 800179c:	f000 fb04 	bl	8001da8 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	4811      	ldr	r0, [pc, #68]	; (80017f0 <MX_ADC1_Init+0xec>)
 80017ac:	f002 fc0c 	bl	8003fc8 <HAL_ADCEx_MultiModeConfigChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_ADC1_Init+0xb6>
	{
		Error_Handler();
 80017b6:	f000 faf7 	bl	8001da8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_ADC1_Init+0xf0>)
 80017bc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80017be:	2306      	movs	r3, #6
 80017c0:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017c6:	237f      	movs	r3, #127	; 0x7f
 80017c8:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017ca:	2304      	movs	r3, #4
 80017cc:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <MX_ADC1_Init+0xec>)
 80017d8:	f001 fdca 	bl	8003370 <HAL_ADC_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_ADC1_Init+0xe2>
	{
		Error_Handler();
 80017e2:	f000 fae1 	bl	8001da8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	3730      	adds	r7, #48	; 0x30
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000039c 	.word	0x2000039c
 80017f4:	04300002 	.word	0x04300002

080017f8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b09c      	sub	sp, #112	; 0x70
 80017fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001818:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
 8001828:	615a      	str	r2, [r3, #20]
 800182a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2234      	movs	r2, #52	; 0x34
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f008 f994 	bl	8009b60 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001838:	4b4d      	ldr	r3, [pc, #308]	; (8001970 <MX_TIM1_Init+0x178>)
 800183a:	4a4e      	ldr	r2, [pc, #312]	; (8001974 <MX_TIM1_Init+0x17c>)
 800183c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800183e:	4b4c      	ldr	r3, [pc, #304]	; (8001970 <MX_TIM1_Init+0x178>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001844:	4b4a      	ldr	r3, [pc, #296]	; (8001970 <MX_TIM1_Init+0x178>)
 8001846:	2220      	movs	r2, #32
 8001848:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 5312;
 800184a:	4b49      	ldr	r3, [pc, #292]	; (8001970 <MX_TIM1_Init+0x178>)
 800184c:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8001850:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <MX_TIM1_Init+0x178>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001858:	4b45      	ldr	r3, [pc, #276]	; (8001970 <MX_TIM1_Init+0x178>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800185e:	4b44      	ldr	r3, [pc, #272]	; (8001970 <MX_TIM1_Init+0x178>)
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001864:	4842      	ldr	r0, [pc, #264]	; (8001970 <MX_TIM1_Init+0x178>)
 8001866:	f004 f9f9 	bl	8005c5c <HAL_TIM_Base_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8001870:	f000 fa9a 	bl	8001da8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001878:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800187a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800187e:	4619      	mov	r1, r3
 8001880:	483b      	ldr	r0, [pc, #236]	; (8001970 <MX_TIM1_Init+0x178>)
 8001882:	f005 f8ef 	bl	8006a64 <HAL_TIM_ConfigClockSource>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 800188c:	f000 fa8c 	bl	8001da8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001890:	4837      	ldr	r0, [pc, #220]	; (8001970 <MX_TIM1_Init+0x178>)
 8001892:	f004 fb07 	bl	8005ea4 <HAL_TIM_PWM_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 800189c:	f000 fa84 	bl	8001da8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018b0:	4619      	mov	r1, r3
 80018b2:	482f      	ldr	r0, [pc, #188]	; (8001970 <MX_TIM1_Init+0x178>)
 80018b4:	f005 ff52 	bl	800775c <HAL_TIMEx_MasterConfigSynchronization>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 80018be:	f000 fa73 	bl	8001da8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c2:	2360      	movs	r3, #96	; 0x60
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 1328;
 80018c6:	f44f 63a6 	mov.w	r3, #1328	; 0x530
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018cc:	2300      	movs	r3, #0
 80018ce:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018d0:	2300      	movs	r3, #0
 80018d2:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018e4:	2200      	movs	r2, #0
 80018e6:	4619      	mov	r1, r3
 80018e8:	4821      	ldr	r0, [pc, #132]	; (8001970 <MX_TIM1_Init+0x178>)
 80018ea:	f004 ffa7 	bl	800683c <HAL_TIM_PWM_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM1_Init+0x100>
	{
		Error_Handler();
 80018f4:	f000 fa58 	bl	8001da8 <Error_Handler>
	}
	sConfigOC.Pulse = 3986;
 80018f8:	f640 7392 	movw	r3, #3986	; 0xf92
 80018fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001902:	2204      	movs	r2, #4
 8001904:	4619      	mov	r1, r3
 8001906:	481a      	ldr	r0, [pc, #104]	; (8001970 <MX_TIM1_Init+0x178>)
 8001908:	f004 ff98 	bl	800683c <HAL_TIM_PWM_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM1_Init+0x11e>
	{
		Error_Handler();
 8001912:	f000 fa49 	bl	8001da8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 203;
 8001922:	23cb      	movs	r3, #203	; 0xcb
 8001924:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800192a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800193c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4619      	mov	r1, r3
 8001952:	4807      	ldr	r0, [pc, #28]	; (8001970 <MX_TIM1_Init+0x178>)
 8001954:	f005 ff84 	bl	8007860 <HAL_TIMEx_ConfigBreakDeadTime>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM1_Init+0x16a>
	{
		Error_Handler();
 800195e:	f000 fa23 	bl	8001da8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001962:	4803      	ldr	r0, [pc, #12]	; (8001970 <MX_TIM1_Init+0x178>)
 8001964:	f000 fb64 	bl	8002030 <HAL_TIM_MspPostInit>

}
 8001968:	bf00      	nop
 800196a:	3770      	adds	r7, #112	; 0x70
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000468 	.word	0x20000468
 8001974:	40012c00 	.word	0x40012c00

08001978 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	2224      	movs	r2, #36	; 0x24
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f008 f8ea 	bl	8009b60 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <MX_TIM3_Init+0xa4>)
 8001998:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <MX_TIM3_Init+0xa8>)
 800199a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <MX_TIM3_Init+0xa4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <MX_TIM3_Init+0xa4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <MX_TIM3_Init+0xa4>)
 80019aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ae:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_TIM3_Init+0xa4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MX_TIM3_Init+0xa4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_CLOCKPLUSDIRECTION_X2;
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <MX_TIM3_Init+0xac>)
 80019be:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019c4:	2301      	movs	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019d4:	2301      	movs	r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	4619      	mov	r1, r3
 80019e6:	480d      	ldr	r0, [pc, #52]	; (8001a1c <MX_TIM3_Init+0xa4>)
 80019e8:	f004 fc54 	bl	8006294 <HAL_TIM_Encoder_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 80019f2:	f000 f9d9 	bl	8001da8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019fe:	463b      	mov	r3, r7
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <MX_TIM3_Init+0xa4>)
 8001a04:	f005 feaa 	bl	800775c <HAL_TIMEx_MasterConfigSynchronization>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 8001a0e:	f000 f9cb 	bl	8001da8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3730      	adds	r7, #48	; 0x30
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200004b4 	.word	0x200004b4
 8001a20:	40000400 	.word	0x40000400
 8001a24:	00010002 	.word	0x00010002

08001a28 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2e:	f107 0310 	add.w	r3, r7, #16
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <MX_TIM4_Init+0x98>)
 8001a48:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <MX_TIM4_Init+0x9c>)
 8001a4a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 17000-1;
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <MX_TIM4_Init+0x98>)
 8001a4e:	f244 2267 	movw	r2, #16999	; 0x4267
 8001a52:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_TIM4_Init+0x98>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 999;
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <MX_TIM4_Init+0x98>)
 8001a5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a60:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_TIM4_Init+0x98>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <MX_TIM4_Init+0x98>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a6e:	4814      	ldr	r0, [pc, #80]	; (8001ac0 <MX_TIM4_Init+0x98>)
 8001a70:	f004 f8f4 	bl	8005c5c <HAL_TIM_Base_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM4_Init+0x56>
	{
		Error_Handler();
 8001a7a:	f000 f995 	bl	8001da8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a82:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <MX_TIM4_Init+0x98>)
 8001a8c:	f004 ffea 	bl	8006a64 <HAL_TIM_ConfigClockSource>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM4_Init+0x72>
	{
		Error_Handler();
 8001a96:	f000 f987 	bl	8001da8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <MX_TIM4_Init+0x98>)
 8001aa8:	f005 fe58 	bl	800775c <HAL_TIMEx_MasterConfigSynchronization>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM4_Init+0x8e>
	{
		Error_Handler();
 8001ab2:	f000 f979 	bl	8001da8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	3720      	adds	r7, #32
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000500 	.word	0x20000500
 8001ac4:	40000800 	.word	0x40000800

08001ac8 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <MX_TIM8_Init+0xa0>)
 8001ae8:	4a20      	ldr	r2, [pc, #128]	; (8001b6c <MX_TIM8_Init+0xa4>)
 8001aea:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <MX_TIM8_Init+0xa0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <MX_TIM8_Init+0xa0>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 530;
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <MX_TIM8_Init+0xa0>)
 8001afa:	f240 2212 	movw	r2, #530	; 0x212
 8001afe:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <MX_TIM8_Init+0xa0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <MX_TIM8_Init+0xa0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <MX_TIM8_Init+0xa0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b12:	4815      	ldr	r0, [pc, #84]	; (8001b68 <MX_TIM8_Init+0xa0>)
 8001b14:	f004 f8a2 	bl	8005c5c <HAL_TIM_Base_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 8001b1e:	f000 f943 	bl	8001da8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b26:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480e      	ldr	r0, [pc, #56]	; (8001b68 <MX_TIM8_Init+0xa0>)
 8001b30:	f004 ff98 	bl	8006a64 <HAL_TIM_ConfigClockSource>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 8001b3a:	f000 f935 	bl	8001da8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4806      	ldr	r0, [pc, #24]	; (8001b68 <MX_TIM8_Init+0xa0>)
 8001b50:	f005 fe04 	bl	800775c <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 8001b5a:	f000 f925 	bl	8001da8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	3720      	adds	r7, #32
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000054c 	.word	0x2000054c
 8001b6c:	40013400 	.word	0x40013400

08001b70 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b76:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <MX_USART2_UART_Init+0x94>)
 8001b78:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b80:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb8:	4811      	ldr	r0, [pc, #68]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001bba:	f005 ff5c 	bl	8007a76 <HAL_UART_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8001bc4:	f000 f8f0 	bl	8001da8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	480d      	ldr	r0, [pc, #52]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001bcc:	f007 fecf 	bl	800996e <HAL_UARTEx_SetTxFifoThreshold>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8001bd6:	f000 f8e7 	bl	8001da8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4808      	ldr	r0, [pc, #32]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001bde:	f007 ff04 	bl	80099ea <HAL_UARTEx_SetRxFifoThreshold>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8001be8:	f000 f8de 	bl	8001da8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001bee:	f007 fe85 	bl	80098fc <HAL_UARTEx_DisableFifoMode>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8001bf8:	f000 f8d6 	bl	8001da8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000598 	.word	0x20000598
 8001c04:	40004400 	.word	0x40004400

08001c08 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c12:	4a11      	ldr	r2, [pc, #68]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6493      	str	r3, [r2, #72]	; 0x48
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6493      	str	r3, [r2, #72]	; 0x48
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	200b      	movs	r0, #11
 8001c44:	f002 fb1c 	bl	8004280 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c48:	200b      	movs	r0, #11
 8001c4a:	f002 fb33 	bl	80042b4 <HAL_NVIC_EnableIRQ>

}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000

08001c5c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c72:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <MX_GPIO_Init+0xd4>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4a2e      	ldr	r2, [pc, #184]	; (8001d30 <MX_GPIO_Init+0xd4>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7e:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <MX_GPIO_Init+0xd4>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001c8a:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <MX_GPIO_Init+0xd4>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4a28      	ldr	r2, [pc, #160]	; (8001d30 <MX_GPIO_Init+0xd4>)
 8001c90:	f043 0320 	orr.w	r3, r3, #32
 8001c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c96:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <MX_GPIO_Init+0xd4>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <MX_GPIO_Init+0xd4>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <MX_GPIO_Init+0xd4>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <MX_GPIO_Init+0xd4>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	481d      	ldr	r0, [pc, #116]	; (8001d34 <MX_GPIO_Init+0xd8>)
 8001cc0:	f002 ffba 	bl	8004c38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ccc:	f002 ffb4 	bl	8004c38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BLUE_BUTTON_Pin */
	GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cda:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4813      	ldr	r0, [pc, #76]	; (8001d34 <MX_GPIO_Init+0xd8>)
 8001ce8:	f002 fe24 	bl	8004934 <HAL_GPIO_Init>

	/*Configure GPIO pin : ISO_RESET_Pin */
	GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8001cec:	2302      	movs	r3, #2
 8001cee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	4619      	mov	r1, r3
 8001d02:	480c      	ldr	r0, [pc, #48]	; (8001d34 <MX_GPIO_Init+0xd8>)
 8001d04:	f002 fe16 	bl	8004934 <HAL_GPIO_Init>

	/*Configure GPIO pin : GREEN_LED_Pin */
	GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001d08:	2320      	movs	r3, #32
 8001d0a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d22:	f002 fe07 	bl	8004934 <HAL_GPIO_Init>

}
 8001d26:	bf00      	nop
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	48000800 	.word	0x48000800

08001d38 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	uartRxReceived=1;
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_UART_RxCpltCallback+0x20>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001d46:	2201      	movs	r2, #1
 8001d48:	4904      	ldr	r1, [pc, #16]	; (8001d5c <HAL_UART_RxCpltCallback+0x24>)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <HAL_UART_RxCpltCallback+0x28>)
 8001d4c:	f005 ff7a 	bl	8007c44 <HAL_UART_Receive_IT>

}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000630 	.word	0x20000630
 8001d5c:	20000638 	.word	0x20000638
 8001d60:	20000598 	.word	0x20000598

08001d64 <HAL_ADC_ConvCpltCallback>:
 * @brief  ADC callback function
 * @note   This function is called  when the DMA buffer of ADC value is full. The DMA_Received variable is set to 1 to start data conversion in the main
 * @param  ADC handler
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*hadc){
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, "DMA callback entered \r\n", sizeof("DMA callback entered \r\n"), HAL_MAX_DELAY);
	DMA_Received=1;
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000634 	.word	0x20000634

08001d84 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001d96:	f000 fbcb 	bl	8002530 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40001000 	.word	0x40001000

08001da8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001db0:	e7fe      	b.n	8001db0 <Error_Handler+0x8>
	...

08001db4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_MspInit+0x44>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbe:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <HAL_MspInit+0x44>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_MspInit+0x44>)
 8001dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_MspInit+0x44>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <HAL_MspInit+0x44>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_MspInit+0x44>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b09a      	sub	sp, #104	; 0x68
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	2244      	movs	r2, #68	; 0x44
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f007 fe9f 	bl	8009b60 <memset>
  if(hadc->Instance==ADC1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e2a:	d167      	bne.n	8001efc <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e30:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e32:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e36:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 fd1d 	bl	800587c <HAL_RCCEx_PeriphCLKConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e48:	f7ff ffae 	bl	8001da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_ADC_MspInit+0x108>)
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e50:	4a2c      	ldr	r2, [pc, #176]	; (8001f04 <HAL_ADC_MspInit+0x108>)
 8001e52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <HAL_ADC_MspInit+0x108>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_ADC_MspInit+0x108>)
 8001e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e68:	4a26      	ldr	r2, [pc, #152]	; (8001f04 <HAL_ADC_MspInit+0x108>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e70:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <HAL_ADC_MspInit+0x108>)
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_CURRENT_Pin;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e80:	2303      	movs	r3, #3
 8001e82:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(ADC_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e92:	f002 fd4f 	bl	8004934 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e96:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_ADC_MspInit+0x10c>)
 8001e98:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <HAL_ADC_MspInit+0x110>)
 8001e9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_ADC_MspInit+0x10c>)
 8001e9e:	2205      	movs	r2, #5
 8001ea0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_ADC_MspInit+0x10c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_ADC_MspInit+0x10c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_ADC_MspInit+0x10c>)
 8001eb0:	2280      	movs	r2, #128	; 0x80
 8001eb2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_ADC_MspInit+0x10c>)
 8001eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_ADC_MspInit+0x10c>)
 8001ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_ADC_MspInit+0x10c>)
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_ADC_MspInit+0x10c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <HAL_ADC_MspInit+0x10c>)
 8001ed2:	f002 f9fd 	bl	80042d0 <HAL_DMA_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001edc:	f7ff ff64 	bl	8001da8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_ADC_MspInit+0x10c>)
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_ADC_MspInit+0x10c>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2012      	movs	r0, #18
 8001ef2:	f002 f9c5 	bl	8004280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ef6:	2012      	movs	r0, #18
 8001ef8:	f002 f9dc 	bl	80042b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	3768      	adds	r7, #104	; 0x68
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	20000408 	.word	0x20000408
 8001f0c:	40020008 	.word	0x40020008

08001f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1f      	ldr	r2, [pc, #124]	; (8001f9c <HAL_TIM_Base_MspInit+0x8c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10c      	bne.n	8001f3c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f22:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <HAL_TIM_Base_MspInit+0x90>)
 8001f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f26:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <HAL_TIM_Base_MspInit+0x90>)
 8001f28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <HAL_TIM_Base_MspInit+0x90>)
 8001f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f3a:	e02a      	b.n	8001f92 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_TIM_Base_MspInit+0x94>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d114      	bne.n	8001f70 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_TIM_Base_MspInit+0x90>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	4a15      	ldr	r2, [pc, #84]	; (8001fa0 <HAL_TIM_Base_MspInit+0x90>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	6593      	str	r3, [r2, #88]	; 0x58
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_TIM_Base_MspInit+0x90>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	201e      	movs	r0, #30
 8001f64:	f002 f98c 	bl	8004280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f68:	201e      	movs	r0, #30
 8001f6a:	f002 f9a3 	bl	80042b4 <HAL_NVIC_EnableIRQ>
}
 8001f6e:	e010      	b.n	8001f92 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0c      	ldr	r2, [pc, #48]	; (8001fa8 <HAL_TIM_Base_MspInit+0x98>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10b      	bne.n	8001f92 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_TIM_Base_MspInit+0x90>)
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <HAL_TIM_Base_MspInit+0x90>)
 8001f80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f84:	6613      	str	r3, [r2, #96]	; 0x60
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_TIM_Base_MspInit+0x90>)
 8001f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40012c00 	.word	0x40012c00
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40000800 	.word	0x40000800
 8001fa8:	40013400 	.word	0x40013400

08001fac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a17      	ldr	r2, [pc, #92]	; (8002028 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d128      	bne.n	8002020 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_TIM_Encoder_MspInit+0x80>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	4a16      	ldr	r2, [pc, #88]	; (800202c <HAL_TIM_Encoder_MspInit+0x80>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_TIM_Encoder_MspInit+0x80>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_TIM_Encoder_MspInit+0x80>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	4a10      	ldr	r2, [pc, #64]	; (800202c <HAL_TIM_Encoder_MspInit+0x80>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_TIM_Encoder_MspInit+0x80>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001ffe:	2350      	movs	r3, #80	; 0x50
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800200e:	2302      	movs	r3, #2
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201c:	f002 fc8a 	bl	8004934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002020:	bf00      	nop
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40000400 	.word	0x40000400
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a12      	ldr	r2, [pc, #72]	; (8002098 <HAL_TIM_MspPostInit+0x68>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d11d      	bne.n	800208e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_TIM_MspPostInit+0x6c>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	4a11      	ldr	r2, [pc, #68]	; (800209c <HAL_TIM_MspPostInit+0x6c>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_TIM_MspPostInit+0x6c>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800206a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800206e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800207c:	2306      	movs	r3, #6
 800207e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	4619      	mov	r1, r3
 8002086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208a:	f002 fc53 	bl	8004934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800208e:	bf00      	nop
 8002090:	3720      	adds	r7, #32
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40012c00 	.word	0x40012c00
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b09a      	sub	sp, #104	; 0x68
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	2244      	movs	r2, #68	; 0x44
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f007 fd4d 	bl	8009b60 <memset>
  if(huart->Instance==USART2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a23      	ldr	r2, [pc, #140]	; (8002158 <HAL_UART_MspInit+0xb8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d13e      	bne.n	800214e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020d0:	2302      	movs	r3, #2
 80020d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 fbcd 	bl	800587c <HAL_RCCEx_PeriphCLKConfig>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020e8:	f7ff fe5e 	bl	8001da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_UART_MspInit+0xbc>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	4a1a      	ldr	r2, [pc, #104]	; (800215c <HAL_UART_MspInit+0xbc>)
 80020f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f6:	6593      	str	r3, [r2, #88]	; 0x58
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_UART_MspInit+0xbc>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_UART_MspInit+0xbc>)
 8002106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002108:	4a14      	ldr	r2, [pc, #80]	; (800215c <HAL_UART_MspInit+0xbc>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_UART_MspInit+0xbc>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800211c:	230c      	movs	r3, #12
 800211e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800212c:	2307      	movs	r3, #7
 800212e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002134:	4619      	mov	r1, r3
 8002136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213a:	f002 fbfb 	bl	8004934 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	2026      	movs	r0, #38	; 0x26
 8002144:	f002 f89c 	bl	8004280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002148:	2026      	movs	r0, #38	; 0x26
 800214a:	f002 f8b3 	bl	80042b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800214e:	bf00      	nop
 8002150:	3768      	adds	r7, #104	; 0x68
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40004400 	.word	0x40004400
 800215c:	40021000 	.word	0x40021000

08002160 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_InitTick+0xcc>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	4a2c      	ldr	r2, [pc, #176]	; (800222c <HAL_InitTick+0xcc>)
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	6593      	str	r3, [r2, #88]	; 0x58
 8002182:	4b2a      	ldr	r3, [pc, #168]	; (800222c <HAL_InitTick+0xcc>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800218e:	f107 020c 	add.w	r2, r7, #12
 8002192:	f107 0310 	add.w	r3, r7, #16
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f003 faf7 	bl	800578c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800219e:	f003 fac9 	bl	8005734 <HAL_RCC_GetPCLK1Freq>
 80021a2:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	4a22      	ldr	r2, [pc, #136]	; (8002230 <HAL_InitTick+0xd0>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	0c9b      	lsrs	r3, r3, #18
 80021ae:	3b01      	subs	r3, #1
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_InitTick+0xd4>)
 80021b4:	4a20      	ldr	r2, [pc, #128]	; (8002238 <HAL_InitTick+0xd8>)
 80021b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <HAL_InitTick+0xd4>)
 80021ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021c0:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <HAL_InitTick+0xd4>)
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_InitTick+0xd4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_InitTick+0xd4>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80021d2:	4818      	ldr	r0, [pc, #96]	; (8002234 <HAL_InitTick+0xd4>)
 80021d4:	f003 fd42 	bl	8005c5c <HAL_TIM_Base_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80021de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11b      	bne.n	800221e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021e6:	4813      	ldr	r0, [pc, #76]	; (8002234 <HAL_InitTick+0xd4>)
 80021e8:	f003 fdf2 	bl	8005dd0 <HAL_TIM_Base_Start_IT>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80021f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d111      	bne.n	800221e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021fa:	2036      	movs	r0, #54	; 0x36
 80021fc:	f002 f85a 	bl	80042b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b0f      	cmp	r3, #15
 8002204:	d808      	bhi.n	8002218 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002206:	2200      	movs	r2, #0
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	2036      	movs	r0, #54	; 0x36
 800220c:	f002 f838 	bl	8004280 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002210:	4a0a      	ldr	r2, [pc, #40]	; (800223c <HAL_InitTick+0xdc>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e002      	b.n	800221e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800221e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002222:	4618      	mov	r0, r3
 8002224:	3730      	adds	r7, #48	; 0x30
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000
 8002230:	431bde83 	.word	0x431bde83
 8002234:	200006cc 	.word	0x200006cc
 8002238:	40001000 	.word	0x40001000
 800223c:	200001a4 	.word	0x200001a4

08002240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <NMI_Handler+0x4>

08002246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <MemManage_Handler+0x4>

08002252 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <BusFault_Handler+0x4>

08002258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <UsageFault_Handler+0x4>

0800225e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <DMA1_Channel1_IRQHandler+0x10>)
 800229e:	f002 f9fa 	bl	8004696 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000408 	.word	0x20000408

080022ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <ADC1_2_IRQHandler+0x10>)
 80022b2:	f000 fe25 	bl	8002f00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000039c 	.word	0x2000039c

080022c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <TIM4_IRQHandler+0x10>)
 80022c6:	f004 f939 	bl	800653c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000500 	.word	0x20000500

080022d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <USART2_IRQHandler+0x10>)
 80022da:	f005 fd09 	bl	8007cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000598 	.word	0x20000598

080022e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <TIM6_DAC_IRQHandler+0x10>)
 80022ee:	f004 f925 	bl	800653c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200006cc 	.word	0x200006cc

080022fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
	return 1;
 8002300:	2301      	movs	r3, #1
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_kill>:

int _kill(int pid, int sig)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002316:	f007 fbf9 	bl	8009b0c <__errno>
 800231a:	4603      	mov	r3, r0
 800231c:	2216      	movs	r2, #22
 800231e:	601a      	str	r2, [r3, #0]
	return -1;
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_exit>:

void _exit (int status)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ffe7 	bl	800230c <_kill>
	while (1) {}		/* Make sure we hang here */
 800233e:	e7fe      	b.n	800233e <_exit+0x12>

08002340 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	e00a      	b.n	8002368 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002352:	f3af 8000 	nop.w
 8002356:	4601      	mov	r1, r0
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	60ba      	str	r2, [r7, #8]
 800235e:	b2ca      	uxtb	r2, r1
 8002360:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	3301      	adds	r3, #1
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	429a      	cmp	r2, r3
 800236e:	dbf0      	blt.n	8002352 <_read+0x12>
	}

return len;
 8002370:	687b      	ldr	r3, [r7, #4]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	e009      	b.n	80023a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	60ba      	str	r2, [r7, #8]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	dbf1      	blt.n	800238c <_write+0x12>
	}
	return len;
 80023a8:	687b      	ldr	r3, [r7, #4]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <_close>:

int _close(int file)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
	return -1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023da:	605a      	str	r2, [r3, #4]
	return 0;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <_isatty>:

int _isatty(int file)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
	return 1;
 80023f2:	2301      	movs	r3, #1
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
	return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <_sbrk+0x5c>)
 8002426:	4b15      	ldr	r3, [pc, #84]	; (800247c <_sbrk+0x60>)
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <_sbrk+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <_sbrk+0x64>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <_sbrk+0x68>)
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	429a      	cmp	r2, r3
 800244a:	d207      	bcs.n	800245c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800244c:	f007 fb5e 	bl	8009b0c <__errno>
 8002450:	4603      	mov	r3, r0
 8002452:	220c      	movs	r2, #12
 8002454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
 800245a:	e009      	b.n	8002470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <_sbrk+0x64>)
 800246c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20008000 	.word	0x20008000
 800247c:	00000400 	.word	0x00000400
 8002480:	20000718 	.word	0x20000718
 8002484:	20000730 	.word	0x20000730

08002488 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <SystemInit+0x20>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <SystemInit+0x20>)
 8002494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024ac:	480d      	ldr	r0, [pc, #52]	; (80024e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b0:	480d      	ldr	r0, [pc, #52]	; (80024e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80024b2:	490e      	ldr	r1, [pc, #56]	; (80024ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80024b4:	4a0e      	ldr	r2, [pc, #56]	; (80024f0 <LoopForever+0xe>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024b8:	e002      	b.n	80024c0 <LoopCopyDataInit>

080024ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024be:	3304      	adds	r3, #4

080024c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c4:	d3f9      	bcc.n	80024ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c6:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024c8:	4c0b      	ldr	r4, [pc, #44]	; (80024f8 <LoopForever+0x16>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024cc:	e001      	b.n	80024d2 <LoopFillZerobss>

080024ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d0:	3204      	adds	r2, #4

080024d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d4:	d3fb      	bcc.n	80024ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024d6:	f7ff ffd7 	bl	8002488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024da:	f007 fb1d 	bl	8009b18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024de:	f7fe fedf 	bl	80012a0 <main>

080024e2 <LoopForever>:

LoopForever:
    b LoopForever
 80024e2:	e7fe      	b.n	80024e2 <LoopForever>
  ldr   r0, =_estack
 80024e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80024e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ec:	20000380 	.word	0x20000380
  ldr r2, =_sidata
 80024f0:	0800eb00 	.word	0x0800eb00
  ldr r2, =_sbss
 80024f4:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 80024f8:	20000730 	.word	0x20000730

080024fc <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024fc:	e7fe      	b.n	80024fc <COMP1_2_3_IRQHandler>

080024fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002508:	2003      	movs	r0, #3
 800250a:	f001 feae 	bl	800426a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800250e:	200f      	movs	r0, #15
 8002510:	f7ff fe26 	bl	8002160 <HAL_InitTick>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	71fb      	strb	r3, [r7, #7]
 800251e:	e001      	b.n	8002524 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002520:	f7ff fc48 	bl	8001db4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002524:	79fb      	ldrb	r3, [r7, #7]

}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_IncTick+0x1c>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_IncTick+0x20>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4413      	add	r3, r2
 800253e:	4a03      	ldr	r2, [pc, #12]	; (800254c <HAL_IncTick+0x1c>)
 8002540:	6013      	str	r3, [r2, #0]
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	2000071c 	.word	0x2000071c
 8002550:	200001a8 	.word	0x200001a8

08002554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return uwTick;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_GetTick+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	2000071c 	.word	0x2000071c

0800256c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff ffee 	bl	8002554 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d004      	beq.n	8002590 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_Delay+0x40>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002590:	bf00      	nop
 8002592:	f7ff ffdf 	bl	8002554 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d8f7      	bhi.n	8002592 <HAL_Delay+0x26>
  {
  }
}
 80025a2:	bf00      	nop
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200001a8 	.word	0x200001a8

080025b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	609a      	str	r2, [r3, #8]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	609a      	str	r2, [r3, #8]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3360      	adds	r3, #96	; 0x60
 800262a:	461a      	mov	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <LL_ADC_SetOffset+0x44>)
 800263a:	4013      	ands	r3, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	4313      	orrs	r3, r2
 8002648:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	03fff000 	.word	0x03fff000

08002660 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3360      	adds	r3, #96	; 0x60
 800266e:	461a      	mov	r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3360      	adds	r3, #96	; 0x60
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b087      	sub	sp, #28
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3360      	adds	r3, #96	; 0x60
 80026d2:	461a      	mov	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80026ec:	bf00      	nop
 80026ee:	371c      	adds	r7, #28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3360      	adds	r3, #96	; 0x60
 8002708:	461a      	mov	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	431a      	orrs	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	615a      	str	r2, [r3, #20]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800277a:	b480      	push	{r7}
 800277c:	b087      	sub	sp, #28
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3330      	adds	r3, #48	; 0x30
 800278a:	461a      	mov	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	4413      	add	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	211f      	movs	r1, #31
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	401a      	ands	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0e9b      	lsrs	r3, r3, #26
 80027b2:	f003 011f 	and.w	r1, r3, #31
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	fa01 f303 	lsl.w	r3, r1, r3
 80027c0:	431a      	orrs	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027c6:	bf00      	nop
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3314      	adds	r3, #20
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	0e5b      	lsrs	r3, r3, #25
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	4413      	add	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	0d1b      	lsrs	r3, r3, #20
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	2107      	movs	r1, #7
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	401a      	ands	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	0d1b      	lsrs	r3, r3, #20
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	431a      	orrs	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a0f      	ldr	r2, [pc, #60]	; (800289c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d10a      	bne.n	800287a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002870:	431a      	orrs	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002878:	e00a      	b.n	8002890 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002886:	43db      	mvns	r3, r3
 8002888:	401a      	ands	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	407f0000 	.word	0x407f0000

080028a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 031f 	and.w	r3, r3, #31
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6093      	str	r3, [r2, #8]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800290c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002910:	d101      	bne.n	8002916 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002934:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002938:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002960:	d101      	bne.n	8002966 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002984:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002988:	f043 0201 	orr.w	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029b0:	f043 0202 	orr.w	r2, r3, #2
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <LL_ADC_IsEnabled+0x18>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <LL_ADC_IsEnabled+0x1a>
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d101      	bne.n	8002a02 <LL_ADC_IsDisableOngoing+0x18>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <LL_ADC_IsDisableOngoing+0x1a>
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a24:	f043 0204 	orr.w	r2, r3, #4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d101      	bne.n	8002a50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d101      	bne.n	8002a76 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e177      	b.n	8002d8e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff f9a5 	bl	8001dfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff19 	bl	80028fc <LL_ADC_IsDeepPowerDownEnabled>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d004      	beq.n	8002ada <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff feff 	bl	80028d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff34 	bl	800294c <LL_ADC_IsInternalRegulatorEnabled>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d115      	bne.n	8002b16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff18 	bl	8002924 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002af4:	4b9c      	ldr	r3, [pc, #624]	; (8002d68 <HAL_ADC_Init+0x2e4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	099b      	lsrs	r3, r3, #6
 8002afa:	4a9c      	ldr	r2, [pc, #624]	; (8002d6c <HAL_ADC_Init+0x2e8>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	099b      	lsrs	r3, r3, #6
 8002b02:	3301      	adds	r3, #1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b08:	e002      	b.n	8002b10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f9      	bne.n	8002b0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff16 	bl	800294c <LL_ADC_IsInternalRegulatorEnabled>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10d      	bne.n	8002b42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	f043 0210 	orr.w	r2, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	f043 0201 	orr.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ff76 	bl	8002a38 <LL_ADC_REG_IsConversionOngoing>
 8002b4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 8110 	bne.w	8002d7c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f040 810c 	bne.w	8002d7c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b6c:	f043 0202 	orr.w	r2, r3, #2
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff23 	bl	80029c4 <LL_ADC_IsEnabled>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d111      	bne.n	8002ba8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b88:	f7ff ff1c 	bl	80029c4 <LL_ADC_IsEnabled>
 8002b8c:	4604      	mov	r4, r0
 8002b8e:	4878      	ldr	r0, [pc, #480]	; (8002d70 <HAL_ADC_Init+0x2ec>)
 8002b90:	f7ff ff18 	bl	80029c4 <LL_ADC_IsEnabled>
 8002b94:	4603      	mov	r3, r0
 8002b96:	4323      	orrs	r3, r4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4874      	ldr	r0, [pc, #464]	; (8002d74 <HAL_ADC_Init+0x2f0>)
 8002ba4:	f7ff fd04 	bl	80025b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7f5b      	ldrb	r3, [r3, #29]
 8002bac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bb2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002bb8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002bbe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bc6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d106      	bne.n	8002be4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	045b      	lsls	r3, r3, #17
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d009      	beq.n	8002c00 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	4b5c      	ldr	r3, [pc, #368]	; (8002d78 <HAL_ADC_Init+0x2f4>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	69b9      	ldr	r1, [r7, #24]
 8002c10:	430b      	orrs	r3, r1
 8002c12:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ff02 	bl	8002a38 <LL_ADC_REG_IsConversionOngoing>
 8002c34:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ff0f 	bl	8002a5e <LL_ADC_INJ_IsConversionOngoing>
 8002c40:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d16d      	bne.n	8002d24 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d16a      	bne.n	8002d24 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c52:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c5a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c6a:	f023 0302 	bic.w	r3, r3, #2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	69b9      	ldr	r1, [r7, #24]
 8002c74:	430b      	orrs	r3, r1
 8002c76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d017      	beq.n	8002cb0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6911      	ldr	r1, [r2, #16]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002cae:	e013      	b.n	8002cd8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cd4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d118      	bne.n	8002d14 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cf8:	4311      	orrs	r1, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002cfe:	4311      	orrs	r1, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d04:	430a      	orrs	r2, r1
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	611a      	str	r2, [r3, #16]
 8002d12:	e007      	b.n	8002d24 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d10c      	bne.n	8002d46 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f023 010f 	bic.w	r1, r3, #15
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	1e5a      	subs	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
 8002d44:	e007      	b.n	8002d56 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 020f 	bic.w	r2, r2, #15
 8002d54:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5a:	f023 0303 	bic.w	r3, r3, #3
 8002d5e:	f043 0201 	orr.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d66:	e011      	b.n	8002d8c <HAL_ADC_Init+0x308>
 8002d68:	200001a0 	.word	0x200001a0
 8002d6c:	053e2d63 	.word	0x053e2d63
 8002d70:	50000100 	.word	0x50000100
 8002d74:	50000300 	.word	0x50000300
 8002d78:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	f043 0210 	orr.w	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3724      	adds	r7, #36	; 0x24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd90      	pop	{r4, r7, pc}
 8002d96:	bf00      	nop

08002d98 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002da4:	4851      	ldr	r0, [pc, #324]	; (8002eec <HAL_ADC_Start_DMA+0x154>)
 8002da6:	f7ff fd7b 	bl	80028a0 <LL_ADC_GetMultimode>
 8002daa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fe41 	bl	8002a38 <LL_ADC_REG_IsConversionOngoing>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 808f 	bne.w	8002edc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_Start_DMA+0x34>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e08a      	b.n	8002ee2 <HAL_ADC_Start_DMA+0x14a>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d002      	beq.n	8002de6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b09      	cmp	r3, #9
 8002de4:	d173      	bne.n	8002ece <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 feb2 	bl	8003b50 <ADC_Enable>
 8002dec:	4603      	mov	r3, r0
 8002dee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d166      	bne.n	8002ec4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a38      	ldr	r2, [pc, #224]	; (8002ef0 <HAL_ADC_Start_DMA+0x158>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d002      	beq.n	8002e1a <HAL_ADC_Start_DMA+0x82>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	e001      	b.n	8002e1e <HAL_ADC_Start_DMA+0x86>
 8002e1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d002      	beq.n	8002e2c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d006      	beq.n	8002e52 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e48:	f023 0206 	bic.w	r2, r3, #6
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	661a      	str	r2, [r3, #96]	; 0x60
 8002e50:	e002      	b.n	8002e58 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	4a25      	ldr	r2, [pc, #148]	; (8002ef4 <HAL_ADC_Start_DMA+0x15c>)
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	4a24      	ldr	r2, [pc, #144]	; (8002ef8 <HAL_ADC_Start_DMA+0x160>)
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	4a23      	ldr	r2, [pc, #140]	; (8002efc <HAL_ADC_Start_DMA+0x164>)
 8002e6e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	221c      	movs	r2, #28
 8002e76:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0210 	orr.w	r2, r2, #16
 8002e8e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3340      	adds	r3, #64	; 0x40
 8002eaa:	4619      	mov	r1, r3
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f001 fab6 	bl	8004420 <HAL_DMA_Start_IT>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fda7 	bl	8002a10 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002ec2:	e00d      	b.n	8002ee0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002ecc:	e008      	b.n	8002ee0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002eda:	e001      	b.n	8002ee0 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002edc:	2302      	movs	r3, #2
 8002ede:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	50000300 	.word	0x50000300
 8002ef0:	50000100 	.word	0x50000100
 8002ef4:	08003cd3 	.word	0x08003cd3
 8002ef8:	08003dab 	.word	0x08003dab
 8002efc:	08003dc7 	.word	0x08003dc7

08002f00 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	; 0x28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f08:	2300      	movs	r3, #0
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f1c:	4883      	ldr	r0, [pc, #524]	; (800312c <HAL_ADC_IRQHandler+0x22c>)
 8002f1e:	f7ff fcbf 	bl	80028a0 <LL_ADC_GetMultimode>
 8002f22:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d017      	beq.n	8002f5e <HAL_ADC_IRQHandler+0x5e>
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d105      	bne.n	8002f50 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f001 f82f 	bl	8003fb4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <HAL_ADC_IRQHandler+0x72>
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 8085 	beq.w	8003088 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d07f      	beq.n	8003088 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fbd5 	bl	8002754 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d064      	beq.n	800307a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a5e      	ldr	r2, [pc, #376]	; (8003130 <HAL_ADC_IRQHandler+0x230>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d002      	beq.n	8002fc0 <HAL_ADC_IRQHandler+0xc0>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	e001      	b.n	8002fc4 <HAL_ADC_IRQHandler+0xc4>
 8002fc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d008      	beq.n	8002fde <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d002      	beq.n	8002fde <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b09      	cmp	r3, #9
 8002fdc:	d104      	bne.n	8002fe8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	623b      	str	r3, [r7, #32]
 8002fe6:	e00d      	b.n	8003004 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a50      	ldr	r2, [pc, #320]	; (8003130 <HAL_ADC_IRQHandler+0x230>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d002      	beq.n	8002ff8 <HAL_ADC_IRQHandler+0xf8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	e001      	b.n	8002ffc <HAL_ADC_IRQHandler+0xfc>
 8002ff8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ffc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d135      	bne.n	800307a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b08      	cmp	r3, #8
 800301a:	d12e      	bne.n	800307a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fd09 	bl	8002a38 <LL_ADC_REG_IsConversionOngoing>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d11a      	bne.n	8003062 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 020c 	bic.w	r2, r2, #12
 800303a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d112      	bne.n	800307a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003060:	e00b      	b.n	800307a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	f043 0210 	orr.w	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe fe72 	bl	8001d64 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	220c      	movs	r2, #12
 8003086:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d004      	beq.n	800309c <HAL_ADC_IRQHandler+0x19c>
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 809e 	beq.w	80031e4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 8098 	beq.w	80031e4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fb7e 	bl	80027d2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80030d6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fb39 	bl	8002754 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030e2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a11      	ldr	r2, [pc, #68]	; (8003130 <HAL_ADC_IRQHandler+0x230>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d002      	beq.n	80030f4 <HAL_ADC_IRQHandler+0x1f4>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	e001      	b.n	80030f8 <HAL_ADC_IRQHandler+0x1f8>
 80030f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d008      	beq.n	8003112 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b06      	cmp	r3, #6
 800310a:	d002      	beq.n	8003112 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2b07      	cmp	r3, #7
 8003110:	d104      	bne.n	800311c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	623b      	str	r3, [r7, #32]
 800311a:	e011      	b.n	8003140 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a03      	ldr	r2, [pc, #12]	; (8003130 <HAL_ADC_IRQHandler+0x230>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d006      	beq.n	8003134 <HAL_ADC_IRQHandler+0x234>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	e005      	b.n	8003138 <HAL_ADC_IRQHandler+0x238>
 800312c:	50000300 	.word	0x50000300
 8003130:	50000100 	.word	0x50000100
 8003134:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003138:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d047      	beq.n	80031d6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <HAL_ADC_IRQHandler+0x260>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d03f      	beq.n	80031d6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800315c:	2b00      	cmp	r3, #0
 800315e:	d13a      	bne.n	80031d6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b40      	cmp	r3, #64	; 0x40
 800316c:	d133      	bne.n	80031d6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d12e      	bne.n	80031d6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fc6e 	bl	8002a5e <LL_ADC_INJ_IsConversionOngoing>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d11a      	bne.n	80031be <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003196:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d112      	bne.n	80031d6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80031bc:	e00b      	b.n	80031d6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c2:	f043 0210 	orr.w	r2, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ce:	f043 0201 	orr.w	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fec4 	bl	8003f64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2260      	movs	r2, #96	; 0x60
 80031e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d011      	beq.n	8003212 <HAL_ADC_IRQHandler+0x312>
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00c      	beq.n	8003212 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f89f 	bl	8003348 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2280      	movs	r2, #128	; 0x80
 8003210:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d012      	beq.n	8003242 <HAL_ADC_IRQHandler+0x342>
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 feaa 	bl	8003f8c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003240:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003248:	2b00      	cmp	r3, #0
 800324a:	d012      	beq.n	8003272 <HAL_ADC_IRQHandler+0x372>
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00d      	beq.n	8003272 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fe9c 	bl	8003fa0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003270:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d036      	beq.n	80032ea <HAL_ADC_IRQHandler+0x3ea>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	d031      	beq.n	80032ea <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800328e:	2301      	movs	r3, #1
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
 8003292:	e014      	b.n	80032be <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800329a:	4825      	ldr	r0, [pc, #148]	; (8003330 <HAL_ADC_IRQHandler+0x430>)
 800329c:	f7ff fb0e 	bl	80028bc <LL_ADC_GetMultiDMATransfer>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80032a6:	2301      	movs	r3, #1
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
 80032aa:	e008      	b.n	80032be <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80032ba:	2301      	movs	r3, #1
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10e      	bne.n	80032e2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d4:	f043 0202 	orr.w	r2, r3, #2
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f83d 	bl	800335c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2210      	movs	r2, #16
 80032e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d018      	beq.n	8003326 <HAL_ADC_IRQHandler+0x426>
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d013      	beq.n	8003326 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330e:	f043 0208 	orr.w	r2, r3, #8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800331e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fe29 	bl	8003f78 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003326:	bf00      	nop
 8003328:	3728      	adds	r7, #40	; 0x28
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	50000300 	.word	0x50000300

08003334 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b0b6      	sub	sp, #216	; 0xd8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x22>
 800338e:	2302      	movs	r3, #2
 8003390:	e3c8      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x7b4>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fb4a 	bl	8002a38 <LL_ADC_REG_IsConversionOngoing>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f040 83ad 	bne.w	8003b06 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	f7ff f9de 	bl	800277a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fb38 	bl	8002a38 <LL_ADC_REG_IsConversionOngoing>
 80033c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fb44 	bl	8002a5e <LL_ADC_INJ_IsConversionOngoing>
 80033d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 81d9 	bne.w	8003796 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f040 81d4 	bne.w	8003796 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033f6:	d10f      	bne.n	8003418 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2200      	movs	r2, #0
 8003402:	4619      	mov	r1, r3
 8003404:	f7ff f9f8 	bl	80027f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff f98c 	bl	800272e <LL_ADC_SetSamplingTimeCommonConfig>
 8003416:	e00e      	b.n	8003436 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	6819      	ldr	r1, [r3, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	461a      	mov	r2, r3
 8003426:	f7ff f9e7 	bl	80027f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff f97c 	bl	800272e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	08db      	lsrs	r3, r3, #3
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b04      	cmp	r3, #4
 8003456:	d022      	beq.n	800349e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6919      	ldr	r1, [r3, #16]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003468:	f7ff f8d6 	bl	8002618 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6919      	ldr	r1, [r3, #16]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	461a      	mov	r2, r3
 800347a:	f7ff f922 	bl	80026c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6919      	ldr	r1, [r3, #16]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	7f1b      	ldrb	r3, [r3, #28]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d102      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x124>
 800348e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003492:	e000      	b.n	8003496 <HAL_ADC_ConfigChannel+0x126>
 8003494:	2300      	movs	r3, #0
 8003496:	461a      	mov	r2, r3
 8003498:	f7ff f92e 	bl	80026f8 <LL_ADC_SetOffsetSaturation>
 800349c:	e17b      	b.n	8003796 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff f8db 	bl	8002660 <LL_ADC_GetOffsetChannel>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x15a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff f8d0 	bl	8002660 <LL_ADC_GetOffsetChannel>
 80034c0:	4603      	mov	r3, r0
 80034c2:	0e9b      	lsrs	r3, r3, #26
 80034c4:	f003 021f 	and.w	r2, r3, #31
 80034c8:	e01e      	b.n	8003508 <HAL_ADC_ConfigChannel+0x198>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff f8c5 	bl	8002660 <LL_ADC_GetOffsetChannel>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80034f8:	2320      	movs	r3, #32
 80034fa:	e004      	b.n	8003506 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80034fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003510:	2b00      	cmp	r3, #0
 8003512:	d105      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x1b0>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	0e9b      	lsrs	r3, r3, #26
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	e018      	b.n	8003552 <HAL_ADC_ConfigChannel+0x1e2>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800353c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003544:	2320      	movs	r3, #32
 8003546:	e004      	b.n	8003552 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003548:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003552:	429a      	cmp	r2, r3
 8003554:	d106      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff f894 	bl	800268c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2101      	movs	r1, #1
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff f878 	bl	8002660 <LL_ADC_GetOffsetChannel>
 8003570:	4603      	mov	r3, r0
 8003572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x220>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2101      	movs	r1, #1
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff f86d 	bl	8002660 <LL_ADC_GetOffsetChannel>
 8003586:	4603      	mov	r3, r0
 8003588:	0e9b      	lsrs	r3, r3, #26
 800358a:	f003 021f 	and.w	r2, r3, #31
 800358e:	e01e      	b.n	80035ce <HAL_ADC_ConfigChannel+0x25e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff f862 	bl	8002660 <LL_ADC_GetOffsetChannel>
 800359c:	4603      	mov	r3, r0
 800359e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80035ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80035b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80035be:	2320      	movs	r3, #32
 80035c0:	e004      	b.n	80035cc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80035c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d105      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x276>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	0e9b      	lsrs	r3, r3, #26
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	e018      	b.n	8003618 <HAL_ADC_ConfigChannel+0x2a8>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80035fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003602:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800360a:	2320      	movs	r3, #32
 800360c:	e004      	b.n	8003618 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800360e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003618:	429a      	cmp	r2, r3
 800361a:	d106      	bne.n	800362a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2200      	movs	r2, #0
 8003622:	2101      	movs	r1, #1
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff f831 	bl	800268c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2102      	movs	r1, #2
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f815 	bl	8002660 <LL_ADC_GetOffsetChannel>
 8003636:	4603      	mov	r3, r0
 8003638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x2e6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2102      	movs	r1, #2
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff f80a 	bl	8002660 <LL_ADC_GetOffsetChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	0e9b      	lsrs	r3, r3, #26
 8003650:	f003 021f 	and.w	r2, r3, #31
 8003654:	e01e      	b.n	8003694 <HAL_ADC_ConfigChannel+0x324>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2102      	movs	r1, #2
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe ffff 	bl	8002660 <LL_ADC_GetOffsetChannel>
 8003662:	4603      	mov	r3, r0
 8003664:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003674:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003678:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800367c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003684:	2320      	movs	r3, #32
 8003686:	e004      	b.n	8003692 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003688:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800368c:	fab3 f383 	clz	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x33c>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0e9b      	lsrs	r3, r3, #26
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	e016      	b.n	80036da <HAL_ADC_ConfigChannel+0x36a>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80036be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80036c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80036cc:	2320      	movs	r3, #32
 80036ce:	e004      	b.n	80036da <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80036d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036da:	429a      	cmp	r2, r3
 80036dc:	d106      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	2102      	movs	r1, #2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe ffd0 	bl	800268c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2103      	movs	r1, #3
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe ffb4 	bl	8002660 <LL_ADC_GetOffsetChannel>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x3a8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2103      	movs	r1, #3
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe ffa9 	bl	8002660 <LL_ADC_GetOffsetChannel>
 800370e:	4603      	mov	r3, r0
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	f003 021f 	and.w	r2, r3, #31
 8003716:	e017      	b.n	8003748 <HAL_ADC_ConfigChannel+0x3d8>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2103      	movs	r1, #3
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe ff9e 	bl	8002660 <LL_ADC_GetOffsetChannel>
 8003724:	4603      	mov	r3, r0
 8003726:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003730:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003732:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800373a:	2320      	movs	r3, #32
 800373c:	e003      	b.n	8003746 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800373e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x3f0>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0e9b      	lsrs	r3, r3, #26
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	e011      	b.n	8003784 <HAL_ADC_ConfigChannel+0x414>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003768:	fa93 f3a3 	rbit	r3, r3
 800376c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800376e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003770:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003778:	2320      	movs	r3, #32
 800377a:	e003      	b.n	8003784 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800377c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003784:	429a      	cmp	r2, r3
 8003786:	d106      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2200      	movs	r2, #0
 800378e:	2103      	movs	r1, #3
 8003790:	4618      	mov	r0, r3
 8003792:	f7fe ff7b 	bl	800268c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff f912 	bl	80029c4 <LL_ADC_IsEnabled>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 8140 	bne.w	8003a28 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	6819      	ldr	r1, [r3, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	461a      	mov	r2, r3
 80037b6:	f7ff f84b 	bl	8002850 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4a8f      	ldr	r2, [pc, #572]	; (80039fc <HAL_ADC_ConfigChannel+0x68c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	f040 8131 	bne.w	8003a28 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x47e>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	0e9b      	lsrs	r3, r3, #26
 80037dc:	3301      	adds	r3, #1
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	2b09      	cmp	r3, #9
 80037e4:	bf94      	ite	ls
 80037e6:	2301      	movls	r3, #1
 80037e8:	2300      	movhi	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	e019      	b.n	8003822 <HAL_ADC_ConfigChannel+0x4b2>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80037fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037fe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003806:	2320      	movs	r3, #32
 8003808:	e003      	b.n	8003812 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800380a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	3301      	adds	r3, #1
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2b09      	cmp	r3, #9
 800381a:	bf94      	ite	ls
 800381c:	2301      	movls	r3, #1
 800381e:	2300      	movhi	r3, #0
 8003820:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003822:	2b00      	cmp	r3, #0
 8003824:	d079      	beq.n	800391a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382e:	2b00      	cmp	r3, #0
 8003830:	d107      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x4d2>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	0e9b      	lsrs	r3, r3, #26
 8003838:	3301      	adds	r3, #1
 800383a:	069b      	lsls	r3, r3, #26
 800383c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003840:	e015      	b.n	800386e <HAL_ADC_ConfigChannel+0x4fe>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003852:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800385a:	2320      	movs	r3, #32
 800385c:	e003      	b.n	8003866 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800385e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	3301      	adds	r3, #1
 8003868:	069b      	lsls	r3, r3, #26
 800386a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_ADC_ConfigChannel+0x51e>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	0e9b      	lsrs	r3, r3, #26
 8003880:	3301      	adds	r3, #1
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	e017      	b.n	80038be <HAL_ADC_ConfigChannel+0x54e>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800389c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80038a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80038a6:	2320      	movs	r3, #32
 80038a8:	e003      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80038aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	ea42 0103 	orr.w	r1, r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x574>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	0e9b      	lsrs	r3, r3, #26
 80038d4:	3301      	adds	r3, #1
 80038d6:	f003 021f 	and.w	r2, r3, #31
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	051b      	lsls	r3, r3, #20
 80038e2:	e018      	b.n	8003916 <HAL_ADC_ConfigChannel+0x5a6>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	fa93 f3a3 	rbit	r3, r3
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80038f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80038fc:	2320      	movs	r3, #32
 80038fe:	e003      	b.n	8003908 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	3301      	adds	r3, #1
 800390a:	f003 021f 	and.w	r2, r3, #31
 800390e:	4613      	mov	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	4413      	add	r3, r2
 8003914:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003916:	430b      	orrs	r3, r1
 8003918:	e081      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003922:	2b00      	cmp	r3, #0
 8003924:	d107      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x5c6>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	0e9b      	lsrs	r3, r3, #26
 800392c:	3301      	adds	r3, #1
 800392e:	069b      	lsls	r3, r3, #26
 8003930:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003934:	e015      	b.n	8003962 <HAL_ADC_ConfigChannel+0x5f2>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800394e:	2320      	movs	r3, #32
 8003950:	e003      	b.n	800395a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003954:	fab3 f383 	clz	r3, r3
 8003958:	b2db      	uxtb	r3, r3
 800395a:	3301      	adds	r3, #1
 800395c:	069b      	lsls	r3, r3, #26
 800395e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x612>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	0e9b      	lsrs	r3, r3, #26
 8003974:	3301      	adds	r3, #1
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2101      	movs	r1, #1
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	e017      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x642>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	61fb      	str	r3, [r7, #28]
  return result;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800399a:	2320      	movs	r3, #32
 800399c:	e003      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	3301      	adds	r3, #1
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	2101      	movs	r1, #1
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	ea42 0103 	orr.w	r1, r2, r3
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10d      	bne.n	80039de <HAL_ADC_ConfigChannel+0x66e>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0e9b      	lsrs	r3, r3, #26
 80039c8:	3301      	adds	r3, #1
 80039ca:	f003 021f 	and.w	r2, r3, #31
 80039ce:	4613      	mov	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	4413      	add	r3, r2
 80039d4:	3b1e      	subs	r3, #30
 80039d6:	051b      	lsls	r3, r3, #20
 80039d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039dc:	e01e      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x6ac>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	613b      	str	r3, [r7, #16]
  return result;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d104      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80039f6:	2320      	movs	r3, #32
 80039f8:	e006      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x698>
 80039fa:	bf00      	nop
 80039fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	3301      	adds	r3, #1
 8003a0a:	f003 021f 	and.w	r2, r3, #31
 8003a0e:	4613      	mov	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	3b1e      	subs	r3, #30
 8003a16:	051b      	lsls	r3, r3, #20
 8003a18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	6892      	ldr	r2, [r2, #8]
 8003a22:	4619      	mov	r1, r3
 8003a24:	f7fe fee8 	bl	80027f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4b3f      	ldr	r3, [pc, #252]	; (8003b2c <HAL_ADC_ConfigChannel+0x7bc>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d071      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a34:	483e      	ldr	r0, [pc, #248]	; (8003b30 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a36:	f7fe fde1 	bl	80025fc <LL_ADC_GetCommonPathInternalCh>
 8003a3a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a3c      	ldr	r2, [pc, #240]	; (8003b34 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_ADC_ConfigChannel+0x6e2>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a3a      	ldr	r2, [pc, #232]	; (8003b38 <HAL_ADC_ConfigChannel+0x7c8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d127      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d121      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a66:	d157      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a70:	4619      	mov	r1, r3
 8003a72:	482f      	ldr	r0, [pc, #188]	; (8003b30 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a74:	f7fe fdaf 	bl	80025d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a78:	4b30      	ldr	r3, [pc, #192]	; (8003b3c <HAL_ADC_ConfigChannel+0x7cc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	4a30      	ldr	r2, [pc, #192]	; (8003b40 <HAL_ADC_ConfigChannel+0x7d0>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	099b      	lsrs	r3, r3, #6
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a92:	e002      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f9      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003aa0:	e03a      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <HAL_ADC_ConfigChannel+0x7d4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d113      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x764>
 8003aac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10d      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <HAL_ADC_ConfigChannel+0x7d8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d02a      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aca:	4619      	mov	r1, r3
 8003acc:	4818      	ldr	r0, [pc, #96]	; (8003b30 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ace:	f7fe fd82 	bl	80025d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ad2:	e021      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1c      	ldr	r2, [pc, #112]	; (8003b4c <HAL_ADC_ConfigChannel+0x7dc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d11c      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d116      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a16      	ldr	r2, [pc, #88]	; (8003b48 <HAL_ADC_ConfigChannel+0x7d8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d011      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003af8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003afc:	4619      	mov	r1, r3
 8003afe:	480c      	ldr	r0, [pc, #48]	; (8003b30 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b00:	f7fe fd69 	bl	80025d6 <LL_ADC_SetCommonPathInternalCh>
 8003b04:	e008      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0a:	f043 0220 	orr.w	r2, r3, #32
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b20:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	37d8      	adds	r7, #216	; 0xd8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	80080000 	.word	0x80080000
 8003b30:	50000300 	.word	0x50000300
 8003b34:	c3210000 	.word	0xc3210000
 8003b38:	90c00010 	.word	0x90c00010
 8003b3c:	200001a0 	.word	0x200001a0
 8003b40:	053e2d63 	.word	0x053e2d63
 8003b44:	c7520000 	.word	0xc7520000
 8003b48:	50000100 	.word	0x50000100
 8003b4c:	cb840000 	.word	0xcb840000

08003b50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe ff31 	bl	80029c4 <LL_ADC_IsEnabled>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d14d      	bne.n	8003c04 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	4b28      	ldr	r3, [pc, #160]	; (8003c10 <ADC_Enable+0xc0>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	f043 0210 	orr.w	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b86:	f043 0201 	orr.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e039      	b.n	8003c06 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe feec 	bl	8002974 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b9c:	f7fe fcda 	bl	8002554 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ba2:	e028      	b.n	8003bf6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe ff0b 	bl	80029c4 <LL_ADC_IsEnabled>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fe fedb 	bl	8002974 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bbe:	f7fe fcc9 	bl	8002554 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d914      	bls.n	8003bf6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d00d      	beq.n	8003bf6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	f043 0210 	orr.w	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bea:	f043 0201 	orr.w	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e007      	b.n	8003c06 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d1cf      	bne.n	8003ba4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	8000003f 	.word	0x8000003f

08003c14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fee2 	bl	80029ea <LL_ADC_IsDisableOngoing>
 8003c26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe fec9 	bl	80029c4 <LL_ADC_IsEnabled>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d047      	beq.n	8003cc8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d144      	bne.n	8003cc8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 030d 	and.w	r3, r3, #13
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d10c      	bne.n	8003c66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fe fea3 	bl	800299c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c5e:	f7fe fc79 	bl	8002554 <HAL_GetTick>
 8003c62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c64:	e029      	b.n	8003cba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	f043 0210 	orr.w	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c76:	f043 0201 	orr.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e023      	b.n	8003cca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c82:	f7fe fc67 	bl	8002554 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d914      	bls.n	8003cba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca2:	f043 0210 	orr.w	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cae:	f043 0201 	orr.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e007      	b.n	8003cca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1dc      	bne.n	8003c82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d14b      	bne.n	8003d84 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d021      	beq.n	8003d4a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fd22 	bl	8002754 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d032      	beq.n	8003d7c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d12b      	bne.n	8003d7c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d11f      	bne.n	8003d7c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	f043 0201 	orr.w	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d48:	e018      	b.n	8003d7c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d111      	bne.n	8003d7c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d74:	f043 0201 	orr.w	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f7fd fff1 	bl	8001d64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d82:	e00e      	b.n	8003da2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f7ff fae3 	bl	800335c <HAL_ADC_ErrorCallback>
}
 8003d96:	e004      	b.n	8003da2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7ff fabb 	bl	8003334 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de4:	f043 0204 	orr.w	r2, r3, #4
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7ff fab5 	bl	800335c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <LL_ADC_IsEnabled>:
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <LL_ADC_IsEnabled+0x18>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <LL_ADC_IsEnabled+0x1a>
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <LL_ADC_StartCalibration>:
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	609a      	str	r2, [r3, #8]
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <LL_ADC_IsCalibrationOnGoing>:
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e66:	d101      	bne.n	8003e6c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_ADC_REG_IsConversionOngoing>:
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d101      	bne.n	8003e92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_ADCEx_Calibration_Start+0x1c>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e04d      	b.n	8003f58 <HAL_ADCEx_Calibration_Start+0xb8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff fea5 	bl	8003c14 <ADC_Disable>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d136      	bne.n	8003f42 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003edc:	f023 0302 	bic.w	r3, r3, #2
 8003ee0:	f043 0202 	orr.w	r2, r3, #2
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff ff96 	bl	8003e20 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ef4:	e014      	b.n	8003f20 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d90d      	bls.n	8003f20 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	f023 0312 	bic.w	r3, r3, #18
 8003f0c:	f043 0210 	orr.w	r2, r3, #16
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e01b      	b.n	8003f58 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff94 	bl	8003e52 <LL_ADC_IsCalibrationOnGoing>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e2      	bne.n	8003ef6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	f023 0303 	bic.w	r3, r3, #3
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f40:	e005      	b.n	8003f4e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f46:	f043 0210 	orr.w	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	0004de01 	.word	0x0004de01

08003f64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003fc8:	b590      	push	{r4, r7, lr}
 8003fca:	b0a1      	sub	sp, #132	; 0x84
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e08b      	b.n	80040fe <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ffe:	d102      	bne.n	8004006 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004000:	4b41      	ldr	r3, [pc, #260]	; (8004108 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	e001      	b.n	800400a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004014:	f043 0220 	orr.w	r2, r3, #32
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e06a      	b.n	80040fe <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff25 	bl	8003e7a <LL_ADC_REG_IsConversionOngoing>
 8004030:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff ff1f 	bl	8003e7a <LL_ADC_REG_IsConversionOngoing>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d14c      	bne.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004044:	2b00      	cmp	r3, #0
 8004046:	d149      	bne.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004048:	4b30      	ldr	r3, [pc, #192]	; (800410c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800404a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d028      	beq.n	80040a6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	6859      	ldr	r1, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004066:	035b      	lsls	r3, r3, #13
 8004068:	430b      	orrs	r3, r1
 800406a:	431a      	orrs	r2, r3
 800406c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800406e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004070:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004074:	f7ff fec1 	bl	8003dfa <LL_ADC_IsEnabled>
 8004078:	4604      	mov	r4, r0
 800407a:	4823      	ldr	r0, [pc, #140]	; (8004108 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800407c:	f7ff febd 	bl	8003dfa <LL_ADC_IsEnabled>
 8004080:	4603      	mov	r3, r0
 8004082:	4323      	orrs	r3, r4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d133      	bne.n	80040f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004090:	f023 030f 	bic.w	r3, r3, #15
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	6811      	ldr	r1, [r2, #0]
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	6892      	ldr	r2, [r2, #8]
 800409c:	430a      	orrs	r2, r1
 800409e:	431a      	orrs	r2, r3
 80040a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040a4:	e024      	b.n	80040f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040b2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040b6:	f7ff fea0 	bl	8003dfa <LL_ADC_IsEnabled>
 80040ba:	4604      	mov	r4, r0
 80040bc:	4812      	ldr	r0, [pc, #72]	; (8004108 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80040be:	f7ff fe9c 	bl	8003dfa <LL_ADC_IsEnabled>
 80040c2:	4603      	mov	r3, r0
 80040c4:	4323      	orrs	r3, r4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d112      	bne.n	80040f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040d2:	f023 030f 	bic.w	r3, r3, #15
 80040d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040d8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040da:	e009      	b.n	80040f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	f043 0220 	orr.w	r2, r3, #32
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80040ee:	e000      	b.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80040fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3784      	adds	r7, #132	; 0x84
 8004102:	46bd      	mov	sp, r7
 8004104:	bd90      	pop	{r4, r7, pc}
 8004106:	bf00      	nop
 8004108:	50000100 	.word	0x50000100
 800410c:	50000300 	.word	0x50000300

08004110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <__NVIC_SetPriorityGrouping+0x44>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800412c:	4013      	ands	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800413c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004142:	4a04      	ldr	r2, [pc, #16]	; (8004154 <__NVIC_SetPriorityGrouping+0x44>)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	60d3      	str	r3, [r2, #12]
}
 8004148:	bf00      	nop
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	e000ed00 	.word	0xe000ed00

08004158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <__NVIC_GetPriorityGrouping+0x18>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	0a1b      	lsrs	r3, r3, #8
 8004162:	f003 0307 	and.w	r3, r3, #7
}
 8004166:	4618      	mov	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	e000ed00 	.word	0xe000ed00

08004174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	2b00      	cmp	r3, #0
 8004184:	db0b      	blt.n	800419e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	f003 021f 	and.w	r2, r3, #31
 800418c:	4907      	ldr	r1, [pc, #28]	; (80041ac <__NVIC_EnableIRQ+0x38>)
 800418e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	2001      	movs	r0, #1
 8004196:	fa00 f202 	lsl.w	r2, r0, r2
 800419a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e000e100 	.word	0xe000e100

080041b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	6039      	str	r1, [r7, #0]
 80041ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	db0a      	blt.n	80041da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	490c      	ldr	r1, [pc, #48]	; (80041fc <__NVIC_SetPriority+0x4c>)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	0112      	lsls	r2, r2, #4
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	440b      	add	r3, r1
 80041d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041d8:	e00a      	b.n	80041f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	4908      	ldr	r1, [pc, #32]	; (8004200 <__NVIC_SetPriority+0x50>)
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	3b04      	subs	r3, #4
 80041e8:	0112      	lsls	r2, r2, #4
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	440b      	add	r3, r1
 80041ee:	761a      	strb	r2, [r3, #24]
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	e000e100 	.word	0xe000e100
 8004200:	e000ed00 	.word	0xe000ed00

08004204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004204:	b480      	push	{r7}
 8004206:	b089      	sub	sp, #36	; 0x24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f1c3 0307 	rsb	r3, r3, #7
 800421e:	2b04      	cmp	r3, #4
 8004220:	bf28      	it	cs
 8004222:	2304      	movcs	r3, #4
 8004224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	3304      	adds	r3, #4
 800422a:	2b06      	cmp	r3, #6
 800422c:	d902      	bls.n	8004234 <NVIC_EncodePriority+0x30>
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	3b03      	subs	r3, #3
 8004232:	e000      	b.n	8004236 <NVIC_EncodePriority+0x32>
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004238:	f04f 32ff 	mov.w	r2, #4294967295
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43da      	mvns	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	401a      	ands	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800424c:	f04f 31ff 	mov.w	r1, #4294967295
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	fa01 f303 	lsl.w	r3, r1, r3
 8004256:	43d9      	mvns	r1, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800425c:	4313      	orrs	r3, r2
         );
}
 800425e:	4618      	mov	r0, r3
 8004260:	3724      	adds	r7, #36	; 0x24
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff ff4c 	bl	8004110 <__NVIC_SetPriorityGrouping>
}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800428e:	f7ff ff63 	bl	8004158 <__NVIC_GetPriorityGrouping>
 8004292:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	6978      	ldr	r0, [r7, #20]
 800429a:	f7ff ffb3 	bl	8004204 <NVIC_EncodePriority>
 800429e:	4602      	mov	r2, r0
 80042a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a4:	4611      	mov	r1, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff ff82 	bl	80041b0 <__NVIC_SetPriority>
}
 80042ac:	bf00      	nop
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff ff56 	bl	8004174 <__NVIC_EnableIRQ>
}
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e08d      	b.n	80043fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b47      	ldr	r3, [pc, #284]	; (8004408 <HAL_DMA_Init+0x138>)
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d80f      	bhi.n	800430e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	4b45      	ldr	r3, [pc, #276]	; (800440c <HAL_DMA_Init+0x13c>)
 80042f6:	4413      	add	r3, r2
 80042f8:	4a45      	ldr	r2, [pc, #276]	; (8004410 <HAL_DMA_Init+0x140>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	091b      	lsrs	r3, r3, #4
 8004300:	009a      	lsls	r2, r3, #2
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a42      	ldr	r2, [pc, #264]	; (8004414 <HAL_DMA_Init+0x144>)
 800430a:	641a      	str	r2, [r3, #64]	; 0x40
 800430c:	e00e      	b.n	800432c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	4b40      	ldr	r3, [pc, #256]	; (8004418 <HAL_DMA_Init+0x148>)
 8004316:	4413      	add	r3, r2
 8004318:	4a3d      	ldr	r2, [pc, #244]	; (8004410 <HAL_DMA_Init+0x140>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	009a      	lsls	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a3c      	ldr	r2, [pc, #240]	; (800441c <HAL_DMA_Init+0x14c>)
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004350:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800435c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fa76 	bl	8004870 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800438c:	d102      	bne.n	8004394 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <HAL_DMA_Init+0x104>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d80c      	bhi.n	80043d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa96 	bl	80048ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	e008      	b.n	80043e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40020407 	.word	0x40020407
 800440c:	bffdfff8 	.word	0xbffdfff8
 8004410:	cccccccd 	.word	0xcccccccd
 8004414:	40020000 	.word	0x40020000
 8004418:	bffdfbf8 	.word	0xbffdfbf8
 800441c:	40020400 	.word	0x40020400

08004420 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_DMA_Start_IT+0x20>
 800443c:	2302      	movs	r3, #2
 800443e:	e066      	b.n	800450e <HAL_DMA_Start_IT+0xee>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d155      	bne.n	8004500 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f9bb 	bl	80047f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 020e 	orr.w	r2, r2, #14
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e00f      	b.n	80044b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0204 	bic.w	r2, r2, #4
 80044a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 020a 	orr.w	r2, r2, #10
 80044b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e005      	b.n	800450c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004508:	2302      	movs	r3, #2
 800450a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800450c:	7dfb      	ldrb	r3, [r7, #23]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d005      	beq.n	800453a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2204      	movs	r2, #4
 8004532:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
 8004538:	e037      	b.n	80045aa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 020e 	bic.w	r2, r2, #14
 8004548:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004558:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	f003 021f 	and.w	r2, r3, #31
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2101      	movs	r1, #1
 8004578:	fa01 f202 	lsl.w	r2, r1, r2
 800457c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004586:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00c      	beq.n	80045aa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800459e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045a8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d00d      	beq.n	80045fc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2204      	movs	r2, #4
 80045e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
 80045fa:	e047      	b.n	800468c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 020e 	bic.w	r2, r2, #14
 800460a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800462a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004630:	f003 021f 	and.w	r2, r3, #31
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	2101      	movs	r1, #1
 800463a:	fa01 f202 	lsl.w	r2, r1, r2
 800463e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004648:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004660:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800466a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
    }
  }
  return status;
 800468c:	7bfb      	ldrb	r3, [r7, #15]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	2204      	movs	r2, #4
 80046b8:	409a      	lsls	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4013      	ands	r3, r2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d026      	beq.n	8004710 <HAL_DMA_IRQHandler+0x7a>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d021      	beq.n	8004710 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d107      	bne.n	80046ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0204 	bic.w	r2, r2, #4
 80046e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f003 021f 	and.w	r2, r3, #31
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	2104      	movs	r1, #4
 80046f8:	fa01 f202 	lsl.w	r2, r1, r2
 80046fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	2b00      	cmp	r3, #0
 8004704:	d071      	beq.n	80047ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800470e:	e06c      	b.n	80047ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	2202      	movs	r2, #2
 800471a:	409a      	lsls	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d02e      	beq.n	8004782 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d029      	beq.n	8004782 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 020a 	bic.w	r2, r2, #10
 800474a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	f003 021f 	and.w	r2, r3, #31
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	2102      	movs	r1, #2
 8004762:	fa01 f202 	lsl.w	r2, r1, r2
 8004766:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d038      	beq.n	80047ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004780:	e033      	b.n	80047ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	2208      	movs	r2, #8
 800478c:	409a      	lsls	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d02a      	beq.n	80047ec <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d025      	beq.n	80047ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 020e 	bic.w	r2, r2, #14
 80047ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b4:	f003 021f 	and.w	r2, r3, #31
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	2101      	movs	r1, #1
 80047be:	fa01 f202 	lsl.w	r2, r1, r2
 80047c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d004      	beq.n	80047ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
}
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800480a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	2b00      	cmp	r3, #0
 8004812:	d004      	beq.n	800481e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800481c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	f003 021f 	and.w	r2, r3, #31
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	2101      	movs	r1, #1
 800482c:	fa01 f202 	lsl.w	r2, r1, r2
 8004830:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b10      	cmp	r3, #16
 8004840:	d108      	bne.n	8004854 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004852:	e007      	b.n	8004864 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	60da      	str	r2, [r3, #12]
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004880:	429a      	cmp	r2, r3
 8004882:	d802      	bhi.n	800488a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004884:	4b15      	ldr	r3, [pc, #84]	; (80048dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	e001      	b.n	800488e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800488c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	3b08      	subs	r3, #8
 800489a:	4a12      	ldr	r2, [pc, #72]	; (80048e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	009a      	lsls	r2, r3, #2
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	461a      	mov	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a0b      	ldr	r2, [pc, #44]	; (80048e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80048ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	2201      	movs	r2, #1
 80048c4:	409a      	lsls	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40020407 	.word	0x40020407
 80048dc:	40020800 	.word	0x40020800
 80048e0:	40020820 	.word	0x40020820
 80048e4:	cccccccd 	.word	0xcccccccd
 80048e8:	40020880 	.word	0x40020880

080048ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4b0b      	ldr	r3, [pc, #44]	; (800492c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	461a      	mov	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a08      	ldr	r2, [pc, #32]	; (8004930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800490e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3b01      	subs	r3, #1
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2201      	movs	r2, #1
 800491a:	409a      	lsls	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	1000823f 	.word	0x1000823f
 8004930:	40020940 	.word	0x40020940

08004934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004942:	e15a      	b.n	8004bfa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	2101      	movs	r1, #1
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	fa01 f303 	lsl.w	r3, r1, r3
 8004950:	4013      	ands	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 814c 	beq.w	8004bf4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d005      	beq.n	8004974 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004970:	2b02      	cmp	r3, #2
 8004972:	d130      	bne.n	80049d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	2203      	movs	r2, #3
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	43db      	mvns	r3, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4013      	ands	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049aa:	2201      	movs	r2, #1
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4013      	ands	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	091b      	lsrs	r3, r3, #4
 80049c0:	f003 0201 	and.w	r2, r3, #1
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d017      	beq.n	8004a12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	2203      	movs	r2, #3
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4013      	ands	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d123      	bne.n	8004a66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	08da      	lsrs	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3208      	adds	r2, #8
 8004a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	220f      	movs	r2, #15
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	08da      	lsrs	r2, r3, #3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3208      	adds	r2, #8
 8004a60:	6939      	ldr	r1, [r7, #16]
 8004a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	2203      	movs	r2, #3
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	43db      	mvns	r3, r3
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 0203 	and.w	r2, r3, #3
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 80a6 	beq.w	8004bf4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aa8:	4b5b      	ldr	r3, [pc, #364]	; (8004c18 <HAL_GPIO_Init+0x2e4>)
 8004aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aac:	4a5a      	ldr	r2, [pc, #360]	; (8004c18 <HAL_GPIO_Init+0x2e4>)
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	6613      	str	r3, [r2, #96]	; 0x60
 8004ab4:	4b58      	ldr	r3, [pc, #352]	; (8004c18 <HAL_GPIO_Init+0x2e4>)
 8004ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ac0:	4a56      	ldr	r2, [pc, #344]	; (8004c1c <HAL_GPIO_Init+0x2e8>)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	089b      	lsrs	r3, r3, #2
 8004ac6:	3302      	adds	r3, #2
 8004ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004acc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	220f      	movs	r2, #15
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004aea:	d01f      	beq.n	8004b2c <HAL_GPIO_Init+0x1f8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a4c      	ldr	r2, [pc, #304]	; (8004c20 <HAL_GPIO_Init+0x2ec>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d019      	beq.n	8004b28 <HAL_GPIO_Init+0x1f4>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a4b      	ldr	r2, [pc, #300]	; (8004c24 <HAL_GPIO_Init+0x2f0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_GPIO_Init+0x1f0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a4a      	ldr	r2, [pc, #296]	; (8004c28 <HAL_GPIO_Init+0x2f4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00d      	beq.n	8004b20 <HAL_GPIO_Init+0x1ec>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a49      	ldr	r2, [pc, #292]	; (8004c2c <HAL_GPIO_Init+0x2f8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d007      	beq.n	8004b1c <HAL_GPIO_Init+0x1e8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a48      	ldr	r2, [pc, #288]	; (8004c30 <HAL_GPIO_Init+0x2fc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d101      	bne.n	8004b18 <HAL_GPIO_Init+0x1e4>
 8004b14:	2305      	movs	r3, #5
 8004b16:	e00a      	b.n	8004b2e <HAL_GPIO_Init+0x1fa>
 8004b18:	2306      	movs	r3, #6
 8004b1a:	e008      	b.n	8004b2e <HAL_GPIO_Init+0x1fa>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	e006      	b.n	8004b2e <HAL_GPIO_Init+0x1fa>
 8004b20:	2303      	movs	r3, #3
 8004b22:	e004      	b.n	8004b2e <HAL_GPIO_Init+0x1fa>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e002      	b.n	8004b2e <HAL_GPIO_Init+0x1fa>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <HAL_GPIO_Init+0x1fa>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	f002 0203 	and.w	r2, r2, #3
 8004b34:	0092      	lsls	r2, r2, #2
 8004b36:	4093      	lsls	r3, r2
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b3e:	4937      	ldr	r1, [pc, #220]	; (8004c1c <HAL_GPIO_Init+0x2e8>)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	089b      	lsrs	r3, r3, #2
 8004b44:	3302      	adds	r3, #2
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b4c:	4b39      	ldr	r3, [pc, #228]	; (8004c34 <HAL_GPIO_Init+0x300>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	43db      	mvns	r3, r3
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b70:	4a30      	ldr	r2, [pc, #192]	; (8004c34 <HAL_GPIO_Init+0x300>)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b76:	4b2f      	ldr	r3, [pc, #188]	; (8004c34 <HAL_GPIO_Init+0x300>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4013      	ands	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b9a:	4a26      	ldr	r2, [pc, #152]	; (8004c34 <HAL_GPIO_Init+0x300>)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004ba0:	4b24      	ldr	r3, [pc, #144]	; (8004c34 <HAL_GPIO_Init+0x300>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4013      	ands	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bc4:	4a1b      	ldr	r2, [pc, #108]	; (8004c34 <HAL_GPIO_Init+0x300>)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004bca:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <HAL_GPIO_Init+0x300>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bee:	4a11      	ldr	r2, [pc, #68]	; (8004c34 <HAL_GPIO_Init+0x300>)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f47f ae9d 	bne.w	8004944 <HAL_GPIO_Init+0x10>
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	bf00      	nop
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40010000 	.word	0x40010000
 8004c20:	48000400 	.word	0x48000400
 8004c24:	48000800 	.word	0x48000800
 8004c28:	48000c00 	.word	0x48000c00
 8004c2c:	48001000 	.word	0x48001000
 8004c30:	48001400 	.word	0x48001400
 8004c34:	40010400 	.word	0x40010400

08004c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	807b      	strh	r3, [r7, #2]
 8004c44:	4613      	mov	r3, r2
 8004c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c48:	787b      	ldrb	r3, [r7, #1]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c4e:	887a      	ldrh	r2, [r7, #2]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c54:	e002      	b.n	8004c5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c56:	887a      	ldrh	r2, [r7, #2]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d141      	bne.n	8004cfa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c76:	4b4b      	ldr	r3, [pc, #300]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c82:	d131      	bne.n	8004ce8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c84:	4b47      	ldr	r3, [pc, #284]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c8a:	4a46      	ldr	r2, [pc, #280]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c94:	4b43      	ldr	r3, [pc, #268]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c9c:	4a41      	ldr	r2, [pc, #260]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ca2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ca4:	4b40      	ldr	r3, [pc, #256]	; (8004da8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2232      	movs	r2, #50	; 0x32
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	4a3f      	ldr	r2, [pc, #252]	; (8004dac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	0c9b      	lsrs	r3, r3, #18
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cba:	e002      	b.n	8004cc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cc2:	4b38      	ldr	r3, [pc, #224]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cce:	d102      	bne.n	8004cd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f2      	bne.n	8004cbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cd6:	4b33      	ldr	r3, [pc, #204]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce2:	d158      	bne.n	8004d96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e057      	b.n	8004d98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ce8:	4b2e      	ldr	r3, [pc, #184]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cee:	4a2d      	ldr	r2, [pc, #180]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cf8:	e04d      	b.n	8004d96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d00:	d141      	bne.n	8004d86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d02:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0e:	d131      	bne.n	8004d74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d10:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d16:	4a23      	ldr	r2, [pc, #140]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d20:	4b20      	ldr	r3, [pc, #128]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d28:	4a1e      	ldr	r2, [pc, #120]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d30:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2232      	movs	r2, #50	; 0x32
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d40:	0c9b      	lsrs	r3, r3, #18
 8004d42:	3301      	adds	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d46:	e002      	b.n	8004d4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d4e:	4b15      	ldr	r3, [pc, #84]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5a:	d102      	bne.n	8004d62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f2      	bne.n	8004d48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d6e:	d112      	bne.n	8004d96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e011      	b.n	8004d98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d74:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d84:	e007      	b.n	8004d96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d86:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d8e:	4a05      	ldr	r2, [pc, #20]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40007000 	.word	0x40007000
 8004da8:	200001a0 	.word	0x200001a0
 8004dac:	431bde83 	.word	0x431bde83

08004db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e306      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d075      	beq.n	8004eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dce:	4b97      	ldr	r3, [pc, #604]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 030c 	and.w	r3, r3, #12
 8004dd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dd8:	4b94      	ldr	r3, [pc, #592]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b0c      	cmp	r3, #12
 8004de6:	d102      	bne.n	8004dee <HAL_RCC_OscConfig+0x3e>
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d002      	beq.n	8004df4 <HAL_RCC_OscConfig+0x44>
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d10b      	bne.n	8004e0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df4:	4b8d      	ldr	r3, [pc, #564]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d05b      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x108>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d157      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e2e1      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e14:	d106      	bne.n	8004e24 <HAL_RCC_OscConfig+0x74>
 8004e16:	4b85      	ldr	r3, [pc, #532]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a84      	ldr	r2, [pc, #528]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	e01d      	b.n	8004e60 <HAL_RCC_OscConfig+0xb0>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e2c:	d10c      	bne.n	8004e48 <HAL_RCC_OscConfig+0x98>
 8004e2e:	4b7f      	ldr	r3, [pc, #508]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a7e      	ldr	r2, [pc, #504]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	4b7c      	ldr	r3, [pc, #496]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a7b      	ldr	r2, [pc, #492]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	e00b      	b.n	8004e60 <HAL_RCC_OscConfig+0xb0>
 8004e48:	4b78      	ldr	r3, [pc, #480]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a77      	ldr	r2, [pc, #476]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	4b75      	ldr	r3, [pc, #468]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a74      	ldr	r2, [pc, #464]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d013      	beq.n	8004e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fd fb74 	bl	8002554 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e70:	f7fd fb70 	bl	8002554 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b64      	cmp	r3, #100	; 0x64
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e2a6      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e82:	4b6a      	ldr	r3, [pc, #424]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCC_OscConfig+0xc0>
 8004e8e:	e014      	b.n	8004eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7fd fb60 	bl	8002554 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e98:	f7fd fb5c 	bl	8002554 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	; 0x64
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e292      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004eaa:	4b60      	ldr	r3, [pc, #384]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1f0      	bne.n	8004e98 <HAL_RCC_OscConfig+0xe8>
 8004eb6:	e000      	b.n	8004eba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d075      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ec6:	4b59      	ldr	r3, [pc, #356]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ed0:	4b56      	ldr	r3, [pc, #344]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	d102      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x136>
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d002      	beq.n	8004eec <HAL_RCC_OscConfig+0x13c>
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d11f      	bne.n	8004f2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eec:	4b4f      	ldr	r3, [pc, #316]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_RCC_OscConfig+0x154>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e265      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f04:	4b49      	ldr	r3, [pc, #292]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	061b      	lsls	r3, r3, #24
 8004f12:	4946      	ldr	r1, [pc, #280]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f18:	4b45      	ldr	r3, [pc, #276]	; (8005030 <HAL_RCC_OscConfig+0x280>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fd f91f 	bl	8002160 <HAL_InitTick>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d043      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e251      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d023      	beq.n	8004f7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f34:	4b3d      	ldr	r3, [pc, #244]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a3c      	ldr	r2, [pc, #240]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fd fb08 	bl	8002554 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f48:	f7fd fb04 	bl	8002554 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e23a      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f5a:	4b34      	ldr	r3, [pc, #208]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f66:	4b31      	ldr	r3, [pc, #196]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	061b      	lsls	r3, r3, #24
 8004f74:	492d      	ldr	r1, [pc, #180]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	604b      	str	r3, [r1, #4]
 8004f7a:	e01a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f7c:	4b2b      	ldr	r3, [pc, #172]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2a      	ldr	r2, [pc, #168]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fd fae4 	bl	8002554 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f90:	f7fd fae0 	bl	8002554 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e216      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fa2:	4b22      	ldr	r3, [pc, #136]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x1e0>
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d041      	beq.n	8005042 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d01c      	beq.n	8005000 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fc6:	4b19      	ldr	r3, [pc, #100]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fcc:	4a17      	ldr	r2, [pc, #92]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd6:	f7fd fabd 	bl	8002554 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fde:	f7fd fab9 	bl	8002554 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e1ef      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ff0:	4b0e      	ldr	r3, [pc, #56]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8004ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0ef      	beq.n	8004fde <HAL_RCC_OscConfig+0x22e>
 8004ffe:	e020      	b.n	8005042 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005000:	4b0a      	ldr	r3, [pc, #40]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8005002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005006:	4a09      	ldr	r2, [pc, #36]	; (800502c <HAL_RCC_OscConfig+0x27c>)
 8005008:	f023 0301 	bic.w	r3, r3, #1
 800500c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fd faa0 	bl	8002554 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005016:	e00d      	b.n	8005034 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005018:	f7fd fa9c 	bl	8002554 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d906      	bls.n	8005034 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e1d2      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
 800502a:	bf00      	nop
 800502c:	40021000 	.word	0x40021000
 8005030:	200001a4 	.word	0x200001a4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005034:	4b8c      	ldr	r3, [pc, #560]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 8005036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1ea      	bne.n	8005018 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80a6 	beq.w	800519c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005050:	2300      	movs	r3, #0
 8005052:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005054:	4b84      	ldr	r3, [pc, #528]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 8005056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_RCC_OscConfig+0x2b4>
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <HAL_RCC_OscConfig+0x2b6>
 8005064:	2300      	movs	r3, #0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800506a:	4b7f      	ldr	r3, [pc, #508]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 800506c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506e:	4a7e      	ldr	r2, [pc, #504]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 8005070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005074:	6593      	str	r3, [r2, #88]	; 0x58
 8005076:	4b7c      	ldr	r3, [pc, #496]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 8005078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005082:	2301      	movs	r3, #1
 8005084:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005086:	4b79      	ldr	r3, [pc, #484]	; (800526c <HAL_RCC_OscConfig+0x4bc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d118      	bne.n	80050c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005092:	4b76      	ldr	r3, [pc, #472]	; (800526c <HAL_RCC_OscConfig+0x4bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a75      	ldr	r2, [pc, #468]	; (800526c <HAL_RCC_OscConfig+0x4bc>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800509e:	f7fd fa59 	bl	8002554 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a6:	f7fd fa55 	bl	8002554 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e18b      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050b8:	4b6c      	ldr	r3, [pc, #432]	; (800526c <HAL_RCC_OscConfig+0x4bc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d108      	bne.n	80050de <HAL_RCC_OscConfig+0x32e>
 80050cc:	4b66      	ldr	r3, [pc, #408]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	4a65      	ldr	r2, [pc, #404]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050dc:	e024      	b.n	8005128 <HAL_RCC_OscConfig+0x378>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	2b05      	cmp	r3, #5
 80050e4:	d110      	bne.n	8005108 <HAL_RCC_OscConfig+0x358>
 80050e6:	4b60      	ldr	r3, [pc, #384]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ec:	4a5e      	ldr	r2, [pc, #376]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 80050ee:	f043 0304 	orr.w	r3, r3, #4
 80050f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050f6:	4b5c      	ldr	r3, [pc, #368]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fc:	4a5a      	ldr	r2, [pc, #360]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005106:	e00f      	b.n	8005128 <HAL_RCC_OscConfig+0x378>
 8005108:	4b57      	ldr	r3, [pc, #348]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510e:	4a56      	ldr	r2, [pc, #344]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005118:	4b53      	ldr	r3, [pc, #332]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	4a52      	ldr	r2, [pc, #328]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 8005120:	f023 0304 	bic.w	r3, r3, #4
 8005124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d016      	beq.n	800515e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005130:	f7fd fa10 	bl	8002554 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005136:	e00a      	b.n	800514e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005138:	f7fd fa0c 	bl	8002554 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e140      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800514e:	4b46      	ldr	r3, [pc, #280]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ed      	beq.n	8005138 <HAL_RCC_OscConfig+0x388>
 800515c:	e015      	b.n	800518a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fd f9f9 	bl	8002554 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005164:	e00a      	b.n	800517c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fd f9f5 	bl	8002554 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e129      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800517c:	4b3a      	ldr	r3, [pc, #232]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1ed      	bne.n	8005166 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800518a:	7ffb      	ldrb	r3, [r7, #31]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d105      	bne.n	800519c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005190:	4b35      	ldr	r3, [pc, #212]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 8005192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005194:	4a34      	ldr	r2, [pc, #208]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 8005196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800519a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d03c      	beq.n	8005222 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01c      	beq.n	80051ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051b0:	4b2d      	ldr	r3, [pc, #180]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 80051b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051b6:	4a2c      	ldr	r2, [pc, #176]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 80051b8:	f043 0301 	orr.w	r3, r3, #1
 80051bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fd f9c8 	bl	8002554 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051c8:	f7fd f9c4 	bl	8002554 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0fa      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051da:	4b23      	ldr	r3, [pc, #140]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 80051dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0ef      	beq.n	80051c8 <HAL_RCC_OscConfig+0x418>
 80051e8:	e01b      	b.n	8005222 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051ea:	4b1f      	ldr	r3, [pc, #124]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 80051ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051f0:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051fa:	f7fd f9ab 	bl	8002554 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005202:	f7fd f9a7 	bl	8002554 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e0dd      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005214:	4b14      	ldr	r3, [pc, #80]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 8005216:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1ef      	bne.n	8005202 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 80d1 	beq.w	80053ce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800522c:	4b0e      	ldr	r3, [pc, #56]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 030c 	and.w	r3, r3, #12
 8005234:	2b0c      	cmp	r3, #12
 8005236:	f000 808b 	beq.w	8005350 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d15e      	bne.n	8005300 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a08      	ldr	r2, [pc, #32]	; (8005268 <HAL_RCC_OscConfig+0x4b8>)
 8005248:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800524c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524e:	f7fd f981 	bl	8002554 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005254:	e00c      	b.n	8005270 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005256:	f7fd f97d 	bl	8002554 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d905      	bls.n	8005270 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e0b3      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
 8005268:	40021000 	.word	0x40021000
 800526c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005270:	4b59      	ldr	r3, [pc, #356]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ec      	bne.n	8005256 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800527c:	4b56      	ldr	r3, [pc, #344]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	4b56      	ldr	r3, [pc, #344]	; (80053dc <HAL_RCC_OscConfig+0x62c>)
 8005282:	4013      	ands	r3, r2
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6a11      	ldr	r1, [r2, #32]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800528c:	3a01      	subs	r2, #1
 800528e:	0112      	lsls	r2, r2, #4
 8005290:	4311      	orrs	r1, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005296:	0212      	lsls	r2, r2, #8
 8005298:	4311      	orrs	r1, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800529e:	0852      	lsrs	r2, r2, #1
 80052a0:	3a01      	subs	r2, #1
 80052a2:	0552      	lsls	r2, r2, #21
 80052a4:	4311      	orrs	r1, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052aa:	0852      	lsrs	r2, r2, #1
 80052ac:	3a01      	subs	r2, #1
 80052ae:	0652      	lsls	r2, r2, #25
 80052b0:	4311      	orrs	r1, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052b6:	06d2      	lsls	r2, r2, #27
 80052b8:	430a      	orrs	r2, r1
 80052ba:	4947      	ldr	r1, [pc, #284]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052c0:	4b45      	ldr	r3, [pc, #276]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a44      	ldr	r2, [pc, #272]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 80052c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052cc:	4b42      	ldr	r3, [pc, #264]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4a41      	ldr	r2, [pc, #260]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 80052d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fd f93c 	bl	8002554 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e0:	f7fd f938 	bl	8002554 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e06e      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052f2:	4b39      	ldr	r3, [pc, #228]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x530>
 80052fe:	e066      	b.n	80053ce <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005300:	4b35      	ldr	r3, [pc, #212]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a34      	ldr	r2, [pc, #208]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 8005306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800530a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800530c:	4b32      	ldr	r3, [pc, #200]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	4a31      	ldr	r2, [pc, #196]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 8005312:	f023 0303 	bic.w	r3, r3, #3
 8005316:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005318:	4b2f      	ldr	r3, [pc, #188]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a2e      	ldr	r2, [pc, #184]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 800531e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005326:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fd f914 	bl	8002554 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005330:	f7fd f910 	bl	8002554 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e046      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005342:	4b25      	ldr	r3, [pc, #148]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f0      	bne.n	8005330 <HAL_RCC_OscConfig+0x580>
 800534e:	e03e      	b.n	80053ce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e039      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800535c:	4b1e      	ldr	r3, [pc, #120]	; (80053d8 <HAL_RCC_OscConfig+0x628>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f003 0203 	and.w	r2, r3, #3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	429a      	cmp	r2, r3
 800536e:	d12c      	bne.n	80053ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	3b01      	subs	r3, #1
 800537c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800537e:	429a      	cmp	r2, r3
 8005380:	d123      	bne.n	80053ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800538e:	429a      	cmp	r2, r3
 8005390:	d11b      	bne.n	80053ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d113      	bne.n	80053ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	085b      	lsrs	r3, r3, #1
 80053ae:	3b01      	subs	r3, #1
 80053b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d109      	bne.n	80053ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	3b01      	subs	r3, #1
 80053c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d001      	beq.n	80053ce <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3720      	adds	r7, #32
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40021000 	.word	0x40021000
 80053dc:	019f800c 	.word	0x019f800c

080053e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e11e      	b.n	8005636 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053f8:	4b91      	ldr	r3, [pc, #580]	; (8005640 <HAL_RCC_ClockConfig+0x260>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d910      	bls.n	8005428 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005406:	4b8e      	ldr	r3, [pc, #568]	; (8005640 <HAL_RCC_ClockConfig+0x260>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 020f 	bic.w	r2, r3, #15
 800540e:	498c      	ldr	r1, [pc, #560]	; (8005640 <HAL_RCC_ClockConfig+0x260>)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	4313      	orrs	r3, r2
 8005414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005416:	4b8a      	ldr	r3, [pc, #552]	; (8005640 <HAL_RCC_ClockConfig+0x260>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d001      	beq.n	8005428 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e106      	b.n	8005636 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d073      	beq.n	800551c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b03      	cmp	r3, #3
 800543a:	d129      	bne.n	8005490 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800543c:	4b81      	ldr	r3, [pc, #516]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e0f4      	b.n	8005636 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800544c:	f000 f9d0 	bl	80057f0 <RCC_GetSysClockFreqFromPLLSource>
 8005450:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	4a7c      	ldr	r2, [pc, #496]	; (8005648 <HAL_RCC_ClockConfig+0x268>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d93f      	bls.n	80054da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800545a:	4b7a      	ldr	r3, [pc, #488]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800546e:	2b00      	cmp	r3, #0
 8005470:	d033      	beq.n	80054da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005476:	2b00      	cmp	r3, #0
 8005478:	d12f      	bne.n	80054da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800547a:	4b72      	ldr	r3, [pc, #456]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005482:	4a70      	ldr	r2, [pc, #448]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 8005484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005488:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800548a:	2380      	movs	r3, #128	; 0x80
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e024      	b.n	80054da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d107      	bne.n	80054a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005498:	4b6a      	ldr	r3, [pc, #424]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d109      	bne.n	80054b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0c6      	b.n	8005636 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054a8:	4b66      	ldr	r3, [pc, #408]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0be      	b.n	8005636 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80054b8:	f000 f8ce 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 80054bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4a61      	ldr	r2, [pc, #388]	; (8005648 <HAL_RCC_ClockConfig+0x268>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d909      	bls.n	80054da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054c6:	4b5f      	ldr	r3, [pc, #380]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ce:	4a5d      	ldr	r2, [pc, #372]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 80054d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80054d6:	2380      	movs	r3, #128	; 0x80
 80054d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054da:	4b5a      	ldr	r3, [pc, #360]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f023 0203 	bic.w	r2, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	4957      	ldr	r1, [pc, #348]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ec:	f7fd f832 	bl	8002554 <HAL_GetTick>
 80054f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f2:	e00a      	b.n	800550a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f4:	f7fd f82e 	bl	8002554 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005502:	4293      	cmp	r3, r2
 8005504:	d901      	bls.n	800550a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e095      	b.n	8005636 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550a:	4b4e      	ldr	r3, [pc, #312]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 020c 	and.w	r2, r3, #12
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	429a      	cmp	r2, r3
 800551a:	d1eb      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d023      	beq.n	8005570 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005534:	4b43      	ldr	r3, [pc, #268]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4a42      	ldr	r2, [pc, #264]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 800553a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800553e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800554c:	4b3d      	ldr	r3, [pc, #244]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005554:	4a3b      	ldr	r2, [pc, #236]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 8005556:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800555a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800555c:	4b39      	ldr	r3, [pc, #228]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	4936      	ldr	r1, [pc, #216]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 800556a:	4313      	orrs	r3, r2
 800556c:	608b      	str	r3, [r1, #8]
 800556e:	e008      	b.n	8005582 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2b80      	cmp	r3, #128	; 0x80
 8005574:	d105      	bne.n	8005582 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005576:	4b33      	ldr	r3, [pc, #204]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	4a32      	ldr	r2, [pc, #200]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 800557c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005580:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005582:	4b2f      	ldr	r3, [pc, #188]	; (8005640 <HAL_RCC_ClockConfig+0x260>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d21d      	bcs.n	80055cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005590:	4b2b      	ldr	r3, [pc, #172]	; (8005640 <HAL_RCC_ClockConfig+0x260>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f023 020f 	bic.w	r2, r3, #15
 8005598:	4929      	ldr	r1, [pc, #164]	; (8005640 <HAL_RCC_ClockConfig+0x260>)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	4313      	orrs	r3, r2
 800559e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055a0:	f7fc ffd8 	bl	8002554 <HAL_GetTick>
 80055a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a6:	e00a      	b.n	80055be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a8:	f7fc ffd4 	bl	8002554 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e03b      	b.n	8005636 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055be:	4b20      	ldr	r3, [pc, #128]	; (8005640 <HAL_RCC_ClockConfig+0x260>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d1ed      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055d8:	4b1a      	ldr	r3, [pc, #104]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4917      	ldr	r1, [pc, #92]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055f6:	4b13      	ldr	r3, [pc, #76]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	490f      	ldr	r1, [pc, #60]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 8005606:	4313      	orrs	r3, r2
 8005608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800560a:	f000 f825 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 800560e:	4602      	mov	r2, r0
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <HAL_RCC_ClockConfig+0x264>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	490c      	ldr	r1, [pc, #48]	; (800564c <HAL_RCC_ClockConfig+0x26c>)
 800561c:	5ccb      	ldrb	r3, [r1, r3]
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	fa22 f303 	lsr.w	r3, r2, r3
 8005626:	4a0a      	ldr	r2, [pc, #40]	; (8005650 <HAL_RCC_ClockConfig+0x270>)
 8005628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800562a:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <HAL_RCC_ClockConfig+0x274>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f7fc fd96 	bl	8002160 <HAL_InitTick>
 8005634:	4603      	mov	r3, r0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40022000 	.word	0x40022000
 8005644:	40021000 	.word	0x40021000
 8005648:	04c4b400 	.word	0x04c4b400
 800564c:	0800e5b0 	.word	0x0800e5b0
 8005650:	200001a0 	.word	0x200001a0
 8005654:	200001a4 	.word	0x200001a4

08005658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800565e:	4b2c      	ldr	r3, [pc, #176]	; (8005710 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 030c 	and.w	r3, r3, #12
 8005666:	2b04      	cmp	r3, #4
 8005668:	d102      	bne.n	8005670 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800566a:	4b2a      	ldr	r3, [pc, #168]	; (8005714 <HAL_RCC_GetSysClockFreq+0xbc>)
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	e047      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005670:	4b27      	ldr	r3, [pc, #156]	; (8005710 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 030c 	and.w	r3, r3, #12
 8005678:	2b08      	cmp	r3, #8
 800567a:	d102      	bne.n	8005682 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800567c:	4b26      	ldr	r3, [pc, #152]	; (8005718 <HAL_RCC_GetSysClockFreq+0xc0>)
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	e03e      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005682:	4b23      	ldr	r3, [pc, #140]	; (8005710 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 030c 	and.w	r3, r3, #12
 800568a:	2b0c      	cmp	r3, #12
 800568c:	d136      	bne.n	80056fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800568e:	4b20      	ldr	r3, [pc, #128]	; (8005710 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005698:	4b1d      	ldr	r3, [pc, #116]	; (8005710 <HAL_RCC_GetSysClockFreq+0xb8>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	3301      	adds	r3, #1
 80056a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d10c      	bne.n	80056c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056ac:	4a1a      	ldr	r2, [pc, #104]	; (8005718 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	4a16      	ldr	r2, [pc, #88]	; (8005710 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056b6:	68d2      	ldr	r2, [r2, #12]
 80056b8:	0a12      	lsrs	r2, r2, #8
 80056ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056be:	fb02 f303 	mul.w	r3, r2, r3
 80056c2:	617b      	str	r3, [r7, #20]
      break;
 80056c4:	e00c      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056c6:	4a13      	ldr	r2, [pc, #76]	; (8005714 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	4a10      	ldr	r2, [pc, #64]	; (8005710 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056d0:	68d2      	ldr	r2, [r2, #12]
 80056d2:	0a12      	lsrs	r2, r2, #8
 80056d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056d8:	fb02 f303 	mul.w	r3, r2, r3
 80056dc:	617b      	str	r3, [r7, #20]
      break;
 80056de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	0e5b      	lsrs	r3, r3, #25
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	3301      	adds	r3, #1
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	e001      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005700:	693b      	ldr	r3, [r7, #16]
}
 8005702:	4618      	mov	r0, r3
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40021000 	.word	0x40021000
 8005714:	00f42400 	.word	0x00f42400
 8005718:	016e3600 	.word	0x016e3600

0800571c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005720:	4b03      	ldr	r3, [pc, #12]	; (8005730 <HAL_RCC_GetHCLKFreq+0x14>)
 8005722:	681b      	ldr	r3, [r3, #0]
}
 8005724:	4618      	mov	r0, r3
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	200001a0 	.word	0x200001a0

08005734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005738:	f7ff fff0 	bl	800571c <HAL_RCC_GetHCLKFreq>
 800573c:	4602      	mov	r2, r0
 800573e:	4b06      	ldr	r3, [pc, #24]	; (8005758 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	0a1b      	lsrs	r3, r3, #8
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	4904      	ldr	r1, [pc, #16]	; (800575c <HAL_RCC_GetPCLK1Freq+0x28>)
 800574a:	5ccb      	ldrb	r3, [r1, r3]
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40021000 	.word	0x40021000
 800575c:	0800e5c0 	.word	0x0800e5c0

08005760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005764:	f7ff ffda 	bl	800571c <HAL_RCC_GetHCLKFreq>
 8005768:	4602      	mov	r2, r0
 800576a:	4b06      	ldr	r3, [pc, #24]	; (8005784 <HAL_RCC_GetPCLK2Freq+0x24>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	0adb      	lsrs	r3, r3, #11
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	4904      	ldr	r1, [pc, #16]	; (8005788 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005776:	5ccb      	ldrb	r3, [r1, r3]
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005780:	4618      	mov	r0, r3
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40021000 	.word	0x40021000
 8005788:	0800e5c0 	.word	0x0800e5c0

0800578c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	220f      	movs	r2, #15
 800579a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800579c:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <HAL_RCC_GetClockConfig+0x5c>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f003 0203 	and.w	r2, r3, #3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80057a8:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <HAL_RCC_GetClockConfig+0x5c>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80057b4:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <HAL_RCC_GetClockConfig+0x5c>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80057c0:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <HAL_RCC_GetClockConfig+0x5c>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	08db      	lsrs	r3, r3, #3
 80057c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80057ce:	4b07      	ldr	r3, [pc, #28]	; (80057ec <HAL_RCC_GetClockConfig+0x60>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 020f 	and.w	r2, r3, #15
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	601a      	str	r2, [r3, #0]
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40021000 	.word	0x40021000
 80057ec:	40022000 	.word	0x40022000

080057f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057f6:	4b1e      	ldr	r3, [pc, #120]	; (8005870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005800:	4b1b      	ldr	r3, [pc, #108]	; (8005870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	3301      	adds	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d10c      	bne.n	800582e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005814:	4a17      	ldr	r2, [pc, #92]	; (8005874 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	fbb2 f3f3 	udiv	r3, r2, r3
 800581c:	4a14      	ldr	r2, [pc, #80]	; (8005870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800581e:	68d2      	ldr	r2, [r2, #12]
 8005820:	0a12      	lsrs	r2, r2, #8
 8005822:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005826:	fb02 f303 	mul.w	r3, r2, r3
 800582a:	617b      	str	r3, [r7, #20]
    break;
 800582c:	e00c      	b.n	8005848 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800582e:	4a12      	ldr	r2, [pc, #72]	; (8005878 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	fbb2 f3f3 	udiv	r3, r2, r3
 8005836:	4a0e      	ldr	r2, [pc, #56]	; (8005870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005838:	68d2      	ldr	r2, [r2, #12]
 800583a:	0a12      	lsrs	r2, r2, #8
 800583c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005840:	fb02 f303 	mul.w	r3, r2, r3
 8005844:	617b      	str	r3, [r7, #20]
    break;
 8005846:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005848:	4b09      	ldr	r3, [pc, #36]	; (8005870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	0e5b      	lsrs	r3, r3, #25
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	3301      	adds	r3, #1
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005860:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005862:	687b      	ldr	r3, [r7, #4]
}
 8005864:	4618      	mov	r0, r3
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40021000 	.word	0x40021000
 8005874:	016e3600 	.word	0x016e3600
 8005878:	00f42400 	.word	0x00f42400

0800587c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005884:	2300      	movs	r3, #0
 8005886:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005888:	2300      	movs	r3, #0
 800588a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8098 	beq.w	80059ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800589a:	2300      	movs	r3, #0
 800589c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800589e:	4b43      	ldr	r3, [pc, #268]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10d      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058aa:	4b40      	ldr	r3, [pc, #256]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ae:	4a3f      	ldr	r2, [pc, #252]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b4:	6593      	str	r3, [r2, #88]	; 0x58
 80058b6:	4b3d      	ldr	r3, [pc, #244]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c2:	2301      	movs	r3, #1
 80058c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058c6:	4b3a      	ldr	r3, [pc, #232]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a39      	ldr	r2, [pc, #228]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058d2:	f7fc fe3f 	bl	8002554 <HAL_GetTick>
 80058d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058d8:	e009      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058da:	f7fc fe3b 	bl	8002554 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d902      	bls.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	74fb      	strb	r3, [r7, #19]
        break;
 80058ec:	e005      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058ee:	4b30      	ldr	r3, [pc, #192]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0ef      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80058fa:	7cfb      	ldrb	r3, [r7, #19]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d159      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005900:	4b2a      	ldr	r3, [pc, #168]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d01e      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	429a      	cmp	r2, r3
 800591a:	d019      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800591c:	4b23      	ldr	r3, [pc, #140]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005926:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005928:	4b20      	ldr	r3, [pc, #128]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	4a1f      	ldr	r2, [pc, #124]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005938:	4b1c      	ldr	r3, [pc, #112]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593e:	4a1b      	ldr	r2, [pc, #108]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005948:	4a18      	ldr	r2, [pc, #96]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d016      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595a:	f7fc fdfb 	bl	8002554 <HAL_GetTick>
 800595e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005960:	e00b      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005962:	f7fc fdf7 	bl	8002554 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005970:	4293      	cmp	r3, r2
 8005972:	d902      	bls.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	74fb      	strb	r3, [r7, #19]
            break;
 8005978:	e006      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800597c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0ec      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005988:	7cfb      	ldrb	r3, [r7, #19]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800598e:	4b07      	ldr	r3, [pc, #28]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	4903      	ldr	r1, [pc, #12]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059a4:	e008      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059a6:	7cfb      	ldrb	r3, [r7, #19]
 80059a8:	74bb      	strb	r3, [r7, #18]
 80059aa:	e005      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80059ac:	40021000 	.word	0x40021000
 80059b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b4:	7cfb      	ldrb	r3, [r7, #19]
 80059b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059b8:	7c7b      	ldrb	r3, [r7, #17]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d105      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059be:	4ba6      	ldr	r3, [pc, #664]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c2:	4aa5      	ldr	r2, [pc, #660]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059d6:	4ba0      	ldr	r3, [pc, #640]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059dc:	f023 0203 	bic.w	r2, r3, #3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	499c      	ldr	r1, [pc, #624]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059f8:	4b97      	ldr	r3, [pc, #604]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fe:	f023 020c 	bic.w	r2, r3, #12
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	4994      	ldr	r1, [pc, #592]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a1a:	4b8f      	ldr	r3, [pc, #572]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	498b      	ldr	r1, [pc, #556]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a3c:	4b86      	ldr	r3, [pc, #536]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	4983      	ldr	r1, [pc, #524]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a5e:	4b7e      	ldr	r3, [pc, #504]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	497a      	ldr	r1, [pc, #488]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a80:	4b75      	ldr	r3, [pc, #468]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	4972      	ldr	r1, [pc, #456]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005aa2:	4b6d      	ldr	r3, [pc, #436]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	4969      	ldr	r1, [pc, #420]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ac4:	4b64      	ldr	r3, [pc, #400]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	4961      	ldr	r1, [pc, #388]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ae6:	4b5c      	ldr	r3, [pc, #368]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	4958      	ldr	r1, [pc, #352]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d015      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b08:	4b53      	ldr	r3, [pc, #332]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	4950      	ldr	r1, [pc, #320]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b26:	d105      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b28:	4b4b      	ldr	r3, [pc, #300]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	4a4a      	ldr	r2, [pc, #296]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d015      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b40:	4b45      	ldr	r3, [pc, #276]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	4942      	ldr	r1, [pc, #264]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b5e:	d105      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b60:	4b3d      	ldr	r3, [pc, #244]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4a3c      	ldr	r2, [pc, #240]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b6a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d015      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b78:	4b37      	ldr	r3, [pc, #220]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b86:	4934      	ldr	r1, [pc, #208]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b96:	d105      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b98:	4b2f      	ldr	r3, [pc, #188]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4a2e      	ldr	r2, [pc, #184]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ba2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d015      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bb0:	4b29      	ldr	r3, [pc, #164]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bbe:	4926      	ldr	r1, [pc, #152]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bce:	d105      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bd0:	4b21      	ldr	r3, [pc, #132]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4a20      	ldr	r2, [pc, #128]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bda:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d015      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005be8:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	4918      	ldr	r1, [pc, #96]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c06:	d105      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c08:	4b13      	ldr	r3, [pc, #76]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4a12      	ldr	r2, [pc, #72]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d015      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c20:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2e:	490a      	ldr	r1, [pc, #40]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c3e:	d105      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c40:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	4a04      	ldr	r2, [pc, #16]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40021000 	.word	0x40021000

08005c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e049      	b.n	8005d02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fc f944 	bl	8001f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	f001 f804 	bl	8006ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d001      	beq.n	8005d24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e042      	b.n	8005daa <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a21      	ldr	r2, [pc, #132]	; (8005db8 <HAL_TIM_Base_Start+0xac>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d018      	beq.n	8005d68 <HAL_TIM_Base_Start+0x5c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3e:	d013      	beq.n	8005d68 <HAL_TIM_Base_Start+0x5c>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1d      	ldr	r2, [pc, #116]	; (8005dbc <HAL_TIM_Base_Start+0xb0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00e      	beq.n	8005d68 <HAL_TIM_Base_Start+0x5c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1c      	ldr	r2, [pc, #112]	; (8005dc0 <HAL_TIM_Base_Start+0xb4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d009      	beq.n	8005d68 <HAL_TIM_Base_Start+0x5c>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1a      	ldr	r2, [pc, #104]	; (8005dc4 <HAL_TIM_Base_Start+0xb8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d004      	beq.n	8005d68 <HAL_TIM_Base_Start+0x5c>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a19      	ldr	r2, [pc, #100]	; (8005dc8 <HAL_TIM_Base_Start+0xbc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d115      	bne.n	8005d94 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	4b17      	ldr	r3, [pc, #92]	; (8005dcc <HAL_TIM_Base_Start+0xc0>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b06      	cmp	r3, #6
 8005d78:	d015      	beq.n	8005da6 <HAL_TIM_Base_Start+0x9a>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d80:	d011      	beq.n	8005da6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0201 	orr.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d92:	e008      	b.n	8005da6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e000      	b.n	8005da8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40000400 	.word	0x40000400
 8005dc0:	40000800 	.word	0x40000800
 8005dc4:	40013400 	.word	0x40013400
 8005dc8:	40014000 	.word	0x40014000
 8005dcc:	00010007 	.word	0x00010007

08005dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d001      	beq.n	8005de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e04a      	b.n	8005e7e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a21      	ldr	r2, [pc, #132]	; (8005e8c <HAL_TIM_Base_Start_IT+0xbc>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d018      	beq.n	8005e3c <HAL_TIM_Base_Start_IT+0x6c>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e12:	d013      	beq.n	8005e3c <HAL_TIM_Base_Start_IT+0x6c>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a1d      	ldr	r2, [pc, #116]	; (8005e90 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00e      	beq.n	8005e3c <HAL_TIM_Base_Start_IT+0x6c>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a1c      	ldr	r2, [pc, #112]	; (8005e94 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d009      	beq.n	8005e3c <HAL_TIM_Base_Start_IT+0x6c>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1a      	ldr	r2, [pc, #104]	; (8005e98 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d004      	beq.n	8005e3c <HAL_TIM_Base_Start_IT+0x6c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a19      	ldr	r2, [pc, #100]	; (8005e9c <HAL_TIM_Base_Start_IT+0xcc>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d115      	bne.n	8005e68 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b06      	cmp	r3, #6
 8005e4c:	d015      	beq.n	8005e7a <HAL_TIM_Base_Start_IT+0xaa>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e54:	d011      	beq.n	8005e7a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0201 	orr.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e66:	e008      	b.n	8005e7a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e000      	b.n	8005e7c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40013400 	.word	0x40013400
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	00010007 	.word	0x00010007

08005ea4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e049      	b.n	8005f4a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f841 	bl	8005f52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	f000 fee0 	bl	8006ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
	...

08005f68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <HAL_TIM_PWM_Start+0x24>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	bf14      	ite	ne
 8005f84:	2301      	movne	r3, #1
 8005f86:	2300      	moveq	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	e03c      	b.n	8006006 <HAL_TIM_PWM_Start+0x9e>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d109      	bne.n	8005fa6 <HAL_TIM_PWM_Start+0x3e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	bf14      	ite	ne
 8005f9e:	2301      	movne	r3, #1
 8005fa0:	2300      	moveq	r3, #0
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	e02f      	b.n	8006006 <HAL_TIM_PWM_Start+0x9e>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d109      	bne.n	8005fc0 <HAL_TIM_PWM_Start+0x58>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	bf14      	ite	ne
 8005fb8:	2301      	movne	r3, #1
 8005fba:	2300      	moveq	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	e022      	b.n	8006006 <HAL_TIM_PWM_Start+0x9e>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b0c      	cmp	r3, #12
 8005fc4:	d109      	bne.n	8005fda <HAL_TIM_PWM_Start+0x72>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	bf14      	ite	ne
 8005fd2:	2301      	movne	r3, #1
 8005fd4:	2300      	moveq	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	e015      	b.n	8006006 <HAL_TIM_PWM_Start+0x9e>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b10      	cmp	r3, #16
 8005fde:	d109      	bne.n	8005ff4 <HAL_TIM_PWM_Start+0x8c>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	bf14      	ite	ne
 8005fec:	2301      	movne	r3, #1
 8005fee:	2300      	moveq	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	e008      	b.n	8006006 <HAL_TIM_PWM_Start+0x9e>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	bf14      	ite	ne
 8006000:	2301      	movne	r3, #1
 8006002:	2300      	moveq	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e097      	b.n	800613e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d104      	bne.n	800601e <HAL_TIM_PWM_Start+0xb6>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800601c:	e023      	b.n	8006066 <HAL_TIM_PWM_Start+0xfe>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b04      	cmp	r3, #4
 8006022:	d104      	bne.n	800602e <HAL_TIM_PWM_Start+0xc6>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800602c:	e01b      	b.n	8006066 <HAL_TIM_PWM_Start+0xfe>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b08      	cmp	r3, #8
 8006032:	d104      	bne.n	800603e <HAL_TIM_PWM_Start+0xd6>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800603c:	e013      	b.n	8006066 <HAL_TIM_PWM_Start+0xfe>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b0c      	cmp	r3, #12
 8006042:	d104      	bne.n	800604e <HAL_TIM_PWM_Start+0xe6>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800604c:	e00b      	b.n	8006066 <HAL_TIM_PWM_Start+0xfe>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b10      	cmp	r3, #16
 8006052:	d104      	bne.n	800605e <HAL_TIM_PWM_Start+0xf6>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800605c:	e003      	b.n	8006066 <HAL_TIM_PWM_Start+0xfe>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2202      	movs	r2, #2
 8006062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2201      	movs	r2, #1
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f001 fa3c 	bl	80074ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a33      	ldr	r2, [pc, #204]	; (8006148 <HAL_TIM_PWM_Start+0x1e0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x13e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a32      	ldr	r2, [pc, #200]	; (800614c <HAL_TIM_PWM_Start+0x1e4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00e      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x13e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a30      	ldr	r2, [pc, #192]	; (8006150 <HAL_TIM_PWM_Start+0x1e8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x13e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2f      	ldr	r2, [pc, #188]	; (8006154 <HAL_TIM_PWM_Start+0x1ec>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x13e>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2d      	ldr	r2, [pc, #180]	; (8006158 <HAL_TIM_PWM_Start+0x1f0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d101      	bne.n	80060aa <HAL_TIM_PWM_Start+0x142>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <HAL_TIM_PWM_Start+0x144>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a20      	ldr	r2, [pc, #128]	; (8006148 <HAL_TIM_PWM_Start+0x1e0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d018      	beq.n	80060fc <HAL_TIM_PWM_Start+0x194>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d2:	d013      	beq.n	80060fc <HAL_TIM_PWM_Start+0x194>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a20      	ldr	r2, [pc, #128]	; (800615c <HAL_TIM_PWM_Start+0x1f4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00e      	beq.n	80060fc <HAL_TIM_PWM_Start+0x194>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1f      	ldr	r2, [pc, #124]	; (8006160 <HAL_TIM_PWM_Start+0x1f8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d009      	beq.n	80060fc <HAL_TIM_PWM_Start+0x194>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a17      	ldr	r2, [pc, #92]	; (800614c <HAL_TIM_PWM_Start+0x1e4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d004      	beq.n	80060fc <HAL_TIM_PWM_Start+0x194>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a16      	ldr	r2, [pc, #88]	; (8006150 <HAL_TIM_PWM_Start+0x1e8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d115      	bne.n	8006128 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	4b18      	ldr	r3, [pc, #96]	; (8006164 <HAL_TIM_PWM_Start+0x1fc>)
 8006104:	4013      	ands	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b06      	cmp	r3, #6
 800610c:	d015      	beq.n	800613a <HAL_TIM_PWM_Start+0x1d2>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006114:	d011      	beq.n	800613a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f042 0201 	orr.w	r2, r2, #1
 8006124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006126:	e008      	b.n	800613a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	e000      	b.n	800613c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40012c00 	.word	0x40012c00
 800614c:	40013400 	.word	0x40013400
 8006150:	40014000 	.word	0x40014000
 8006154:	40014400 	.word	0x40014400
 8006158:	40014800 	.word	0x40014800
 800615c:	40000400 	.word	0x40000400
 8006160:	40000800 	.word	0x40000800
 8006164:	00010007 	.word	0x00010007

08006168 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2200      	movs	r2, #0
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f001 f9b6 	bl	80074ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a3e      	ldr	r2, [pc, #248]	; (8006280 <HAL_TIM_PWM_Stop+0x118>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d013      	beq.n	80061b2 <HAL_TIM_PWM_Stop+0x4a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a3d      	ldr	r2, [pc, #244]	; (8006284 <HAL_TIM_PWM_Stop+0x11c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00e      	beq.n	80061b2 <HAL_TIM_PWM_Stop+0x4a>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a3b      	ldr	r2, [pc, #236]	; (8006288 <HAL_TIM_PWM_Stop+0x120>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d009      	beq.n	80061b2 <HAL_TIM_PWM_Stop+0x4a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a3a      	ldr	r2, [pc, #232]	; (800628c <HAL_TIM_PWM_Stop+0x124>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d004      	beq.n	80061b2 <HAL_TIM_PWM_Stop+0x4a>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a38      	ldr	r2, [pc, #224]	; (8006290 <HAL_TIM_PWM_Stop+0x128>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_PWM_Stop+0x4e>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <HAL_TIM_PWM_Stop+0x50>
 80061b6:	2300      	movs	r3, #0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d017      	beq.n	80061ec <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6a1a      	ldr	r2, [r3, #32]
 80061c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10f      	bne.n	80061ec <HAL_TIM_PWM_Stop+0x84>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6a1a      	ldr	r2, [r3, #32]
 80061d2:	f244 4344 	movw	r3, #17476	; 0x4444
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d107      	bne.n	80061ec <HAL_TIM_PWM_Stop+0x84>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6a1a      	ldr	r2, [r3, #32]
 80061f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10f      	bne.n	800621c <HAL_TIM_PWM_Stop+0xb4>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6a1a      	ldr	r2, [r3, #32]
 8006202:	f244 4344 	movw	r3, #17476	; 0x4444
 8006206:	4013      	ands	r3, r2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d107      	bne.n	800621c <HAL_TIM_PWM_Stop+0xb4>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0201 	bic.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d104      	bne.n	800622c <HAL_TIM_PWM_Stop+0xc4>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800622a:	e023      	b.n	8006274 <HAL_TIM_PWM_Stop+0x10c>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b04      	cmp	r3, #4
 8006230:	d104      	bne.n	800623c <HAL_TIM_PWM_Stop+0xd4>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800623a:	e01b      	b.n	8006274 <HAL_TIM_PWM_Stop+0x10c>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b08      	cmp	r3, #8
 8006240:	d104      	bne.n	800624c <HAL_TIM_PWM_Stop+0xe4>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800624a:	e013      	b.n	8006274 <HAL_TIM_PWM_Stop+0x10c>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b0c      	cmp	r3, #12
 8006250:	d104      	bne.n	800625c <HAL_TIM_PWM_Stop+0xf4>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800625a:	e00b      	b.n	8006274 <HAL_TIM_PWM_Stop+0x10c>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	2b10      	cmp	r3, #16
 8006260:	d104      	bne.n	800626c <HAL_TIM_PWM_Stop+0x104>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800626a:	e003      	b.n	8006274 <HAL_TIM_PWM_Stop+0x10c>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40012c00 	.word	0x40012c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	40014800 	.word	0x40014800

08006294 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e097      	b.n	80063d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d106      	bne.n	80062c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7fb fe75 	bl	8001fac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2202      	movs	r2, #2
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80062d8:	f023 0307 	bic.w	r3, r3, #7
 80062dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3304      	adds	r3, #4
 80062e6:	4619      	mov	r1, r3
 80062e8:	4610      	mov	r0, r2
 80062ea:	f000 fcdd 	bl	8006ca8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	4313      	orrs	r3, r2
 800630e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006316:	f023 0303 	bic.w	r3, r3, #3
 800631a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	4313      	orrs	r3, r2
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006334:	f023 030c 	bic.w	r3, r3, #12
 8006338:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006340:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	4313      	orrs	r3, r2
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	011a      	lsls	r2, r3, #4
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	031b      	lsls	r3, r3, #12
 8006364:	4313      	orrs	r3, r2
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006372:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800637a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	4313      	orrs	r3, r2
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006400:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006408:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d110      	bne.n	8006432 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d102      	bne.n	800641c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006416:	7b7b      	ldrb	r3, [r7, #13]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d001      	beq.n	8006420 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e089      	b.n	8006534 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006430:	e031      	b.n	8006496 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b04      	cmp	r3, #4
 8006436:	d110      	bne.n	800645a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006438:	7bbb      	ldrb	r3, [r7, #14]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d102      	bne.n	8006444 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800643e:	7b3b      	ldrb	r3, [r7, #12]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d001      	beq.n	8006448 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e075      	b.n	8006534 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006458:	e01d      	b.n	8006496 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d108      	bne.n	8006472 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d105      	bne.n	8006472 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006466:	7b7b      	ldrb	r3, [r7, #13]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d102      	bne.n	8006472 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800646c:	7b3b      	ldrb	r3, [r7, #12]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d001      	beq.n	8006476 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e05e      	b.n	8006534 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2202      	movs	r2, #2
 800647a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2202      	movs	r2, #2
 8006482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2202      	movs	r2, #2
 800648a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2202      	movs	r2, #2
 8006492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <HAL_TIM_Encoder_Start_IT+0xc4>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d010      	beq.n	80064c4 <HAL_TIM_Encoder_Start_IT+0xe4>
 80064a2:	e01f      	b.n	80064e4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2201      	movs	r2, #1
 80064aa:	2100      	movs	r1, #0
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 f81d 	bl	80074ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0202 	orr.w	r2, r2, #2
 80064c0:	60da      	str	r2, [r3, #12]
      break;
 80064c2:	e02e      	b.n	8006522 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2201      	movs	r2, #1
 80064ca:	2104      	movs	r1, #4
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 f80d 	bl	80074ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0204 	orr.w	r2, r2, #4
 80064e0:	60da      	str	r2, [r3, #12]
      break;
 80064e2:	e01e      	b.n	8006522 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2201      	movs	r2, #1
 80064ea:	2100      	movs	r1, #0
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fffd 	bl	80074ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2201      	movs	r2, #1
 80064f8:	2104      	movs	r1, #4
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fff6 	bl	80074ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0202 	orr.w	r2, r2, #2
 800650e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0204 	orr.w	r2, r2, #4
 800651e:	60da      	str	r2, [r3, #12]
      break;
 8006520:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f042 0201 	orr.w	r2, r2, #1
 8006530:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b02      	cmp	r3, #2
 8006550:	d122      	bne.n	8006598 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b02      	cmp	r3, #2
 800655e:	d11b      	bne.n	8006598 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0202 	mvn.w	r2, #2
 8006568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fb74 	bl	8006c6c <HAL_TIM_IC_CaptureCallback>
 8006584:	e005      	b.n	8006592 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fb66 	bl	8006c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fb77 	bl	8006c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d122      	bne.n	80065ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d11b      	bne.n	80065ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0204 	mvn.w	r2, #4
 80065bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2202      	movs	r2, #2
 80065c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fb4a 	bl	8006c6c <HAL_TIM_IC_CaptureCallback>
 80065d8:	e005      	b.n	80065e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fb3c 	bl	8006c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fb4d 	bl	8006c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0308 	and.w	r3, r3, #8
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d122      	bne.n	8006640 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f003 0308 	and.w	r3, r3, #8
 8006604:	2b08      	cmp	r3, #8
 8006606:	d11b      	bne.n	8006640 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 0208 	mvn.w	r2, #8
 8006610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2204      	movs	r2, #4
 8006616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fb20 	bl	8006c6c <HAL_TIM_IC_CaptureCallback>
 800662c:	e005      	b.n	800663a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fb12 	bl	8006c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fb23 	bl	8006c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f003 0310 	and.w	r3, r3, #16
 800664a:	2b10      	cmp	r3, #16
 800664c:	d122      	bne.n	8006694 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b10      	cmp	r3, #16
 800665a:	d11b      	bne.n	8006694 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0210 	mvn.w	r2, #16
 8006664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2208      	movs	r2, #8
 800666a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 faf6 	bl	8006c6c <HAL_TIM_IC_CaptureCallback>
 8006680:	e005      	b.n	800668e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fae8 	bl	8006c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 faf9 	bl	8006c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d10e      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d107      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0201 	mvn.w	r2, #1
 80066b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fb fb62 	bl	8001d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ca:	2b80      	cmp	r3, #128	; 0x80
 80066cc:	d10e      	bne.n	80066ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d8:	2b80      	cmp	r3, #128	; 0x80
 80066da:	d107      	bne.n	80066ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 f964 	bl	80079b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066fa:	d10e      	bne.n	800671a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006706:	2b80      	cmp	r3, #128	; 0x80
 8006708:	d107      	bne.n	800671a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 f957 	bl	80079c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b40      	cmp	r3, #64	; 0x40
 8006726:	d10e      	bne.n	8006746 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006732:	2b40      	cmp	r3, #64	; 0x40
 8006734:	d107      	bne.n	8006746 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800673e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 faa7 	bl	8006c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	f003 0320 	and.w	r3, r3, #32
 8006750:	2b20      	cmp	r3, #32
 8006752:	d10e      	bne.n	8006772 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b20      	cmp	r3, #32
 8006760:	d107      	bne.n	8006772 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f06f 0220 	mvn.w	r2, #32
 800676a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f001 f917 	bl	80079a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800677c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006780:	d10f      	bne.n	80067a2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800678c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006790:	d107      	bne.n	80067a2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800679a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 f91d 	bl	80079dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067b0:	d10f      	bne.n	80067d2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067c0:	d107      	bne.n	80067d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80067ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 f90f 	bl	80079f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067e0:	d10f      	bne.n	8006802 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067f0:	d107      	bne.n	8006802 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80067fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 f901 	bl	8007a04 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800680c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006810:	d10f      	bne.n	8006832 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800681c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006820:	d107      	bne.n	8006832 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800682a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 f8f3 	bl	8007a18 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006832:	bf00      	nop
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006856:	2302      	movs	r3, #2
 8006858:	e0ff      	b.n	8006a5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b14      	cmp	r3, #20
 8006866:	f200 80f0 	bhi.w	8006a4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800686a:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800686c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006870:	080068c5 	.word	0x080068c5
 8006874:	08006a4b 	.word	0x08006a4b
 8006878:	08006a4b 	.word	0x08006a4b
 800687c:	08006a4b 	.word	0x08006a4b
 8006880:	08006905 	.word	0x08006905
 8006884:	08006a4b 	.word	0x08006a4b
 8006888:	08006a4b 	.word	0x08006a4b
 800688c:	08006a4b 	.word	0x08006a4b
 8006890:	08006947 	.word	0x08006947
 8006894:	08006a4b 	.word	0x08006a4b
 8006898:	08006a4b 	.word	0x08006a4b
 800689c:	08006a4b 	.word	0x08006a4b
 80068a0:	08006987 	.word	0x08006987
 80068a4:	08006a4b 	.word	0x08006a4b
 80068a8:	08006a4b 	.word	0x08006a4b
 80068ac:	08006a4b 	.word	0x08006a4b
 80068b0:	080069c9 	.word	0x080069c9
 80068b4:	08006a4b 	.word	0x08006a4b
 80068b8:	08006a4b 	.word	0x08006a4b
 80068bc:	08006a4b 	.word	0x08006a4b
 80068c0:	08006a09 	.word	0x08006a09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fa7c 	bl	8006dc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699a      	ldr	r2, [r3, #24]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0208 	orr.w	r2, r2, #8
 80068de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0204 	bic.w	r2, r2, #4
 80068ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6999      	ldr	r1, [r3, #24]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	691a      	ldr	r2, [r3, #16]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	619a      	str	r2, [r3, #24]
      break;
 8006902:	e0a5      	b.n	8006a50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	4618      	mov	r0, r3
 800690c:	f000 faec 	bl	8006ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800691e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800692e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6999      	ldr	r1, [r3, #24]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	021a      	lsls	r2, r3, #8
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	619a      	str	r2, [r3, #24]
      break;
 8006944:	e084      	b.n	8006a50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	4618      	mov	r0, r3
 800694e:	f000 fb55 	bl	8006ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69da      	ldr	r2, [r3, #28]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0208 	orr.w	r2, r2, #8
 8006960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69da      	ldr	r2, [r3, #28]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0204 	bic.w	r2, r2, #4
 8006970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69d9      	ldr	r1, [r3, #28]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	691a      	ldr	r2, [r3, #16]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	61da      	str	r2, [r3, #28]
      break;
 8006984:	e064      	b.n	8006a50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fbbd 	bl	800710c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69da      	ldr	r2, [r3, #28]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69da      	ldr	r2, [r3, #28]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69d9      	ldr	r1, [r3, #28]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	021a      	lsls	r2, r3, #8
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	61da      	str	r2, [r3, #28]
      break;
 80069c6:	e043      	b.n	8006a50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68b9      	ldr	r1, [r7, #8]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fc26 	bl	8007220 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0208 	orr.w	r2, r2, #8
 80069e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0204 	bic.w	r2, r2, #4
 80069f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a06:	e023      	b.n	8006a50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68b9      	ldr	r1, [r7, #8]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fc6a 	bl	80072e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a32:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	021a      	lsls	r2, r3, #8
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a48:	e002      	b.n	8006a50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop

08006a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_TIM_ConfigClockSource+0x1c>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e0de      	b.n	8006c3e <HAL_TIM_ConfigClockSource+0x1da>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a63      	ldr	r2, [pc, #396]	; (8006c48 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	f000 80a9 	beq.w	8006c12 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ac0:	4a61      	ldr	r2, [pc, #388]	; (8006c48 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	f200 80ae 	bhi.w	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ac8:	4a60      	ldr	r2, [pc, #384]	; (8006c4c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	f000 80a1 	beq.w	8006c12 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ad0:	4a5e      	ldr	r2, [pc, #376]	; (8006c4c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	f200 80a6 	bhi.w	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ad8:	4a5d      	ldr	r2, [pc, #372]	; (8006c50 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	f000 8099 	beq.w	8006c12 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ae0:	4a5b      	ldr	r2, [pc, #364]	; (8006c50 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	f200 809e 	bhi.w	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ae8:	4a5a      	ldr	r2, [pc, #360]	; (8006c54 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	f000 8091 	beq.w	8006c12 <HAL_TIM_ConfigClockSource+0x1ae>
 8006af0:	4a58      	ldr	r2, [pc, #352]	; (8006c54 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	f200 8096 	bhi.w	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
 8006af8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006afc:	f000 8089 	beq.w	8006c12 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b04:	f200 808e 	bhi.w	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b0c:	d03e      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x128>
 8006b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b12:	f200 8087 	bhi.w	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1a:	f000 8086 	beq.w	8006c2a <HAL_TIM_ConfigClockSource+0x1c6>
 8006b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b22:	d87f      	bhi.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b24:	2b70      	cmp	r3, #112	; 0x70
 8006b26:	d01a      	beq.n	8006b5e <HAL_TIM_ConfigClockSource+0xfa>
 8006b28:	2b70      	cmp	r3, #112	; 0x70
 8006b2a:	d87b      	bhi.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b2c:	2b60      	cmp	r3, #96	; 0x60
 8006b2e:	d050      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x16e>
 8006b30:	2b60      	cmp	r3, #96	; 0x60
 8006b32:	d877      	bhi.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b34:	2b50      	cmp	r3, #80	; 0x50
 8006b36:	d03c      	beq.n	8006bb2 <HAL_TIM_ConfigClockSource+0x14e>
 8006b38:	2b50      	cmp	r3, #80	; 0x50
 8006b3a:	d873      	bhi.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b3c:	2b40      	cmp	r3, #64	; 0x40
 8006b3e:	d058      	beq.n	8006bf2 <HAL_TIM_ConfigClockSource+0x18e>
 8006b40:	2b40      	cmp	r3, #64	; 0x40
 8006b42:	d86f      	bhi.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b44:	2b30      	cmp	r3, #48	; 0x30
 8006b46:	d064      	beq.n	8006c12 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b48:	2b30      	cmp	r3, #48	; 0x30
 8006b4a:	d86b      	bhi.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	d060      	beq.n	8006c12 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d867      	bhi.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d05c      	beq.n	8006c12 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b58:	2b10      	cmp	r3, #16
 8006b5a:	d05a      	beq.n	8006c12 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b5c:	e062      	b.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	6899      	ldr	r1, [r3, #8]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f000 fc9d 	bl	80074ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	609a      	str	r2, [r3, #8]
      break;
 8006b8a:	e04f      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	6899      	ldr	r1, [r3, #8]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f000 fc86 	bl	80074ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bae:	609a      	str	r2, [r3, #8]
      break;
 8006bb0:	e03c      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	6859      	ldr	r1, [r3, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f000 fbf8 	bl	80073b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2150      	movs	r1, #80	; 0x50
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fc51 	bl	8007472 <TIM_ITRx_SetConfig>
      break;
 8006bd0:	e02c      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	6859      	ldr	r1, [r3, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	461a      	mov	r2, r3
 8006be0:	f000 fc17 	bl	8007412 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2160      	movs	r1, #96	; 0x60
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fc41 	bl	8007472 <TIM_ITRx_SetConfig>
      break;
 8006bf0:	e01c      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	6859      	ldr	r1, [r3, #4]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f000 fbd8 	bl	80073b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2140      	movs	r1, #64	; 0x40
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fc31 	bl	8007472 <TIM_ITRx_SetConfig>
      break;
 8006c10:	e00c      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f000 fc28 	bl	8007472 <TIM_ITRx_SetConfig>
      break;
 8006c22:	e003      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
      break;
 8006c28:	e000      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006c2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	00100070 	.word	0x00100070
 8006c4c:	00100040 	.word	0x00100040
 8006c50:	00100030 	.word	0x00100030
 8006c54:	00100020 	.word	0x00100020

08006c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a3c      	ldr	r2, [pc, #240]	; (8006dac <TIM_Base_SetConfig+0x104>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00f      	beq.n	8006ce0 <TIM_Base_SetConfig+0x38>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc6:	d00b      	beq.n	8006ce0 <TIM_Base_SetConfig+0x38>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a39      	ldr	r2, [pc, #228]	; (8006db0 <TIM_Base_SetConfig+0x108>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d007      	beq.n	8006ce0 <TIM_Base_SetConfig+0x38>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a38      	ldr	r2, [pc, #224]	; (8006db4 <TIM_Base_SetConfig+0x10c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d003      	beq.n	8006ce0 <TIM_Base_SetConfig+0x38>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a37      	ldr	r2, [pc, #220]	; (8006db8 <TIM_Base_SetConfig+0x110>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d108      	bne.n	8006cf2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2d      	ldr	r2, [pc, #180]	; (8006dac <TIM_Base_SetConfig+0x104>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d01b      	beq.n	8006d32 <TIM_Base_SetConfig+0x8a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d00:	d017      	beq.n	8006d32 <TIM_Base_SetConfig+0x8a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a2a      	ldr	r2, [pc, #168]	; (8006db0 <TIM_Base_SetConfig+0x108>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d013      	beq.n	8006d32 <TIM_Base_SetConfig+0x8a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a29      	ldr	r2, [pc, #164]	; (8006db4 <TIM_Base_SetConfig+0x10c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00f      	beq.n	8006d32 <TIM_Base_SetConfig+0x8a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a28      	ldr	r2, [pc, #160]	; (8006db8 <TIM_Base_SetConfig+0x110>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00b      	beq.n	8006d32 <TIM_Base_SetConfig+0x8a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a27      	ldr	r2, [pc, #156]	; (8006dbc <TIM_Base_SetConfig+0x114>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d007      	beq.n	8006d32 <TIM_Base_SetConfig+0x8a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a26      	ldr	r2, [pc, #152]	; (8006dc0 <TIM_Base_SetConfig+0x118>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d003      	beq.n	8006d32 <TIM_Base_SetConfig+0x8a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a25      	ldr	r2, [pc, #148]	; (8006dc4 <TIM_Base_SetConfig+0x11c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d108      	bne.n	8006d44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a10      	ldr	r2, [pc, #64]	; (8006dac <TIM_Base_SetConfig+0x104>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00f      	beq.n	8006d90 <TIM_Base_SetConfig+0xe8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a11      	ldr	r2, [pc, #68]	; (8006db8 <TIM_Base_SetConfig+0x110>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00b      	beq.n	8006d90 <TIM_Base_SetConfig+0xe8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a10      	ldr	r2, [pc, #64]	; (8006dbc <TIM_Base_SetConfig+0x114>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d007      	beq.n	8006d90 <TIM_Base_SetConfig+0xe8>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a0f      	ldr	r2, [pc, #60]	; (8006dc0 <TIM_Base_SetConfig+0x118>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d003      	beq.n	8006d90 <TIM_Base_SetConfig+0xe8>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a0e      	ldr	r2, [pc, #56]	; (8006dc4 <TIM_Base_SetConfig+0x11c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d103      	bne.n	8006d98 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	615a      	str	r2, [r3, #20]
}
 8006d9e:	bf00      	nop
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	40012c00 	.word	0x40012c00
 8006db0:	40000400 	.word	0x40000400
 8006db4:	40000800 	.word	0x40000800
 8006db8:	40013400 	.word	0x40013400
 8006dbc:	40014000 	.word	0x40014000
 8006dc0:	40014400 	.word	0x40014400
 8006dc4:	40014800 	.word	0x40014800

08006dc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	f023 0201 	bic.w	r2, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0303 	bic.w	r3, r3, #3
 8006e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f023 0302 	bic.w	r3, r3, #2
 8006e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a2c      	ldr	r2, [pc, #176]	; (8006ed4 <TIM_OC1_SetConfig+0x10c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00f      	beq.n	8006e48 <TIM_OC1_SetConfig+0x80>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a2b      	ldr	r2, [pc, #172]	; (8006ed8 <TIM_OC1_SetConfig+0x110>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00b      	beq.n	8006e48 <TIM_OC1_SetConfig+0x80>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a2a      	ldr	r2, [pc, #168]	; (8006edc <TIM_OC1_SetConfig+0x114>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d007      	beq.n	8006e48 <TIM_OC1_SetConfig+0x80>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a29      	ldr	r2, [pc, #164]	; (8006ee0 <TIM_OC1_SetConfig+0x118>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <TIM_OC1_SetConfig+0x80>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a28      	ldr	r2, [pc, #160]	; (8006ee4 <TIM_OC1_SetConfig+0x11c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d10c      	bne.n	8006e62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f023 0308 	bic.w	r3, r3, #8
 8006e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f023 0304 	bic.w	r3, r3, #4
 8006e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a1b      	ldr	r2, [pc, #108]	; (8006ed4 <TIM_OC1_SetConfig+0x10c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00f      	beq.n	8006e8a <TIM_OC1_SetConfig+0xc2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a1a      	ldr	r2, [pc, #104]	; (8006ed8 <TIM_OC1_SetConfig+0x110>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00b      	beq.n	8006e8a <TIM_OC1_SetConfig+0xc2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a19      	ldr	r2, [pc, #100]	; (8006edc <TIM_OC1_SetConfig+0x114>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d007      	beq.n	8006e8a <TIM_OC1_SetConfig+0xc2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a18      	ldr	r2, [pc, #96]	; (8006ee0 <TIM_OC1_SetConfig+0x118>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_OC1_SetConfig+0xc2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a17      	ldr	r2, [pc, #92]	; (8006ee4 <TIM_OC1_SetConfig+0x11c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d111      	bne.n	8006eae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	621a      	str	r2, [r3, #32]
}
 8006ec8:	bf00      	nop
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	40012c00 	.word	0x40012c00
 8006ed8:	40013400 	.word	0x40013400
 8006edc:	40014000 	.word	0x40014000
 8006ee0:	40014400 	.word	0x40014400
 8006ee4:	40014800 	.word	0x40014800

08006ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	f023 0210 	bic.w	r2, r3, #16
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	021b      	lsls	r3, r3, #8
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f023 0320 	bic.w	r3, r3, #32
 8006f36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a28      	ldr	r2, [pc, #160]	; (8006fe8 <TIM_OC2_SetConfig+0x100>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d003      	beq.n	8006f54 <TIM_OC2_SetConfig+0x6c>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a27      	ldr	r2, [pc, #156]	; (8006fec <TIM_OC2_SetConfig+0x104>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d10d      	bne.n	8006f70 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	011b      	lsls	r3, r3, #4
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a1d      	ldr	r2, [pc, #116]	; (8006fe8 <TIM_OC2_SetConfig+0x100>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00f      	beq.n	8006f98 <TIM_OC2_SetConfig+0xb0>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a1c      	ldr	r2, [pc, #112]	; (8006fec <TIM_OC2_SetConfig+0x104>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00b      	beq.n	8006f98 <TIM_OC2_SetConfig+0xb0>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a1b      	ldr	r2, [pc, #108]	; (8006ff0 <TIM_OC2_SetConfig+0x108>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d007      	beq.n	8006f98 <TIM_OC2_SetConfig+0xb0>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a1a      	ldr	r2, [pc, #104]	; (8006ff4 <TIM_OC2_SetConfig+0x10c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d003      	beq.n	8006f98 <TIM_OC2_SetConfig+0xb0>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a19      	ldr	r2, [pc, #100]	; (8006ff8 <TIM_OC2_SetConfig+0x110>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d113      	bne.n	8006fc0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	40013400 	.word	0x40013400
 8006ff0:	40014000 	.word	0x40014000
 8006ff4:	40014400 	.word	0x40014400
 8006ff8:	40014800 	.word	0x40014800

08006ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800702a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0303 	bic.w	r3, r3, #3
 8007036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	021b      	lsls	r3, r3, #8
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	4313      	orrs	r3, r2
 8007054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a27      	ldr	r2, [pc, #156]	; (80070f8 <TIM_OC3_SetConfig+0xfc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_OC3_SetConfig+0x6a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a26      	ldr	r2, [pc, #152]	; (80070fc <TIM_OC3_SetConfig+0x100>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d10d      	bne.n	8007082 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800706c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4313      	orrs	r3, r2
 8007078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <TIM_OC3_SetConfig+0xfc>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00f      	beq.n	80070aa <TIM_OC3_SetConfig+0xae>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a1b      	ldr	r2, [pc, #108]	; (80070fc <TIM_OC3_SetConfig+0x100>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00b      	beq.n	80070aa <TIM_OC3_SetConfig+0xae>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a1a      	ldr	r2, [pc, #104]	; (8007100 <TIM_OC3_SetConfig+0x104>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d007      	beq.n	80070aa <TIM_OC3_SetConfig+0xae>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a19      	ldr	r2, [pc, #100]	; (8007104 <TIM_OC3_SetConfig+0x108>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d003      	beq.n	80070aa <TIM_OC3_SetConfig+0xae>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a18      	ldr	r2, [pc, #96]	; (8007108 <TIM_OC3_SetConfig+0x10c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d113      	bne.n	80070d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	621a      	str	r2, [r3, #32]
}
 80070ec:	bf00      	nop
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	40012c00 	.word	0x40012c00
 80070fc:	40013400 	.word	0x40013400
 8007100:	40014000 	.word	0x40014000
 8007104:	40014400 	.word	0x40014400
 8007108:	40014800 	.word	0x40014800

0800710c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800713a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800713e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4313      	orrs	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800715a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	031b      	lsls	r3, r3, #12
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a28      	ldr	r2, [pc, #160]	; (800720c <TIM_OC4_SetConfig+0x100>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d003      	beq.n	8007178 <TIM_OC4_SetConfig+0x6c>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a27      	ldr	r2, [pc, #156]	; (8007210 <TIM_OC4_SetConfig+0x104>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d10d      	bne.n	8007194 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800717e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	031b      	lsls	r3, r3, #12
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	4313      	orrs	r3, r2
 800718a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007192:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a1d      	ldr	r2, [pc, #116]	; (800720c <TIM_OC4_SetConfig+0x100>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00f      	beq.n	80071bc <TIM_OC4_SetConfig+0xb0>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a1c      	ldr	r2, [pc, #112]	; (8007210 <TIM_OC4_SetConfig+0x104>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00b      	beq.n	80071bc <TIM_OC4_SetConfig+0xb0>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a1b      	ldr	r2, [pc, #108]	; (8007214 <TIM_OC4_SetConfig+0x108>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d007      	beq.n	80071bc <TIM_OC4_SetConfig+0xb0>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a1a      	ldr	r2, [pc, #104]	; (8007218 <TIM_OC4_SetConfig+0x10c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d003      	beq.n	80071bc <TIM_OC4_SetConfig+0xb0>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a19      	ldr	r2, [pc, #100]	; (800721c <TIM_OC4_SetConfig+0x110>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d113      	bne.n	80071e4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	019b      	lsls	r3, r3, #6
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	019b      	lsls	r3, r3, #6
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	621a      	str	r2, [r3, #32]
}
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	40012c00 	.word	0x40012c00
 8007210:	40013400 	.word	0x40013400
 8007214:	40014000 	.word	0x40014000
 8007218:	40014400 	.word	0x40014400
 800721c:	40014800 	.word	0x40014800

08007220 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800724e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007264:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	041b      	lsls	r3, r3, #16
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	4313      	orrs	r3, r2
 8007270:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a17      	ldr	r2, [pc, #92]	; (80072d4 <TIM_OC5_SetConfig+0xb4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d00f      	beq.n	800729a <TIM_OC5_SetConfig+0x7a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a16      	ldr	r2, [pc, #88]	; (80072d8 <TIM_OC5_SetConfig+0xb8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00b      	beq.n	800729a <TIM_OC5_SetConfig+0x7a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a15      	ldr	r2, [pc, #84]	; (80072dc <TIM_OC5_SetConfig+0xbc>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d007      	beq.n	800729a <TIM_OC5_SetConfig+0x7a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a14      	ldr	r2, [pc, #80]	; (80072e0 <TIM_OC5_SetConfig+0xc0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d003      	beq.n	800729a <TIM_OC5_SetConfig+0x7a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a13      	ldr	r2, [pc, #76]	; (80072e4 <TIM_OC5_SetConfig+0xc4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d109      	bne.n	80072ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	021b      	lsls	r3, r3, #8
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	621a      	str	r2, [r3, #32]
}
 80072c8:	bf00      	nop
 80072ca:	371c      	adds	r7, #28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	40012c00 	.word	0x40012c00
 80072d8:	40013400 	.word	0x40013400
 80072dc:	40014000 	.word	0x40014000
 80072e0:	40014400 	.word	0x40014400
 80072e4:	40014800 	.word	0x40014800

080072e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800731a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	021b      	lsls	r3, r3, #8
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	4313      	orrs	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800732e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	051b      	lsls	r3, r3, #20
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a18      	ldr	r2, [pc, #96]	; (80073a0 <TIM_OC6_SetConfig+0xb8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d00f      	beq.n	8007364 <TIM_OC6_SetConfig+0x7c>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a17      	ldr	r2, [pc, #92]	; (80073a4 <TIM_OC6_SetConfig+0xbc>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d00b      	beq.n	8007364 <TIM_OC6_SetConfig+0x7c>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a16      	ldr	r2, [pc, #88]	; (80073a8 <TIM_OC6_SetConfig+0xc0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d007      	beq.n	8007364 <TIM_OC6_SetConfig+0x7c>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a15      	ldr	r2, [pc, #84]	; (80073ac <TIM_OC6_SetConfig+0xc4>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d003      	beq.n	8007364 <TIM_OC6_SetConfig+0x7c>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a14      	ldr	r2, [pc, #80]	; (80073b0 <TIM_OC6_SetConfig+0xc8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d109      	bne.n	8007378 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800736a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	029b      	lsls	r3, r3, #10
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	621a      	str	r2, [r3, #32]
}
 8007392:	bf00      	nop
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	40012c00 	.word	0x40012c00
 80073a4:	40013400 	.word	0x40013400
 80073a8:	40014000 	.word	0x40014000
 80073ac:	40014400 	.word	0x40014400
 80073b0:	40014800 	.word	0x40014800

080073b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	f023 0201 	bic.w	r2, r3, #1
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f023 030a 	bic.w	r3, r3, #10
 80073f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	621a      	str	r2, [r3, #32]
}
 8007406:	bf00      	nop
 8007408:	371c      	adds	r7, #28
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007412:	b480      	push	{r7}
 8007414:	b087      	sub	sp, #28
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	f023 0210 	bic.w	r2, r3, #16
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800743c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	031b      	lsls	r3, r3, #12
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800744e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	621a      	str	r2, [r3, #32]
}
 8007466:	bf00      	nop
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007472:	b480      	push	{r7}
 8007474:	b085      	sub	sp, #20
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	f043 0307 	orr.w	r3, r3, #7
 8007498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	609a      	str	r2, [r3, #8]
}
 80074a0:	bf00      	nop
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
 80074b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	021a      	lsls	r2, r3, #8
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	431a      	orrs	r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	609a      	str	r2, [r3, #8]
}
 80074e0:	bf00      	nop
 80074e2:	371c      	adds	r7, #28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f003 031f 	and.w	r3, r3, #31
 80074fe:	2201      	movs	r2, #1
 8007500:	fa02 f303 	lsl.w	r3, r2, r3
 8007504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6a1a      	ldr	r2, [r3, #32]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	43db      	mvns	r3, r3
 800750e:	401a      	ands	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6a1a      	ldr	r2, [r3, #32]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f003 031f 	and.w	r3, r3, #31
 800751e:	6879      	ldr	r1, [r7, #4]
 8007520:	fa01 f303 	lsl.w	r3, r1, r3
 8007524:	431a      	orrs	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	621a      	str	r2, [r3, #32]
}
 800752a:	bf00      	nop
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
	...

08007538 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d109      	bne.n	800755c <HAL_TIMEx_PWMN_Start+0x24>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b01      	cmp	r3, #1
 8007552:	bf14      	ite	ne
 8007554:	2301      	movne	r3, #1
 8007556:	2300      	moveq	r3, #0
 8007558:	b2db      	uxtb	r3, r3
 800755a:	e022      	b.n	80075a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b04      	cmp	r3, #4
 8007560:	d109      	bne.n	8007576 <HAL_TIMEx_PWMN_Start+0x3e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b01      	cmp	r3, #1
 800756c:	bf14      	ite	ne
 800756e:	2301      	movne	r3, #1
 8007570:	2300      	moveq	r3, #0
 8007572:	b2db      	uxtb	r3, r3
 8007574:	e015      	b.n	80075a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b08      	cmp	r3, #8
 800757a:	d109      	bne.n	8007590 <HAL_TIMEx_PWMN_Start+0x58>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b01      	cmp	r3, #1
 8007586:	bf14      	ite	ne
 8007588:	2301      	movne	r3, #1
 800758a:	2300      	moveq	r3, #0
 800758c:	b2db      	uxtb	r3, r3
 800758e:	e008      	b.n	80075a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b01      	cmp	r3, #1
 800759a:	bf14      	ite	ne
 800759c:	2301      	movne	r3, #1
 800759e:	2300      	moveq	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e069      	b.n	800767e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d104      	bne.n	80075ba <HAL_TIMEx_PWMN_Start+0x82>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b8:	e013      	b.n	80075e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d104      	bne.n	80075ca <HAL_TIMEx_PWMN_Start+0x92>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075c8:	e00b      	b.n	80075e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	d104      	bne.n	80075da <HAL_TIMEx_PWMN_Start+0xa2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075d8:	e003      	b.n	80075e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2202      	movs	r2, #2
 80075de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2204      	movs	r2, #4
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fa1e 	bl	8007a2c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a20      	ldr	r2, [pc, #128]	; (8007688 <HAL_TIMEx_PWMN_Start+0x150>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d018      	beq.n	800763c <HAL_TIMEx_PWMN_Start+0x104>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007612:	d013      	beq.n	800763c <HAL_TIMEx_PWMN_Start+0x104>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a1c      	ldr	r2, [pc, #112]	; (800768c <HAL_TIMEx_PWMN_Start+0x154>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d00e      	beq.n	800763c <HAL_TIMEx_PWMN_Start+0x104>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a1b      	ldr	r2, [pc, #108]	; (8007690 <HAL_TIMEx_PWMN_Start+0x158>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d009      	beq.n	800763c <HAL_TIMEx_PWMN_Start+0x104>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a19      	ldr	r2, [pc, #100]	; (8007694 <HAL_TIMEx_PWMN_Start+0x15c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d004      	beq.n	800763c <HAL_TIMEx_PWMN_Start+0x104>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a18      	ldr	r2, [pc, #96]	; (8007698 <HAL_TIMEx_PWMN_Start+0x160>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d115      	bne.n	8007668 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	4b16      	ldr	r3, [pc, #88]	; (800769c <HAL_TIMEx_PWMN_Start+0x164>)
 8007644:	4013      	ands	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b06      	cmp	r3, #6
 800764c:	d015      	beq.n	800767a <HAL_TIMEx_PWMN_Start+0x142>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007654:	d011      	beq.n	800767a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0201 	orr.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007666:	e008      	b.n	800767a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f042 0201 	orr.w	r2, r2, #1
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	e000      	b.n	800767c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800767a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	40012c00 	.word	0x40012c00
 800768c:	40000400 	.word	0x40000400
 8007690:	40000800 	.word	0x40000800
 8007694:	40013400 	.word	0x40013400
 8007698:	40014000 	.word	0x40014000
 800769c:	00010007 	.word	0x00010007

080076a0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2200      	movs	r2, #0
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 f9ba 	bl	8007a2c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6a1a      	ldr	r2, [r3, #32]
 80076be:	f241 1311 	movw	r3, #4369	; 0x1111
 80076c2:	4013      	ands	r3, r2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10f      	bne.n	80076e8 <HAL_TIMEx_PWMN_Stop+0x48>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6a1a      	ldr	r2, [r3, #32]
 80076ce:	f244 4344 	movw	r3, #17476	; 0x4444
 80076d2:	4013      	ands	r3, r2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d107      	bne.n	80076e8 <HAL_TIMEx_PWMN_Stop+0x48>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6a1a      	ldr	r2, [r3, #32]
 80076ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80076f2:	4013      	ands	r3, r2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10f      	bne.n	8007718 <HAL_TIMEx_PWMN_Stop+0x78>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6a1a      	ldr	r2, [r3, #32]
 80076fe:	f244 4344 	movw	r3, #17476	; 0x4444
 8007702:	4013      	ands	r3, r2
 8007704:	2b00      	cmp	r3, #0
 8007706:	d107      	bne.n	8007718 <HAL_TIMEx_PWMN_Stop+0x78>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0201 	bic.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d104      	bne.n	8007728 <HAL_TIMEx_PWMN_Stop+0x88>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007726:	e013      	b.n	8007750 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2b04      	cmp	r3, #4
 800772c:	d104      	bne.n	8007738 <HAL_TIMEx_PWMN_Stop+0x98>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007736:	e00b      	b.n	8007750 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b08      	cmp	r3, #8
 800773c:	d104      	bne.n	8007748 <HAL_TIMEx_PWMN_Stop+0xa8>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007746:	e003      	b.n	8007750 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800776c:	2b01      	cmp	r3, #1
 800776e:	d101      	bne.n	8007774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007770:	2302      	movs	r3, #2
 8007772:	e065      	b.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a2c      	ldr	r2, [pc, #176]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d004      	beq.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a2b      	ldr	r2, [pc, #172]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d108      	bne.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80077c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a1b      	ldr	r2, [pc, #108]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d018      	beq.n	8007814 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ea:	d013      	beq.n	8007814 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a18      	ldr	r2, [pc, #96]	; (8007854 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d00e      	beq.n	8007814 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a17      	ldr	r2, [pc, #92]	; (8007858 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d009      	beq.n	8007814 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a12      	ldr	r2, [pc, #72]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d004      	beq.n	8007814 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a13      	ldr	r2, [pc, #76]	; (800785c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d10c      	bne.n	800782e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800781a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	4313      	orrs	r3, r2
 8007824:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	40012c00 	.word	0x40012c00
 8007850:	40013400 	.word	0x40013400
 8007854:	40000400 	.word	0x40000400
 8007858:	40000800 	.word	0x40000800
 800785c:	40014000 	.word	0x40014000

08007860 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007874:	2b01      	cmp	r3, #1
 8007876:	d101      	bne.n	800787c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007878:	2302      	movs	r3, #2
 800787a:	e087      	b.n	800798c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	4313      	orrs	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	041b      	lsls	r3, r3, #16
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a27      	ldr	r2, [pc, #156]	; (8007998 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d004      	beq.n	800790a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a25      	ldr	r2, [pc, #148]	; (800799c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d106      	bne.n	8007918 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	4313      	orrs	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a1e      	ldr	r2, [pc, #120]	; (8007998 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d004      	beq.n	800792c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a1d      	ldr	r2, [pc, #116]	; (800799c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d126      	bne.n	800797a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007936:	051b      	lsls	r3, r3, #20
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a0e      	ldr	r2, [pc, #56]	; (8007998 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d004      	beq.n	800796c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a0d      	ldr	r2, [pc, #52]	; (800799c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d106      	bne.n	800797a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	40012c00 	.word	0x40012c00
 800799c:	40013400 	.word	0x40013400

080079a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	f003 031f 	and.w	r3, r3, #31
 8007a3e:	2204      	movs	r2, #4
 8007a40:	fa02 f303 	lsl.w	r3, r2, r3
 8007a44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6a1a      	ldr	r2, [r3, #32]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	401a      	ands	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a1a      	ldr	r2, [r3, #32]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f003 031f 	and.w	r3, r3, #31
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	fa01 f303 	lsl.w	r3, r1, r3
 8007a64:	431a      	orrs	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	621a      	str	r2, [r3, #32]
}
 8007a6a:	bf00      	nop
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e042      	b.n	8007b0e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fa fb00 	bl	80020a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2224      	movs	r2, #36	; 0x24
 8007aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0201 	bic.w	r2, r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fc51 	bl	8008360 <UART_SetConfig>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e022      	b.n	8007b0e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 ff11 	bl	80088f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ae4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007af4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f042 0201 	orr.w	r2, r2, #1
 8007b04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 ff98 	bl	8008a3c <UART_CheckIdleState>
 8007b0c:	4603      	mov	r3, r0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b08a      	sub	sp, #40	; 0x28
 8007b1a:	af02      	add	r7, sp, #8
 8007b1c:	60f8      	str	r0, [r7, #12]
 8007b1e:	60b9      	str	r1, [r7, #8]
 8007b20:	603b      	str	r3, [r7, #0]
 8007b22:	4613      	mov	r3, r2
 8007b24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	f040 8083 	bne.w	8007c38 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <HAL_UART_Transmit+0x28>
 8007b38:	88fb      	ldrh	r3, [r7, #6]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e07b      	b.n	8007c3a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_UART_Transmit+0x3a>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e074      	b.n	8007c3a <HAL_UART_Transmit+0x124>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2221      	movs	r2, #33	; 0x21
 8007b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b68:	f7fa fcf4 	bl	8002554 <HAL_GetTick>
 8007b6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	88fa      	ldrh	r2, [r7, #6]
 8007b72:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	88fa      	ldrh	r2, [r7, #6]
 8007b7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b86:	d108      	bne.n	8007b9a <HAL_UART_Transmit+0x84>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d104      	bne.n	8007b9a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	61bb      	str	r3, [r7, #24]
 8007b98:	e003      	b.n	8007ba2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007baa:	e02c      	b.n	8007c06 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2180      	movs	r1, #128	; 0x80
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 ff8b 	bl	8008ad2 <UART_WaitOnFlagUntilTimeout>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e039      	b.n	8007c3a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10b      	bne.n	8007be4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	3302      	adds	r3, #2
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	e007      	b.n	8007bf4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1cc      	bne.n	8007bac <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2140      	movs	r1, #64	; 0x40
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 ff58 	bl	8008ad2 <UART_WaitOnFlagUntilTimeout>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e006      	b.n	8007c3a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	e000      	b.n	8007c3a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007c38:	2302      	movs	r3, #2
  }
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3720      	adds	r7, #32
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
	...

08007c44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b08a      	sub	sp, #40	; 0x28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c58:	2b20      	cmp	r3, #32
 8007c5a:	d142      	bne.n	8007ce2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <HAL_UART_Receive_IT+0x24>
 8007c62:	88fb      	ldrh	r3, [r7, #6]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e03b      	b.n	8007ce4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <HAL_UART_Receive_IT+0x36>
 8007c76:	2302      	movs	r3, #2
 8007c78:	e034      	b.n	8007ce4 <HAL_UART_Receive_IT+0xa0>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a17      	ldr	r2, [pc, #92]	; (8007cec <HAL_UART_Receive_IT+0xa8>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d01f      	beq.n	8007cd2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d018      	beq.n	8007cd2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	613b      	str	r3, [r7, #16]
   return(result);
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	623b      	str	r3, [r7, #32]
 8007cc0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	69f9      	ldr	r1, [r7, #28]
 8007cc4:	6a3a      	ldr	r2, [r7, #32]
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e6      	bne.n	8007ca0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007cd2:	88fb      	ldrh	r3, [r7, #6]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 ffc3 	bl	8008c64 <UART_Start_Receive_IT>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	e000      	b.n	8007ce4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007ce2:	2302      	movs	r3, #2
  }
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3728      	adds	r7, #40	; 0x28
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	40008000 	.word	0x40008000

08007cf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b0ba      	sub	sp, #232	; 0xe8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007d1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007d1e:	4013      	ands	r3, r2
 8007d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007d24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d11b      	bne.n	8007d64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d30:	f003 0320 	and.w	r3, r3, #32
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d015      	beq.n	8007d64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d3c:	f003 0320 	and.w	r3, r3, #32
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d105      	bne.n	8007d50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d009      	beq.n	8007d64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 82d6 	beq.w	8008306 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
      }
      return;
 8007d62:	e2d0      	b.n	8008306 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 811f 	beq.w	8007fac <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007d6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007d72:	4b8b      	ldr	r3, [pc, #556]	; (8007fa0 <HAL_UART_IRQHandler+0x2b0>)
 8007d74:	4013      	ands	r3, r2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d106      	bne.n	8007d88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007d7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007d7e:	4b89      	ldr	r3, [pc, #548]	; (8007fa4 <HAL_UART_IRQHandler+0x2b4>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 8112 	beq.w	8007fac <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d011      	beq.n	8007db8 <HAL_UART_IRQHandler+0xc8>
 8007d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00b      	beq.n	8007db8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2201      	movs	r2, #1
 8007da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dae:	f043 0201 	orr.w	r2, r3, #1
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dbc:	f003 0302 	and.w	r3, r3, #2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d011      	beq.n	8007de8 <HAL_UART_IRQHandler+0xf8>
 8007dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dde:	f043 0204 	orr.w	r2, r3, #4
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d011      	beq.n	8007e18 <HAL_UART_IRQHandler+0x128>
 8007df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00b      	beq.n	8007e18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2204      	movs	r2, #4
 8007e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e0e:	f043 0202 	orr.w	r2, r3, #2
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1c:	f003 0308 	and.w	r3, r3, #8
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d017      	beq.n	8007e54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d105      	bne.n	8007e3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007e30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007e34:	4b5a      	ldr	r3, [pc, #360]	; (8007fa0 <HAL_UART_IRQHandler+0x2b0>)
 8007e36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00b      	beq.n	8007e54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2208      	movs	r2, #8
 8007e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e4a:	f043 0208 	orr.w	r2, r3, #8
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d012      	beq.n	8007e86 <HAL_UART_IRQHandler+0x196>
 8007e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00c      	beq.n	8007e86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e7c:	f043 0220 	orr.w	r2, r3, #32
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 823c 	beq.w	800830a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d013      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d105      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d007      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ecc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eda:	2b40      	cmp	r3, #64	; 0x40
 8007edc:	d005      	beq.n	8007eea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ee2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d04f      	beq.n	8007f8a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 ffe4 	bl	8008eb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efa:	2b40      	cmp	r3, #64	; 0x40
 8007efc:	d141      	bne.n	8007f82 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3308      	adds	r3, #8
 8007f04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f3a:	e841 2300 	strex	r3, r2, [r1]
 8007f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1d9      	bne.n	8007efe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d013      	beq.n	8007f7a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f56:	4a14      	ldr	r2, [pc, #80]	; (8007fa8 <HAL_UART_IRQHandler+0x2b8>)
 8007f58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fc fb32 	bl	80045c8 <HAL_DMA_Abort_IT>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d017      	beq.n	8007f9a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007f74:	4610      	mov	r0, r2
 8007f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f78:	e00f      	b.n	8007f9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f9da 	bl	8008334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f80:	e00b      	b.n	8007f9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f9d6 	bl	8008334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f88:	e007      	b.n	8007f9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f9d2 	bl	8008334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007f98:	e1b7      	b.n	800830a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f9a:	bf00      	nop
    return;
 8007f9c:	e1b5      	b.n	800830a <HAL_UART_IRQHandler+0x61a>
 8007f9e:	bf00      	nop
 8007fa0:	10000001 	.word	0x10000001
 8007fa4:	04000120 	.word	0x04000120
 8007fa8:	08008f85 	.word	0x08008f85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	f040 814a 	bne.w	800824a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fba:	f003 0310 	and.w	r3, r3, #16
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f000 8143 	beq.w	800824a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc8:	f003 0310 	and.w	r3, r3, #16
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 813c 	beq.w	800824a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2210      	movs	r2, #16
 8007fd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe4:	2b40      	cmp	r3, #64	; 0x40
 8007fe6:	f040 80b5 	bne.w	8008154 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ff6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 8187 	beq.w	800830e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800800a:	429a      	cmp	r2, r3
 800800c:	f080 817f 	bcs.w	800830e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008016:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b00      	cmp	r3, #0
 8008028:	f040 8086 	bne.w	8008138 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008048:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	461a      	mov	r2, r3
 8008052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008056:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800805a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008062:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008066:	e841 2300 	strex	r3, r2, [r1]
 800806a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800806e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1da      	bne.n	800802c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3308      	adds	r3, #8
 800807c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008088:	f023 0301 	bic.w	r3, r3, #1
 800808c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3308      	adds	r3, #8
 8008096:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800809a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800809e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080a6:	e841 2300 	strex	r3, r2, [r1]
 80080aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80080ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1e1      	bne.n	8008076 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3308      	adds	r3, #8
 80080b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3308      	adds	r3, #8
 80080d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80080d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80080e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e3      	bne.n	80080b2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008100:	e853 3f00 	ldrex	r3, [r3]
 8008104:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008108:	f023 0310 	bic.w	r3, r3, #16
 800810c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	461a      	mov	r2, r3
 8008116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800811a:	65bb      	str	r3, [r7, #88]	; 0x58
 800811c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e4      	bne.n	80080f8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008132:	4618      	mov	r0, r3
 8008134:	f7fc f9ef 	bl	8004516 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008144:	b29b      	uxth	r3, r3
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	b29b      	uxth	r3, r3
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f8fb 	bl	8008348 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008152:	e0dc      	b.n	800830e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008160:	b29b      	uxth	r3, r3
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800816e:	b29b      	uxth	r3, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 80ce 	beq.w	8008312 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008176:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 80c9 	beq.w	8008312 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800818e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008194:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081a2:	647b      	str	r3, [r7, #68]	; 0x44
 80081a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e4      	bne.n	8008180 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3308      	adds	r3, #8
 80081bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	623b      	str	r3, [r7, #32]
   return(result);
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081cc:	f023 0301 	bic.w	r3, r3, #1
 80081d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3308      	adds	r3, #8
 80081da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80081de:	633a      	str	r2, [r7, #48]	; 0x30
 80081e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e1      	bne.n	80081b6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	60fb      	str	r3, [r7, #12]
   return(result);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 0310 	bic.w	r3, r3, #16
 800821a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008228:	61fb      	str	r3, [r7, #28]
 800822a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	69b9      	ldr	r1, [r7, #24]
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	e841 2300 	strex	r3, r2, [r1]
 8008234:	617b      	str	r3, [r7, #20]
   return(result);
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e4      	bne.n	8008206 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800823c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f880 	bl	8008348 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008248:	e063      	b.n	8008312 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800824a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800824e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00e      	beq.n	8008274 <HAL_UART_IRQHandler+0x584>
 8008256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800825a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d008      	beq.n	8008274 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800826a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 fb27 	bl	80098c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008272:	e051      	b.n	8008318 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800827c:	2b00      	cmp	r3, #0
 800827e:	d014      	beq.n	80082aa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008288:	2b00      	cmp	r3, #0
 800828a:	d105      	bne.n	8008298 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800828c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008290:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d008      	beq.n	80082aa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800829c:	2b00      	cmp	r3, #0
 800829e:	d03a      	beq.n	8008316 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
    }
    return;
 80082a8:	e035      	b.n	8008316 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <HAL_UART_IRQHandler+0x5da>
 80082b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fe74 	bl	8008fb0 <UART_EndTransmit_IT>
    return;
 80082c8:	e026      	b.n	8008318 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80082ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d009      	beq.n	80082ea <HAL_UART_IRQHandler+0x5fa>
 80082d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 fb00 	bl	80098e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082e8:	e016      	b.n	8008318 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80082ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d010      	beq.n	8008318 <HAL_UART_IRQHandler+0x628>
 80082f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	da0c      	bge.n	8008318 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 fae8 	bl	80098d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008304:	e008      	b.n	8008318 <HAL_UART_IRQHandler+0x628>
      return;
 8008306:	bf00      	nop
 8008308:	e006      	b.n	8008318 <HAL_UART_IRQHandler+0x628>
    return;
 800830a:	bf00      	nop
 800830c:	e004      	b.n	8008318 <HAL_UART_IRQHandler+0x628>
      return;
 800830e:	bf00      	nop
 8008310:	e002      	b.n	8008318 <HAL_UART_IRQHandler+0x628>
      return;
 8008312:	bf00      	nop
 8008314:	e000      	b.n	8008318 <HAL_UART_IRQHandler+0x628>
    return;
 8008316:	bf00      	nop
  }
}
 8008318:	37e8      	adds	r7, #232	; 0xe8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop

08008320 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008364:	b08c      	sub	sp, #48	; 0x30
 8008366:	af00      	add	r7, sp, #0
 8008368:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	689a      	ldr	r2, [r3, #8]
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	431a      	orrs	r2, r3
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	431a      	orrs	r2, r3
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	4313      	orrs	r3, r2
 8008386:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	4bab      	ldr	r3, [pc, #684]	; (800863c <UART_SetConfig+0x2dc>)
 8008390:	4013      	ands	r3, r2
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	6812      	ldr	r2, [r2, #0]
 8008396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008398:	430b      	orrs	r3, r1
 800839a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	68da      	ldr	r2, [r3, #12]
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4aa0      	ldr	r2, [pc, #640]	; (8008640 <UART_SetConfig+0x2e0>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d004      	beq.n	80083cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083c8:	4313      	orrs	r3, r2
 80083ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80083d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	6812      	ldr	r2, [r2, #0]
 80083de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083e0:	430b      	orrs	r3, r1
 80083e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ea:	f023 010f 	bic.w	r1, r3, #15
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a91      	ldr	r2, [pc, #580]	; (8008644 <UART_SetConfig+0x2e4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d125      	bne.n	8008450 <UART_SetConfig+0xf0>
 8008404:	4b90      	ldr	r3, [pc, #576]	; (8008648 <UART_SetConfig+0x2e8>)
 8008406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	2b03      	cmp	r3, #3
 8008410:	d81a      	bhi.n	8008448 <UART_SetConfig+0xe8>
 8008412:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <UART_SetConfig+0xb8>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	08008429 	.word	0x08008429
 800841c:	08008439 	.word	0x08008439
 8008420:	08008431 	.word	0x08008431
 8008424:	08008441 	.word	0x08008441
 8008428:	2301      	movs	r3, #1
 800842a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800842e:	e0d6      	b.n	80085de <UART_SetConfig+0x27e>
 8008430:	2302      	movs	r3, #2
 8008432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008436:	e0d2      	b.n	80085de <UART_SetConfig+0x27e>
 8008438:	2304      	movs	r3, #4
 800843a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800843e:	e0ce      	b.n	80085de <UART_SetConfig+0x27e>
 8008440:	2308      	movs	r3, #8
 8008442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008446:	e0ca      	b.n	80085de <UART_SetConfig+0x27e>
 8008448:	2310      	movs	r3, #16
 800844a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800844e:	e0c6      	b.n	80085de <UART_SetConfig+0x27e>
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a7d      	ldr	r2, [pc, #500]	; (800864c <UART_SetConfig+0x2ec>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d138      	bne.n	80084cc <UART_SetConfig+0x16c>
 800845a:	4b7b      	ldr	r3, [pc, #492]	; (8008648 <UART_SetConfig+0x2e8>)
 800845c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008460:	f003 030c 	and.w	r3, r3, #12
 8008464:	2b0c      	cmp	r3, #12
 8008466:	d82d      	bhi.n	80084c4 <UART_SetConfig+0x164>
 8008468:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <UART_SetConfig+0x110>)
 800846a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846e:	bf00      	nop
 8008470:	080084a5 	.word	0x080084a5
 8008474:	080084c5 	.word	0x080084c5
 8008478:	080084c5 	.word	0x080084c5
 800847c:	080084c5 	.word	0x080084c5
 8008480:	080084b5 	.word	0x080084b5
 8008484:	080084c5 	.word	0x080084c5
 8008488:	080084c5 	.word	0x080084c5
 800848c:	080084c5 	.word	0x080084c5
 8008490:	080084ad 	.word	0x080084ad
 8008494:	080084c5 	.word	0x080084c5
 8008498:	080084c5 	.word	0x080084c5
 800849c:	080084c5 	.word	0x080084c5
 80084a0:	080084bd 	.word	0x080084bd
 80084a4:	2300      	movs	r3, #0
 80084a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084aa:	e098      	b.n	80085de <UART_SetConfig+0x27e>
 80084ac:	2302      	movs	r3, #2
 80084ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b2:	e094      	b.n	80085de <UART_SetConfig+0x27e>
 80084b4:	2304      	movs	r3, #4
 80084b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ba:	e090      	b.n	80085de <UART_SetConfig+0x27e>
 80084bc:	2308      	movs	r3, #8
 80084be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c2:	e08c      	b.n	80085de <UART_SetConfig+0x27e>
 80084c4:	2310      	movs	r3, #16
 80084c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ca:	e088      	b.n	80085de <UART_SetConfig+0x27e>
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a5f      	ldr	r2, [pc, #380]	; (8008650 <UART_SetConfig+0x2f0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d125      	bne.n	8008522 <UART_SetConfig+0x1c2>
 80084d6:	4b5c      	ldr	r3, [pc, #368]	; (8008648 <UART_SetConfig+0x2e8>)
 80084d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084e0:	2b30      	cmp	r3, #48	; 0x30
 80084e2:	d016      	beq.n	8008512 <UART_SetConfig+0x1b2>
 80084e4:	2b30      	cmp	r3, #48	; 0x30
 80084e6:	d818      	bhi.n	800851a <UART_SetConfig+0x1ba>
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d00a      	beq.n	8008502 <UART_SetConfig+0x1a2>
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d814      	bhi.n	800851a <UART_SetConfig+0x1ba>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <UART_SetConfig+0x19a>
 80084f4:	2b10      	cmp	r3, #16
 80084f6:	d008      	beq.n	800850a <UART_SetConfig+0x1aa>
 80084f8:	e00f      	b.n	800851a <UART_SetConfig+0x1ba>
 80084fa:	2300      	movs	r3, #0
 80084fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008500:	e06d      	b.n	80085de <UART_SetConfig+0x27e>
 8008502:	2302      	movs	r3, #2
 8008504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008508:	e069      	b.n	80085de <UART_SetConfig+0x27e>
 800850a:	2304      	movs	r3, #4
 800850c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008510:	e065      	b.n	80085de <UART_SetConfig+0x27e>
 8008512:	2308      	movs	r3, #8
 8008514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008518:	e061      	b.n	80085de <UART_SetConfig+0x27e>
 800851a:	2310      	movs	r3, #16
 800851c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008520:	e05d      	b.n	80085de <UART_SetConfig+0x27e>
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a4b      	ldr	r2, [pc, #300]	; (8008654 <UART_SetConfig+0x2f4>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d125      	bne.n	8008578 <UART_SetConfig+0x218>
 800852c:	4b46      	ldr	r3, [pc, #280]	; (8008648 <UART_SetConfig+0x2e8>)
 800852e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008532:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008536:	2bc0      	cmp	r3, #192	; 0xc0
 8008538:	d016      	beq.n	8008568 <UART_SetConfig+0x208>
 800853a:	2bc0      	cmp	r3, #192	; 0xc0
 800853c:	d818      	bhi.n	8008570 <UART_SetConfig+0x210>
 800853e:	2b80      	cmp	r3, #128	; 0x80
 8008540:	d00a      	beq.n	8008558 <UART_SetConfig+0x1f8>
 8008542:	2b80      	cmp	r3, #128	; 0x80
 8008544:	d814      	bhi.n	8008570 <UART_SetConfig+0x210>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <UART_SetConfig+0x1f0>
 800854a:	2b40      	cmp	r3, #64	; 0x40
 800854c:	d008      	beq.n	8008560 <UART_SetConfig+0x200>
 800854e:	e00f      	b.n	8008570 <UART_SetConfig+0x210>
 8008550:	2300      	movs	r3, #0
 8008552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008556:	e042      	b.n	80085de <UART_SetConfig+0x27e>
 8008558:	2302      	movs	r3, #2
 800855a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800855e:	e03e      	b.n	80085de <UART_SetConfig+0x27e>
 8008560:	2304      	movs	r3, #4
 8008562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008566:	e03a      	b.n	80085de <UART_SetConfig+0x27e>
 8008568:	2308      	movs	r3, #8
 800856a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800856e:	e036      	b.n	80085de <UART_SetConfig+0x27e>
 8008570:	2310      	movs	r3, #16
 8008572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008576:	e032      	b.n	80085de <UART_SetConfig+0x27e>
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a30      	ldr	r2, [pc, #192]	; (8008640 <UART_SetConfig+0x2e0>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d12a      	bne.n	80085d8 <UART_SetConfig+0x278>
 8008582:	4b31      	ldr	r3, [pc, #196]	; (8008648 <UART_SetConfig+0x2e8>)
 8008584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008588:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800858c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008590:	d01a      	beq.n	80085c8 <UART_SetConfig+0x268>
 8008592:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008596:	d81b      	bhi.n	80085d0 <UART_SetConfig+0x270>
 8008598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800859c:	d00c      	beq.n	80085b8 <UART_SetConfig+0x258>
 800859e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085a2:	d815      	bhi.n	80085d0 <UART_SetConfig+0x270>
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <UART_SetConfig+0x250>
 80085a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ac:	d008      	beq.n	80085c0 <UART_SetConfig+0x260>
 80085ae:	e00f      	b.n	80085d0 <UART_SetConfig+0x270>
 80085b0:	2300      	movs	r3, #0
 80085b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085b6:	e012      	b.n	80085de <UART_SetConfig+0x27e>
 80085b8:	2302      	movs	r3, #2
 80085ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085be:	e00e      	b.n	80085de <UART_SetConfig+0x27e>
 80085c0:	2304      	movs	r3, #4
 80085c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085c6:	e00a      	b.n	80085de <UART_SetConfig+0x27e>
 80085c8:	2308      	movs	r3, #8
 80085ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ce:	e006      	b.n	80085de <UART_SetConfig+0x27e>
 80085d0:	2310      	movs	r3, #16
 80085d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085d6:	e002      	b.n	80085de <UART_SetConfig+0x27e>
 80085d8:	2310      	movs	r3, #16
 80085da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a17      	ldr	r2, [pc, #92]	; (8008640 <UART_SetConfig+0x2e0>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	f040 80a8 	bne.w	800873a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	d834      	bhi.n	800865c <UART_SetConfig+0x2fc>
 80085f2:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <UART_SetConfig+0x298>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	0800861d 	.word	0x0800861d
 80085fc:	0800865d 	.word	0x0800865d
 8008600:	08008625 	.word	0x08008625
 8008604:	0800865d 	.word	0x0800865d
 8008608:	0800862b 	.word	0x0800862b
 800860c:	0800865d 	.word	0x0800865d
 8008610:	0800865d 	.word	0x0800865d
 8008614:	0800865d 	.word	0x0800865d
 8008618:	08008633 	.word	0x08008633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800861c:	f7fd f88a 	bl	8005734 <HAL_RCC_GetPCLK1Freq>
 8008620:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008622:	e021      	b.n	8008668 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008624:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <UART_SetConfig+0x2f8>)
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008628:	e01e      	b.n	8008668 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800862a:	f7fd f815 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 800862e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008630:	e01a      	b.n	8008668 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008638:	e016      	b.n	8008668 <UART_SetConfig+0x308>
 800863a:	bf00      	nop
 800863c:	cfff69f3 	.word	0xcfff69f3
 8008640:	40008000 	.word	0x40008000
 8008644:	40013800 	.word	0x40013800
 8008648:	40021000 	.word	0x40021000
 800864c:	40004400 	.word	0x40004400
 8008650:	40004800 	.word	0x40004800
 8008654:	40004c00 	.word	0x40004c00
 8008658:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800865c:	2300      	movs	r3, #0
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008666:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 812a 	beq.w	80088c4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	4a9e      	ldr	r2, [pc, #632]	; (80088f0 <UART_SetConfig+0x590>)
 8008676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800867a:	461a      	mov	r2, r3
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008682:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	4613      	mov	r3, r2
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	4413      	add	r3, r2
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	429a      	cmp	r2, r3
 8008692:	d305      	bcc.n	80086a0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	429a      	cmp	r2, r3
 800869e:	d903      	bls.n	80086a8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086a6:	e10d      	b.n	80088c4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	2200      	movs	r2, #0
 80086ac:	60bb      	str	r3, [r7, #8]
 80086ae:	60fa      	str	r2, [r7, #12]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	4a8e      	ldr	r2, [pc, #568]	; (80088f0 <UART_SetConfig+0x590>)
 80086b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	2200      	movs	r2, #0
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	607a      	str	r2, [r7, #4]
 80086c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086ca:	f7f8 fb15 	bl	8000cf8 <__aeabi_uldivmod>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	4610      	mov	r0, r2
 80086d4:	4619      	mov	r1, r3
 80086d6:	f04f 0200 	mov.w	r2, #0
 80086da:	f04f 0300 	mov.w	r3, #0
 80086de:	020b      	lsls	r3, r1, #8
 80086e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086e4:	0202      	lsls	r2, r0, #8
 80086e6:	6979      	ldr	r1, [r7, #20]
 80086e8:	6849      	ldr	r1, [r1, #4]
 80086ea:	0849      	lsrs	r1, r1, #1
 80086ec:	2000      	movs	r0, #0
 80086ee:	460c      	mov	r4, r1
 80086f0:	4605      	mov	r5, r0
 80086f2:	eb12 0804 	adds.w	r8, r2, r4
 80086f6:	eb43 0905 	adc.w	r9, r3, r5
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	469a      	mov	sl, r3
 8008702:	4693      	mov	fp, r2
 8008704:	4652      	mov	r2, sl
 8008706:	465b      	mov	r3, fp
 8008708:	4640      	mov	r0, r8
 800870a:	4649      	mov	r1, r9
 800870c:	f7f8 faf4 	bl	8000cf8 <__aeabi_uldivmod>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4613      	mov	r3, r2
 8008716:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800871e:	d308      	bcc.n	8008732 <UART_SetConfig+0x3d2>
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008726:	d204      	bcs.n	8008732 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6a3a      	ldr	r2, [r7, #32]
 800872e:	60da      	str	r2, [r3, #12]
 8008730:	e0c8      	b.n	80088c4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008738:	e0c4      	b.n	80088c4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008742:	d167      	bne.n	8008814 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008744:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008748:	2b08      	cmp	r3, #8
 800874a:	d828      	bhi.n	800879e <UART_SetConfig+0x43e>
 800874c:	a201      	add	r2, pc, #4	; (adr r2, 8008754 <UART_SetConfig+0x3f4>)
 800874e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008752:	bf00      	nop
 8008754:	08008779 	.word	0x08008779
 8008758:	08008781 	.word	0x08008781
 800875c:	08008789 	.word	0x08008789
 8008760:	0800879f 	.word	0x0800879f
 8008764:	0800878f 	.word	0x0800878f
 8008768:	0800879f 	.word	0x0800879f
 800876c:	0800879f 	.word	0x0800879f
 8008770:	0800879f 	.word	0x0800879f
 8008774:	08008797 	.word	0x08008797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008778:	f7fc ffdc 	bl	8005734 <HAL_RCC_GetPCLK1Freq>
 800877c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800877e:	e014      	b.n	80087aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008780:	f7fc ffee 	bl	8005760 <HAL_RCC_GetPCLK2Freq>
 8008784:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008786:	e010      	b.n	80087aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008788:	4b5a      	ldr	r3, [pc, #360]	; (80088f4 <UART_SetConfig+0x594>)
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800878c:	e00d      	b.n	80087aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800878e:	f7fc ff63 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 8008792:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008794:	e009      	b.n	80087aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800879a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800879c:	e005      	b.n	80087aa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80087a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 8089 	beq.w	80088c4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	4a4e      	ldr	r2, [pc, #312]	; (80088f0 <UART_SetConfig+0x590>)
 80087b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087bc:	461a      	mov	r2, r3
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80087c4:	005a      	lsls	r2, r3, #1
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	085b      	lsrs	r3, r3, #1
 80087cc:	441a      	add	r2, r3
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	2b0f      	cmp	r3, #15
 80087dc:	d916      	bls.n	800880c <UART_SetConfig+0x4ac>
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e4:	d212      	bcs.n	800880c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	f023 030f 	bic.w	r3, r3, #15
 80087ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	8bfb      	ldrh	r3, [r7, #30]
 80087fe:	4313      	orrs	r3, r2
 8008800:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	8bfa      	ldrh	r2, [r7, #30]
 8008808:	60da      	str	r2, [r3, #12]
 800880a:	e05b      	b.n	80088c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008812:	e057      	b.n	80088c4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008814:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008818:	2b08      	cmp	r3, #8
 800881a:	d828      	bhi.n	800886e <UART_SetConfig+0x50e>
 800881c:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <UART_SetConfig+0x4c4>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008849 	.word	0x08008849
 8008828:	08008851 	.word	0x08008851
 800882c:	08008859 	.word	0x08008859
 8008830:	0800886f 	.word	0x0800886f
 8008834:	0800885f 	.word	0x0800885f
 8008838:	0800886f 	.word	0x0800886f
 800883c:	0800886f 	.word	0x0800886f
 8008840:	0800886f 	.word	0x0800886f
 8008844:	08008867 	.word	0x08008867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008848:	f7fc ff74 	bl	8005734 <HAL_RCC_GetPCLK1Freq>
 800884c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800884e:	e014      	b.n	800887a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008850:	f7fc ff86 	bl	8005760 <HAL_RCC_GetPCLK2Freq>
 8008854:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008856:	e010      	b.n	800887a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008858:	4b26      	ldr	r3, [pc, #152]	; (80088f4 <UART_SetConfig+0x594>)
 800885a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800885c:	e00d      	b.n	800887a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800885e:	f7fc fefb 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 8008862:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008864:	e009      	b.n	800887a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800886a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800886c:	e005      	b.n	800887a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008878:	bf00      	nop
    }

    if (pclk != 0U)
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	2b00      	cmp	r3, #0
 800887e:	d021      	beq.n	80088c4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	4a1a      	ldr	r2, [pc, #104]	; (80088f0 <UART_SetConfig+0x590>)
 8008886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800888a:	461a      	mov	r2, r3
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	085b      	lsrs	r3, r3, #1
 8008898:	441a      	add	r2, r3
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	2b0f      	cmp	r3, #15
 80088a8:	d909      	bls.n	80088be <UART_SetConfig+0x55e>
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088b0:	d205      	bcs.n	80088be <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60da      	str	r2, [r3, #12]
 80088bc:	e002      	b.n	80088c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	2200      	movs	r2, #0
 80088d8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2200      	movs	r2, #0
 80088de:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088e0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3730      	adds	r7, #48	; 0x30
 80088e8:	46bd      	mov	sp, r7
 80088ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088ee:	bf00      	nop
 80088f0:	0800e5c8 	.word	0x0800e5c8
 80088f4:	00f42400 	.word	0x00f42400

080088f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008926:	f003 0302 	and.w	r3, r3, #2
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00a      	beq.n	8008944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008948:	f003 0304 	and.w	r3, r3, #4
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896a:	f003 0308 	and.w	r3, r3, #8
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00a      	beq.n	8008988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898c:	f003 0310 	and.w	r3, r3, #16
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00a      	beq.n	80089aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ae:	f003 0320 	and.w	r3, r3, #32
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00a      	beq.n	80089cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d01a      	beq.n	8008a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089f6:	d10a      	bne.n	8008a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	605a      	str	r2, [r3, #4]
  }
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af02      	add	r7, sp, #8
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a4c:	f7f9 fd82 	bl	8002554 <HAL_GetTick>
 8008a50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 0308 	and.w	r3, r3, #8
 8008a5c:	2b08      	cmp	r3, #8
 8008a5e:	d10e      	bne.n	8008a7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f82f 	bl	8008ad2 <UART_WaitOnFlagUntilTimeout>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e025      	b.n	8008aca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0304 	and.w	r3, r3, #4
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	d10e      	bne.n	8008aaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f819 	bl	8008ad2 <UART_WaitOnFlagUntilTimeout>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e00f      	b.n	8008aca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b09c      	sub	sp, #112	; 0x70
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	60f8      	str	r0, [r7, #12]
 8008ada:	60b9      	str	r1, [r7, #8]
 8008adc:	603b      	str	r3, [r7, #0]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ae2:	e0a9      	b.n	8008c38 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aea:	f000 80a5 	beq.w	8008c38 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aee:	f7f9 fd31 	bl	8002554 <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d302      	bcc.n	8008b04 <UART_WaitOnFlagUntilTimeout+0x32>
 8008afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d140      	bne.n	8008b86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b18:	667b      	str	r3, [r7, #100]	; 0x64
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b24:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e6      	bne.n	8008b04 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b48:	f023 0301 	bic.w	r3, r3, #1
 8008b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3308      	adds	r3, #8
 8008b54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b56:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e5      	bne.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e069      	b.n	8008c5a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0304 	and.w	r3, r3, #4
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d051      	beq.n	8008c38 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ba2:	d149      	bne.n	8008c38 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8008bce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e6      	bne.n	8008bae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3308      	adds	r3, #8
 8008be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	e853 3f00 	ldrex	r3, [r3]
 8008bee:	613b      	str	r3, [r7, #16]
   return(result);
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f023 0301 	bic.w	r3, r3, #1
 8008bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3308      	adds	r3, #8
 8008bfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c00:	623a      	str	r2, [r7, #32]
 8008c02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	69f9      	ldr	r1, [r7, #28]
 8008c06:	6a3a      	ldr	r2, [r7, #32]
 8008c08:	e841 2300 	strex	r3, r2, [r1]
 8008c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e5      	bne.n	8008be0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2220      	movs	r2, #32
 8008c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e010      	b.n	8008c5a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	69da      	ldr	r2, [r3, #28]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	4013      	ands	r3, r2
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	bf0c      	ite	eq
 8008c48:	2301      	moveq	r3, #1
 8008c4a:	2300      	movne	r3, #0
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	461a      	mov	r2, r3
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	f43f af46 	beq.w	8008ae4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3770      	adds	r7, #112	; 0x70
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
	...

08008c64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b0a3      	sub	sp, #140	; 0x8c
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	88fa      	ldrh	r2, [r7, #6]
 8008c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	88fa      	ldrh	r2, [r7, #6]
 8008c84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c96:	d10e      	bne.n	8008cb6 <UART_Start_Receive_IT+0x52>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d105      	bne.n	8008cac <UART_Start_Receive_IT+0x48>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008ca6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008caa:	e02d      	b.n	8008d08 <UART_Start_Receive_IT+0xa4>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	22ff      	movs	r2, #255	; 0xff
 8008cb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cb4:	e028      	b.n	8008d08 <UART_Start_Receive_IT+0xa4>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10d      	bne.n	8008cda <UART_Start_Receive_IT+0x76>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d104      	bne.n	8008cd0 <UART_Start_Receive_IT+0x6c>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	22ff      	movs	r2, #255	; 0xff
 8008cca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cce:	e01b      	b.n	8008d08 <UART_Start_Receive_IT+0xa4>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	227f      	movs	r2, #127	; 0x7f
 8008cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cd8:	e016      	b.n	8008d08 <UART_Start_Receive_IT+0xa4>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ce2:	d10d      	bne.n	8008d00 <UART_Start_Receive_IT+0x9c>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d104      	bne.n	8008cf6 <UART_Start_Receive_IT+0x92>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	227f      	movs	r2, #127	; 0x7f
 8008cf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cf4:	e008      	b.n	8008d08 <UART_Start_Receive_IT+0xa4>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	223f      	movs	r2, #63	; 0x3f
 8008cfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cfe:	e003      	b.n	8008d08 <UART_Start_Receive_IT+0xa4>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2222      	movs	r2, #34	; 0x22
 8008d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d22:	e853 3f00 	ldrex	r3, [r3]
 8008d26:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d2a:	f043 0301 	orr.w	r3, r3, #1
 8008d2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3308      	adds	r3, #8
 8008d38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d3c:	673a      	str	r2, [r7, #112]	; 0x70
 8008d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d40:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008d42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008d44:	e841 2300 	strex	r3, r2, [r1]
 8008d48:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008d4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1e3      	bne.n	8008d18 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d58:	d153      	bne.n	8008e02 <UART_Start_Receive_IT+0x19e>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d60:	88fa      	ldrh	r2, [r7, #6]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d34d      	bcc.n	8008e02 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d6e:	d107      	bne.n	8008d80 <UART_Start_Receive_IT+0x11c>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d103      	bne.n	8008d80 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4a4b      	ldr	r2, [pc, #300]	; (8008ea8 <UART_Start_Receive_IT+0x244>)
 8008d7c:	671a      	str	r2, [r3, #112]	; 0x70
 8008d7e:	e002      	b.n	8008d86 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4a4a      	ldr	r2, [pc, #296]	; (8008eac <UART_Start_Receive_IT+0x248>)
 8008d84:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d01a      	beq.n	8008dcc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d9e:	e853 3f00 	ldrex	r3, [r3]
 8008da2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008daa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dba:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dc0:	e841 2300 	strex	r3, r2, [r1]
 8008dc4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e4      	bne.n	8008d96 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008de2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3308      	adds	r3, #8
 8008dea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008dec:	64ba      	str	r2, [r7, #72]	; 0x48
 8008dee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e5      	bne.n	8008dcc <UART_Start_Receive_IT+0x168>
 8008e00:	e04a      	b.n	8008e98 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e0a:	d107      	bne.n	8008e1c <UART_Start_Receive_IT+0x1b8>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d103      	bne.n	8008e1c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4a26      	ldr	r2, [pc, #152]	; (8008eb0 <UART_Start_Receive_IT+0x24c>)
 8008e18:	671a      	str	r2, [r3, #112]	; 0x70
 8008e1a:	e002      	b.n	8008e22 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4a25      	ldr	r2, [pc, #148]	; (8008eb4 <UART_Start_Receive_IT+0x250>)
 8008e20:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d019      	beq.n	8008e66 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3a:	e853 3f00 	ldrex	r3, [r3]
 8008e3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008e46:	677b      	str	r3, [r7, #116]	; 0x74
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e50:	637b      	str	r3, [r7, #52]	; 0x34
 8008e52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e6      	bne.n	8008e32 <UART_Start_Receive_IT+0x1ce>
 8008e64:	e018      	b.n	8008e98 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	613b      	str	r3, [r7, #16]
   return(result);
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f043 0320 	orr.w	r3, r3, #32
 8008e7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e84:	623b      	str	r3, [r7, #32]
 8008e86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	69f9      	ldr	r1, [r7, #28]
 8008e8a:	6a3a      	ldr	r2, [r7, #32]
 8008e8c:	e841 2300 	strex	r3, r2, [r1]
 8008e90:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e6      	bne.n	8008e66 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	378c      	adds	r7, #140	; 0x8c
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	080095c1 	.word	0x080095c1
 8008eac:	080092c9 	.word	0x080092c9
 8008eb0:	08009167 	.word	0x08009167
 8008eb4:	08009007 	.word	0x08009007

08008eb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b095      	sub	sp, #84	; 0x54
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ede:	643b      	str	r3, [r7, #64]	; 0x40
 8008ee0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ee4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e6      	bne.n	8008ec0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	e853 3f00 	ldrex	r3, [r3]
 8008f00:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f08:	f023 0301 	bic.w	r3, r3, #1
 8008f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3308      	adds	r3, #8
 8008f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f1e:	e841 2300 	strex	r3, r2, [r1]
 8008f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1e3      	bne.n	8008ef2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d118      	bne.n	8008f64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	e853 3f00 	ldrex	r3, [r3]
 8008f3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	f023 0310 	bic.w	r3, r3, #16
 8008f46:	647b      	str	r3, [r7, #68]	; 0x44
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f50:	61bb      	str	r3, [r7, #24]
 8008f52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f54:	6979      	ldr	r1, [r7, #20]
 8008f56:	69ba      	ldr	r2, [r7, #24]
 8008f58:	e841 2300 	strex	r3, r2, [r1]
 8008f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e6      	bne.n	8008f32 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2220      	movs	r2, #32
 8008f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008f78:	bf00      	nop
 8008f7a:	3754      	adds	r7, #84	; 0x54
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7ff f9c6 	bl	8008334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fa8:	bf00      	nop
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b088      	sub	sp, #32
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fcc:	61fb      	str	r3, [r7, #28]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	61bb      	str	r3, [r7, #24]
 8008fd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	6979      	ldr	r1, [r7, #20]
 8008fdc:	69ba      	ldr	r2, [r7, #24]
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e6      	bne.n	8008fb8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2220      	movs	r2, #32
 8008fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff f991 	bl	8008320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ffe:	bf00      	nop
 8009000:	3720      	adds	r7, #32
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b096      	sub	sp, #88	; 0x58
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009014:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800901e:	2b22      	cmp	r3, #34	; 0x22
 8009020:	f040 8095 	bne.w	800914e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800902e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009032:	b2d9      	uxtb	r1, r3
 8009034:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009038:	b2da      	uxtb	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903e:	400a      	ands	r2, r1
 8009040:	b2d2      	uxtb	r2, r2
 8009042:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009054:	b29b      	uxth	r3, r3
 8009056:	3b01      	subs	r3, #1
 8009058:	b29a      	uxth	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009066:	b29b      	uxth	r3, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	d178      	bne.n	800915e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800907a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009080:	653b      	str	r3, [r7, #80]	; 0x50
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800908a:	647b      	str	r3, [r7, #68]	; 0x44
 800908c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009090:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e6      	bne.n	800906c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3308      	adds	r3, #8
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	e853 3f00 	ldrex	r3, [r3]
 80090ac:	623b      	str	r3, [r7, #32]
   return(result);
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	f023 0301 	bic.w	r3, r3, #1
 80090b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3308      	adds	r3, #8
 80090bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090be:	633a      	str	r2, [r7, #48]	; 0x30
 80090c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e5      	bne.n	800909e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2220      	movs	r2, #32
 80090d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d12e      	bne.n	8009146 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	e853 3f00 	ldrex	r3, [r3]
 80090fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f023 0310 	bic.w	r3, r3, #16
 8009102:	64bb      	str	r3, [r7, #72]	; 0x48
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	461a      	mov	r2, r3
 800910a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800910c:	61fb      	str	r3, [r7, #28]
 800910e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009110:	69b9      	ldr	r1, [r7, #24]
 8009112:	69fa      	ldr	r2, [r7, #28]
 8009114:	e841 2300 	strex	r3, r2, [r1]
 8009118:	617b      	str	r3, [r7, #20]
   return(result);
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e6      	bne.n	80090ee <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	f003 0310 	and.w	r3, r3, #16
 800912a:	2b10      	cmp	r3, #16
 800912c:	d103      	bne.n	8009136 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2210      	movs	r2, #16
 8009134:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff f902 	bl	8008348 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009144:	e00b      	b.n	800915e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7f8 fdf6 	bl	8001d38 <HAL_UART_RxCpltCallback>
}
 800914c:	e007      	b.n	800915e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	699a      	ldr	r2, [r3, #24]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f042 0208 	orr.w	r2, r2, #8
 800915c:	619a      	str	r2, [r3, #24]
}
 800915e:	bf00      	nop
 8009160:	3758      	adds	r7, #88	; 0x58
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b096      	sub	sp, #88	; 0x58
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009174:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800917e:	2b22      	cmp	r3, #34	; 0x22
 8009180:	f040 8095 	bne.w	80092ae <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009192:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009194:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009198:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800919c:	4013      	ands	r3, r2
 800919e:	b29a      	uxth	r2, r3
 80091a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091a2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a8:	1c9a      	adds	r2, r3, #2
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	3b01      	subs	r3, #1
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d178      	bne.n	80092be <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d4:	e853 3f00 	ldrex	r3, [r3]
 80091d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ea:	643b      	str	r3, [r7, #64]	; 0x40
 80091ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091f2:	e841 2300 	strex	r3, r2, [r1]
 80091f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1e6      	bne.n	80091cc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3308      	adds	r3, #8
 8009204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	e853 3f00 	ldrex	r3, [r3]
 800920c:	61fb      	str	r3, [r7, #28]
   return(result);
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	f023 0301 	bic.w	r3, r3, #1
 8009214:	64bb      	str	r3, [r7, #72]	; 0x48
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3308      	adds	r3, #8
 800921c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800921e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009220:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009226:	e841 2300 	strex	r3, r2, [r1]
 800922a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1e5      	bne.n	80091fe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2220      	movs	r2, #32
 8009236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009244:	2b01      	cmp	r3, #1
 8009246:	d12e      	bne.n	80092a6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	e853 3f00 	ldrex	r3, [r3]
 800925a:	60bb      	str	r3, [r7, #8]
   return(result);
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f023 0310 	bic.w	r3, r3, #16
 8009262:	647b      	str	r3, [r7, #68]	; 0x44
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	461a      	mov	r2, r3
 800926a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800926c:	61bb      	str	r3, [r7, #24]
 800926e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009270:	6979      	ldr	r1, [r7, #20]
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	e841 2300 	strex	r3, r2, [r1]
 8009278:	613b      	str	r3, [r7, #16]
   return(result);
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e6      	bne.n	800924e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	f003 0310 	and.w	r3, r3, #16
 800928a:	2b10      	cmp	r3, #16
 800928c:	d103      	bne.n	8009296 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2210      	movs	r2, #16
 8009294:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff f852 	bl	8008348 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092a4:	e00b      	b.n	80092be <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7f8 fd46 	bl	8001d38 <HAL_UART_RxCpltCallback>
}
 80092ac:	e007      	b.n	80092be <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	699a      	ldr	r2, [r3, #24]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f042 0208 	orr.w	r2, r2, #8
 80092bc:	619a      	str	r2, [r3, #24]
}
 80092be:	bf00      	nop
 80092c0:	3758      	adds	r7, #88	; 0x58
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b0a6      	sub	sp, #152	; 0x98
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092d6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092fe:	2b22      	cmp	r3, #34	; 0x22
 8009300:	f040 814f 	bne.w	80095a2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800930a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800930e:	e0f6      	b.n	80094fe <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009316:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800931a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800931e:	b2d9      	uxtb	r1, r3
 8009320:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009324:	b2da      	uxtb	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800932a:	400a      	ands	r2, r1
 800932c:	b2d2      	uxtb	r2, r2
 800932e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009340:	b29b      	uxth	r3, r3
 8009342:	3b01      	subs	r3, #1
 8009344:	b29a      	uxth	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009356:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800935a:	f003 0307 	and.w	r3, r3, #7
 800935e:	2b00      	cmp	r3, #0
 8009360:	d053      	beq.n	800940a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009362:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	d011      	beq.n	8009392 <UART_RxISR_8BIT_FIFOEN+0xca>
 800936e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00b      	beq.n	8009392 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2201      	movs	r2, #1
 8009380:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009388:	f043 0201 	orr.w	r2, r3, #1
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009392:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d011      	beq.n	80093c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800939e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00b      	beq.n	80093c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2202      	movs	r2, #2
 80093b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093b8:	f043 0204 	orr.w	r2, r3, #4
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093c6:	f003 0304 	and.w	r3, r3, #4
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d011      	beq.n	80093f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80093ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00b      	beq.n	80093f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2204      	movs	r2, #4
 80093e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093e8:	f043 0202 	orr.w	r2, r3, #2
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d006      	beq.n	800940a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7fe ff99 	bl	8008334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009410:	b29b      	uxth	r3, r3
 8009412:	2b00      	cmp	r3, #0
 8009414:	d173      	bne.n	80094fe <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009424:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800942a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	461a      	mov	r2, r3
 8009434:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009438:	66bb      	str	r3, [r7, #104]	; 0x68
 800943a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800943e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e4      	bne.n	8009416 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3308      	adds	r3, #8
 8009452:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009456:	e853 3f00 	ldrex	r3, [r3]
 800945a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800945c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800945e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009462:	f023 0301 	bic.w	r3, r3, #1
 8009466:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3308      	adds	r3, #8
 800946e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009470:	657a      	str	r2, [r7, #84]	; 0x54
 8009472:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009474:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009476:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009478:	e841 2300 	strex	r3, r2, [r1]
 800947c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800947e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e3      	bne.n	800944c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2220      	movs	r2, #32
 8009488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009496:	2b01      	cmp	r3, #1
 8009498:	d12e      	bne.n	80094f8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a8:	e853 3f00 	ldrex	r3, [r3]
 80094ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	f023 0310 	bic.w	r3, r3, #16
 80094b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094be:	643b      	str	r3, [r7, #64]	; 0x40
 80094c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094c6:	e841 2300 	strex	r3, r2, [r1]
 80094ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1e6      	bne.n	80094a0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	69db      	ldr	r3, [r3, #28]
 80094d8:	f003 0310 	and.w	r3, r3, #16
 80094dc:	2b10      	cmp	r3, #16
 80094de:	d103      	bne.n	80094e8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2210      	movs	r2, #16
 80094e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7fe ff29 	bl	8008348 <HAL_UARTEx_RxEventCallback>
 80094f6:	e002      	b.n	80094fe <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7f8 fc1d 	bl	8001d38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009502:	2b00      	cmp	r3, #0
 8009504:	d006      	beq.n	8009514 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009506:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800950a:	f003 0320 	and.w	r3, r3, #32
 800950e:	2b00      	cmp	r3, #0
 8009510:	f47f aefe 	bne.w	8009310 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800951a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800951e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009522:	2b00      	cmp	r3, #0
 8009524:	d045      	beq.n	80095b2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800952c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009530:	429a      	cmp	r2, r3
 8009532:	d23e      	bcs.n	80095b2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	3308      	adds	r3, #8
 800953a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	e853 3f00 	ldrex	r3, [r3]
 8009542:	61fb      	str	r3, [r7, #28]
   return(result);
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800954a:	673b      	str	r3, [r7, #112]	; 0x70
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3308      	adds	r3, #8
 8009552:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800955a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800955c:	e841 2300 	strex	r3, r2, [r1]
 8009560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1e5      	bne.n	8009534 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a14      	ldr	r2, [pc, #80]	; (80095bc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800956c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	60bb      	str	r3, [r7, #8]
   return(result);
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	f043 0320 	orr.w	r3, r3, #32
 8009582:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	461a      	mov	r2, r3
 800958a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800958c:	61bb      	str	r3, [r7, #24]
 800958e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009590:	6979      	ldr	r1, [r7, #20]
 8009592:	69ba      	ldr	r2, [r7, #24]
 8009594:	e841 2300 	strex	r3, r2, [r1]
 8009598:	613b      	str	r3, [r7, #16]
   return(result);
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e6      	bne.n	800956e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095a0:	e007      	b.n	80095b2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	699a      	ldr	r2, [r3, #24]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f042 0208 	orr.w	r2, r2, #8
 80095b0:	619a      	str	r2, [r3, #24]
}
 80095b2:	bf00      	nop
 80095b4:	3798      	adds	r7, #152	; 0x98
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	08009007 	.word	0x08009007

080095c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b0a8      	sub	sp, #160	; 0xa0
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095ce:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f6:	2b22      	cmp	r3, #34	; 0x22
 80095f8:	f040 8153 	bne.w	80098a2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009602:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009606:	e0fa      	b.n	80097fe <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009616:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800961a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800961e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009622:	4013      	ands	r3, r2
 8009624:	b29a      	uxth	r2, r3
 8009626:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800962a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009630:	1c9a      	adds	r2, r3, #2
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800963c:	b29b      	uxth	r3, r3
 800963e:	3b01      	subs	r3, #1
 8009640:	b29a      	uxth	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009652:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009656:	f003 0307 	and.w	r3, r3, #7
 800965a:	2b00      	cmp	r3, #0
 800965c:	d053      	beq.n	8009706 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800965e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d011      	beq.n	800968e <UART_RxISR_16BIT_FIFOEN+0xce>
 800966a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800966e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00b      	beq.n	800968e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2201      	movs	r2, #1
 800967c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009684:	f043 0201 	orr.w	r2, r3, #1
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800968e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009692:	f003 0302 	and.w	r3, r3, #2
 8009696:	2b00      	cmp	r3, #0
 8009698:	d011      	beq.n	80096be <UART_RxISR_16BIT_FIFOEN+0xfe>
 800969a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00b      	beq.n	80096be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2202      	movs	r2, #2
 80096ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096b4:	f043 0204 	orr.w	r2, r3, #4
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096c2:	f003 0304 	and.w	r3, r3, #4
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d011      	beq.n	80096ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 80096ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00b      	beq.n	80096ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2204      	movs	r2, #4
 80096dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e4:	f043 0202 	orr.w	r2, r3, #2
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d006      	beq.n	8009706 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7fe fe1b 	bl	8008334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800970c:	b29b      	uxth	r3, r3
 800970e:	2b00      	cmp	r3, #0
 8009710:	d175      	bne.n	80097fe <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800971a:	e853 3f00 	ldrex	r3, [r3]
 800971e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009722:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009734:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009736:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009738:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800973a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800973c:	e841 2300 	strex	r3, r2, [r1]
 8009740:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e4      	bne.n	8009712 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3308      	adds	r3, #8
 800974e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009752:	e853 3f00 	ldrex	r3, [r3]
 8009756:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800975a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800975e:	f023 0301 	bic.w	r3, r3, #1
 8009762:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	3308      	adds	r3, #8
 800976c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009770:	65ba      	str	r2, [r7, #88]	; 0x58
 8009772:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009774:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009778:	e841 2300 	strex	r3, r2, [r1]
 800977c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800977e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1e1      	bne.n	8009748 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2220      	movs	r2, #32
 8009788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009796:	2b01      	cmp	r3, #1
 8009798:	d12e      	bne.n	80097f8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a8:	e853 3f00 	ldrex	r3, [r3]
 80097ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b0:	f023 0310 	bic.w	r3, r3, #16
 80097b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097be:	647b      	str	r3, [r7, #68]	; 0x44
 80097c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097c6:	e841 2300 	strex	r3, r2, [r1]
 80097ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1e6      	bne.n	80097a0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	69db      	ldr	r3, [r3, #28]
 80097d8:	f003 0310 	and.w	r3, r3, #16
 80097dc:	2b10      	cmp	r3, #16
 80097de:	d103      	bne.n	80097e8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2210      	movs	r2, #16
 80097e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7fe fda9 	bl	8008348 <HAL_UARTEx_RxEventCallback>
 80097f6:	e002      	b.n	80097fe <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7f8 fa9d 	bl	8001d38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009802:	2b00      	cmp	r3, #0
 8009804:	d006      	beq.n	8009814 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009806:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b00      	cmp	r3, #0
 8009810:	f47f aefa 	bne.w	8009608 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800981a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800981e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009822:	2b00      	cmp	r3, #0
 8009824:	d045      	beq.n	80098b2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800982c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009830:	429a      	cmp	r2, r3
 8009832:	d23e      	bcs.n	80098b2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3308      	adds	r3, #8
 800983a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	e853 3f00 	ldrex	r3, [r3]
 8009842:	623b      	str	r3, [r7, #32]
   return(result);
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800984a:	677b      	str	r3, [r7, #116]	; 0x74
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	3308      	adds	r3, #8
 8009852:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009854:	633a      	str	r2, [r7, #48]	; 0x30
 8009856:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009858:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800985a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800985c:	e841 2300 	strex	r3, r2, [r1]
 8009860:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1e5      	bne.n	8009834 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a14      	ldr	r2, [pc, #80]	; (80098bc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800986c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	e853 3f00 	ldrex	r3, [r3]
 800987a:	60fb      	str	r3, [r7, #12]
   return(result);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f043 0320 	orr.w	r3, r3, #32
 8009882:	673b      	str	r3, [r7, #112]	; 0x70
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	461a      	mov	r2, r3
 800988a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800988c:	61fb      	str	r3, [r7, #28]
 800988e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009890:	69b9      	ldr	r1, [r7, #24]
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	e841 2300 	strex	r3, r2, [r1]
 8009898:	617b      	str	r3, [r7, #20]
   return(result);
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e6      	bne.n	800986e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098a0:	e007      	b.n	80098b2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	699a      	ldr	r2, [r3, #24]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f042 0208 	orr.w	r2, r2, #8
 80098b0:	619a      	str	r2, [r3, #24]
}
 80098b2:	bf00      	nop
 80098b4:	37a0      	adds	r7, #160	; 0xa0
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	08009167 	.word	0x08009167

080098c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800990a:	2b01      	cmp	r3, #1
 800990c:	d101      	bne.n	8009912 <HAL_UARTEx_DisableFifoMode+0x16>
 800990e:	2302      	movs	r3, #2
 8009910:	e027      	b.n	8009962 <HAL_UARTEx_DisableFifoMode+0x66>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2224      	movs	r2, #36	; 0x24
 800991e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f022 0201 	bic.w	r2, r2, #1
 8009938:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2220      	movs	r2, #32
 8009954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800997e:	2b01      	cmp	r3, #1
 8009980:	d101      	bne.n	8009986 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009982:	2302      	movs	r3, #2
 8009984:	e02d      	b.n	80099e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2224      	movs	r2, #36	; 0x24
 8009992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f022 0201 	bic.w	r2, r2, #1
 80099ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f850 	bl	8009a68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b084      	sub	sp, #16
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d101      	bne.n	8009a02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80099fe:	2302      	movs	r3, #2
 8009a00:	e02d      	b.n	8009a5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2224      	movs	r2, #36	; 0x24
 8009a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f022 0201 	bic.w	r2, r2, #1
 8009a28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f812 	bl	8009a68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
	...

08009a68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d108      	bne.n	8009a8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a88:	e031      	b.n	8009aee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a8a:	2308      	movs	r3, #8
 8009a8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a8e:	2308      	movs	r3, #8
 8009a90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	0e5b      	lsrs	r3, r3, #25
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	f003 0307 	and.w	r3, r3, #7
 8009aa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	0f5b      	lsrs	r3, r3, #29
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	f003 0307 	and.w	r3, r3, #7
 8009ab0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ab2:	7bbb      	ldrb	r3, [r7, #14]
 8009ab4:	7b3a      	ldrb	r2, [r7, #12]
 8009ab6:	4911      	ldr	r1, [pc, #68]	; (8009afc <UARTEx_SetNbDataToProcess+0x94>)
 8009ab8:	5c8a      	ldrb	r2, [r1, r2]
 8009aba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009abe:	7b3a      	ldrb	r2, [r7, #12]
 8009ac0:	490f      	ldr	r1, [pc, #60]	; (8009b00 <UARTEx_SetNbDataToProcess+0x98>)
 8009ac2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ac4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	7b7a      	ldrb	r2, [r7, #13]
 8009ad4:	4909      	ldr	r1, [pc, #36]	; (8009afc <UARTEx_SetNbDataToProcess+0x94>)
 8009ad6:	5c8a      	ldrb	r2, [r1, r2]
 8009ad8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009adc:	7b7a      	ldrb	r2, [r7, #13]
 8009ade:	4908      	ldr	r1, [pc, #32]	; (8009b00 <UARTEx_SetNbDataToProcess+0x98>)
 8009ae0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ae2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009aee:	bf00      	nop
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	0800e5e0 	.word	0x0800e5e0
 8009b00:	0800e5e8 	.word	0x0800e5e8

08009b04 <atoi>:
 8009b04:	220a      	movs	r2, #10
 8009b06:	2100      	movs	r1, #0
 8009b08:	f001 bdda 	b.w	800b6c0 <strtol>

08009b0c <__errno>:
 8009b0c:	4b01      	ldr	r3, [pc, #4]	; (8009b14 <__errno+0x8>)
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	200001ac 	.word	0x200001ac

08009b18 <__libc_init_array>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	4d0d      	ldr	r5, [pc, #52]	; (8009b50 <__libc_init_array+0x38>)
 8009b1c:	4c0d      	ldr	r4, [pc, #52]	; (8009b54 <__libc_init_array+0x3c>)
 8009b1e:	1b64      	subs	r4, r4, r5
 8009b20:	10a4      	asrs	r4, r4, #2
 8009b22:	2600      	movs	r6, #0
 8009b24:	42a6      	cmp	r6, r4
 8009b26:	d109      	bne.n	8009b3c <__libc_init_array+0x24>
 8009b28:	4d0b      	ldr	r5, [pc, #44]	; (8009b58 <__libc_init_array+0x40>)
 8009b2a:	4c0c      	ldr	r4, [pc, #48]	; (8009b5c <__libc_init_array+0x44>)
 8009b2c:	f004 fcf8 	bl	800e520 <_init>
 8009b30:	1b64      	subs	r4, r4, r5
 8009b32:	10a4      	asrs	r4, r4, #2
 8009b34:	2600      	movs	r6, #0
 8009b36:	42a6      	cmp	r6, r4
 8009b38:	d105      	bne.n	8009b46 <__libc_init_array+0x2e>
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}
 8009b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b40:	4798      	blx	r3
 8009b42:	3601      	adds	r6, #1
 8009b44:	e7ee      	b.n	8009b24 <__libc_init_array+0xc>
 8009b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b4a:	4798      	blx	r3
 8009b4c:	3601      	adds	r6, #1
 8009b4e:	e7f2      	b.n	8009b36 <__libc_init_array+0x1e>
 8009b50:	0800eaf8 	.word	0x0800eaf8
 8009b54:	0800eaf8 	.word	0x0800eaf8
 8009b58:	0800eaf8 	.word	0x0800eaf8
 8009b5c:	0800eafc 	.word	0x0800eafc

08009b60 <memset>:
 8009b60:	4402      	add	r2, r0
 8009b62:	4603      	mov	r3, r0
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d100      	bne.n	8009b6a <memset+0xa>
 8009b68:	4770      	bx	lr
 8009b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b6e:	e7f9      	b.n	8009b64 <memset+0x4>

08009b70 <__cvt>:
 8009b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b74:	ec55 4b10 	vmov	r4, r5, d0
 8009b78:	2d00      	cmp	r5, #0
 8009b7a:	460e      	mov	r6, r1
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	462b      	mov	r3, r5
 8009b80:	bfbb      	ittet	lt
 8009b82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b86:	461d      	movlt	r5, r3
 8009b88:	2300      	movge	r3, #0
 8009b8a:	232d      	movlt	r3, #45	; 0x2d
 8009b8c:	700b      	strb	r3, [r1, #0]
 8009b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b94:	4691      	mov	r9, r2
 8009b96:	f023 0820 	bic.w	r8, r3, #32
 8009b9a:	bfbc      	itt	lt
 8009b9c:	4622      	movlt	r2, r4
 8009b9e:	4614      	movlt	r4, r2
 8009ba0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ba4:	d005      	beq.n	8009bb2 <__cvt+0x42>
 8009ba6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009baa:	d100      	bne.n	8009bae <__cvt+0x3e>
 8009bac:	3601      	adds	r6, #1
 8009bae:	2102      	movs	r1, #2
 8009bb0:	e000      	b.n	8009bb4 <__cvt+0x44>
 8009bb2:	2103      	movs	r1, #3
 8009bb4:	ab03      	add	r3, sp, #12
 8009bb6:	9301      	str	r3, [sp, #4]
 8009bb8:	ab02      	add	r3, sp, #8
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	ec45 4b10 	vmov	d0, r4, r5
 8009bc0:	4653      	mov	r3, sl
 8009bc2:	4632      	mov	r2, r6
 8009bc4:	f001 fe30 	bl	800b828 <_dtoa_r>
 8009bc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009bcc:	4607      	mov	r7, r0
 8009bce:	d102      	bne.n	8009bd6 <__cvt+0x66>
 8009bd0:	f019 0f01 	tst.w	r9, #1
 8009bd4:	d022      	beq.n	8009c1c <__cvt+0xac>
 8009bd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bda:	eb07 0906 	add.w	r9, r7, r6
 8009bde:	d110      	bne.n	8009c02 <__cvt+0x92>
 8009be0:	783b      	ldrb	r3, [r7, #0]
 8009be2:	2b30      	cmp	r3, #48	; 0x30
 8009be4:	d10a      	bne.n	8009bfc <__cvt+0x8c>
 8009be6:	2200      	movs	r2, #0
 8009be8:	2300      	movs	r3, #0
 8009bea:	4620      	mov	r0, r4
 8009bec:	4629      	mov	r1, r5
 8009bee:	f7f6 ffa3 	bl	8000b38 <__aeabi_dcmpeq>
 8009bf2:	b918      	cbnz	r0, 8009bfc <__cvt+0x8c>
 8009bf4:	f1c6 0601 	rsb	r6, r6, #1
 8009bf8:	f8ca 6000 	str.w	r6, [sl]
 8009bfc:	f8da 3000 	ldr.w	r3, [sl]
 8009c00:	4499      	add	r9, r3
 8009c02:	2200      	movs	r2, #0
 8009c04:	2300      	movs	r3, #0
 8009c06:	4620      	mov	r0, r4
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7f6 ff95 	bl	8000b38 <__aeabi_dcmpeq>
 8009c0e:	b108      	cbz	r0, 8009c14 <__cvt+0xa4>
 8009c10:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c14:	2230      	movs	r2, #48	; 0x30
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	454b      	cmp	r3, r9
 8009c1a:	d307      	bcc.n	8009c2c <__cvt+0xbc>
 8009c1c:	9b03      	ldr	r3, [sp, #12]
 8009c1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c20:	1bdb      	subs	r3, r3, r7
 8009c22:	4638      	mov	r0, r7
 8009c24:	6013      	str	r3, [r2, #0]
 8009c26:	b004      	add	sp, #16
 8009c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c2c:	1c59      	adds	r1, r3, #1
 8009c2e:	9103      	str	r1, [sp, #12]
 8009c30:	701a      	strb	r2, [r3, #0]
 8009c32:	e7f0      	b.n	8009c16 <__cvt+0xa6>

08009c34 <__exponent>:
 8009c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c36:	4603      	mov	r3, r0
 8009c38:	2900      	cmp	r1, #0
 8009c3a:	bfb8      	it	lt
 8009c3c:	4249      	neglt	r1, r1
 8009c3e:	f803 2b02 	strb.w	r2, [r3], #2
 8009c42:	bfb4      	ite	lt
 8009c44:	222d      	movlt	r2, #45	; 0x2d
 8009c46:	222b      	movge	r2, #43	; 0x2b
 8009c48:	2909      	cmp	r1, #9
 8009c4a:	7042      	strb	r2, [r0, #1]
 8009c4c:	dd2a      	ble.n	8009ca4 <__exponent+0x70>
 8009c4e:	f10d 0407 	add.w	r4, sp, #7
 8009c52:	46a4      	mov	ip, r4
 8009c54:	270a      	movs	r7, #10
 8009c56:	46a6      	mov	lr, r4
 8009c58:	460a      	mov	r2, r1
 8009c5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c5e:	fb07 1516 	mls	r5, r7, r6, r1
 8009c62:	3530      	adds	r5, #48	; 0x30
 8009c64:	2a63      	cmp	r2, #99	; 0x63
 8009c66:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c6e:	4631      	mov	r1, r6
 8009c70:	dcf1      	bgt.n	8009c56 <__exponent+0x22>
 8009c72:	3130      	adds	r1, #48	; 0x30
 8009c74:	f1ae 0502 	sub.w	r5, lr, #2
 8009c78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c7c:	1c44      	adds	r4, r0, #1
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4561      	cmp	r1, ip
 8009c82:	d30a      	bcc.n	8009c9a <__exponent+0x66>
 8009c84:	f10d 0209 	add.w	r2, sp, #9
 8009c88:	eba2 020e 	sub.w	r2, r2, lr
 8009c8c:	4565      	cmp	r5, ip
 8009c8e:	bf88      	it	hi
 8009c90:	2200      	movhi	r2, #0
 8009c92:	4413      	add	r3, r2
 8009c94:	1a18      	subs	r0, r3, r0
 8009c96:	b003      	add	sp, #12
 8009c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ca2:	e7ed      	b.n	8009c80 <__exponent+0x4c>
 8009ca4:	2330      	movs	r3, #48	; 0x30
 8009ca6:	3130      	adds	r1, #48	; 0x30
 8009ca8:	7083      	strb	r3, [r0, #2]
 8009caa:	70c1      	strb	r1, [r0, #3]
 8009cac:	1d03      	adds	r3, r0, #4
 8009cae:	e7f1      	b.n	8009c94 <__exponent+0x60>

08009cb0 <_printf_float>:
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	ed2d 8b02 	vpush	{d8}
 8009cb8:	b08d      	sub	sp, #52	; 0x34
 8009cba:	460c      	mov	r4, r1
 8009cbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009cc0:	4616      	mov	r6, r2
 8009cc2:	461f      	mov	r7, r3
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	f002 ff1f 	bl	800cb08 <_localeconv_r>
 8009cca:	f8d0 a000 	ldr.w	sl, [r0]
 8009cce:	4650      	mov	r0, sl
 8009cd0:	f7f6 fab0 	bl	8000234 <strlen>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	9305      	str	r3, [sp, #20]
 8009cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009ce0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ce4:	3307      	adds	r3, #7
 8009ce6:	f023 0307 	bic.w	r3, r3, #7
 8009cea:	f103 0208 	add.w	r2, r3, #8
 8009cee:	f8c8 2000 	str.w	r2, [r8]
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009cfa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009cfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d02:	9307      	str	r3, [sp, #28]
 8009d04:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d08:	ee08 0a10 	vmov	s16, r0
 8009d0c:	4b9f      	ldr	r3, [pc, #636]	; (8009f8c <_printf_float+0x2dc>)
 8009d0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d12:	f04f 32ff 	mov.w	r2, #4294967295
 8009d16:	f7f6 ff41 	bl	8000b9c <__aeabi_dcmpun>
 8009d1a:	bb88      	cbnz	r0, 8009d80 <_printf_float+0xd0>
 8009d1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d20:	4b9a      	ldr	r3, [pc, #616]	; (8009f8c <_printf_float+0x2dc>)
 8009d22:	f04f 32ff 	mov.w	r2, #4294967295
 8009d26:	f7f6 ff1b 	bl	8000b60 <__aeabi_dcmple>
 8009d2a:	bb48      	cbnz	r0, 8009d80 <_printf_float+0xd0>
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2300      	movs	r3, #0
 8009d30:	4640      	mov	r0, r8
 8009d32:	4649      	mov	r1, r9
 8009d34:	f7f6 ff0a 	bl	8000b4c <__aeabi_dcmplt>
 8009d38:	b110      	cbz	r0, 8009d40 <_printf_float+0x90>
 8009d3a:	232d      	movs	r3, #45	; 0x2d
 8009d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d40:	4b93      	ldr	r3, [pc, #588]	; (8009f90 <_printf_float+0x2e0>)
 8009d42:	4894      	ldr	r0, [pc, #592]	; (8009f94 <_printf_float+0x2e4>)
 8009d44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d48:	bf94      	ite	ls
 8009d4a:	4698      	movls	r8, r3
 8009d4c:	4680      	movhi	r8, r0
 8009d4e:	2303      	movs	r3, #3
 8009d50:	6123      	str	r3, [r4, #16]
 8009d52:	9b05      	ldr	r3, [sp, #20]
 8009d54:	f023 0204 	bic.w	r2, r3, #4
 8009d58:	6022      	str	r2, [r4, #0]
 8009d5a:	f04f 0900 	mov.w	r9, #0
 8009d5e:	9700      	str	r7, [sp, #0]
 8009d60:	4633      	mov	r3, r6
 8009d62:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d64:	4621      	mov	r1, r4
 8009d66:	4628      	mov	r0, r5
 8009d68:	f000 f9d8 	bl	800a11c <_printf_common>
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	f040 8090 	bne.w	8009e92 <_printf_float+0x1e2>
 8009d72:	f04f 30ff 	mov.w	r0, #4294967295
 8009d76:	b00d      	add	sp, #52	; 0x34
 8009d78:	ecbd 8b02 	vpop	{d8}
 8009d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d80:	4642      	mov	r2, r8
 8009d82:	464b      	mov	r3, r9
 8009d84:	4640      	mov	r0, r8
 8009d86:	4649      	mov	r1, r9
 8009d88:	f7f6 ff08 	bl	8000b9c <__aeabi_dcmpun>
 8009d8c:	b140      	cbz	r0, 8009da0 <_printf_float+0xf0>
 8009d8e:	464b      	mov	r3, r9
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	bfbc      	itt	lt
 8009d94:	232d      	movlt	r3, #45	; 0x2d
 8009d96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d9a:	487f      	ldr	r0, [pc, #508]	; (8009f98 <_printf_float+0x2e8>)
 8009d9c:	4b7f      	ldr	r3, [pc, #508]	; (8009f9c <_printf_float+0x2ec>)
 8009d9e:	e7d1      	b.n	8009d44 <_printf_float+0x94>
 8009da0:	6863      	ldr	r3, [r4, #4]
 8009da2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009da6:	9206      	str	r2, [sp, #24]
 8009da8:	1c5a      	adds	r2, r3, #1
 8009daa:	d13f      	bne.n	8009e2c <_printf_float+0x17c>
 8009dac:	2306      	movs	r3, #6
 8009dae:	6063      	str	r3, [r4, #4]
 8009db0:	9b05      	ldr	r3, [sp, #20]
 8009db2:	6861      	ldr	r1, [r4, #4]
 8009db4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009db8:	2300      	movs	r3, #0
 8009dba:	9303      	str	r3, [sp, #12]
 8009dbc:	ab0a      	add	r3, sp, #40	; 0x28
 8009dbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009dc2:	ab09      	add	r3, sp, #36	; 0x24
 8009dc4:	ec49 8b10 	vmov	d0, r8, r9
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	6022      	str	r2, [r4, #0]
 8009dcc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f7ff fecd 	bl	8009b70 <__cvt>
 8009dd6:	9b06      	ldr	r3, [sp, #24]
 8009dd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dda:	2b47      	cmp	r3, #71	; 0x47
 8009ddc:	4680      	mov	r8, r0
 8009dde:	d108      	bne.n	8009df2 <_printf_float+0x142>
 8009de0:	1cc8      	adds	r0, r1, #3
 8009de2:	db02      	blt.n	8009dea <_printf_float+0x13a>
 8009de4:	6863      	ldr	r3, [r4, #4]
 8009de6:	4299      	cmp	r1, r3
 8009de8:	dd41      	ble.n	8009e6e <_printf_float+0x1be>
 8009dea:	f1ab 0b02 	sub.w	fp, fp, #2
 8009dee:	fa5f fb8b 	uxtb.w	fp, fp
 8009df2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009df6:	d820      	bhi.n	8009e3a <_printf_float+0x18a>
 8009df8:	3901      	subs	r1, #1
 8009dfa:	465a      	mov	r2, fp
 8009dfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e00:	9109      	str	r1, [sp, #36]	; 0x24
 8009e02:	f7ff ff17 	bl	8009c34 <__exponent>
 8009e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e08:	1813      	adds	r3, r2, r0
 8009e0a:	2a01      	cmp	r2, #1
 8009e0c:	4681      	mov	r9, r0
 8009e0e:	6123      	str	r3, [r4, #16]
 8009e10:	dc02      	bgt.n	8009e18 <_printf_float+0x168>
 8009e12:	6822      	ldr	r2, [r4, #0]
 8009e14:	07d2      	lsls	r2, r2, #31
 8009e16:	d501      	bpl.n	8009e1c <_printf_float+0x16c>
 8009e18:	3301      	adds	r3, #1
 8009e1a:	6123      	str	r3, [r4, #16]
 8009e1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d09c      	beq.n	8009d5e <_printf_float+0xae>
 8009e24:	232d      	movs	r3, #45	; 0x2d
 8009e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e2a:	e798      	b.n	8009d5e <_printf_float+0xae>
 8009e2c:	9a06      	ldr	r2, [sp, #24]
 8009e2e:	2a47      	cmp	r2, #71	; 0x47
 8009e30:	d1be      	bne.n	8009db0 <_printf_float+0x100>
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1bc      	bne.n	8009db0 <_printf_float+0x100>
 8009e36:	2301      	movs	r3, #1
 8009e38:	e7b9      	b.n	8009dae <_printf_float+0xfe>
 8009e3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e3e:	d118      	bne.n	8009e72 <_printf_float+0x1c2>
 8009e40:	2900      	cmp	r1, #0
 8009e42:	6863      	ldr	r3, [r4, #4]
 8009e44:	dd0b      	ble.n	8009e5e <_printf_float+0x1ae>
 8009e46:	6121      	str	r1, [r4, #16]
 8009e48:	b913      	cbnz	r3, 8009e50 <_printf_float+0x1a0>
 8009e4a:	6822      	ldr	r2, [r4, #0]
 8009e4c:	07d0      	lsls	r0, r2, #31
 8009e4e:	d502      	bpl.n	8009e56 <_printf_float+0x1a6>
 8009e50:	3301      	adds	r3, #1
 8009e52:	440b      	add	r3, r1
 8009e54:	6123      	str	r3, [r4, #16]
 8009e56:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e58:	f04f 0900 	mov.w	r9, #0
 8009e5c:	e7de      	b.n	8009e1c <_printf_float+0x16c>
 8009e5e:	b913      	cbnz	r3, 8009e66 <_printf_float+0x1b6>
 8009e60:	6822      	ldr	r2, [r4, #0]
 8009e62:	07d2      	lsls	r2, r2, #31
 8009e64:	d501      	bpl.n	8009e6a <_printf_float+0x1ba>
 8009e66:	3302      	adds	r3, #2
 8009e68:	e7f4      	b.n	8009e54 <_printf_float+0x1a4>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e7f2      	b.n	8009e54 <_printf_float+0x1a4>
 8009e6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e74:	4299      	cmp	r1, r3
 8009e76:	db05      	blt.n	8009e84 <_printf_float+0x1d4>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	6121      	str	r1, [r4, #16]
 8009e7c:	07d8      	lsls	r0, r3, #31
 8009e7e:	d5ea      	bpl.n	8009e56 <_printf_float+0x1a6>
 8009e80:	1c4b      	adds	r3, r1, #1
 8009e82:	e7e7      	b.n	8009e54 <_printf_float+0x1a4>
 8009e84:	2900      	cmp	r1, #0
 8009e86:	bfd4      	ite	le
 8009e88:	f1c1 0202 	rsble	r2, r1, #2
 8009e8c:	2201      	movgt	r2, #1
 8009e8e:	4413      	add	r3, r2
 8009e90:	e7e0      	b.n	8009e54 <_printf_float+0x1a4>
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	055a      	lsls	r2, r3, #21
 8009e96:	d407      	bmi.n	8009ea8 <_printf_float+0x1f8>
 8009e98:	6923      	ldr	r3, [r4, #16]
 8009e9a:	4642      	mov	r2, r8
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	47b8      	blx	r7
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	d12c      	bne.n	8009f00 <_printf_float+0x250>
 8009ea6:	e764      	b.n	8009d72 <_printf_float+0xc2>
 8009ea8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009eac:	f240 80e0 	bls.w	800a070 <_printf_float+0x3c0>
 8009eb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	f7f6 fe3e 	bl	8000b38 <__aeabi_dcmpeq>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d034      	beq.n	8009f2a <_printf_float+0x27a>
 8009ec0:	4a37      	ldr	r2, [pc, #220]	; (8009fa0 <_printf_float+0x2f0>)
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	47b8      	blx	r7
 8009eca:	3001      	adds	r0, #1
 8009ecc:	f43f af51 	beq.w	8009d72 <_printf_float+0xc2>
 8009ed0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	db02      	blt.n	8009ede <_printf_float+0x22e>
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	07d8      	lsls	r0, r3, #31
 8009edc:	d510      	bpl.n	8009f00 <_printf_float+0x250>
 8009ede:	ee18 3a10 	vmov	r3, s16
 8009ee2:	4652      	mov	r2, sl
 8009ee4:	4631      	mov	r1, r6
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	47b8      	blx	r7
 8009eea:	3001      	adds	r0, #1
 8009eec:	f43f af41 	beq.w	8009d72 <_printf_float+0xc2>
 8009ef0:	f04f 0800 	mov.w	r8, #0
 8009ef4:	f104 091a 	add.w	r9, r4, #26
 8009ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009efa:	3b01      	subs	r3, #1
 8009efc:	4543      	cmp	r3, r8
 8009efe:	dc09      	bgt.n	8009f14 <_printf_float+0x264>
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	079b      	lsls	r3, r3, #30
 8009f04:	f100 8105 	bmi.w	800a112 <_printf_float+0x462>
 8009f08:	68e0      	ldr	r0, [r4, #12]
 8009f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f0c:	4298      	cmp	r0, r3
 8009f0e:	bfb8      	it	lt
 8009f10:	4618      	movlt	r0, r3
 8009f12:	e730      	b.n	8009d76 <_printf_float+0xc6>
 8009f14:	2301      	movs	r3, #1
 8009f16:	464a      	mov	r2, r9
 8009f18:	4631      	mov	r1, r6
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	47b8      	blx	r7
 8009f1e:	3001      	adds	r0, #1
 8009f20:	f43f af27 	beq.w	8009d72 <_printf_float+0xc2>
 8009f24:	f108 0801 	add.w	r8, r8, #1
 8009f28:	e7e6      	b.n	8009ef8 <_printf_float+0x248>
 8009f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	dc39      	bgt.n	8009fa4 <_printf_float+0x2f4>
 8009f30:	4a1b      	ldr	r2, [pc, #108]	; (8009fa0 <_printf_float+0x2f0>)
 8009f32:	2301      	movs	r3, #1
 8009f34:	4631      	mov	r1, r6
 8009f36:	4628      	mov	r0, r5
 8009f38:	47b8      	blx	r7
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	f43f af19 	beq.w	8009d72 <_printf_float+0xc2>
 8009f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f44:	4313      	orrs	r3, r2
 8009f46:	d102      	bne.n	8009f4e <_printf_float+0x29e>
 8009f48:	6823      	ldr	r3, [r4, #0]
 8009f4a:	07d9      	lsls	r1, r3, #31
 8009f4c:	d5d8      	bpl.n	8009f00 <_printf_float+0x250>
 8009f4e:	ee18 3a10 	vmov	r3, s16
 8009f52:	4652      	mov	r2, sl
 8009f54:	4631      	mov	r1, r6
 8009f56:	4628      	mov	r0, r5
 8009f58:	47b8      	blx	r7
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	f43f af09 	beq.w	8009d72 <_printf_float+0xc2>
 8009f60:	f04f 0900 	mov.w	r9, #0
 8009f64:	f104 0a1a 	add.w	sl, r4, #26
 8009f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f6a:	425b      	negs	r3, r3
 8009f6c:	454b      	cmp	r3, r9
 8009f6e:	dc01      	bgt.n	8009f74 <_printf_float+0x2c4>
 8009f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f72:	e792      	b.n	8009e9a <_printf_float+0x1ea>
 8009f74:	2301      	movs	r3, #1
 8009f76:	4652      	mov	r2, sl
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	47b8      	blx	r7
 8009f7e:	3001      	adds	r0, #1
 8009f80:	f43f aef7 	beq.w	8009d72 <_printf_float+0xc2>
 8009f84:	f109 0901 	add.w	r9, r9, #1
 8009f88:	e7ee      	b.n	8009f68 <_printf_float+0x2b8>
 8009f8a:	bf00      	nop
 8009f8c:	7fefffff 	.word	0x7fefffff
 8009f90:	0800e5f4 	.word	0x0800e5f4
 8009f94:	0800e5f8 	.word	0x0800e5f8
 8009f98:	0800e600 	.word	0x0800e600
 8009f9c:	0800e5fc 	.word	0x0800e5fc
 8009fa0:	0800e604 	.word	0x0800e604
 8009fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	bfa8      	it	ge
 8009fac:	461a      	movge	r2, r3
 8009fae:	2a00      	cmp	r2, #0
 8009fb0:	4691      	mov	r9, r2
 8009fb2:	dc37      	bgt.n	800a024 <_printf_float+0x374>
 8009fb4:	f04f 0b00 	mov.w	fp, #0
 8009fb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fbc:	f104 021a 	add.w	r2, r4, #26
 8009fc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fc2:	9305      	str	r3, [sp, #20]
 8009fc4:	eba3 0309 	sub.w	r3, r3, r9
 8009fc8:	455b      	cmp	r3, fp
 8009fca:	dc33      	bgt.n	800a034 <_printf_float+0x384>
 8009fcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	db3b      	blt.n	800a04c <_printf_float+0x39c>
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	07da      	lsls	r2, r3, #31
 8009fd8:	d438      	bmi.n	800a04c <_printf_float+0x39c>
 8009fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fdc:	9a05      	ldr	r2, [sp, #20]
 8009fde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fe0:	1a9a      	subs	r2, r3, r2
 8009fe2:	eba3 0901 	sub.w	r9, r3, r1
 8009fe6:	4591      	cmp	r9, r2
 8009fe8:	bfa8      	it	ge
 8009fea:	4691      	movge	r9, r2
 8009fec:	f1b9 0f00 	cmp.w	r9, #0
 8009ff0:	dc35      	bgt.n	800a05e <_printf_float+0x3ae>
 8009ff2:	f04f 0800 	mov.w	r8, #0
 8009ff6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ffa:	f104 0a1a 	add.w	sl, r4, #26
 8009ffe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a002:	1a9b      	subs	r3, r3, r2
 800a004:	eba3 0309 	sub.w	r3, r3, r9
 800a008:	4543      	cmp	r3, r8
 800a00a:	f77f af79 	ble.w	8009f00 <_printf_float+0x250>
 800a00e:	2301      	movs	r3, #1
 800a010:	4652      	mov	r2, sl
 800a012:	4631      	mov	r1, r6
 800a014:	4628      	mov	r0, r5
 800a016:	47b8      	blx	r7
 800a018:	3001      	adds	r0, #1
 800a01a:	f43f aeaa 	beq.w	8009d72 <_printf_float+0xc2>
 800a01e:	f108 0801 	add.w	r8, r8, #1
 800a022:	e7ec      	b.n	8009ffe <_printf_float+0x34e>
 800a024:	4613      	mov	r3, r2
 800a026:	4631      	mov	r1, r6
 800a028:	4642      	mov	r2, r8
 800a02a:	4628      	mov	r0, r5
 800a02c:	47b8      	blx	r7
 800a02e:	3001      	adds	r0, #1
 800a030:	d1c0      	bne.n	8009fb4 <_printf_float+0x304>
 800a032:	e69e      	b.n	8009d72 <_printf_float+0xc2>
 800a034:	2301      	movs	r3, #1
 800a036:	4631      	mov	r1, r6
 800a038:	4628      	mov	r0, r5
 800a03a:	9205      	str	r2, [sp, #20]
 800a03c:	47b8      	blx	r7
 800a03e:	3001      	adds	r0, #1
 800a040:	f43f ae97 	beq.w	8009d72 <_printf_float+0xc2>
 800a044:	9a05      	ldr	r2, [sp, #20]
 800a046:	f10b 0b01 	add.w	fp, fp, #1
 800a04a:	e7b9      	b.n	8009fc0 <_printf_float+0x310>
 800a04c:	ee18 3a10 	vmov	r3, s16
 800a050:	4652      	mov	r2, sl
 800a052:	4631      	mov	r1, r6
 800a054:	4628      	mov	r0, r5
 800a056:	47b8      	blx	r7
 800a058:	3001      	adds	r0, #1
 800a05a:	d1be      	bne.n	8009fda <_printf_float+0x32a>
 800a05c:	e689      	b.n	8009d72 <_printf_float+0xc2>
 800a05e:	9a05      	ldr	r2, [sp, #20]
 800a060:	464b      	mov	r3, r9
 800a062:	4442      	add	r2, r8
 800a064:	4631      	mov	r1, r6
 800a066:	4628      	mov	r0, r5
 800a068:	47b8      	blx	r7
 800a06a:	3001      	adds	r0, #1
 800a06c:	d1c1      	bne.n	8009ff2 <_printf_float+0x342>
 800a06e:	e680      	b.n	8009d72 <_printf_float+0xc2>
 800a070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a072:	2a01      	cmp	r2, #1
 800a074:	dc01      	bgt.n	800a07a <_printf_float+0x3ca>
 800a076:	07db      	lsls	r3, r3, #31
 800a078:	d538      	bpl.n	800a0ec <_printf_float+0x43c>
 800a07a:	2301      	movs	r3, #1
 800a07c:	4642      	mov	r2, r8
 800a07e:	4631      	mov	r1, r6
 800a080:	4628      	mov	r0, r5
 800a082:	47b8      	blx	r7
 800a084:	3001      	adds	r0, #1
 800a086:	f43f ae74 	beq.w	8009d72 <_printf_float+0xc2>
 800a08a:	ee18 3a10 	vmov	r3, s16
 800a08e:	4652      	mov	r2, sl
 800a090:	4631      	mov	r1, r6
 800a092:	4628      	mov	r0, r5
 800a094:	47b8      	blx	r7
 800a096:	3001      	adds	r0, #1
 800a098:	f43f ae6b 	beq.w	8009d72 <_printf_float+0xc2>
 800a09c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f7f6 fd48 	bl	8000b38 <__aeabi_dcmpeq>
 800a0a8:	b9d8      	cbnz	r0, 800a0e2 <_printf_float+0x432>
 800a0aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ac:	f108 0201 	add.w	r2, r8, #1
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	47b8      	blx	r7
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	d10e      	bne.n	800a0da <_printf_float+0x42a>
 800a0bc:	e659      	b.n	8009d72 <_printf_float+0xc2>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	4652      	mov	r2, sl
 800a0c2:	4631      	mov	r1, r6
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	47b8      	blx	r7
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	f43f ae52 	beq.w	8009d72 <_printf_float+0xc2>
 800a0ce:	f108 0801 	add.w	r8, r8, #1
 800a0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	4543      	cmp	r3, r8
 800a0d8:	dcf1      	bgt.n	800a0be <_printf_float+0x40e>
 800a0da:	464b      	mov	r3, r9
 800a0dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0e0:	e6dc      	b.n	8009e9c <_printf_float+0x1ec>
 800a0e2:	f04f 0800 	mov.w	r8, #0
 800a0e6:	f104 0a1a 	add.w	sl, r4, #26
 800a0ea:	e7f2      	b.n	800a0d2 <_printf_float+0x422>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	4642      	mov	r2, r8
 800a0f0:	e7df      	b.n	800a0b2 <_printf_float+0x402>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	464a      	mov	r2, r9
 800a0f6:	4631      	mov	r1, r6
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	47b8      	blx	r7
 800a0fc:	3001      	adds	r0, #1
 800a0fe:	f43f ae38 	beq.w	8009d72 <_printf_float+0xc2>
 800a102:	f108 0801 	add.w	r8, r8, #1
 800a106:	68e3      	ldr	r3, [r4, #12]
 800a108:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a10a:	1a5b      	subs	r3, r3, r1
 800a10c:	4543      	cmp	r3, r8
 800a10e:	dcf0      	bgt.n	800a0f2 <_printf_float+0x442>
 800a110:	e6fa      	b.n	8009f08 <_printf_float+0x258>
 800a112:	f04f 0800 	mov.w	r8, #0
 800a116:	f104 0919 	add.w	r9, r4, #25
 800a11a:	e7f4      	b.n	800a106 <_printf_float+0x456>

0800a11c <_printf_common>:
 800a11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a120:	4616      	mov	r6, r2
 800a122:	4699      	mov	r9, r3
 800a124:	688a      	ldr	r2, [r1, #8]
 800a126:	690b      	ldr	r3, [r1, #16]
 800a128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a12c:	4293      	cmp	r3, r2
 800a12e:	bfb8      	it	lt
 800a130:	4613      	movlt	r3, r2
 800a132:	6033      	str	r3, [r6, #0]
 800a134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a138:	4607      	mov	r7, r0
 800a13a:	460c      	mov	r4, r1
 800a13c:	b10a      	cbz	r2, 800a142 <_printf_common+0x26>
 800a13e:	3301      	adds	r3, #1
 800a140:	6033      	str	r3, [r6, #0]
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	0699      	lsls	r1, r3, #26
 800a146:	bf42      	ittt	mi
 800a148:	6833      	ldrmi	r3, [r6, #0]
 800a14a:	3302      	addmi	r3, #2
 800a14c:	6033      	strmi	r3, [r6, #0]
 800a14e:	6825      	ldr	r5, [r4, #0]
 800a150:	f015 0506 	ands.w	r5, r5, #6
 800a154:	d106      	bne.n	800a164 <_printf_common+0x48>
 800a156:	f104 0a19 	add.w	sl, r4, #25
 800a15a:	68e3      	ldr	r3, [r4, #12]
 800a15c:	6832      	ldr	r2, [r6, #0]
 800a15e:	1a9b      	subs	r3, r3, r2
 800a160:	42ab      	cmp	r3, r5
 800a162:	dc26      	bgt.n	800a1b2 <_printf_common+0x96>
 800a164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a168:	1e13      	subs	r3, r2, #0
 800a16a:	6822      	ldr	r2, [r4, #0]
 800a16c:	bf18      	it	ne
 800a16e:	2301      	movne	r3, #1
 800a170:	0692      	lsls	r2, r2, #26
 800a172:	d42b      	bmi.n	800a1cc <_printf_common+0xb0>
 800a174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a178:	4649      	mov	r1, r9
 800a17a:	4638      	mov	r0, r7
 800a17c:	47c0      	blx	r8
 800a17e:	3001      	adds	r0, #1
 800a180:	d01e      	beq.n	800a1c0 <_printf_common+0xa4>
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	68e5      	ldr	r5, [r4, #12]
 800a186:	6832      	ldr	r2, [r6, #0]
 800a188:	f003 0306 	and.w	r3, r3, #6
 800a18c:	2b04      	cmp	r3, #4
 800a18e:	bf08      	it	eq
 800a190:	1aad      	subeq	r5, r5, r2
 800a192:	68a3      	ldr	r3, [r4, #8]
 800a194:	6922      	ldr	r2, [r4, #16]
 800a196:	bf0c      	ite	eq
 800a198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a19c:	2500      	movne	r5, #0
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	bfc4      	itt	gt
 800a1a2:	1a9b      	subgt	r3, r3, r2
 800a1a4:	18ed      	addgt	r5, r5, r3
 800a1a6:	2600      	movs	r6, #0
 800a1a8:	341a      	adds	r4, #26
 800a1aa:	42b5      	cmp	r5, r6
 800a1ac:	d11a      	bne.n	800a1e4 <_printf_common+0xc8>
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	e008      	b.n	800a1c4 <_printf_common+0xa8>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	4652      	mov	r2, sl
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	47c0      	blx	r8
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d103      	bne.n	800a1c8 <_printf_common+0xac>
 800a1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c8:	3501      	adds	r5, #1
 800a1ca:	e7c6      	b.n	800a15a <_printf_common+0x3e>
 800a1cc:	18e1      	adds	r1, r4, r3
 800a1ce:	1c5a      	adds	r2, r3, #1
 800a1d0:	2030      	movs	r0, #48	; 0x30
 800a1d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1d6:	4422      	add	r2, r4
 800a1d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1e0:	3302      	adds	r3, #2
 800a1e2:	e7c7      	b.n	800a174 <_printf_common+0x58>
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	4649      	mov	r1, r9
 800a1ea:	4638      	mov	r0, r7
 800a1ec:	47c0      	blx	r8
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	d0e6      	beq.n	800a1c0 <_printf_common+0xa4>
 800a1f2:	3601      	adds	r6, #1
 800a1f4:	e7d9      	b.n	800a1aa <_printf_common+0x8e>
	...

0800a1f8 <_printf_i>:
 800a1f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1fc:	7e0f      	ldrb	r7, [r1, #24]
 800a1fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a200:	2f78      	cmp	r7, #120	; 0x78
 800a202:	4691      	mov	r9, r2
 800a204:	4680      	mov	r8, r0
 800a206:	460c      	mov	r4, r1
 800a208:	469a      	mov	sl, r3
 800a20a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a20e:	d807      	bhi.n	800a220 <_printf_i+0x28>
 800a210:	2f62      	cmp	r7, #98	; 0x62
 800a212:	d80a      	bhi.n	800a22a <_printf_i+0x32>
 800a214:	2f00      	cmp	r7, #0
 800a216:	f000 80d8 	beq.w	800a3ca <_printf_i+0x1d2>
 800a21a:	2f58      	cmp	r7, #88	; 0x58
 800a21c:	f000 80a3 	beq.w	800a366 <_printf_i+0x16e>
 800a220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a228:	e03a      	b.n	800a2a0 <_printf_i+0xa8>
 800a22a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a22e:	2b15      	cmp	r3, #21
 800a230:	d8f6      	bhi.n	800a220 <_printf_i+0x28>
 800a232:	a101      	add	r1, pc, #4	; (adr r1, 800a238 <_printf_i+0x40>)
 800a234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a238:	0800a291 	.word	0x0800a291
 800a23c:	0800a2a5 	.word	0x0800a2a5
 800a240:	0800a221 	.word	0x0800a221
 800a244:	0800a221 	.word	0x0800a221
 800a248:	0800a221 	.word	0x0800a221
 800a24c:	0800a221 	.word	0x0800a221
 800a250:	0800a2a5 	.word	0x0800a2a5
 800a254:	0800a221 	.word	0x0800a221
 800a258:	0800a221 	.word	0x0800a221
 800a25c:	0800a221 	.word	0x0800a221
 800a260:	0800a221 	.word	0x0800a221
 800a264:	0800a3b1 	.word	0x0800a3b1
 800a268:	0800a2d5 	.word	0x0800a2d5
 800a26c:	0800a393 	.word	0x0800a393
 800a270:	0800a221 	.word	0x0800a221
 800a274:	0800a221 	.word	0x0800a221
 800a278:	0800a3d3 	.word	0x0800a3d3
 800a27c:	0800a221 	.word	0x0800a221
 800a280:	0800a2d5 	.word	0x0800a2d5
 800a284:	0800a221 	.word	0x0800a221
 800a288:	0800a221 	.word	0x0800a221
 800a28c:	0800a39b 	.word	0x0800a39b
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	1d1a      	adds	r2, r3, #4
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	602a      	str	r2, [r5, #0]
 800a298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a29c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e0a3      	b.n	800a3ec <_printf_i+0x1f4>
 800a2a4:	6820      	ldr	r0, [r4, #0]
 800a2a6:	6829      	ldr	r1, [r5, #0]
 800a2a8:	0606      	lsls	r6, r0, #24
 800a2aa:	f101 0304 	add.w	r3, r1, #4
 800a2ae:	d50a      	bpl.n	800a2c6 <_printf_i+0xce>
 800a2b0:	680e      	ldr	r6, [r1, #0]
 800a2b2:	602b      	str	r3, [r5, #0]
 800a2b4:	2e00      	cmp	r6, #0
 800a2b6:	da03      	bge.n	800a2c0 <_printf_i+0xc8>
 800a2b8:	232d      	movs	r3, #45	; 0x2d
 800a2ba:	4276      	negs	r6, r6
 800a2bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2c0:	485e      	ldr	r0, [pc, #376]	; (800a43c <_printf_i+0x244>)
 800a2c2:	230a      	movs	r3, #10
 800a2c4:	e019      	b.n	800a2fa <_printf_i+0x102>
 800a2c6:	680e      	ldr	r6, [r1, #0]
 800a2c8:	602b      	str	r3, [r5, #0]
 800a2ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2ce:	bf18      	it	ne
 800a2d0:	b236      	sxthne	r6, r6
 800a2d2:	e7ef      	b.n	800a2b4 <_printf_i+0xbc>
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	6820      	ldr	r0, [r4, #0]
 800a2d8:	1d19      	adds	r1, r3, #4
 800a2da:	6029      	str	r1, [r5, #0]
 800a2dc:	0601      	lsls	r1, r0, #24
 800a2de:	d501      	bpl.n	800a2e4 <_printf_i+0xec>
 800a2e0:	681e      	ldr	r6, [r3, #0]
 800a2e2:	e002      	b.n	800a2ea <_printf_i+0xf2>
 800a2e4:	0646      	lsls	r6, r0, #25
 800a2e6:	d5fb      	bpl.n	800a2e0 <_printf_i+0xe8>
 800a2e8:	881e      	ldrh	r6, [r3, #0]
 800a2ea:	4854      	ldr	r0, [pc, #336]	; (800a43c <_printf_i+0x244>)
 800a2ec:	2f6f      	cmp	r7, #111	; 0x6f
 800a2ee:	bf0c      	ite	eq
 800a2f0:	2308      	moveq	r3, #8
 800a2f2:	230a      	movne	r3, #10
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2fa:	6865      	ldr	r5, [r4, #4]
 800a2fc:	60a5      	str	r5, [r4, #8]
 800a2fe:	2d00      	cmp	r5, #0
 800a300:	bfa2      	ittt	ge
 800a302:	6821      	ldrge	r1, [r4, #0]
 800a304:	f021 0104 	bicge.w	r1, r1, #4
 800a308:	6021      	strge	r1, [r4, #0]
 800a30a:	b90e      	cbnz	r6, 800a310 <_printf_i+0x118>
 800a30c:	2d00      	cmp	r5, #0
 800a30e:	d04d      	beq.n	800a3ac <_printf_i+0x1b4>
 800a310:	4615      	mov	r5, r2
 800a312:	fbb6 f1f3 	udiv	r1, r6, r3
 800a316:	fb03 6711 	mls	r7, r3, r1, r6
 800a31a:	5dc7      	ldrb	r7, [r0, r7]
 800a31c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a320:	4637      	mov	r7, r6
 800a322:	42bb      	cmp	r3, r7
 800a324:	460e      	mov	r6, r1
 800a326:	d9f4      	bls.n	800a312 <_printf_i+0x11a>
 800a328:	2b08      	cmp	r3, #8
 800a32a:	d10b      	bne.n	800a344 <_printf_i+0x14c>
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	07de      	lsls	r6, r3, #31
 800a330:	d508      	bpl.n	800a344 <_printf_i+0x14c>
 800a332:	6923      	ldr	r3, [r4, #16]
 800a334:	6861      	ldr	r1, [r4, #4]
 800a336:	4299      	cmp	r1, r3
 800a338:	bfde      	ittt	le
 800a33a:	2330      	movle	r3, #48	; 0x30
 800a33c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a340:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a344:	1b52      	subs	r2, r2, r5
 800a346:	6122      	str	r2, [r4, #16]
 800a348:	f8cd a000 	str.w	sl, [sp]
 800a34c:	464b      	mov	r3, r9
 800a34e:	aa03      	add	r2, sp, #12
 800a350:	4621      	mov	r1, r4
 800a352:	4640      	mov	r0, r8
 800a354:	f7ff fee2 	bl	800a11c <_printf_common>
 800a358:	3001      	adds	r0, #1
 800a35a:	d14c      	bne.n	800a3f6 <_printf_i+0x1fe>
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
 800a360:	b004      	add	sp, #16
 800a362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a366:	4835      	ldr	r0, [pc, #212]	; (800a43c <_printf_i+0x244>)
 800a368:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a36c:	6829      	ldr	r1, [r5, #0]
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	f851 6b04 	ldr.w	r6, [r1], #4
 800a374:	6029      	str	r1, [r5, #0]
 800a376:	061d      	lsls	r5, r3, #24
 800a378:	d514      	bpl.n	800a3a4 <_printf_i+0x1ac>
 800a37a:	07df      	lsls	r7, r3, #31
 800a37c:	bf44      	itt	mi
 800a37e:	f043 0320 	orrmi.w	r3, r3, #32
 800a382:	6023      	strmi	r3, [r4, #0]
 800a384:	b91e      	cbnz	r6, 800a38e <_printf_i+0x196>
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	f023 0320 	bic.w	r3, r3, #32
 800a38c:	6023      	str	r3, [r4, #0]
 800a38e:	2310      	movs	r3, #16
 800a390:	e7b0      	b.n	800a2f4 <_printf_i+0xfc>
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	f043 0320 	orr.w	r3, r3, #32
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	2378      	movs	r3, #120	; 0x78
 800a39c:	4828      	ldr	r0, [pc, #160]	; (800a440 <_printf_i+0x248>)
 800a39e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3a2:	e7e3      	b.n	800a36c <_printf_i+0x174>
 800a3a4:	0659      	lsls	r1, r3, #25
 800a3a6:	bf48      	it	mi
 800a3a8:	b2b6      	uxthmi	r6, r6
 800a3aa:	e7e6      	b.n	800a37a <_printf_i+0x182>
 800a3ac:	4615      	mov	r5, r2
 800a3ae:	e7bb      	b.n	800a328 <_printf_i+0x130>
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	6826      	ldr	r6, [r4, #0]
 800a3b4:	6961      	ldr	r1, [r4, #20]
 800a3b6:	1d18      	adds	r0, r3, #4
 800a3b8:	6028      	str	r0, [r5, #0]
 800a3ba:	0635      	lsls	r5, r6, #24
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	d501      	bpl.n	800a3c4 <_printf_i+0x1cc>
 800a3c0:	6019      	str	r1, [r3, #0]
 800a3c2:	e002      	b.n	800a3ca <_printf_i+0x1d2>
 800a3c4:	0670      	lsls	r0, r6, #25
 800a3c6:	d5fb      	bpl.n	800a3c0 <_printf_i+0x1c8>
 800a3c8:	8019      	strh	r1, [r3, #0]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	6123      	str	r3, [r4, #16]
 800a3ce:	4615      	mov	r5, r2
 800a3d0:	e7ba      	b.n	800a348 <_printf_i+0x150>
 800a3d2:	682b      	ldr	r3, [r5, #0]
 800a3d4:	1d1a      	adds	r2, r3, #4
 800a3d6:	602a      	str	r2, [r5, #0]
 800a3d8:	681d      	ldr	r5, [r3, #0]
 800a3da:	6862      	ldr	r2, [r4, #4]
 800a3dc:	2100      	movs	r1, #0
 800a3de:	4628      	mov	r0, r5
 800a3e0:	f7f5 ff36 	bl	8000250 <memchr>
 800a3e4:	b108      	cbz	r0, 800a3ea <_printf_i+0x1f2>
 800a3e6:	1b40      	subs	r0, r0, r5
 800a3e8:	6060      	str	r0, [r4, #4]
 800a3ea:	6863      	ldr	r3, [r4, #4]
 800a3ec:	6123      	str	r3, [r4, #16]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3f4:	e7a8      	b.n	800a348 <_printf_i+0x150>
 800a3f6:	6923      	ldr	r3, [r4, #16]
 800a3f8:	462a      	mov	r2, r5
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	47d0      	blx	sl
 800a400:	3001      	adds	r0, #1
 800a402:	d0ab      	beq.n	800a35c <_printf_i+0x164>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	079b      	lsls	r3, r3, #30
 800a408:	d413      	bmi.n	800a432 <_printf_i+0x23a>
 800a40a:	68e0      	ldr	r0, [r4, #12]
 800a40c:	9b03      	ldr	r3, [sp, #12]
 800a40e:	4298      	cmp	r0, r3
 800a410:	bfb8      	it	lt
 800a412:	4618      	movlt	r0, r3
 800a414:	e7a4      	b.n	800a360 <_printf_i+0x168>
 800a416:	2301      	movs	r3, #1
 800a418:	4632      	mov	r2, r6
 800a41a:	4649      	mov	r1, r9
 800a41c:	4640      	mov	r0, r8
 800a41e:	47d0      	blx	sl
 800a420:	3001      	adds	r0, #1
 800a422:	d09b      	beq.n	800a35c <_printf_i+0x164>
 800a424:	3501      	adds	r5, #1
 800a426:	68e3      	ldr	r3, [r4, #12]
 800a428:	9903      	ldr	r1, [sp, #12]
 800a42a:	1a5b      	subs	r3, r3, r1
 800a42c:	42ab      	cmp	r3, r5
 800a42e:	dcf2      	bgt.n	800a416 <_printf_i+0x21e>
 800a430:	e7eb      	b.n	800a40a <_printf_i+0x212>
 800a432:	2500      	movs	r5, #0
 800a434:	f104 0619 	add.w	r6, r4, #25
 800a438:	e7f5      	b.n	800a426 <_printf_i+0x22e>
 800a43a:	bf00      	nop
 800a43c:	0800e606 	.word	0x0800e606
 800a440:	0800e617 	.word	0x0800e617

0800a444 <_scanf_float>:
 800a444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a448:	b087      	sub	sp, #28
 800a44a:	4617      	mov	r7, r2
 800a44c:	9303      	str	r3, [sp, #12]
 800a44e:	688b      	ldr	r3, [r1, #8]
 800a450:	1e5a      	subs	r2, r3, #1
 800a452:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a456:	bf83      	ittte	hi
 800a458:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a45c:	195b      	addhi	r3, r3, r5
 800a45e:	9302      	strhi	r3, [sp, #8]
 800a460:	2300      	movls	r3, #0
 800a462:	bf86      	itte	hi
 800a464:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a468:	608b      	strhi	r3, [r1, #8]
 800a46a:	9302      	strls	r3, [sp, #8]
 800a46c:	680b      	ldr	r3, [r1, #0]
 800a46e:	468b      	mov	fp, r1
 800a470:	2500      	movs	r5, #0
 800a472:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a476:	f84b 3b1c 	str.w	r3, [fp], #28
 800a47a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a47e:	4680      	mov	r8, r0
 800a480:	460c      	mov	r4, r1
 800a482:	465e      	mov	r6, fp
 800a484:	46aa      	mov	sl, r5
 800a486:	46a9      	mov	r9, r5
 800a488:	9501      	str	r5, [sp, #4]
 800a48a:	68a2      	ldr	r2, [r4, #8]
 800a48c:	b152      	cbz	r2, 800a4a4 <_scanf_float+0x60>
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	2b4e      	cmp	r3, #78	; 0x4e
 800a494:	d864      	bhi.n	800a560 <_scanf_float+0x11c>
 800a496:	2b40      	cmp	r3, #64	; 0x40
 800a498:	d83c      	bhi.n	800a514 <_scanf_float+0xd0>
 800a49a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a49e:	b2c8      	uxtb	r0, r1
 800a4a0:	280e      	cmp	r0, #14
 800a4a2:	d93a      	bls.n	800a51a <_scanf_float+0xd6>
 800a4a4:	f1b9 0f00 	cmp.w	r9, #0
 800a4a8:	d003      	beq.n	800a4b2 <_scanf_float+0x6e>
 800a4aa:	6823      	ldr	r3, [r4, #0]
 800a4ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4b6:	f1ba 0f01 	cmp.w	sl, #1
 800a4ba:	f200 8113 	bhi.w	800a6e4 <_scanf_float+0x2a0>
 800a4be:	455e      	cmp	r6, fp
 800a4c0:	f200 8105 	bhi.w	800a6ce <_scanf_float+0x28a>
 800a4c4:	2501      	movs	r5, #1
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	b007      	add	sp, #28
 800a4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a4d2:	2a0d      	cmp	r2, #13
 800a4d4:	d8e6      	bhi.n	800a4a4 <_scanf_float+0x60>
 800a4d6:	a101      	add	r1, pc, #4	; (adr r1, 800a4dc <_scanf_float+0x98>)
 800a4d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a4dc:	0800a61b 	.word	0x0800a61b
 800a4e0:	0800a4a5 	.word	0x0800a4a5
 800a4e4:	0800a4a5 	.word	0x0800a4a5
 800a4e8:	0800a4a5 	.word	0x0800a4a5
 800a4ec:	0800a67b 	.word	0x0800a67b
 800a4f0:	0800a653 	.word	0x0800a653
 800a4f4:	0800a4a5 	.word	0x0800a4a5
 800a4f8:	0800a4a5 	.word	0x0800a4a5
 800a4fc:	0800a629 	.word	0x0800a629
 800a500:	0800a4a5 	.word	0x0800a4a5
 800a504:	0800a4a5 	.word	0x0800a4a5
 800a508:	0800a4a5 	.word	0x0800a4a5
 800a50c:	0800a4a5 	.word	0x0800a4a5
 800a510:	0800a5e1 	.word	0x0800a5e1
 800a514:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a518:	e7db      	b.n	800a4d2 <_scanf_float+0x8e>
 800a51a:	290e      	cmp	r1, #14
 800a51c:	d8c2      	bhi.n	800a4a4 <_scanf_float+0x60>
 800a51e:	a001      	add	r0, pc, #4	; (adr r0, 800a524 <_scanf_float+0xe0>)
 800a520:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a524:	0800a5d3 	.word	0x0800a5d3
 800a528:	0800a4a5 	.word	0x0800a4a5
 800a52c:	0800a5d3 	.word	0x0800a5d3
 800a530:	0800a667 	.word	0x0800a667
 800a534:	0800a4a5 	.word	0x0800a4a5
 800a538:	0800a581 	.word	0x0800a581
 800a53c:	0800a5bd 	.word	0x0800a5bd
 800a540:	0800a5bd 	.word	0x0800a5bd
 800a544:	0800a5bd 	.word	0x0800a5bd
 800a548:	0800a5bd 	.word	0x0800a5bd
 800a54c:	0800a5bd 	.word	0x0800a5bd
 800a550:	0800a5bd 	.word	0x0800a5bd
 800a554:	0800a5bd 	.word	0x0800a5bd
 800a558:	0800a5bd 	.word	0x0800a5bd
 800a55c:	0800a5bd 	.word	0x0800a5bd
 800a560:	2b6e      	cmp	r3, #110	; 0x6e
 800a562:	d809      	bhi.n	800a578 <_scanf_float+0x134>
 800a564:	2b60      	cmp	r3, #96	; 0x60
 800a566:	d8b2      	bhi.n	800a4ce <_scanf_float+0x8a>
 800a568:	2b54      	cmp	r3, #84	; 0x54
 800a56a:	d077      	beq.n	800a65c <_scanf_float+0x218>
 800a56c:	2b59      	cmp	r3, #89	; 0x59
 800a56e:	d199      	bne.n	800a4a4 <_scanf_float+0x60>
 800a570:	2d07      	cmp	r5, #7
 800a572:	d197      	bne.n	800a4a4 <_scanf_float+0x60>
 800a574:	2508      	movs	r5, #8
 800a576:	e029      	b.n	800a5cc <_scanf_float+0x188>
 800a578:	2b74      	cmp	r3, #116	; 0x74
 800a57a:	d06f      	beq.n	800a65c <_scanf_float+0x218>
 800a57c:	2b79      	cmp	r3, #121	; 0x79
 800a57e:	e7f6      	b.n	800a56e <_scanf_float+0x12a>
 800a580:	6821      	ldr	r1, [r4, #0]
 800a582:	05c8      	lsls	r0, r1, #23
 800a584:	d51a      	bpl.n	800a5bc <_scanf_float+0x178>
 800a586:	9b02      	ldr	r3, [sp, #8]
 800a588:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a58c:	6021      	str	r1, [r4, #0]
 800a58e:	f109 0901 	add.w	r9, r9, #1
 800a592:	b11b      	cbz	r3, 800a59c <_scanf_float+0x158>
 800a594:	3b01      	subs	r3, #1
 800a596:	3201      	adds	r2, #1
 800a598:	9302      	str	r3, [sp, #8]
 800a59a:	60a2      	str	r2, [r4, #8]
 800a59c:	68a3      	ldr	r3, [r4, #8]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	60a3      	str	r3, [r4, #8]
 800a5a2:	6923      	ldr	r3, [r4, #16]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	6123      	str	r3, [r4, #16]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	607b      	str	r3, [r7, #4]
 800a5b0:	f340 8084 	ble.w	800a6bc <_scanf_float+0x278>
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	603b      	str	r3, [r7, #0]
 800a5ba:	e766      	b.n	800a48a <_scanf_float+0x46>
 800a5bc:	eb1a 0f05 	cmn.w	sl, r5
 800a5c0:	f47f af70 	bne.w	800a4a4 <_scanf_float+0x60>
 800a5c4:	6822      	ldr	r2, [r4, #0]
 800a5c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a5ca:	6022      	str	r2, [r4, #0]
 800a5cc:	f806 3b01 	strb.w	r3, [r6], #1
 800a5d0:	e7e4      	b.n	800a59c <_scanf_float+0x158>
 800a5d2:	6822      	ldr	r2, [r4, #0]
 800a5d4:	0610      	lsls	r0, r2, #24
 800a5d6:	f57f af65 	bpl.w	800a4a4 <_scanf_float+0x60>
 800a5da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5de:	e7f4      	b.n	800a5ca <_scanf_float+0x186>
 800a5e0:	f1ba 0f00 	cmp.w	sl, #0
 800a5e4:	d10e      	bne.n	800a604 <_scanf_float+0x1c0>
 800a5e6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ea:	d10e      	bne.n	800a60a <_scanf_float+0x1c6>
 800a5ec:	6822      	ldr	r2, [r4, #0]
 800a5ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a5f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a5f6:	d108      	bne.n	800a60a <_scanf_float+0x1c6>
 800a5f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a5fc:	6022      	str	r2, [r4, #0]
 800a5fe:	f04f 0a01 	mov.w	sl, #1
 800a602:	e7e3      	b.n	800a5cc <_scanf_float+0x188>
 800a604:	f1ba 0f02 	cmp.w	sl, #2
 800a608:	d055      	beq.n	800a6b6 <_scanf_float+0x272>
 800a60a:	2d01      	cmp	r5, #1
 800a60c:	d002      	beq.n	800a614 <_scanf_float+0x1d0>
 800a60e:	2d04      	cmp	r5, #4
 800a610:	f47f af48 	bne.w	800a4a4 <_scanf_float+0x60>
 800a614:	3501      	adds	r5, #1
 800a616:	b2ed      	uxtb	r5, r5
 800a618:	e7d8      	b.n	800a5cc <_scanf_float+0x188>
 800a61a:	f1ba 0f01 	cmp.w	sl, #1
 800a61e:	f47f af41 	bne.w	800a4a4 <_scanf_float+0x60>
 800a622:	f04f 0a02 	mov.w	sl, #2
 800a626:	e7d1      	b.n	800a5cc <_scanf_float+0x188>
 800a628:	b97d      	cbnz	r5, 800a64a <_scanf_float+0x206>
 800a62a:	f1b9 0f00 	cmp.w	r9, #0
 800a62e:	f47f af3c 	bne.w	800a4aa <_scanf_float+0x66>
 800a632:	6822      	ldr	r2, [r4, #0]
 800a634:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a638:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a63c:	f47f af39 	bne.w	800a4b2 <_scanf_float+0x6e>
 800a640:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a644:	6022      	str	r2, [r4, #0]
 800a646:	2501      	movs	r5, #1
 800a648:	e7c0      	b.n	800a5cc <_scanf_float+0x188>
 800a64a:	2d03      	cmp	r5, #3
 800a64c:	d0e2      	beq.n	800a614 <_scanf_float+0x1d0>
 800a64e:	2d05      	cmp	r5, #5
 800a650:	e7de      	b.n	800a610 <_scanf_float+0x1cc>
 800a652:	2d02      	cmp	r5, #2
 800a654:	f47f af26 	bne.w	800a4a4 <_scanf_float+0x60>
 800a658:	2503      	movs	r5, #3
 800a65a:	e7b7      	b.n	800a5cc <_scanf_float+0x188>
 800a65c:	2d06      	cmp	r5, #6
 800a65e:	f47f af21 	bne.w	800a4a4 <_scanf_float+0x60>
 800a662:	2507      	movs	r5, #7
 800a664:	e7b2      	b.n	800a5cc <_scanf_float+0x188>
 800a666:	6822      	ldr	r2, [r4, #0]
 800a668:	0591      	lsls	r1, r2, #22
 800a66a:	f57f af1b 	bpl.w	800a4a4 <_scanf_float+0x60>
 800a66e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a672:	6022      	str	r2, [r4, #0]
 800a674:	f8cd 9004 	str.w	r9, [sp, #4]
 800a678:	e7a8      	b.n	800a5cc <_scanf_float+0x188>
 800a67a:	6822      	ldr	r2, [r4, #0]
 800a67c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a680:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a684:	d006      	beq.n	800a694 <_scanf_float+0x250>
 800a686:	0550      	lsls	r0, r2, #21
 800a688:	f57f af0c 	bpl.w	800a4a4 <_scanf_float+0x60>
 800a68c:	f1b9 0f00 	cmp.w	r9, #0
 800a690:	f43f af0f 	beq.w	800a4b2 <_scanf_float+0x6e>
 800a694:	0591      	lsls	r1, r2, #22
 800a696:	bf58      	it	pl
 800a698:	9901      	ldrpl	r1, [sp, #4]
 800a69a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a69e:	bf58      	it	pl
 800a6a0:	eba9 0101 	subpl.w	r1, r9, r1
 800a6a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a6a8:	bf58      	it	pl
 800a6aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a6ae:	6022      	str	r2, [r4, #0]
 800a6b0:	f04f 0900 	mov.w	r9, #0
 800a6b4:	e78a      	b.n	800a5cc <_scanf_float+0x188>
 800a6b6:	f04f 0a03 	mov.w	sl, #3
 800a6ba:	e787      	b.n	800a5cc <_scanf_float+0x188>
 800a6bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a6c0:	4639      	mov	r1, r7
 800a6c2:	4640      	mov	r0, r8
 800a6c4:	4798      	blx	r3
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	f43f aedf 	beq.w	800a48a <_scanf_float+0x46>
 800a6cc:	e6ea      	b.n	800a4a4 <_scanf_float+0x60>
 800a6ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6d6:	463a      	mov	r2, r7
 800a6d8:	4640      	mov	r0, r8
 800a6da:	4798      	blx	r3
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	6123      	str	r3, [r4, #16]
 800a6e2:	e6ec      	b.n	800a4be <_scanf_float+0x7a>
 800a6e4:	1e6b      	subs	r3, r5, #1
 800a6e6:	2b06      	cmp	r3, #6
 800a6e8:	d825      	bhi.n	800a736 <_scanf_float+0x2f2>
 800a6ea:	2d02      	cmp	r5, #2
 800a6ec:	d836      	bhi.n	800a75c <_scanf_float+0x318>
 800a6ee:	455e      	cmp	r6, fp
 800a6f0:	f67f aee8 	bls.w	800a4c4 <_scanf_float+0x80>
 800a6f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6fc:	463a      	mov	r2, r7
 800a6fe:	4640      	mov	r0, r8
 800a700:	4798      	blx	r3
 800a702:	6923      	ldr	r3, [r4, #16]
 800a704:	3b01      	subs	r3, #1
 800a706:	6123      	str	r3, [r4, #16]
 800a708:	e7f1      	b.n	800a6ee <_scanf_float+0x2aa>
 800a70a:	9802      	ldr	r0, [sp, #8]
 800a70c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a710:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a714:	9002      	str	r0, [sp, #8]
 800a716:	463a      	mov	r2, r7
 800a718:	4640      	mov	r0, r8
 800a71a:	4798      	blx	r3
 800a71c:	6923      	ldr	r3, [r4, #16]
 800a71e:	3b01      	subs	r3, #1
 800a720:	6123      	str	r3, [r4, #16]
 800a722:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a726:	fa5f fa8a 	uxtb.w	sl, sl
 800a72a:	f1ba 0f02 	cmp.w	sl, #2
 800a72e:	d1ec      	bne.n	800a70a <_scanf_float+0x2c6>
 800a730:	3d03      	subs	r5, #3
 800a732:	b2ed      	uxtb	r5, r5
 800a734:	1b76      	subs	r6, r6, r5
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	05da      	lsls	r2, r3, #23
 800a73a:	d52f      	bpl.n	800a79c <_scanf_float+0x358>
 800a73c:	055b      	lsls	r3, r3, #21
 800a73e:	d510      	bpl.n	800a762 <_scanf_float+0x31e>
 800a740:	455e      	cmp	r6, fp
 800a742:	f67f aebf 	bls.w	800a4c4 <_scanf_float+0x80>
 800a746:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a74a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a74e:	463a      	mov	r2, r7
 800a750:	4640      	mov	r0, r8
 800a752:	4798      	blx	r3
 800a754:	6923      	ldr	r3, [r4, #16]
 800a756:	3b01      	subs	r3, #1
 800a758:	6123      	str	r3, [r4, #16]
 800a75a:	e7f1      	b.n	800a740 <_scanf_float+0x2fc>
 800a75c:	46aa      	mov	sl, r5
 800a75e:	9602      	str	r6, [sp, #8]
 800a760:	e7df      	b.n	800a722 <_scanf_float+0x2de>
 800a762:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a766:	6923      	ldr	r3, [r4, #16]
 800a768:	2965      	cmp	r1, #101	; 0x65
 800a76a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a76e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a772:	6123      	str	r3, [r4, #16]
 800a774:	d00c      	beq.n	800a790 <_scanf_float+0x34c>
 800a776:	2945      	cmp	r1, #69	; 0x45
 800a778:	d00a      	beq.n	800a790 <_scanf_float+0x34c>
 800a77a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a77e:	463a      	mov	r2, r7
 800a780:	4640      	mov	r0, r8
 800a782:	4798      	blx	r3
 800a784:	6923      	ldr	r3, [r4, #16]
 800a786:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	1eb5      	subs	r5, r6, #2
 800a78e:	6123      	str	r3, [r4, #16]
 800a790:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a794:	463a      	mov	r2, r7
 800a796:	4640      	mov	r0, r8
 800a798:	4798      	blx	r3
 800a79a:	462e      	mov	r6, r5
 800a79c:	6825      	ldr	r5, [r4, #0]
 800a79e:	f015 0510 	ands.w	r5, r5, #16
 800a7a2:	d159      	bne.n	800a858 <_scanf_float+0x414>
 800a7a4:	7035      	strb	r5, [r6, #0]
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b0:	d11b      	bne.n	800a7ea <_scanf_float+0x3a6>
 800a7b2:	9b01      	ldr	r3, [sp, #4]
 800a7b4:	454b      	cmp	r3, r9
 800a7b6:	eba3 0209 	sub.w	r2, r3, r9
 800a7ba:	d123      	bne.n	800a804 <_scanf_float+0x3c0>
 800a7bc:	2200      	movs	r2, #0
 800a7be:	4659      	mov	r1, fp
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	f000 fe97 	bl	800b4f4 <_strtod_r>
 800a7c6:	6822      	ldr	r2, [r4, #0]
 800a7c8:	9b03      	ldr	r3, [sp, #12]
 800a7ca:	f012 0f02 	tst.w	r2, #2
 800a7ce:	ec57 6b10 	vmov	r6, r7, d0
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	d021      	beq.n	800a81a <_scanf_float+0x3d6>
 800a7d6:	9903      	ldr	r1, [sp, #12]
 800a7d8:	1d1a      	adds	r2, r3, #4
 800a7da:	600a      	str	r2, [r1, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	e9c3 6700 	strd	r6, r7, [r3]
 800a7e2:	68e3      	ldr	r3, [r4, #12]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	60e3      	str	r3, [r4, #12]
 800a7e8:	e66d      	b.n	800a4c6 <_scanf_float+0x82>
 800a7ea:	9b04      	ldr	r3, [sp, #16]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d0e5      	beq.n	800a7bc <_scanf_float+0x378>
 800a7f0:	9905      	ldr	r1, [sp, #20]
 800a7f2:	230a      	movs	r3, #10
 800a7f4:	462a      	mov	r2, r5
 800a7f6:	3101      	adds	r1, #1
 800a7f8:	4640      	mov	r0, r8
 800a7fa:	f000 ff5f 	bl	800b6bc <_strtol_r>
 800a7fe:	9b04      	ldr	r3, [sp, #16]
 800a800:	9e05      	ldr	r6, [sp, #20]
 800a802:	1ac2      	subs	r2, r0, r3
 800a804:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a808:	429e      	cmp	r6, r3
 800a80a:	bf28      	it	cs
 800a80c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a810:	4912      	ldr	r1, [pc, #72]	; (800a85c <_scanf_float+0x418>)
 800a812:	4630      	mov	r0, r6
 800a814:	f000 f82c 	bl	800a870 <siprintf>
 800a818:	e7d0      	b.n	800a7bc <_scanf_float+0x378>
 800a81a:	9903      	ldr	r1, [sp, #12]
 800a81c:	f012 0f04 	tst.w	r2, #4
 800a820:	f103 0204 	add.w	r2, r3, #4
 800a824:	600a      	str	r2, [r1, #0]
 800a826:	d1d9      	bne.n	800a7dc <_scanf_float+0x398>
 800a828:	f8d3 8000 	ldr.w	r8, [r3]
 800a82c:	ee10 2a10 	vmov	r2, s0
 800a830:	ee10 0a10 	vmov	r0, s0
 800a834:	463b      	mov	r3, r7
 800a836:	4639      	mov	r1, r7
 800a838:	f7f6 f9b0 	bl	8000b9c <__aeabi_dcmpun>
 800a83c:	b128      	cbz	r0, 800a84a <_scanf_float+0x406>
 800a83e:	4808      	ldr	r0, [pc, #32]	; (800a860 <_scanf_float+0x41c>)
 800a840:	f000 f810 	bl	800a864 <nanf>
 800a844:	ed88 0a00 	vstr	s0, [r8]
 800a848:	e7cb      	b.n	800a7e2 <_scanf_float+0x39e>
 800a84a:	4630      	mov	r0, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	f7f6 fa03 	bl	8000c58 <__aeabi_d2f>
 800a852:	f8c8 0000 	str.w	r0, [r8]
 800a856:	e7c4      	b.n	800a7e2 <_scanf_float+0x39e>
 800a858:	2500      	movs	r5, #0
 800a85a:	e634      	b.n	800a4c6 <_scanf_float+0x82>
 800a85c:	0800e628 	.word	0x0800e628
 800a860:	0800e72f 	.word	0x0800e72f

0800a864 <nanf>:
 800a864:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a86c <nanf+0x8>
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	7fc00000 	.word	0x7fc00000

0800a870 <siprintf>:
 800a870:	b40e      	push	{r1, r2, r3}
 800a872:	b500      	push	{lr}
 800a874:	b09c      	sub	sp, #112	; 0x70
 800a876:	ab1d      	add	r3, sp, #116	; 0x74
 800a878:	9002      	str	r0, [sp, #8]
 800a87a:	9006      	str	r0, [sp, #24]
 800a87c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a880:	4809      	ldr	r0, [pc, #36]	; (800a8a8 <siprintf+0x38>)
 800a882:	9107      	str	r1, [sp, #28]
 800a884:	9104      	str	r1, [sp, #16]
 800a886:	4909      	ldr	r1, [pc, #36]	; (800a8ac <siprintf+0x3c>)
 800a888:	f853 2b04 	ldr.w	r2, [r3], #4
 800a88c:	9105      	str	r1, [sp, #20]
 800a88e:	6800      	ldr	r0, [r0, #0]
 800a890:	9301      	str	r3, [sp, #4]
 800a892:	a902      	add	r1, sp, #8
 800a894:	f002 ff78 	bl	800d788 <_svfiprintf_r>
 800a898:	9b02      	ldr	r3, [sp, #8]
 800a89a:	2200      	movs	r2, #0
 800a89c:	701a      	strb	r2, [r3, #0]
 800a89e:	b01c      	add	sp, #112	; 0x70
 800a8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8a4:	b003      	add	sp, #12
 800a8a6:	4770      	bx	lr
 800a8a8:	200001ac 	.word	0x200001ac
 800a8ac:	ffff0208 	.word	0xffff0208

0800a8b0 <sulp>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	460d      	mov	r5, r1
 800a8b6:	ec45 4b10 	vmov	d0, r4, r5
 800a8ba:	4616      	mov	r6, r2
 800a8bc:	f002 fcc2 	bl	800d244 <__ulp>
 800a8c0:	ec51 0b10 	vmov	r0, r1, d0
 800a8c4:	b17e      	cbz	r6, 800a8e6 <sulp+0x36>
 800a8c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a8ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	dd09      	ble.n	800a8e6 <sulp+0x36>
 800a8d2:	051b      	lsls	r3, r3, #20
 800a8d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a8d8:	2400      	movs	r4, #0
 800a8da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a8de:	4622      	mov	r2, r4
 800a8e0:	462b      	mov	r3, r5
 800a8e2:	f7f5 fec1 	bl	8000668 <__aeabi_dmul>
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}

0800a8e8 <_strtod_l>:
 800a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	ed2d 8b02 	vpush	{d8}
 800a8f0:	b09d      	sub	sp, #116	; 0x74
 800a8f2:	461f      	mov	r7, r3
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	9318      	str	r3, [sp, #96]	; 0x60
 800a8f8:	4ba2      	ldr	r3, [pc, #648]	; (800ab84 <_strtod_l+0x29c>)
 800a8fa:	9213      	str	r2, [sp, #76]	; 0x4c
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	9305      	str	r3, [sp, #20]
 800a900:	4604      	mov	r4, r0
 800a902:	4618      	mov	r0, r3
 800a904:	4688      	mov	r8, r1
 800a906:	f7f5 fc95 	bl	8000234 <strlen>
 800a90a:	f04f 0a00 	mov.w	sl, #0
 800a90e:	4605      	mov	r5, r0
 800a910:	f04f 0b00 	mov.w	fp, #0
 800a914:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a91a:	781a      	ldrb	r2, [r3, #0]
 800a91c:	2a2b      	cmp	r2, #43	; 0x2b
 800a91e:	d04e      	beq.n	800a9be <_strtod_l+0xd6>
 800a920:	d83b      	bhi.n	800a99a <_strtod_l+0xb2>
 800a922:	2a0d      	cmp	r2, #13
 800a924:	d834      	bhi.n	800a990 <_strtod_l+0xa8>
 800a926:	2a08      	cmp	r2, #8
 800a928:	d834      	bhi.n	800a994 <_strtod_l+0xac>
 800a92a:	2a00      	cmp	r2, #0
 800a92c:	d03e      	beq.n	800a9ac <_strtod_l+0xc4>
 800a92e:	2300      	movs	r3, #0
 800a930:	930a      	str	r3, [sp, #40]	; 0x28
 800a932:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a934:	7833      	ldrb	r3, [r6, #0]
 800a936:	2b30      	cmp	r3, #48	; 0x30
 800a938:	f040 80b0 	bne.w	800aa9c <_strtod_l+0x1b4>
 800a93c:	7873      	ldrb	r3, [r6, #1]
 800a93e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a942:	2b58      	cmp	r3, #88	; 0x58
 800a944:	d168      	bne.n	800aa18 <_strtod_l+0x130>
 800a946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	ab18      	add	r3, sp, #96	; 0x60
 800a94c:	9702      	str	r7, [sp, #8]
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	4a8d      	ldr	r2, [pc, #564]	; (800ab88 <_strtod_l+0x2a0>)
 800a952:	ab19      	add	r3, sp, #100	; 0x64
 800a954:	a917      	add	r1, sp, #92	; 0x5c
 800a956:	4620      	mov	r0, r4
 800a958:	f001 fdce 	bl	800c4f8 <__gethex>
 800a95c:	f010 0707 	ands.w	r7, r0, #7
 800a960:	4605      	mov	r5, r0
 800a962:	d005      	beq.n	800a970 <_strtod_l+0x88>
 800a964:	2f06      	cmp	r7, #6
 800a966:	d12c      	bne.n	800a9c2 <_strtod_l+0xda>
 800a968:	3601      	adds	r6, #1
 800a96a:	2300      	movs	r3, #0
 800a96c:	9617      	str	r6, [sp, #92]	; 0x5c
 800a96e:	930a      	str	r3, [sp, #40]	; 0x28
 800a970:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a972:	2b00      	cmp	r3, #0
 800a974:	f040 8590 	bne.w	800b498 <_strtod_l+0xbb0>
 800a978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a97a:	b1eb      	cbz	r3, 800a9b8 <_strtod_l+0xd0>
 800a97c:	4652      	mov	r2, sl
 800a97e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a982:	ec43 2b10 	vmov	d0, r2, r3
 800a986:	b01d      	add	sp, #116	; 0x74
 800a988:	ecbd 8b02 	vpop	{d8}
 800a98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a990:	2a20      	cmp	r2, #32
 800a992:	d1cc      	bne.n	800a92e <_strtod_l+0x46>
 800a994:	3301      	adds	r3, #1
 800a996:	9317      	str	r3, [sp, #92]	; 0x5c
 800a998:	e7be      	b.n	800a918 <_strtod_l+0x30>
 800a99a:	2a2d      	cmp	r2, #45	; 0x2d
 800a99c:	d1c7      	bne.n	800a92e <_strtod_l+0x46>
 800a99e:	2201      	movs	r2, #1
 800a9a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a9a2:	1c5a      	adds	r2, r3, #1
 800a9a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9a6:	785b      	ldrb	r3, [r3, #1]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1c2      	bne.n	800a932 <_strtod_l+0x4a>
 800a9ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f040 856e 	bne.w	800b494 <_strtod_l+0xbac>
 800a9b8:	4652      	mov	r2, sl
 800a9ba:	465b      	mov	r3, fp
 800a9bc:	e7e1      	b.n	800a982 <_strtod_l+0x9a>
 800a9be:	2200      	movs	r2, #0
 800a9c0:	e7ee      	b.n	800a9a0 <_strtod_l+0xb8>
 800a9c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9c4:	b13a      	cbz	r2, 800a9d6 <_strtod_l+0xee>
 800a9c6:	2135      	movs	r1, #53	; 0x35
 800a9c8:	a81a      	add	r0, sp, #104	; 0x68
 800a9ca:	f002 fd46 	bl	800d45a <__copybits>
 800a9ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f002 f905 	bl	800cbe0 <_Bfree>
 800a9d6:	3f01      	subs	r7, #1
 800a9d8:	2f04      	cmp	r7, #4
 800a9da:	d806      	bhi.n	800a9ea <_strtod_l+0x102>
 800a9dc:	e8df f007 	tbb	[pc, r7]
 800a9e0:	1714030a 	.word	0x1714030a
 800a9e4:	0a          	.byte	0x0a
 800a9e5:	00          	.byte	0x00
 800a9e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a9ea:	0728      	lsls	r0, r5, #28
 800a9ec:	d5c0      	bpl.n	800a970 <_strtod_l+0x88>
 800a9ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a9f2:	e7bd      	b.n	800a970 <_strtod_l+0x88>
 800a9f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a9f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a9fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a9fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aa02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa06:	e7f0      	b.n	800a9ea <_strtod_l+0x102>
 800aa08:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ab8c <_strtod_l+0x2a4>
 800aa0c:	e7ed      	b.n	800a9ea <_strtod_l+0x102>
 800aa0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800aa12:	f04f 3aff 	mov.w	sl, #4294967295
 800aa16:	e7e8      	b.n	800a9ea <_strtod_l+0x102>
 800aa18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa1a:	1c5a      	adds	r2, r3, #1
 800aa1c:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa1e:	785b      	ldrb	r3, [r3, #1]
 800aa20:	2b30      	cmp	r3, #48	; 0x30
 800aa22:	d0f9      	beq.n	800aa18 <_strtod_l+0x130>
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d0a3      	beq.n	800a970 <_strtod_l+0x88>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	f04f 0900 	mov.w	r9, #0
 800aa2e:	9304      	str	r3, [sp, #16]
 800aa30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa32:	9308      	str	r3, [sp, #32]
 800aa34:	f8cd 901c 	str.w	r9, [sp, #28]
 800aa38:	464f      	mov	r7, r9
 800aa3a:	220a      	movs	r2, #10
 800aa3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800aa3e:	7806      	ldrb	r6, [r0, #0]
 800aa40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aa44:	b2d9      	uxtb	r1, r3
 800aa46:	2909      	cmp	r1, #9
 800aa48:	d92a      	bls.n	800aaa0 <_strtod_l+0x1b8>
 800aa4a:	9905      	ldr	r1, [sp, #20]
 800aa4c:	462a      	mov	r2, r5
 800aa4e:	f003 f90f 	bl	800dc70 <strncmp>
 800aa52:	b398      	cbz	r0, 800aabc <_strtod_l+0x1d4>
 800aa54:	2000      	movs	r0, #0
 800aa56:	4632      	mov	r2, r6
 800aa58:	463d      	mov	r5, r7
 800aa5a:	9005      	str	r0, [sp, #20]
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2a65      	cmp	r2, #101	; 0x65
 800aa60:	d001      	beq.n	800aa66 <_strtod_l+0x17e>
 800aa62:	2a45      	cmp	r2, #69	; 0x45
 800aa64:	d118      	bne.n	800aa98 <_strtod_l+0x1b0>
 800aa66:	b91d      	cbnz	r5, 800aa70 <_strtod_l+0x188>
 800aa68:	9a04      	ldr	r2, [sp, #16]
 800aa6a:	4302      	orrs	r2, r0
 800aa6c:	d09e      	beq.n	800a9ac <_strtod_l+0xc4>
 800aa6e:	2500      	movs	r5, #0
 800aa70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800aa74:	f108 0201 	add.w	r2, r8, #1
 800aa78:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800aa7e:	2a2b      	cmp	r2, #43	; 0x2b
 800aa80:	d075      	beq.n	800ab6e <_strtod_l+0x286>
 800aa82:	2a2d      	cmp	r2, #45	; 0x2d
 800aa84:	d07b      	beq.n	800ab7e <_strtod_l+0x296>
 800aa86:	f04f 0c00 	mov.w	ip, #0
 800aa8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aa8e:	2909      	cmp	r1, #9
 800aa90:	f240 8082 	bls.w	800ab98 <_strtod_l+0x2b0>
 800aa94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aa98:	2600      	movs	r6, #0
 800aa9a:	e09d      	b.n	800abd8 <_strtod_l+0x2f0>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	e7c4      	b.n	800aa2a <_strtod_l+0x142>
 800aaa0:	2f08      	cmp	r7, #8
 800aaa2:	bfd8      	it	le
 800aaa4:	9907      	ldrle	r1, [sp, #28]
 800aaa6:	f100 0001 	add.w	r0, r0, #1
 800aaaa:	bfda      	itte	le
 800aaac:	fb02 3301 	mlale	r3, r2, r1, r3
 800aab0:	9307      	strle	r3, [sp, #28]
 800aab2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800aab6:	3701      	adds	r7, #1
 800aab8:	9017      	str	r0, [sp, #92]	; 0x5c
 800aaba:	e7bf      	b.n	800aa3c <_strtod_l+0x154>
 800aabc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aabe:	195a      	adds	r2, r3, r5
 800aac0:	9217      	str	r2, [sp, #92]	; 0x5c
 800aac2:	5d5a      	ldrb	r2, [r3, r5]
 800aac4:	2f00      	cmp	r7, #0
 800aac6:	d037      	beq.n	800ab38 <_strtod_l+0x250>
 800aac8:	9005      	str	r0, [sp, #20]
 800aaca:	463d      	mov	r5, r7
 800aacc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aad0:	2b09      	cmp	r3, #9
 800aad2:	d912      	bls.n	800aafa <_strtod_l+0x212>
 800aad4:	2301      	movs	r3, #1
 800aad6:	e7c2      	b.n	800aa5e <_strtod_l+0x176>
 800aad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	9217      	str	r2, [sp, #92]	; 0x5c
 800aade:	785a      	ldrb	r2, [r3, #1]
 800aae0:	3001      	adds	r0, #1
 800aae2:	2a30      	cmp	r2, #48	; 0x30
 800aae4:	d0f8      	beq.n	800aad8 <_strtod_l+0x1f0>
 800aae6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aaea:	2b08      	cmp	r3, #8
 800aaec:	f200 84d9 	bhi.w	800b4a2 <_strtod_l+0xbba>
 800aaf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aaf2:	9005      	str	r0, [sp, #20]
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	9308      	str	r3, [sp, #32]
 800aaf8:	4605      	mov	r5, r0
 800aafa:	3a30      	subs	r2, #48	; 0x30
 800aafc:	f100 0301 	add.w	r3, r0, #1
 800ab00:	d014      	beq.n	800ab2c <_strtod_l+0x244>
 800ab02:	9905      	ldr	r1, [sp, #20]
 800ab04:	4419      	add	r1, r3
 800ab06:	9105      	str	r1, [sp, #20]
 800ab08:	462b      	mov	r3, r5
 800ab0a:	eb00 0e05 	add.w	lr, r0, r5
 800ab0e:	210a      	movs	r1, #10
 800ab10:	4573      	cmp	r3, lr
 800ab12:	d113      	bne.n	800ab3c <_strtod_l+0x254>
 800ab14:	182b      	adds	r3, r5, r0
 800ab16:	2b08      	cmp	r3, #8
 800ab18:	f105 0501 	add.w	r5, r5, #1
 800ab1c:	4405      	add	r5, r0
 800ab1e:	dc1c      	bgt.n	800ab5a <_strtod_l+0x272>
 800ab20:	9907      	ldr	r1, [sp, #28]
 800ab22:	230a      	movs	r3, #10
 800ab24:	fb03 2301 	mla	r3, r3, r1, r2
 800ab28:	9307      	str	r3, [sp, #28]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab2e:	1c51      	adds	r1, r2, #1
 800ab30:	9117      	str	r1, [sp, #92]	; 0x5c
 800ab32:	7852      	ldrb	r2, [r2, #1]
 800ab34:	4618      	mov	r0, r3
 800ab36:	e7c9      	b.n	800aacc <_strtod_l+0x1e4>
 800ab38:	4638      	mov	r0, r7
 800ab3a:	e7d2      	b.n	800aae2 <_strtod_l+0x1fa>
 800ab3c:	2b08      	cmp	r3, #8
 800ab3e:	dc04      	bgt.n	800ab4a <_strtod_l+0x262>
 800ab40:	9e07      	ldr	r6, [sp, #28]
 800ab42:	434e      	muls	r6, r1
 800ab44:	9607      	str	r6, [sp, #28]
 800ab46:	3301      	adds	r3, #1
 800ab48:	e7e2      	b.n	800ab10 <_strtod_l+0x228>
 800ab4a:	f103 0c01 	add.w	ip, r3, #1
 800ab4e:	f1bc 0f10 	cmp.w	ip, #16
 800ab52:	bfd8      	it	le
 800ab54:	fb01 f909 	mulle.w	r9, r1, r9
 800ab58:	e7f5      	b.n	800ab46 <_strtod_l+0x25e>
 800ab5a:	2d10      	cmp	r5, #16
 800ab5c:	bfdc      	itt	le
 800ab5e:	230a      	movle	r3, #10
 800ab60:	fb03 2909 	mlale	r9, r3, r9, r2
 800ab64:	e7e1      	b.n	800ab2a <_strtod_l+0x242>
 800ab66:	2300      	movs	r3, #0
 800ab68:	9305      	str	r3, [sp, #20]
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e77c      	b.n	800aa68 <_strtod_l+0x180>
 800ab6e:	f04f 0c00 	mov.w	ip, #0
 800ab72:	f108 0202 	add.w	r2, r8, #2
 800ab76:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab78:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ab7c:	e785      	b.n	800aa8a <_strtod_l+0x1a2>
 800ab7e:	f04f 0c01 	mov.w	ip, #1
 800ab82:	e7f6      	b.n	800ab72 <_strtod_l+0x28a>
 800ab84:	0800e910 	.word	0x0800e910
 800ab88:	0800e630 	.word	0x0800e630
 800ab8c:	7ff00000 	.word	0x7ff00000
 800ab90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab92:	1c51      	adds	r1, r2, #1
 800ab94:	9117      	str	r1, [sp, #92]	; 0x5c
 800ab96:	7852      	ldrb	r2, [r2, #1]
 800ab98:	2a30      	cmp	r2, #48	; 0x30
 800ab9a:	d0f9      	beq.n	800ab90 <_strtod_l+0x2a8>
 800ab9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aba0:	2908      	cmp	r1, #8
 800aba2:	f63f af79 	bhi.w	800aa98 <_strtod_l+0x1b0>
 800aba6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800abaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800abac:	9206      	str	r2, [sp, #24]
 800abae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800abb0:	1c51      	adds	r1, r2, #1
 800abb2:	9117      	str	r1, [sp, #92]	; 0x5c
 800abb4:	7852      	ldrb	r2, [r2, #1]
 800abb6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800abba:	2e09      	cmp	r6, #9
 800abbc:	d937      	bls.n	800ac2e <_strtod_l+0x346>
 800abbe:	9e06      	ldr	r6, [sp, #24]
 800abc0:	1b89      	subs	r1, r1, r6
 800abc2:	2908      	cmp	r1, #8
 800abc4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800abc8:	dc02      	bgt.n	800abd0 <_strtod_l+0x2e8>
 800abca:	4576      	cmp	r6, lr
 800abcc:	bfa8      	it	ge
 800abce:	4676      	movge	r6, lr
 800abd0:	f1bc 0f00 	cmp.w	ip, #0
 800abd4:	d000      	beq.n	800abd8 <_strtod_l+0x2f0>
 800abd6:	4276      	negs	r6, r6
 800abd8:	2d00      	cmp	r5, #0
 800abda:	d14d      	bne.n	800ac78 <_strtod_l+0x390>
 800abdc:	9904      	ldr	r1, [sp, #16]
 800abde:	4301      	orrs	r1, r0
 800abe0:	f47f aec6 	bne.w	800a970 <_strtod_l+0x88>
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f47f aee1 	bne.w	800a9ac <_strtod_l+0xc4>
 800abea:	2a69      	cmp	r2, #105	; 0x69
 800abec:	d027      	beq.n	800ac3e <_strtod_l+0x356>
 800abee:	dc24      	bgt.n	800ac3a <_strtod_l+0x352>
 800abf0:	2a49      	cmp	r2, #73	; 0x49
 800abf2:	d024      	beq.n	800ac3e <_strtod_l+0x356>
 800abf4:	2a4e      	cmp	r2, #78	; 0x4e
 800abf6:	f47f aed9 	bne.w	800a9ac <_strtod_l+0xc4>
 800abfa:	499f      	ldr	r1, [pc, #636]	; (800ae78 <_strtod_l+0x590>)
 800abfc:	a817      	add	r0, sp, #92	; 0x5c
 800abfe:	f001 fed3 	bl	800c9a8 <__match>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	f43f aed2 	beq.w	800a9ac <_strtod_l+0xc4>
 800ac08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	2b28      	cmp	r3, #40	; 0x28
 800ac0e:	d12d      	bne.n	800ac6c <_strtod_l+0x384>
 800ac10:	499a      	ldr	r1, [pc, #616]	; (800ae7c <_strtod_l+0x594>)
 800ac12:	aa1a      	add	r2, sp, #104	; 0x68
 800ac14:	a817      	add	r0, sp, #92	; 0x5c
 800ac16:	f001 fedb 	bl	800c9d0 <__hexnan>
 800ac1a:	2805      	cmp	r0, #5
 800ac1c:	d126      	bne.n	800ac6c <_strtod_l+0x384>
 800ac1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ac24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ac28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ac2c:	e6a0      	b.n	800a970 <_strtod_l+0x88>
 800ac2e:	210a      	movs	r1, #10
 800ac30:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ac34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ac38:	e7b9      	b.n	800abae <_strtod_l+0x2c6>
 800ac3a:	2a6e      	cmp	r2, #110	; 0x6e
 800ac3c:	e7db      	b.n	800abf6 <_strtod_l+0x30e>
 800ac3e:	4990      	ldr	r1, [pc, #576]	; (800ae80 <_strtod_l+0x598>)
 800ac40:	a817      	add	r0, sp, #92	; 0x5c
 800ac42:	f001 feb1 	bl	800c9a8 <__match>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	f43f aeb0 	beq.w	800a9ac <_strtod_l+0xc4>
 800ac4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac4e:	498d      	ldr	r1, [pc, #564]	; (800ae84 <_strtod_l+0x59c>)
 800ac50:	3b01      	subs	r3, #1
 800ac52:	a817      	add	r0, sp, #92	; 0x5c
 800ac54:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac56:	f001 fea7 	bl	800c9a8 <__match>
 800ac5a:	b910      	cbnz	r0, 800ac62 <_strtod_l+0x37a>
 800ac5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac5e:	3301      	adds	r3, #1
 800ac60:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac62:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ae94 <_strtod_l+0x5ac>
 800ac66:	f04f 0a00 	mov.w	sl, #0
 800ac6a:	e681      	b.n	800a970 <_strtod_l+0x88>
 800ac6c:	4886      	ldr	r0, [pc, #536]	; (800ae88 <_strtod_l+0x5a0>)
 800ac6e:	f002 ffe7 	bl	800dc40 <nan>
 800ac72:	ec5b ab10 	vmov	sl, fp, d0
 800ac76:	e67b      	b.n	800a970 <_strtod_l+0x88>
 800ac78:	9b05      	ldr	r3, [sp, #20]
 800ac7a:	9807      	ldr	r0, [sp, #28]
 800ac7c:	1af3      	subs	r3, r6, r3
 800ac7e:	2f00      	cmp	r7, #0
 800ac80:	bf08      	it	eq
 800ac82:	462f      	moveq	r7, r5
 800ac84:	2d10      	cmp	r5, #16
 800ac86:	9306      	str	r3, [sp, #24]
 800ac88:	46a8      	mov	r8, r5
 800ac8a:	bfa8      	it	ge
 800ac8c:	f04f 0810 	movge.w	r8, #16
 800ac90:	f7f5 fc70 	bl	8000574 <__aeabi_ui2d>
 800ac94:	2d09      	cmp	r5, #9
 800ac96:	4682      	mov	sl, r0
 800ac98:	468b      	mov	fp, r1
 800ac9a:	dd13      	ble.n	800acc4 <_strtod_l+0x3dc>
 800ac9c:	4b7b      	ldr	r3, [pc, #492]	; (800ae8c <_strtod_l+0x5a4>)
 800ac9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aca2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aca6:	f7f5 fcdf 	bl	8000668 <__aeabi_dmul>
 800acaa:	4682      	mov	sl, r0
 800acac:	4648      	mov	r0, r9
 800acae:	468b      	mov	fp, r1
 800acb0:	f7f5 fc60 	bl	8000574 <__aeabi_ui2d>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	4650      	mov	r0, sl
 800acba:	4659      	mov	r1, fp
 800acbc:	f7f5 fb1e 	bl	80002fc <__adddf3>
 800acc0:	4682      	mov	sl, r0
 800acc2:	468b      	mov	fp, r1
 800acc4:	2d0f      	cmp	r5, #15
 800acc6:	dc38      	bgt.n	800ad3a <_strtod_l+0x452>
 800acc8:	9b06      	ldr	r3, [sp, #24]
 800acca:	2b00      	cmp	r3, #0
 800accc:	f43f ae50 	beq.w	800a970 <_strtod_l+0x88>
 800acd0:	dd24      	ble.n	800ad1c <_strtod_l+0x434>
 800acd2:	2b16      	cmp	r3, #22
 800acd4:	dc0b      	bgt.n	800acee <_strtod_l+0x406>
 800acd6:	496d      	ldr	r1, [pc, #436]	; (800ae8c <_strtod_l+0x5a4>)
 800acd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800acdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ace0:	4652      	mov	r2, sl
 800ace2:	465b      	mov	r3, fp
 800ace4:	f7f5 fcc0 	bl	8000668 <__aeabi_dmul>
 800ace8:	4682      	mov	sl, r0
 800acea:	468b      	mov	fp, r1
 800acec:	e640      	b.n	800a970 <_strtod_l+0x88>
 800acee:	9a06      	ldr	r2, [sp, #24]
 800acf0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800acf4:	4293      	cmp	r3, r2
 800acf6:	db20      	blt.n	800ad3a <_strtod_l+0x452>
 800acf8:	4c64      	ldr	r4, [pc, #400]	; (800ae8c <_strtod_l+0x5a4>)
 800acfa:	f1c5 050f 	rsb	r5, r5, #15
 800acfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ad02:	4652      	mov	r2, sl
 800ad04:	465b      	mov	r3, fp
 800ad06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad0a:	f7f5 fcad 	bl	8000668 <__aeabi_dmul>
 800ad0e:	9b06      	ldr	r3, [sp, #24]
 800ad10:	1b5d      	subs	r5, r3, r5
 800ad12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ad16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ad1a:	e7e3      	b.n	800ace4 <_strtod_l+0x3fc>
 800ad1c:	9b06      	ldr	r3, [sp, #24]
 800ad1e:	3316      	adds	r3, #22
 800ad20:	db0b      	blt.n	800ad3a <_strtod_l+0x452>
 800ad22:	9b05      	ldr	r3, [sp, #20]
 800ad24:	1b9e      	subs	r6, r3, r6
 800ad26:	4b59      	ldr	r3, [pc, #356]	; (800ae8c <_strtod_l+0x5a4>)
 800ad28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ad2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad30:	4650      	mov	r0, sl
 800ad32:	4659      	mov	r1, fp
 800ad34:	f7f5 fdc2 	bl	80008bc <__aeabi_ddiv>
 800ad38:	e7d6      	b.n	800ace8 <_strtod_l+0x400>
 800ad3a:	9b06      	ldr	r3, [sp, #24]
 800ad3c:	eba5 0808 	sub.w	r8, r5, r8
 800ad40:	4498      	add	r8, r3
 800ad42:	f1b8 0f00 	cmp.w	r8, #0
 800ad46:	dd74      	ble.n	800ae32 <_strtod_l+0x54a>
 800ad48:	f018 030f 	ands.w	r3, r8, #15
 800ad4c:	d00a      	beq.n	800ad64 <_strtod_l+0x47c>
 800ad4e:	494f      	ldr	r1, [pc, #316]	; (800ae8c <_strtod_l+0x5a4>)
 800ad50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad54:	4652      	mov	r2, sl
 800ad56:	465b      	mov	r3, fp
 800ad58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad5c:	f7f5 fc84 	bl	8000668 <__aeabi_dmul>
 800ad60:	4682      	mov	sl, r0
 800ad62:	468b      	mov	fp, r1
 800ad64:	f038 080f 	bics.w	r8, r8, #15
 800ad68:	d04f      	beq.n	800ae0a <_strtod_l+0x522>
 800ad6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ad6e:	dd22      	ble.n	800adb6 <_strtod_l+0x4ce>
 800ad70:	2500      	movs	r5, #0
 800ad72:	462e      	mov	r6, r5
 800ad74:	9507      	str	r5, [sp, #28]
 800ad76:	9505      	str	r5, [sp, #20]
 800ad78:	2322      	movs	r3, #34	; 0x22
 800ad7a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ae94 <_strtod_l+0x5ac>
 800ad7e:	6023      	str	r3, [r4, #0]
 800ad80:	f04f 0a00 	mov.w	sl, #0
 800ad84:	9b07      	ldr	r3, [sp, #28]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f43f adf2 	beq.w	800a970 <_strtod_l+0x88>
 800ad8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f001 ff26 	bl	800cbe0 <_Bfree>
 800ad94:	9905      	ldr	r1, [sp, #20]
 800ad96:	4620      	mov	r0, r4
 800ad98:	f001 ff22 	bl	800cbe0 <_Bfree>
 800ad9c:	4631      	mov	r1, r6
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f001 ff1e 	bl	800cbe0 <_Bfree>
 800ada4:	9907      	ldr	r1, [sp, #28]
 800ada6:	4620      	mov	r0, r4
 800ada8:	f001 ff1a 	bl	800cbe0 <_Bfree>
 800adac:	4629      	mov	r1, r5
 800adae:	4620      	mov	r0, r4
 800adb0:	f001 ff16 	bl	800cbe0 <_Bfree>
 800adb4:	e5dc      	b.n	800a970 <_strtod_l+0x88>
 800adb6:	4b36      	ldr	r3, [pc, #216]	; (800ae90 <_strtod_l+0x5a8>)
 800adb8:	9304      	str	r3, [sp, #16]
 800adba:	2300      	movs	r3, #0
 800adbc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800adc0:	4650      	mov	r0, sl
 800adc2:	4659      	mov	r1, fp
 800adc4:	4699      	mov	r9, r3
 800adc6:	f1b8 0f01 	cmp.w	r8, #1
 800adca:	dc21      	bgt.n	800ae10 <_strtod_l+0x528>
 800adcc:	b10b      	cbz	r3, 800add2 <_strtod_l+0x4ea>
 800adce:	4682      	mov	sl, r0
 800add0:	468b      	mov	fp, r1
 800add2:	4b2f      	ldr	r3, [pc, #188]	; (800ae90 <_strtod_l+0x5a8>)
 800add4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800add8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800addc:	4652      	mov	r2, sl
 800adde:	465b      	mov	r3, fp
 800ade0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ade4:	f7f5 fc40 	bl	8000668 <__aeabi_dmul>
 800ade8:	4b2a      	ldr	r3, [pc, #168]	; (800ae94 <_strtod_l+0x5ac>)
 800adea:	460a      	mov	r2, r1
 800adec:	400b      	ands	r3, r1
 800adee:	492a      	ldr	r1, [pc, #168]	; (800ae98 <_strtod_l+0x5b0>)
 800adf0:	428b      	cmp	r3, r1
 800adf2:	4682      	mov	sl, r0
 800adf4:	d8bc      	bhi.n	800ad70 <_strtod_l+0x488>
 800adf6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800adfa:	428b      	cmp	r3, r1
 800adfc:	bf86      	itte	hi
 800adfe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ae9c <_strtod_l+0x5b4>
 800ae02:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	9304      	str	r3, [sp, #16]
 800ae0e:	e084      	b.n	800af1a <_strtod_l+0x632>
 800ae10:	f018 0f01 	tst.w	r8, #1
 800ae14:	d005      	beq.n	800ae22 <_strtod_l+0x53a>
 800ae16:	9b04      	ldr	r3, [sp, #16]
 800ae18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1c:	f7f5 fc24 	bl	8000668 <__aeabi_dmul>
 800ae20:	2301      	movs	r3, #1
 800ae22:	9a04      	ldr	r2, [sp, #16]
 800ae24:	3208      	adds	r2, #8
 800ae26:	f109 0901 	add.w	r9, r9, #1
 800ae2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ae2e:	9204      	str	r2, [sp, #16]
 800ae30:	e7c9      	b.n	800adc6 <_strtod_l+0x4de>
 800ae32:	d0ea      	beq.n	800ae0a <_strtod_l+0x522>
 800ae34:	f1c8 0800 	rsb	r8, r8, #0
 800ae38:	f018 020f 	ands.w	r2, r8, #15
 800ae3c:	d00a      	beq.n	800ae54 <_strtod_l+0x56c>
 800ae3e:	4b13      	ldr	r3, [pc, #76]	; (800ae8c <_strtod_l+0x5a4>)
 800ae40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae44:	4650      	mov	r0, sl
 800ae46:	4659      	mov	r1, fp
 800ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4c:	f7f5 fd36 	bl	80008bc <__aeabi_ddiv>
 800ae50:	4682      	mov	sl, r0
 800ae52:	468b      	mov	fp, r1
 800ae54:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ae58:	d0d7      	beq.n	800ae0a <_strtod_l+0x522>
 800ae5a:	f1b8 0f1f 	cmp.w	r8, #31
 800ae5e:	dd1f      	ble.n	800aea0 <_strtod_l+0x5b8>
 800ae60:	2500      	movs	r5, #0
 800ae62:	462e      	mov	r6, r5
 800ae64:	9507      	str	r5, [sp, #28]
 800ae66:	9505      	str	r5, [sp, #20]
 800ae68:	2322      	movs	r3, #34	; 0x22
 800ae6a:	f04f 0a00 	mov.w	sl, #0
 800ae6e:	f04f 0b00 	mov.w	fp, #0
 800ae72:	6023      	str	r3, [r4, #0]
 800ae74:	e786      	b.n	800ad84 <_strtod_l+0x49c>
 800ae76:	bf00      	nop
 800ae78:	0800e601 	.word	0x0800e601
 800ae7c:	0800e644 	.word	0x0800e644
 800ae80:	0800e5f9 	.word	0x0800e5f9
 800ae84:	0800e834 	.word	0x0800e834
 800ae88:	0800e72f 	.word	0x0800e72f
 800ae8c:	0800e9a8 	.word	0x0800e9a8
 800ae90:	0800e980 	.word	0x0800e980
 800ae94:	7ff00000 	.word	0x7ff00000
 800ae98:	7ca00000 	.word	0x7ca00000
 800ae9c:	7fefffff 	.word	0x7fefffff
 800aea0:	f018 0310 	ands.w	r3, r8, #16
 800aea4:	bf18      	it	ne
 800aea6:	236a      	movne	r3, #106	; 0x6a
 800aea8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b258 <_strtod_l+0x970>
 800aeac:	9304      	str	r3, [sp, #16]
 800aeae:	4650      	mov	r0, sl
 800aeb0:	4659      	mov	r1, fp
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	f018 0f01 	tst.w	r8, #1
 800aeb8:	d004      	beq.n	800aec4 <_strtod_l+0x5dc>
 800aeba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aebe:	f7f5 fbd3 	bl	8000668 <__aeabi_dmul>
 800aec2:	2301      	movs	r3, #1
 800aec4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aec8:	f109 0908 	add.w	r9, r9, #8
 800aecc:	d1f2      	bne.n	800aeb4 <_strtod_l+0x5cc>
 800aece:	b10b      	cbz	r3, 800aed4 <_strtod_l+0x5ec>
 800aed0:	4682      	mov	sl, r0
 800aed2:	468b      	mov	fp, r1
 800aed4:	9b04      	ldr	r3, [sp, #16]
 800aed6:	b1c3      	cbz	r3, 800af0a <_strtod_l+0x622>
 800aed8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aedc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	4659      	mov	r1, fp
 800aee4:	dd11      	ble.n	800af0a <_strtod_l+0x622>
 800aee6:	2b1f      	cmp	r3, #31
 800aee8:	f340 8124 	ble.w	800b134 <_strtod_l+0x84c>
 800aeec:	2b34      	cmp	r3, #52	; 0x34
 800aeee:	bfde      	ittt	le
 800aef0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aef4:	f04f 33ff 	movle.w	r3, #4294967295
 800aef8:	fa03 f202 	lslle.w	r2, r3, r2
 800aefc:	f04f 0a00 	mov.w	sl, #0
 800af00:	bfcc      	ite	gt
 800af02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800af06:	ea02 0b01 	andle.w	fp, r2, r1
 800af0a:	2200      	movs	r2, #0
 800af0c:	2300      	movs	r3, #0
 800af0e:	4650      	mov	r0, sl
 800af10:	4659      	mov	r1, fp
 800af12:	f7f5 fe11 	bl	8000b38 <__aeabi_dcmpeq>
 800af16:	2800      	cmp	r0, #0
 800af18:	d1a2      	bne.n	800ae60 <_strtod_l+0x578>
 800af1a:	9b07      	ldr	r3, [sp, #28]
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	9908      	ldr	r1, [sp, #32]
 800af20:	462b      	mov	r3, r5
 800af22:	463a      	mov	r2, r7
 800af24:	4620      	mov	r0, r4
 800af26:	f001 fec3 	bl	800ccb0 <__s2b>
 800af2a:	9007      	str	r0, [sp, #28]
 800af2c:	2800      	cmp	r0, #0
 800af2e:	f43f af1f 	beq.w	800ad70 <_strtod_l+0x488>
 800af32:	9b05      	ldr	r3, [sp, #20]
 800af34:	1b9e      	subs	r6, r3, r6
 800af36:	9b06      	ldr	r3, [sp, #24]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	bfb4      	ite	lt
 800af3c:	4633      	movlt	r3, r6
 800af3e:	2300      	movge	r3, #0
 800af40:	930c      	str	r3, [sp, #48]	; 0x30
 800af42:	9b06      	ldr	r3, [sp, #24]
 800af44:	2500      	movs	r5, #0
 800af46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800af4a:	9312      	str	r3, [sp, #72]	; 0x48
 800af4c:	462e      	mov	r6, r5
 800af4e:	9b07      	ldr	r3, [sp, #28]
 800af50:	4620      	mov	r0, r4
 800af52:	6859      	ldr	r1, [r3, #4]
 800af54:	f001 fe04 	bl	800cb60 <_Balloc>
 800af58:	9005      	str	r0, [sp, #20]
 800af5a:	2800      	cmp	r0, #0
 800af5c:	f43f af0c 	beq.w	800ad78 <_strtod_l+0x490>
 800af60:	9b07      	ldr	r3, [sp, #28]
 800af62:	691a      	ldr	r2, [r3, #16]
 800af64:	3202      	adds	r2, #2
 800af66:	f103 010c 	add.w	r1, r3, #12
 800af6a:	0092      	lsls	r2, r2, #2
 800af6c:	300c      	adds	r0, #12
 800af6e:	f001 fde9 	bl	800cb44 <memcpy>
 800af72:	ec4b ab10 	vmov	d0, sl, fp
 800af76:	aa1a      	add	r2, sp, #104	; 0x68
 800af78:	a919      	add	r1, sp, #100	; 0x64
 800af7a:	4620      	mov	r0, r4
 800af7c:	f002 f9de 	bl	800d33c <__d2b>
 800af80:	ec4b ab18 	vmov	d8, sl, fp
 800af84:	9018      	str	r0, [sp, #96]	; 0x60
 800af86:	2800      	cmp	r0, #0
 800af88:	f43f aef6 	beq.w	800ad78 <_strtod_l+0x490>
 800af8c:	2101      	movs	r1, #1
 800af8e:	4620      	mov	r0, r4
 800af90:	f001 ff28 	bl	800cde4 <__i2b>
 800af94:	4606      	mov	r6, r0
 800af96:	2800      	cmp	r0, #0
 800af98:	f43f aeee 	beq.w	800ad78 <_strtod_l+0x490>
 800af9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af9e:	9904      	ldr	r1, [sp, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	bfab      	itete	ge
 800afa4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800afa6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800afa8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800afaa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800afae:	bfac      	ite	ge
 800afb0:	eb03 0902 	addge.w	r9, r3, r2
 800afb4:	1ad7      	sublt	r7, r2, r3
 800afb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800afb8:	eba3 0801 	sub.w	r8, r3, r1
 800afbc:	4490      	add	r8, r2
 800afbe:	4ba1      	ldr	r3, [pc, #644]	; (800b244 <_strtod_l+0x95c>)
 800afc0:	f108 38ff 	add.w	r8, r8, #4294967295
 800afc4:	4598      	cmp	r8, r3
 800afc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800afca:	f280 80c7 	bge.w	800b15c <_strtod_l+0x874>
 800afce:	eba3 0308 	sub.w	r3, r3, r8
 800afd2:	2b1f      	cmp	r3, #31
 800afd4:	eba2 0203 	sub.w	r2, r2, r3
 800afd8:	f04f 0101 	mov.w	r1, #1
 800afdc:	f300 80b1 	bgt.w	800b142 <_strtod_l+0x85a>
 800afe0:	fa01 f303 	lsl.w	r3, r1, r3
 800afe4:	930d      	str	r3, [sp, #52]	; 0x34
 800afe6:	2300      	movs	r3, #0
 800afe8:	9308      	str	r3, [sp, #32]
 800afea:	eb09 0802 	add.w	r8, r9, r2
 800afee:	9b04      	ldr	r3, [sp, #16]
 800aff0:	45c1      	cmp	r9, r8
 800aff2:	4417      	add	r7, r2
 800aff4:	441f      	add	r7, r3
 800aff6:	464b      	mov	r3, r9
 800aff8:	bfa8      	it	ge
 800affa:	4643      	movge	r3, r8
 800affc:	42bb      	cmp	r3, r7
 800affe:	bfa8      	it	ge
 800b000:	463b      	movge	r3, r7
 800b002:	2b00      	cmp	r3, #0
 800b004:	bfc2      	ittt	gt
 800b006:	eba8 0803 	subgt.w	r8, r8, r3
 800b00a:	1aff      	subgt	r7, r7, r3
 800b00c:	eba9 0903 	subgt.w	r9, r9, r3
 800b010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b012:	2b00      	cmp	r3, #0
 800b014:	dd17      	ble.n	800b046 <_strtod_l+0x75e>
 800b016:	4631      	mov	r1, r6
 800b018:	461a      	mov	r2, r3
 800b01a:	4620      	mov	r0, r4
 800b01c:	f001 ffa2 	bl	800cf64 <__pow5mult>
 800b020:	4606      	mov	r6, r0
 800b022:	2800      	cmp	r0, #0
 800b024:	f43f aea8 	beq.w	800ad78 <_strtod_l+0x490>
 800b028:	4601      	mov	r1, r0
 800b02a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b02c:	4620      	mov	r0, r4
 800b02e:	f001 feef 	bl	800ce10 <__multiply>
 800b032:	900b      	str	r0, [sp, #44]	; 0x2c
 800b034:	2800      	cmp	r0, #0
 800b036:	f43f ae9f 	beq.w	800ad78 <_strtod_l+0x490>
 800b03a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b03c:	4620      	mov	r0, r4
 800b03e:	f001 fdcf 	bl	800cbe0 <_Bfree>
 800b042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b044:	9318      	str	r3, [sp, #96]	; 0x60
 800b046:	f1b8 0f00 	cmp.w	r8, #0
 800b04a:	f300 808c 	bgt.w	800b166 <_strtod_l+0x87e>
 800b04e:	9b06      	ldr	r3, [sp, #24]
 800b050:	2b00      	cmp	r3, #0
 800b052:	dd08      	ble.n	800b066 <_strtod_l+0x77e>
 800b054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b056:	9905      	ldr	r1, [sp, #20]
 800b058:	4620      	mov	r0, r4
 800b05a:	f001 ff83 	bl	800cf64 <__pow5mult>
 800b05e:	9005      	str	r0, [sp, #20]
 800b060:	2800      	cmp	r0, #0
 800b062:	f43f ae89 	beq.w	800ad78 <_strtod_l+0x490>
 800b066:	2f00      	cmp	r7, #0
 800b068:	dd08      	ble.n	800b07c <_strtod_l+0x794>
 800b06a:	9905      	ldr	r1, [sp, #20]
 800b06c:	463a      	mov	r2, r7
 800b06e:	4620      	mov	r0, r4
 800b070:	f001 ffd2 	bl	800d018 <__lshift>
 800b074:	9005      	str	r0, [sp, #20]
 800b076:	2800      	cmp	r0, #0
 800b078:	f43f ae7e 	beq.w	800ad78 <_strtod_l+0x490>
 800b07c:	f1b9 0f00 	cmp.w	r9, #0
 800b080:	dd08      	ble.n	800b094 <_strtod_l+0x7ac>
 800b082:	4631      	mov	r1, r6
 800b084:	464a      	mov	r2, r9
 800b086:	4620      	mov	r0, r4
 800b088:	f001 ffc6 	bl	800d018 <__lshift>
 800b08c:	4606      	mov	r6, r0
 800b08e:	2800      	cmp	r0, #0
 800b090:	f43f ae72 	beq.w	800ad78 <_strtod_l+0x490>
 800b094:	9a05      	ldr	r2, [sp, #20]
 800b096:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b098:	4620      	mov	r0, r4
 800b09a:	f002 f849 	bl	800d130 <__mdiff>
 800b09e:	4605      	mov	r5, r0
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	f43f ae69 	beq.w	800ad78 <_strtod_l+0x490>
 800b0a6:	68c3      	ldr	r3, [r0, #12]
 800b0a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60c3      	str	r3, [r0, #12]
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	f002 f822 	bl	800d0f8 <__mcmp>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	da60      	bge.n	800b17a <_strtod_l+0x892>
 800b0b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0ba:	ea53 030a 	orrs.w	r3, r3, sl
 800b0be:	f040 8082 	bne.w	800b1c6 <_strtod_l+0x8de>
 800b0c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d17d      	bne.n	800b1c6 <_strtod_l+0x8de>
 800b0ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b0ce:	0d1b      	lsrs	r3, r3, #20
 800b0d0:	051b      	lsls	r3, r3, #20
 800b0d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b0d6:	d976      	bls.n	800b1c6 <_strtod_l+0x8de>
 800b0d8:	696b      	ldr	r3, [r5, #20]
 800b0da:	b913      	cbnz	r3, 800b0e2 <_strtod_l+0x7fa>
 800b0dc:	692b      	ldr	r3, [r5, #16]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	dd71      	ble.n	800b1c6 <_strtod_l+0x8de>
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f001 ff96 	bl	800d018 <__lshift>
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	f002 f802 	bl	800d0f8 <__mcmp>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	dd66      	ble.n	800b1c6 <_strtod_l+0x8de>
 800b0f8:	9904      	ldr	r1, [sp, #16]
 800b0fa:	4a53      	ldr	r2, [pc, #332]	; (800b248 <_strtod_l+0x960>)
 800b0fc:	465b      	mov	r3, fp
 800b0fe:	2900      	cmp	r1, #0
 800b100:	f000 8081 	beq.w	800b206 <_strtod_l+0x91e>
 800b104:	ea02 010b 	and.w	r1, r2, fp
 800b108:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b10c:	dc7b      	bgt.n	800b206 <_strtod_l+0x91e>
 800b10e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b112:	f77f aea9 	ble.w	800ae68 <_strtod_l+0x580>
 800b116:	4b4d      	ldr	r3, [pc, #308]	; (800b24c <_strtod_l+0x964>)
 800b118:	4650      	mov	r0, sl
 800b11a:	4659      	mov	r1, fp
 800b11c:	2200      	movs	r2, #0
 800b11e:	f7f5 faa3 	bl	8000668 <__aeabi_dmul>
 800b122:	460b      	mov	r3, r1
 800b124:	4303      	orrs	r3, r0
 800b126:	bf08      	it	eq
 800b128:	2322      	moveq	r3, #34	; 0x22
 800b12a:	4682      	mov	sl, r0
 800b12c:	468b      	mov	fp, r1
 800b12e:	bf08      	it	eq
 800b130:	6023      	streq	r3, [r4, #0]
 800b132:	e62b      	b.n	800ad8c <_strtod_l+0x4a4>
 800b134:	f04f 32ff 	mov.w	r2, #4294967295
 800b138:	fa02 f303 	lsl.w	r3, r2, r3
 800b13c:	ea03 0a0a 	and.w	sl, r3, sl
 800b140:	e6e3      	b.n	800af0a <_strtod_l+0x622>
 800b142:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b146:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b14a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b14e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b152:	fa01 f308 	lsl.w	r3, r1, r8
 800b156:	9308      	str	r3, [sp, #32]
 800b158:	910d      	str	r1, [sp, #52]	; 0x34
 800b15a:	e746      	b.n	800afea <_strtod_l+0x702>
 800b15c:	2300      	movs	r3, #0
 800b15e:	9308      	str	r3, [sp, #32]
 800b160:	2301      	movs	r3, #1
 800b162:	930d      	str	r3, [sp, #52]	; 0x34
 800b164:	e741      	b.n	800afea <_strtod_l+0x702>
 800b166:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b168:	4642      	mov	r2, r8
 800b16a:	4620      	mov	r0, r4
 800b16c:	f001 ff54 	bl	800d018 <__lshift>
 800b170:	9018      	str	r0, [sp, #96]	; 0x60
 800b172:	2800      	cmp	r0, #0
 800b174:	f47f af6b 	bne.w	800b04e <_strtod_l+0x766>
 800b178:	e5fe      	b.n	800ad78 <_strtod_l+0x490>
 800b17a:	465f      	mov	r7, fp
 800b17c:	d16e      	bne.n	800b25c <_strtod_l+0x974>
 800b17e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b180:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b184:	b342      	cbz	r2, 800b1d8 <_strtod_l+0x8f0>
 800b186:	4a32      	ldr	r2, [pc, #200]	; (800b250 <_strtod_l+0x968>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d128      	bne.n	800b1de <_strtod_l+0x8f6>
 800b18c:	9b04      	ldr	r3, [sp, #16]
 800b18e:	4651      	mov	r1, sl
 800b190:	b1eb      	cbz	r3, 800b1ce <_strtod_l+0x8e6>
 800b192:	4b2d      	ldr	r3, [pc, #180]	; (800b248 <_strtod_l+0x960>)
 800b194:	403b      	ands	r3, r7
 800b196:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b19a:	f04f 32ff 	mov.w	r2, #4294967295
 800b19e:	d819      	bhi.n	800b1d4 <_strtod_l+0x8ec>
 800b1a0:	0d1b      	lsrs	r3, r3, #20
 800b1a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b1a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b1aa:	4299      	cmp	r1, r3
 800b1ac:	d117      	bne.n	800b1de <_strtod_l+0x8f6>
 800b1ae:	4b29      	ldr	r3, [pc, #164]	; (800b254 <_strtod_l+0x96c>)
 800b1b0:	429f      	cmp	r7, r3
 800b1b2:	d102      	bne.n	800b1ba <_strtod_l+0x8d2>
 800b1b4:	3101      	adds	r1, #1
 800b1b6:	f43f addf 	beq.w	800ad78 <_strtod_l+0x490>
 800b1ba:	4b23      	ldr	r3, [pc, #140]	; (800b248 <_strtod_l+0x960>)
 800b1bc:	403b      	ands	r3, r7
 800b1be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b1c2:	f04f 0a00 	mov.w	sl, #0
 800b1c6:	9b04      	ldr	r3, [sp, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1a4      	bne.n	800b116 <_strtod_l+0x82e>
 800b1cc:	e5de      	b.n	800ad8c <_strtod_l+0x4a4>
 800b1ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d2:	e7ea      	b.n	800b1aa <_strtod_l+0x8c2>
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	e7e8      	b.n	800b1aa <_strtod_l+0x8c2>
 800b1d8:	ea53 030a 	orrs.w	r3, r3, sl
 800b1dc:	d08c      	beq.n	800b0f8 <_strtod_l+0x810>
 800b1de:	9b08      	ldr	r3, [sp, #32]
 800b1e0:	b1db      	cbz	r3, 800b21a <_strtod_l+0x932>
 800b1e2:	423b      	tst	r3, r7
 800b1e4:	d0ef      	beq.n	800b1c6 <_strtod_l+0x8de>
 800b1e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1e8:	9a04      	ldr	r2, [sp, #16]
 800b1ea:	4650      	mov	r0, sl
 800b1ec:	4659      	mov	r1, fp
 800b1ee:	b1c3      	cbz	r3, 800b222 <_strtod_l+0x93a>
 800b1f0:	f7ff fb5e 	bl	800a8b0 <sulp>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	ec51 0b18 	vmov	r0, r1, d8
 800b1fc:	f7f5 f87e 	bl	80002fc <__adddf3>
 800b200:	4682      	mov	sl, r0
 800b202:	468b      	mov	fp, r1
 800b204:	e7df      	b.n	800b1c6 <_strtod_l+0x8de>
 800b206:	4013      	ands	r3, r2
 800b208:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b20c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b210:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b214:	f04f 3aff 	mov.w	sl, #4294967295
 800b218:	e7d5      	b.n	800b1c6 <_strtod_l+0x8de>
 800b21a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b21c:	ea13 0f0a 	tst.w	r3, sl
 800b220:	e7e0      	b.n	800b1e4 <_strtod_l+0x8fc>
 800b222:	f7ff fb45 	bl	800a8b0 <sulp>
 800b226:	4602      	mov	r2, r0
 800b228:	460b      	mov	r3, r1
 800b22a:	ec51 0b18 	vmov	r0, r1, d8
 800b22e:	f7f5 f863 	bl	80002f8 <__aeabi_dsub>
 800b232:	2200      	movs	r2, #0
 800b234:	2300      	movs	r3, #0
 800b236:	4682      	mov	sl, r0
 800b238:	468b      	mov	fp, r1
 800b23a:	f7f5 fc7d 	bl	8000b38 <__aeabi_dcmpeq>
 800b23e:	2800      	cmp	r0, #0
 800b240:	d0c1      	beq.n	800b1c6 <_strtod_l+0x8de>
 800b242:	e611      	b.n	800ae68 <_strtod_l+0x580>
 800b244:	fffffc02 	.word	0xfffffc02
 800b248:	7ff00000 	.word	0x7ff00000
 800b24c:	39500000 	.word	0x39500000
 800b250:	000fffff 	.word	0x000fffff
 800b254:	7fefffff 	.word	0x7fefffff
 800b258:	0800e658 	.word	0x0800e658
 800b25c:	4631      	mov	r1, r6
 800b25e:	4628      	mov	r0, r5
 800b260:	f002 f8c8 	bl	800d3f4 <__ratio>
 800b264:	ec59 8b10 	vmov	r8, r9, d0
 800b268:	ee10 0a10 	vmov	r0, s0
 800b26c:	2200      	movs	r2, #0
 800b26e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b272:	4649      	mov	r1, r9
 800b274:	f7f5 fc74 	bl	8000b60 <__aeabi_dcmple>
 800b278:	2800      	cmp	r0, #0
 800b27a:	d07a      	beq.n	800b372 <_strtod_l+0xa8a>
 800b27c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d04a      	beq.n	800b318 <_strtod_l+0xa30>
 800b282:	4b95      	ldr	r3, [pc, #596]	; (800b4d8 <_strtod_l+0xbf0>)
 800b284:	2200      	movs	r2, #0
 800b286:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b28a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b4d8 <_strtod_l+0xbf0>
 800b28e:	f04f 0800 	mov.w	r8, #0
 800b292:	4b92      	ldr	r3, [pc, #584]	; (800b4dc <_strtod_l+0xbf4>)
 800b294:	403b      	ands	r3, r7
 800b296:	930d      	str	r3, [sp, #52]	; 0x34
 800b298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b29a:	4b91      	ldr	r3, [pc, #580]	; (800b4e0 <_strtod_l+0xbf8>)
 800b29c:	429a      	cmp	r2, r3
 800b29e:	f040 80b0 	bne.w	800b402 <_strtod_l+0xb1a>
 800b2a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b2a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b2aa:	ec4b ab10 	vmov	d0, sl, fp
 800b2ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b2b2:	f001 ffc7 	bl	800d244 <__ulp>
 800b2b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b2ba:	ec53 2b10 	vmov	r2, r3, d0
 800b2be:	f7f5 f9d3 	bl	8000668 <__aeabi_dmul>
 800b2c2:	4652      	mov	r2, sl
 800b2c4:	465b      	mov	r3, fp
 800b2c6:	f7f5 f819 	bl	80002fc <__adddf3>
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4983      	ldr	r1, [pc, #524]	; (800b4dc <_strtod_l+0xbf4>)
 800b2ce:	4a85      	ldr	r2, [pc, #532]	; (800b4e4 <_strtod_l+0xbfc>)
 800b2d0:	4019      	ands	r1, r3
 800b2d2:	4291      	cmp	r1, r2
 800b2d4:	4682      	mov	sl, r0
 800b2d6:	d960      	bls.n	800b39a <_strtod_l+0xab2>
 800b2d8:	ee18 3a90 	vmov	r3, s17
 800b2dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d104      	bne.n	800b2ee <_strtod_l+0xa06>
 800b2e4:	ee18 3a10 	vmov	r3, s16
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	f43f ad45 	beq.w	800ad78 <_strtod_l+0x490>
 800b2ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b4f0 <_strtod_l+0xc08>
 800b2f2:	f04f 3aff 	mov.w	sl, #4294967295
 800b2f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f001 fc71 	bl	800cbe0 <_Bfree>
 800b2fe:	9905      	ldr	r1, [sp, #20]
 800b300:	4620      	mov	r0, r4
 800b302:	f001 fc6d 	bl	800cbe0 <_Bfree>
 800b306:	4631      	mov	r1, r6
 800b308:	4620      	mov	r0, r4
 800b30a:	f001 fc69 	bl	800cbe0 <_Bfree>
 800b30e:	4629      	mov	r1, r5
 800b310:	4620      	mov	r0, r4
 800b312:	f001 fc65 	bl	800cbe0 <_Bfree>
 800b316:	e61a      	b.n	800af4e <_strtod_l+0x666>
 800b318:	f1ba 0f00 	cmp.w	sl, #0
 800b31c:	d11b      	bne.n	800b356 <_strtod_l+0xa6e>
 800b31e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b322:	b9f3      	cbnz	r3, 800b362 <_strtod_l+0xa7a>
 800b324:	4b6c      	ldr	r3, [pc, #432]	; (800b4d8 <_strtod_l+0xbf0>)
 800b326:	2200      	movs	r2, #0
 800b328:	4640      	mov	r0, r8
 800b32a:	4649      	mov	r1, r9
 800b32c:	f7f5 fc0e 	bl	8000b4c <__aeabi_dcmplt>
 800b330:	b9d0      	cbnz	r0, 800b368 <_strtod_l+0xa80>
 800b332:	4640      	mov	r0, r8
 800b334:	4649      	mov	r1, r9
 800b336:	4b6c      	ldr	r3, [pc, #432]	; (800b4e8 <_strtod_l+0xc00>)
 800b338:	2200      	movs	r2, #0
 800b33a:	f7f5 f995 	bl	8000668 <__aeabi_dmul>
 800b33e:	4680      	mov	r8, r0
 800b340:	4689      	mov	r9, r1
 800b342:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b346:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b34a:	9315      	str	r3, [sp, #84]	; 0x54
 800b34c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b350:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b354:	e79d      	b.n	800b292 <_strtod_l+0x9aa>
 800b356:	f1ba 0f01 	cmp.w	sl, #1
 800b35a:	d102      	bne.n	800b362 <_strtod_l+0xa7a>
 800b35c:	2f00      	cmp	r7, #0
 800b35e:	f43f ad83 	beq.w	800ae68 <_strtod_l+0x580>
 800b362:	4b62      	ldr	r3, [pc, #392]	; (800b4ec <_strtod_l+0xc04>)
 800b364:	2200      	movs	r2, #0
 800b366:	e78e      	b.n	800b286 <_strtod_l+0x99e>
 800b368:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b4e8 <_strtod_l+0xc00>
 800b36c:	f04f 0800 	mov.w	r8, #0
 800b370:	e7e7      	b.n	800b342 <_strtod_l+0xa5a>
 800b372:	4b5d      	ldr	r3, [pc, #372]	; (800b4e8 <_strtod_l+0xc00>)
 800b374:	4640      	mov	r0, r8
 800b376:	4649      	mov	r1, r9
 800b378:	2200      	movs	r2, #0
 800b37a:	f7f5 f975 	bl	8000668 <__aeabi_dmul>
 800b37e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b380:	4680      	mov	r8, r0
 800b382:	4689      	mov	r9, r1
 800b384:	b933      	cbnz	r3, 800b394 <_strtod_l+0xaac>
 800b386:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b38a:	900e      	str	r0, [sp, #56]	; 0x38
 800b38c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b38e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b392:	e7dd      	b.n	800b350 <_strtod_l+0xa68>
 800b394:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b398:	e7f9      	b.n	800b38e <_strtod_l+0xaa6>
 800b39a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b39e:	9b04      	ldr	r3, [sp, #16]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1a8      	bne.n	800b2f6 <_strtod_l+0xa0e>
 800b3a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b3a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3aa:	0d1b      	lsrs	r3, r3, #20
 800b3ac:	051b      	lsls	r3, r3, #20
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d1a1      	bne.n	800b2f6 <_strtod_l+0xa0e>
 800b3b2:	4640      	mov	r0, r8
 800b3b4:	4649      	mov	r1, r9
 800b3b6:	f7f5 fcb7 	bl	8000d28 <__aeabi_d2lz>
 800b3ba:	f7f5 f927 	bl	800060c <__aeabi_l2d>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	4640      	mov	r0, r8
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	f7f4 ff97 	bl	80002f8 <__aeabi_dsub>
 800b3ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3d0:	ea43 030a 	orr.w	r3, r3, sl
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	4680      	mov	r8, r0
 800b3d8:	4689      	mov	r9, r1
 800b3da:	d055      	beq.n	800b488 <_strtod_l+0xba0>
 800b3dc:	a336      	add	r3, pc, #216	; (adr r3, 800b4b8 <_strtod_l+0xbd0>)
 800b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e2:	f7f5 fbb3 	bl	8000b4c <__aeabi_dcmplt>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f47f acd0 	bne.w	800ad8c <_strtod_l+0x4a4>
 800b3ec:	a334      	add	r3, pc, #208	; (adr r3, 800b4c0 <_strtod_l+0xbd8>)
 800b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	f7f5 fbc7 	bl	8000b88 <__aeabi_dcmpgt>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	f43f af7b 	beq.w	800b2f6 <_strtod_l+0xa0e>
 800b400:	e4c4      	b.n	800ad8c <_strtod_l+0x4a4>
 800b402:	9b04      	ldr	r3, [sp, #16]
 800b404:	b333      	cbz	r3, 800b454 <_strtod_l+0xb6c>
 800b406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b408:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b40c:	d822      	bhi.n	800b454 <_strtod_l+0xb6c>
 800b40e:	a32e      	add	r3, pc, #184	; (adr r3, 800b4c8 <_strtod_l+0xbe0>)
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	4640      	mov	r0, r8
 800b416:	4649      	mov	r1, r9
 800b418:	f7f5 fba2 	bl	8000b60 <__aeabi_dcmple>
 800b41c:	b1a0      	cbz	r0, 800b448 <_strtod_l+0xb60>
 800b41e:	4649      	mov	r1, r9
 800b420:	4640      	mov	r0, r8
 800b422:	f7f5 fbf9 	bl	8000c18 <__aeabi_d2uiz>
 800b426:	2801      	cmp	r0, #1
 800b428:	bf38      	it	cc
 800b42a:	2001      	movcc	r0, #1
 800b42c:	f7f5 f8a2 	bl	8000574 <__aeabi_ui2d>
 800b430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b432:	4680      	mov	r8, r0
 800b434:	4689      	mov	r9, r1
 800b436:	bb23      	cbnz	r3, 800b482 <_strtod_l+0xb9a>
 800b438:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b43c:	9010      	str	r0, [sp, #64]	; 0x40
 800b43e:	9311      	str	r3, [sp, #68]	; 0x44
 800b440:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b444:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b44a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b44c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b450:	1a9b      	subs	r3, r3, r2
 800b452:	9309      	str	r3, [sp, #36]	; 0x24
 800b454:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b458:	eeb0 0a48 	vmov.f32	s0, s16
 800b45c:	eef0 0a68 	vmov.f32	s1, s17
 800b460:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b464:	f001 feee 	bl	800d244 <__ulp>
 800b468:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b46c:	ec53 2b10 	vmov	r2, r3, d0
 800b470:	f7f5 f8fa 	bl	8000668 <__aeabi_dmul>
 800b474:	ec53 2b18 	vmov	r2, r3, d8
 800b478:	f7f4 ff40 	bl	80002fc <__adddf3>
 800b47c:	4682      	mov	sl, r0
 800b47e:	468b      	mov	fp, r1
 800b480:	e78d      	b.n	800b39e <_strtod_l+0xab6>
 800b482:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b486:	e7db      	b.n	800b440 <_strtod_l+0xb58>
 800b488:	a311      	add	r3, pc, #68	; (adr r3, 800b4d0 <_strtod_l+0xbe8>)
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	f7f5 fb5d 	bl	8000b4c <__aeabi_dcmplt>
 800b492:	e7b2      	b.n	800b3fa <_strtod_l+0xb12>
 800b494:	2300      	movs	r3, #0
 800b496:	930a      	str	r3, [sp, #40]	; 0x28
 800b498:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b49a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	f7ff ba6b 	b.w	800a978 <_strtod_l+0x90>
 800b4a2:	2a65      	cmp	r2, #101	; 0x65
 800b4a4:	f43f ab5f 	beq.w	800ab66 <_strtod_l+0x27e>
 800b4a8:	2a45      	cmp	r2, #69	; 0x45
 800b4aa:	f43f ab5c 	beq.w	800ab66 <_strtod_l+0x27e>
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	f7ff bb94 	b.w	800abdc <_strtod_l+0x2f4>
 800b4b4:	f3af 8000 	nop.w
 800b4b8:	94a03595 	.word	0x94a03595
 800b4bc:	3fdfffff 	.word	0x3fdfffff
 800b4c0:	35afe535 	.word	0x35afe535
 800b4c4:	3fe00000 	.word	0x3fe00000
 800b4c8:	ffc00000 	.word	0xffc00000
 800b4cc:	41dfffff 	.word	0x41dfffff
 800b4d0:	94a03595 	.word	0x94a03595
 800b4d4:	3fcfffff 	.word	0x3fcfffff
 800b4d8:	3ff00000 	.word	0x3ff00000
 800b4dc:	7ff00000 	.word	0x7ff00000
 800b4e0:	7fe00000 	.word	0x7fe00000
 800b4e4:	7c9fffff 	.word	0x7c9fffff
 800b4e8:	3fe00000 	.word	0x3fe00000
 800b4ec:	bff00000 	.word	0xbff00000
 800b4f0:	7fefffff 	.word	0x7fefffff

0800b4f4 <_strtod_r>:
 800b4f4:	4b01      	ldr	r3, [pc, #4]	; (800b4fc <_strtod_r+0x8>)
 800b4f6:	f7ff b9f7 	b.w	800a8e8 <_strtod_l>
 800b4fa:	bf00      	nop
 800b4fc:	20000214 	.word	0x20000214

0800b500 <strtok>:
 800b500:	4b16      	ldr	r3, [pc, #88]	; (800b55c <strtok+0x5c>)
 800b502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b504:	681e      	ldr	r6, [r3, #0]
 800b506:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b508:	4605      	mov	r5, r0
 800b50a:	b9fc      	cbnz	r4, 800b54c <strtok+0x4c>
 800b50c:	2050      	movs	r0, #80	; 0x50
 800b50e:	9101      	str	r1, [sp, #4]
 800b510:	f001 fafe 	bl	800cb10 <malloc>
 800b514:	9901      	ldr	r1, [sp, #4]
 800b516:	65b0      	str	r0, [r6, #88]	; 0x58
 800b518:	4602      	mov	r2, r0
 800b51a:	b920      	cbnz	r0, 800b526 <strtok+0x26>
 800b51c:	4b10      	ldr	r3, [pc, #64]	; (800b560 <strtok+0x60>)
 800b51e:	4811      	ldr	r0, [pc, #68]	; (800b564 <strtok+0x64>)
 800b520:	2157      	movs	r1, #87	; 0x57
 800b522:	f000 f8d7 	bl	800b6d4 <__assert_func>
 800b526:	e9c0 4400 	strd	r4, r4, [r0]
 800b52a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b52e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b532:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b536:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b53a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b53e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b542:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b546:	6184      	str	r4, [r0, #24]
 800b548:	7704      	strb	r4, [r0, #28]
 800b54a:	6244      	str	r4, [r0, #36]	; 0x24
 800b54c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b54e:	2301      	movs	r3, #1
 800b550:	4628      	mov	r0, r5
 800b552:	b002      	add	sp, #8
 800b554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b558:	f000 b806 	b.w	800b568 <__strtok_r>
 800b55c:	200001ac 	.word	0x200001ac
 800b560:	0800e680 	.word	0x0800e680
 800b564:	0800e697 	.word	0x0800e697

0800b568 <__strtok_r>:
 800b568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b56a:	b908      	cbnz	r0, 800b570 <__strtok_r+0x8>
 800b56c:	6810      	ldr	r0, [r2, #0]
 800b56e:	b188      	cbz	r0, 800b594 <__strtok_r+0x2c>
 800b570:	4604      	mov	r4, r0
 800b572:	4620      	mov	r0, r4
 800b574:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b578:	460f      	mov	r7, r1
 800b57a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b57e:	b91e      	cbnz	r6, 800b588 <__strtok_r+0x20>
 800b580:	b965      	cbnz	r5, 800b59c <__strtok_r+0x34>
 800b582:	6015      	str	r5, [r2, #0]
 800b584:	4628      	mov	r0, r5
 800b586:	e005      	b.n	800b594 <__strtok_r+0x2c>
 800b588:	42b5      	cmp	r5, r6
 800b58a:	d1f6      	bne.n	800b57a <__strtok_r+0x12>
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d1f0      	bne.n	800b572 <__strtok_r+0xa>
 800b590:	6014      	str	r4, [r2, #0]
 800b592:	7003      	strb	r3, [r0, #0]
 800b594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b596:	461c      	mov	r4, r3
 800b598:	e00c      	b.n	800b5b4 <__strtok_r+0x4c>
 800b59a:	b915      	cbnz	r5, 800b5a2 <__strtok_r+0x3a>
 800b59c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b5a0:	460e      	mov	r6, r1
 800b5a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b5a6:	42ab      	cmp	r3, r5
 800b5a8:	d1f7      	bne.n	800b59a <__strtok_r+0x32>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d0f3      	beq.n	800b596 <__strtok_r+0x2e>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b5b4:	6014      	str	r4, [r2, #0]
 800b5b6:	e7ed      	b.n	800b594 <__strtok_r+0x2c>

0800b5b8 <_strtol_l.constprop.0>:
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5be:	d001      	beq.n	800b5c4 <_strtol_l.constprop.0+0xc>
 800b5c0:	2b24      	cmp	r3, #36	; 0x24
 800b5c2:	d906      	bls.n	800b5d2 <_strtol_l.constprop.0+0x1a>
 800b5c4:	f7fe faa2 	bl	8009b0c <__errno>
 800b5c8:	2316      	movs	r3, #22
 800b5ca:	6003      	str	r3, [r0, #0]
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b6b8 <_strtol_l.constprop.0+0x100>
 800b5d6:	460d      	mov	r5, r1
 800b5d8:	462e      	mov	r6, r5
 800b5da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5de:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b5e2:	f017 0708 	ands.w	r7, r7, #8
 800b5e6:	d1f7      	bne.n	800b5d8 <_strtol_l.constprop.0+0x20>
 800b5e8:	2c2d      	cmp	r4, #45	; 0x2d
 800b5ea:	d132      	bne.n	800b652 <_strtol_l.constprop.0+0x9a>
 800b5ec:	782c      	ldrb	r4, [r5, #0]
 800b5ee:	2701      	movs	r7, #1
 800b5f0:	1cb5      	adds	r5, r6, #2
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d05b      	beq.n	800b6ae <_strtol_l.constprop.0+0xf6>
 800b5f6:	2b10      	cmp	r3, #16
 800b5f8:	d109      	bne.n	800b60e <_strtol_l.constprop.0+0x56>
 800b5fa:	2c30      	cmp	r4, #48	; 0x30
 800b5fc:	d107      	bne.n	800b60e <_strtol_l.constprop.0+0x56>
 800b5fe:	782c      	ldrb	r4, [r5, #0]
 800b600:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b604:	2c58      	cmp	r4, #88	; 0x58
 800b606:	d14d      	bne.n	800b6a4 <_strtol_l.constprop.0+0xec>
 800b608:	786c      	ldrb	r4, [r5, #1]
 800b60a:	2310      	movs	r3, #16
 800b60c:	3502      	adds	r5, #2
 800b60e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b612:	f108 38ff 	add.w	r8, r8, #4294967295
 800b616:	f04f 0c00 	mov.w	ip, #0
 800b61a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b61e:	4666      	mov	r6, ip
 800b620:	fb03 8a19 	mls	sl, r3, r9, r8
 800b624:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b628:	f1be 0f09 	cmp.w	lr, #9
 800b62c:	d816      	bhi.n	800b65c <_strtol_l.constprop.0+0xa4>
 800b62e:	4674      	mov	r4, lr
 800b630:	42a3      	cmp	r3, r4
 800b632:	dd24      	ble.n	800b67e <_strtol_l.constprop.0+0xc6>
 800b634:	f1bc 0f00 	cmp.w	ip, #0
 800b638:	db1e      	blt.n	800b678 <_strtol_l.constprop.0+0xc0>
 800b63a:	45b1      	cmp	r9, r6
 800b63c:	d31c      	bcc.n	800b678 <_strtol_l.constprop.0+0xc0>
 800b63e:	d101      	bne.n	800b644 <_strtol_l.constprop.0+0x8c>
 800b640:	45a2      	cmp	sl, r4
 800b642:	db19      	blt.n	800b678 <_strtol_l.constprop.0+0xc0>
 800b644:	fb06 4603 	mla	r6, r6, r3, r4
 800b648:	f04f 0c01 	mov.w	ip, #1
 800b64c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b650:	e7e8      	b.n	800b624 <_strtol_l.constprop.0+0x6c>
 800b652:	2c2b      	cmp	r4, #43	; 0x2b
 800b654:	bf04      	itt	eq
 800b656:	782c      	ldrbeq	r4, [r5, #0]
 800b658:	1cb5      	addeq	r5, r6, #2
 800b65a:	e7ca      	b.n	800b5f2 <_strtol_l.constprop.0+0x3a>
 800b65c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b660:	f1be 0f19 	cmp.w	lr, #25
 800b664:	d801      	bhi.n	800b66a <_strtol_l.constprop.0+0xb2>
 800b666:	3c37      	subs	r4, #55	; 0x37
 800b668:	e7e2      	b.n	800b630 <_strtol_l.constprop.0+0x78>
 800b66a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b66e:	f1be 0f19 	cmp.w	lr, #25
 800b672:	d804      	bhi.n	800b67e <_strtol_l.constprop.0+0xc6>
 800b674:	3c57      	subs	r4, #87	; 0x57
 800b676:	e7db      	b.n	800b630 <_strtol_l.constprop.0+0x78>
 800b678:	f04f 3cff 	mov.w	ip, #4294967295
 800b67c:	e7e6      	b.n	800b64c <_strtol_l.constprop.0+0x94>
 800b67e:	f1bc 0f00 	cmp.w	ip, #0
 800b682:	da05      	bge.n	800b690 <_strtol_l.constprop.0+0xd8>
 800b684:	2322      	movs	r3, #34	; 0x22
 800b686:	6003      	str	r3, [r0, #0]
 800b688:	4646      	mov	r6, r8
 800b68a:	b942      	cbnz	r2, 800b69e <_strtol_l.constprop.0+0xe6>
 800b68c:	4630      	mov	r0, r6
 800b68e:	e79e      	b.n	800b5ce <_strtol_l.constprop.0+0x16>
 800b690:	b107      	cbz	r7, 800b694 <_strtol_l.constprop.0+0xdc>
 800b692:	4276      	negs	r6, r6
 800b694:	2a00      	cmp	r2, #0
 800b696:	d0f9      	beq.n	800b68c <_strtol_l.constprop.0+0xd4>
 800b698:	f1bc 0f00 	cmp.w	ip, #0
 800b69c:	d000      	beq.n	800b6a0 <_strtol_l.constprop.0+0xe8>
 800b69e:	1e69      	subs	r1, r5, #1
 800b6a0:	6011      	str	r1, [r2, #0]
 800b6a2:	e7f3      	b.n	800b68c <_strtol_l.constprop.0+0xd4>
 800b6a4:	2430      	movs	r4, #48	; 0x30
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1b1      	bne.n	800b60e <_strtol_l.constprop.0+0x56>
 800b6aa:	2308      	movs	r3, #8
 800b6ac:	e7af      	b.n	800b60e <_strtol_l.constprop.0+0x56>
 800b6ae:	2c30      	cmp	r4, #48	; 0x30
 800b6b0:	d0a5      	beq.n	800b5fe <_strtol_l.constprop.0+0x46>
 800b6b2:	230a      	movs	r3, #10
 800b6b4:	e7ab      	b.n	800b60e <_strtol_l.constprop.0+0x56>
 800b6b6:	bf00      	nop
 800b6b8:	0800e731 	.word	0x0800e731

0800b6bc <_strtol_r>:
 800b6bc:	f7ff bf7c 	b.w	800b5b8 <_strtol_l.constprop.0>

0800b6c0 <strtol>:
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	460a      	mov	r2, r1
 800b6c4:	4601      	mov	r1, r0
 800b6c6:	4802      	ldr	r0, [pc, #8]	; (800b6d0 <strtol+0x10>)
 800b6c8:	6800      	ldr	r0, [r0, #0]
 800b6ca:	f7ff bf75 	b.w	800b5b8 <_strtol_l.constprop.0>
 800b6ce:	bf00      	nop
 800b6d0:	200001ac 	.word	0x200001ac

0800b6d4 <__assert_func>:
 800b6d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6d6:	4614      	mov	r4, r2
 800b6d8:	461a      	mov	r2, r3
 800b6da:	4b09      	ldr	r3, [pc, #36]	; (800b700 <__assert_func+0x2c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4605      	mov	r5, r0
 800b6e0:	68d8      	ldr	r0, [r3, #12]
 800b6e2:	b14c      	cbz	r4, 800b6f8 <__assert_func+0x24>
 800b6e4:	4b07      	ldr	r3, [pc, #28]	; (800b704 <__assert_func+0x30>)
 800b6e6:	9100      	str	r1, [sp, #0]
 800b6e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6ec:	4906      	ldr	r1, [pc, #24]	; (800b708 <__assert_func+0x34>)
 800b6ee:	462b      	mov	r3, r5
 800b6f0:	f000 fe88 	bl	800c404 <fiprintf>
 800b6f4:	f002 fb9e 	bl	800de34 <abort>
 800b6f8:	4b04      	ldr	r3, [pc, #16]	; (800b70c <__assert_func+0x38>)
 800b6fa:	461c      	mov	r4, r3
 800b6fc:	e7f3      	b.n	800b6e6 <__assert_func+0x12>
 800b6fe:	bf00      	nop
 800b700:	200001ac 	.word	0x200001ac
 800b704:	0800e6f4 	.word	0x0800e6f4
 800b708:	0800e701 	.word	0x0800e701
 800b70c:	0800e72f 	.word	0x0800e72f

0800b710 <quorem>:
 800b710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	6903      	ldr	r3, [r0, #16]
 800b716:	690c      	ldr	r4, [r1, #16]
 800b718:	42a3      	cmp	r3, r4
 800b71a:	4607      	mov	r7, r0
 800b71c:	f2c0 8081 	blt.w	800b822 <quorem+0x112>
 800b720:	3c01      	subs	r4, #1
 800b722:	f101 0814 	add.w	r8, r1, #20
 800b726:	f100 0514 	add.w	r5, r0, #20
 800b72a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b72e:	9301      	str	r3, [sp, #4]
 800b730:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b734:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b738:	3301      	adds	r3, #1
 800b73a:	429a      	cmp	r2, r3
 800b73c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b744:	fbb2 f6f3 	udiv	r6, r2, r3
 800b748:	d331      	bcc.n	800b7ae <quorem+0x9e>
 800b74a:	f04f 0e00 	mov.w	lr, #0
 800b74e:	4640      	mov	r0, r8
 800b750:	46ac      	mov	ip, r5
 800b752:	46f2      	mov	sl, lr
 800b754:	f850 2b04 	ldr.w	r2, [r0], #4
 800b758:	b293      	uxth	r3, r2
 800b75a:	fb06 e303 	mla	r3, r6, r3, lr
 800b75e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b762:	b29b      	uxth	r3, r3
 800b764:	ebaa 0303 	sub.w	r3, sl, r3
 800b768:	f8dc a000 	ldr.w	sl, [ip]
 800b76c:	0c12      	lsrs	r2, r2, #16
 800b76e:	fa13 f38a 	uxtah	r3, r3, sl
 800b772:	fb06 e202 	mla	r2, r6, r2, lr
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	9b00      	ldr	r3, [sp, #0]
 800b77a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b77e:	b292      	uxth	r2, r2
 800b780:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b784:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b788:	f8bd 3000 	ldrh.w	r3, [sp]
 800b78c:	4581      	cmp	r9, r0
 800b78e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b792:	f84c 3b04 	str.w	r3, [ip], #4
 800b796:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b79a:	d2db      	bcs.n	800b754 <quorem+0x44>
 800b79c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b7a0:	b92b      	cbnz	r3, 800b7ae <quorem+0x9e>
 800b7a2:	9b01      	ldr	r3, [sp, #4]
 800b7a4:	3b04      	subs	r3, #4
 800b7a6:	429d      	cmp	r5, r3
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	d32e      	bcc.n	800b80a <quorem+0xfa>
 800b7ac:	613c      	str	r4, [r7, #16]
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	f001 fca2 	bl	800d0f8 <__mcmp>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	db24      	blt.n	800b802 <quorem+0xf2>
 800b7b8:	3601      	adds	r6, #1
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	f04f 0c00 	mov.w	ip, #0
 800b7c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7c4:	f8d0 e000 	ldr.w	lr, [r0]
 800b7c8:	b293      	uxth	r3, r2
 800b7ca:	ebac 0303 	sub.w	r3, ip, r3
 800b7ce:	0c12      	lsrs	r2, r2, #16
 800b7d0:	fa13 f38e 	uxtah	r3, r3, lr
 800b7d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7e2:	45c1      	cmp	r9, r8
 800b7e4:	f840 3b04 	str.w	r3, [r0], #4
 800b7e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7ec:	d2e8      	bcs.n	800b7c0 <quorem+0xb0>
 800b7ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7f6:	b922      	cbnz	r2, 800b802 <quorem+0xf2>
 800b7f8:	3b04      	subs	r3, #4
 800b7fa:	429d      	cmp	r5, r3
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	d30a      	bcc.n	800b816 <quorem+0x106>
 800b800:	613c      	str	r4, [r7, #16]
 800b802:	4630      	mov	r0, r6
 800b804:	b003      	add	sp, #12
 800b806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80a:	6812      	ldr	r2, [r2, #0]
 800b80c:	3b04      	subs	r3, #4
 800b80e:	2a00      	cmp	r2, #0
 800b810:	d1cc      	bne.n	800b7ac <quorem+0x9c>
 800b812:	3c01      	subs	r4, #1
 800b814:	e7c7      	b.n	800b7a6 <quorem+0x96>
 800b816:	6812      	ldr	r2, [r2, #0]
 800b818:	3b04      	subs	r3, #4
 800b81a:	2a00      	cmp	r2, #0
 800b81c:	d1f0      	bne.n	800b800 <quorem+0xf0>
 800b81e:	3c01      	subs	r4, #1
 800b820:	e7eb      	b.n	800b7fa <quorem+0xea>
 800b822:	2000      	movs	r0, #0
 800b824:	e7ee      	b.n	800b804 <quorem+0xf4>
	...

0800b828 <_dtoa_r>:
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	ed2d 8b04 	vpush	{d8-d9}
 800b830:	ec57 6b10 	vmov	r6, r7, d0
 800b834:	b093      	sub	sp, #76	; 0x4c
 800b836:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b838:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b83c:	9106      	str	r1, [sp, #24]
 800b83e:	ee10 aa10 	vmov	sl, s0
 800b842:	4604      	mov	r4, r0
 800b844:	9209      	str	r2, [sp, #36]	; 0x24
 800b846:	930c      	str	r3, [sp, #48]	; 0x30
 800b848:	46bb      	mov	fp, r7
 800b84a:	b975      	cbnz	r5, 800b86a <_dtoa_r+0x42>
 800b84c:	2010      	movs	r0, #16
 800b84e:	f001 f95f 	bl	800cb10 <malloc>
 800b852:	4602      	mov	r2, r0
 800b854:	6260      	str	r0, [r4, #36]	; 0x24
 800b856:	b920      	cbnz	r0, 800b862 <_dtoa_r+0x3a>
 800b858:	4ba7      	ldr	r3, [pc, #668]	; (800baf8 <_dtoa_r+0x2d0>)
 800b85a:	21ea      	movs	r1, #234	; 0xea
 800b85c:	48a7      	ldr	r0, [pc, #668]	; (800bafc <_dtoa_r+0x2d4>)
 800b85e:	f7ff ff39 	bl	800b6d4 <__assert_func>
 800b862:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b866:	6005      	str	r5, [r0, #0]
 800b868:	60c5      	str	r5, [r0, #12]
 800b86a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b86c:	6819      	ldr	r1, [r3, #0]
 800b86e:	b151      	cbz	r1, 800b886 <_dtoa_r+0x5e>
 800b870:	685a      	ldr	r2, [r3, #4]
 800b872:	604a      	str	r2, [r1, #4]
 800b874:	2301      	movs	r3, #1
 800b876:	4093      	lsls	r3, r2
 800b878:	608b      	str	r3, [r1, #8]
 800b87a:	4620      	mov	r0, r4
 800b87c:	f001 f9b0 	bl	800cbe0 <_Bfree>
 800b880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b882:	2200      	movs	r2, #0
 800b884:	601a      	str	r2, [r3, #0]
 800b886:	1e3b      	subs	r3, r7, #0
 800b888:	bfaa      	itet	ge
 800b88a:	2300      	movge	r3, #0
 800b88c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b890:	f8c8 3000 	strge.w	r3, [r8]
 800b894:	4b9a      	ldr	r3, [pc, #616]	; (800bb00 <_dtoa_r+0x2d8>)
 800b896:	bfbc      	itt	lt
 800b898:	2201      	movlt	r2, #1
 800b89a:	f8c8 2000 	strlt.w	r2, [r8]
 800b89e:	ea33 030b 	bics.w	r3, r3, fp
 800b8a2:	d11b      	bne.n	800b8dc <_dtoa_r+0xb4>
 800b8a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8b0:	4333      	orrs	r3, r6
 800b8b2:	f000 8592 	beq.w	800c3da <_dtoa_r+0xbb2>
 800b8b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8b8:	b963      	cbnz	r3, 800b8d4 <_dtoa_r+0xac>
 800b8ba:	4b92      	ldr	r3, [pc, #584]	; (800bb04 <_dtoa_r+0x2dc>)
 800b8bc:	e022      	b.n	800b904 <_dtoa_r+0xdc>
 800b8be:	4b92      	ldr	r3, [pc, #584]	; (800bb08 <_dtoa_r+0x2e0>)
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	3308      	adds	r3, #8
 800b8c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	9801      	ldr	r0, [sp, #4]
 800b8ca:	b013      	add	sp, #76	; 0x4c
 800b8cc:	ecbd 8b04 	vpop	{d8-d9}
 800b8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d4:	4b8b      	ldr	r3, [pc, #556]	; (800bb04 <_dtoa_r+0x2dc>)
 800b8d6:	9301      	str	r3, [sp, #4]
 800b8d8:	3303      	adds	r3, #3
 800b8da:	e7f3      	b.n	800b8c4 <_dtoa_r+0x9c>
 800b8dc:	2200      	movs	r2, #0
 800b8de:	2300      	movs	r3, #0
 800b8e0:	4650      	mov	r0, sl
 800b8e2:	4659      	mov	r1, fp
 800b8e4:	f7f5 f928 	bl	8000b38 <__aeabi_dcmpeq>
 800b8e8:	ec4b ab19 	vmov	d9, sl, fp
 800b8ec:	4680      	mov	r8, r0
 800b8ee:	b158      	cbz	r0, 800b908 <_dtoa_r+0xe0>
 800b8f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	6013      	str	r3, [r2, #0]
 800b8f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f000 856b 	beq.w	800c3d4 <_dtoa_r+0xbac>
 800b8fe:	4883      	ldr	r0, [pc, #524]	; (800bb0c <_dtoa_r+0x2e4>)
 800b900:	6018      	str	r0, [r3, #0]
 800b902:	1e43      	subs	r3, r0, #1
 800b904:	9301      	str	r3, [sp, #4]
 800b906:	e7df      	b.n	800b8c8 <_dtoa_r+0xa0>
 800b908:	ec4b ab10 	vmov	d0, sl, fp
 800b90c:	aa10      	add	r2, sp, #64	; 0x40
 800b90e:	a911      	add	r1, sp, #68	; 0x44
 800b910:	4620      	mov	r0, r4
 800b912:	f001 fd13 	bl	800d33c <__d2b>
 800b916:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b91a:	ee08 0a10 	vmov	s16, r0
 800b91e:	2d00      	cmp	r5, #0
 800b920:	f000 8084 	beq.w	800ba2c <_dtoa_r+0x204>
 800b924:	ee19 3a90 	vmov	r3, s19
 800b928:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b92c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b930:	4656      	mov	r6, sl
 800b932:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b936:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b93a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b93e:	4b74      	ldr	r3, [pc, #464]	; (800bb10 <_dtoa_r+0x2e8>)
 800b940:	2200      	movs	r2, #0
 800b942:	4630      	mov	r0, r6
 800b944:	4639      	mov	r1, r7
 800b946:	f7f4 fcd7 	bl	80002f8 <__aeabi_dsub>
 800b94a:	a365      	add	r3, pc, #404	; (adr r3, 800bae0 <_dtoa_r+0x2b8>)
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	f7f4 fe8a 	bl	8000668 <__aeabi_dmul>
 800b954:	a364      	add	r3, pc, #400	; (adr r3, 800bae8 <_dtoa_r+0x2c0>)
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	f7f4 fccf 	bl	80002fc <__adddf3>
 800b95e:	4606      	mov	r6, r0
 800b960:	4628      	mov	r0, r5
 800b962:	460f      	mov	r7, r1
 800b964:	f7f4 fe16 	bl	8000594 <__aeabi_i2d>
 800b968:	a361      	add	r3, pc, #388	; (adr r3, 800baf0 <_dtoa_r+0x2c8>)
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	f7f4 fe7b 	bl	8000668 <__aeabi_dmul>
 800b972:	4602      	mov	r2, r0
 800b974:	460b      	mov	r3, r1
 800b976:	4630      	mov	r0, r6
 800b978:	4639      	mov	r1, r7
 800b97a:	f7f4 fcbf 	bl	80002fc <__adddf3>
 800b97e:	4606      	mov	r6, r0
 800b980:	460f      	mov	r7, r1
 800b982:	f7f5 f921 	bl	8000bc8 <__aeabi_d2iz>
 800b986:	2200      	movs	r2, #0
 800b988:	9000      	str	r0, [sp, #0]
 800b98a:	2300      	movs	r3, #0
 800b98c:	4630      	mov	r0, r6
 800b98e:	4639      	mov	r1, r7
 800b990:	f7f5 f8dc 	bl	8000b4c <__aeabi_dcmplt>
 800b994:	b150      	cbz	r0, 800b9ac <_dtoa_r+0x184>
 800b996:	9800      	ldr	r0, [sp, #0]
 800b998:	f7f4 fdfc 	bl	8000594 <__aeabi_i2d>
 800b99c:	4632      	mov	r2, r6
 800b99e:	463b      	mov	r3, r7
 800b9a0:	f7f5 f8ca 	bl	8000b38 <__aeabi_dcmpeq>
 800b9a4:	b910      	cbnz	r0, 800b9ac <_dtoa_r+0x184>
 800b9a6:	9b00      	ldr	r3, [sp, #0]
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	9b00      	ldr	r3, [sp, #0]
 800b9ae:	2b16      	cmp	r3, #22
 800b9b0:	d85a      	bhi.n	800ba68 <_dtoa_r+0x240>
 800b9b2:	9a00      	ldr	r2, [sp, #0]
 800b9b4:	4b57      	ldr	r3, [pc, #348]	; (800bb14 <_dtoa_r+0x2ec>)
 800b9b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	ec51 0b19 	vmov	r0, r1, d9
 800b9c2:	f7f5 f8c3 	bl	8000b4c <__aeabi_dcmplt>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	d050      	beq.n	800ba6c <_dtoa_r+0x244>
 800b9ca:	9b00      	ldr	r3, [sp, #0]
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9d6:	1b5d      	subs	r5, r3, r5
 800b9d8:	1e6b      	subs	r3, r5, #1
 800b9da:	9305      	str	r3, [sp, #20]
 800b9dc:	bf45      	ittet	mi
 800b9de:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9e2:	9304      	strmi	r3, [sp, #16]
 800b9e4:	2300      	movpl	r3, #0
 800b9e6:	2300      	movmi	r3, #0
 800b9e8:	bf4c      	ite	mi
 800b9ea:	9305      	strmi	r3, [sp, #20]
 800b9ec:	9304      	strpl	r3, [sp, #16]
 800b9ee:	9b00      	ldr	r3, [sp, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	db3d      	blt.n	800ba70 <_dtoa_r+0x248>
 800b9f4:	9b05      	ldr	r3, [sp, #20]
 800b9f6:	9a00      	ldr	r2, [sp, #0]
 800b9f8:	920a      	str	r2, [sp, #40]	; 0x28
 800b9fa:	4413      	add	r3, r2
 800b9fc:	9305      	str	r3, [sp, #20]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	9307      	str	r3, [sp, #28]
 800ba02:	9b06      	ldr	r3, [sp, #24]
 800ba04:	2b09      	cmp	r3, #9
 800ba06:	f200 8089 	bhi.w	800bb1c <_dtoa_r+0x2f4>
 800ba0a:	2b05      	cmp	r3, #5
 800ba0c:	bfc4      	itt	gt
 800ba0e:	3b04      	subgt	r3, #4
 800ba10:	9306      	strgt	r3, [sp, #24]
 800ba12:	9b06      	ldr	r3, [sp, #24]
 800ba14:	f1a3 0302 	sub.w	r3, r3, #2
 800ba18:	bfcc      	ite	gt
 800ba1a:	2500      	movgt	r5, #0
 800ba1c:	2501      	movle	r5, #1
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	f200 8087 	bhi.w	800bb32 <_dtoa_r+0x30a>
 800ba24:	e8df f003 	tbb	[pc, r3]
 800ba28:	59383a2d 	.word	0x59383a2d
 800ba2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ba30:	441d      	add	r5, r3
 800ba32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba36:	2b20      	cmp	r3, #32
 800ba38:	bfc1      	itttt	gt
 800ba3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba42:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba46:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba4a:	bfda      	itte	le
 800ba4c:	f1c3 0320 	rsble	r3, r3, #32
 800ba50:	fa06 f003 	lslle.w	r0, r6, r3
 800ba54:	4318      	orrgt	r0, r3
 800ba56:	f7f4 fd8d 	bl	8000574 <__aeabi_ui2d>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba62:	3d01      	subs	r5, #1
 800ba64:	930e      	str	r3, [sp, #56]	; 0x38
 800ba66:	e76a      	b.n	800b93e <_dtoa_r+0x116>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e7b2      	b.n	800b9d2 <_dtoa_r+0x1aa>
 800ba6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba6e:	e7b1      	b.n	800b9d4 <_dtoa_r+0x1ac>
 800ba70:	9b04      	ldr	r3, [sp, #16]
 800ba72:	9a00      	ldr	r2, [sp, #0]
 800ba74:	1a9b      	subs	r3, r3, r2
 800ba76:	9304      	str	r3, [sp, #16]
 800ba78:	4253      	negs	r3, r2
 800ba7a:	9307      	str	r3, [sp, #28]
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba80:	e7bf      	b.n	800ba02 <_dtoa_r+0x1da>
 800ba82:	2300      	movs	r3, #0
 800ba84:	9308      	str	r3, [sp, #32]
 800ba86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	dc55      	bgt.n	800bb38 <_dtoa_r+0x310>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba92:	461a      	mov	r2, r3
 800ba94:	9209      	str	r2, [sp, #36]	; 0x24
 800ba96:	e00c      	b.n	800bab2 <_dtoa_r+0x28a>
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e7f3      	b.n	800ba84 <_dtoa_r+0x25c>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baa0:	9308      	str	r3, [sp, #32]
 800baa2:	9b00      	ldr	r3, [sp, #0]
 800baa4:	4413      	add	r3, r2
 800baa6:	9302      	str	r3, [sp, #8]
 800baa8:	3301      	adds	r3, #1
 800baaa:	2b01      	cmp	r3, #1
 800baac:	9303      	str	r3, [sp, #12]
 800baae:	bfb8      	it	lt
 800bab0:	2301      	movlt	r3, #1
 800bab2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bab4:	2200      	movs	r2, #0
 800bab6:	6042      	str	r2, [r0, #4]
 800bab8:	2204      	movs	r2, #4
 800baba:	f102 0614 	add.w	r6, r2, #20
 800babe:	429e      	cmp	r6, r3
 800bac0:	6841      	ldr	r1, [r0, #4]
 800bac2:	d93d      	bls.n	800bb40 <_dtoa_r+0x318>
 800bac4:	4620      	mov	r0, r4
 800bac6:	f001 f84b 	bl	800cb60 <_Balloc>
 800baca:	9001      	str	r0, [sp, #4]
 800bacc:	2800      	cmp	r0, #0
 800bace:	d13b      	bne.n	800bb48 <_dtoa_r+0x320>
 800bad0:	4b11      	ldr	r3, [pc, #68]	; (800bb18 <_dtoa_r+0x2f0>)
 800bad2:	4602      	mov	r2, r0
 800bad4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bad8:	e6c0      	b.n	800b85c <_dtoa_r+0x34>
 800bada:	2301      	movs	r3, #1
 800badc:	e7df      	b.n	800ba9e <_dtoa_r+0x276>
 800bade:	bf00      	nop
 800bae0:	636f4361 	.word	0x636f4361
 800bae4:	3fd287a7 	.word	0x3fd287a7
 800bae8:	8b60c8b3 	.word	0x8b60c8b3
 800baec:	3fc68a28 	.word	0x3fc68a28
 800baf0:	509f79fb 	.word	0x509f79fb
 800baf4:	3fd34413 	.word	0x3fd34413
 800baf8:	0800e680 	.word	0x0800e680
 800bafc:	0800e83e 	.word	0x0800e83e
 800bb00:	7ff00000 	.word	0x7ff00000
 800bb04:	0800e83a 	.word	0x0800e83a
 800bb08:	0800e831 	.word	0x0800e831
 800bb0c:	0800e605 	.word	0x0800e605
 800bb10:	3ff80000 	.word	0x3ff80000
 800bb14:	0800e9a8 	.word	0x0800e9a8
 800bb18:	0800e899 	.word	0x0800e899
 800bb1c:	2501      	movs	r5, #1
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9306      	str	r3, [sp, #24]
 800bb22:	9508      	str	r5, [sp, #32]
 800bb24:	f04f 33ff 	mov.w	r3, #4294967295
 800bb28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2312      	movs	r3, #18
 800bb30:	e7b0      	b.n	800ba94 <_dtoa_r+0x26c>
 800bb32:	2301      	movs	r3, #1
 800bb34:	9308      	str	r3, [sp, #32]
 800bb36:	e7f5      	b.n	800bb24 <_dtoa_r+0x2fc>
 800bb38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb3e:	e7b8      	b.n	800bab2 <_dtoa_r+0x28a>
 800bb40:	3101      	adds	r1, #1
 800bb42:	6041      	str	r1, [r0, #4]
 800bb44:	0052      	lsls	r2, r2, #1
 800bb46:	e7b8      	b.n	800baba <_dtoa_r+0x292>
 800bb48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb4a:	9a01      	ldr	r2, [sp, #4]
 800bb4c:	601a      	str	r2, [r3, #0]
 800bb4e:	9b03      	ldr	r3, [sp, #12]
 800bb50:	2b0e      	cmp	r3, #14
 800bb52:	f200 809d 	bhi.w	800bc90 <_dtoa_r+0x468>
 800bb56:	2d00      	cmp	r5, #0
 800bb58:	f000 809a 	beq.w	800bc90 <_dtoa_r+0x468>
 800bb5c:	9b00      	ldr	r3, [sp, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	dd32      	ble.n	800bbc8 <_dtoa_r+0x3a0>
 800bb62:	4ab7      	ldr	r2, [pc, #732]	; (800be40 <_dtoa_r+0x618>)
 800bb64:	f003 030f 	and.w	r3, r3, #15
 800bb68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb70:	9b00      	ldr	r3, [sp, #0]
 800bb72:	05d8      	lsls	r0, r3, #23
 800bb74:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bb78:	d516      	bpl.n	800bba8 <_dtoa_r+0x380>
 800bb7a:	4bb2      	ldr	r3, [pc, #712]	; (800be44 <_dtoa_r+0x61c>)
 800bb7c:	ec51 0b19 	vmov	r0, r1, d9
 800bb80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb84:	f7f4 fe9a 	bl	80008bc <__aeabi_ddiv>
 800bb88:	f007 070f 	and.w	r7, r7, #15
 800bb8c:	4682      	mov	sl, r0
 800bb8e:	468b      	mov	fp, r1
 800bb90:	2503      	movs	r5, #3
 800bb92:	4eac      	ldr	r6, [pc, #688]	; (800be44 <_dtoa_r+0x61c>)
 800bb94:	b957      	cbnz	r7, 800bbac <_dtoa_r+0x384>
 800bb96:	4642      	mov	r2, r8
 800bb98:	464b      	mov	r3, r9
 800bb9a:	4650      	mov	r0, sl
 800bb9c:	4659      	mov	r1, fp
 800bb9e:	f7f4 fe8d 	bl	80008bc <__aeabi_ddiv>
 800bba2:	4682      	mov	sl, r0
 800bba4:	468b      	mov	fp, r1
 800bba6:	e028      	b.n	800bbfa <_dtoa_r+0x3d2>
 800bba8:	2502      	movs	r5, #2
 800bbaa:	e7f2      	b.n	800bb92 <_dtoa_r+0x36a>
 800bbac:	07f9      	lsls	r1, r7, #31
 800bbae:	d508      	bpl.n	800bbc2 <_dtoa_r+0x39a>
 800bbb0:	4640      	mov	r0, r8
 800bbb2:	4649      	mov	r1, r9
 800bbb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbb8:	f7f4 fd56 	bl	8000668 <__aeabi_dmul>
 800bbbc:	3501      	adds	r5, #1
 800bbbe:	4680      	mov	r8, r0
 800bbc0:	4689      	mov	r9, r1
 800bbc2:	107f      	asrs	r7, r7, #1
 800bbc4:	3608      	adds	r6, #8
 800bbc6:	e7e5      	b.n	800bb94 <_dtoa_r+0x36c>
 800bbc8:	f000 809b 	beq.w	800bd02 <_dtoa_r+0x4da>
 800bbcc:	9b00      	ldr	r3, [sp, #0]
 800bbce:	4f9d      	ldr	r7, [pc, #628]	; (800be44 <_dtoa_r+0x61c>)
 800bbd0:	425e      	negs	r6, r3
 800bbd2:	4b9b      	ldr	r3, [pc, #620]	; (800be40 <_dtoa_r+0x618>)
 800bbd4:	f006 020f 	and.w	r2, r6, #15
 800bbd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	ec51 0b19 	vmov	r0, r1, d9
 800bbe4:	f7f4 fd40 	bl	8000668 <__aeabi_dmul>
 800bbe8:	1136      	asrs	r6, r6, #4
 800bbea:	4682      	mov	sl, r0
 800bbec:	468b      	mov	fp, r1
 800bbee:	2300      	movs	r3, #0
 800bbf0:	2502      	movs	r5, #2
 800bbf2:	2e00      	cmp	r6, #0
 800bbf4:	d17a      	bne.n	800bcec <_dtoa_r+0x4c4>
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1d3      	bne.n	800bba2 <_dtoa_r+0x37a>
 800bbfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 8082 	beq.w	800bd06 <_dtoa_r+0x4de>
 800bc02:	4b91      	ldr	r3, [pc, #580]	; (800be48 <_dtoa_r+0x620>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	4650      	mov	r0, sl
 800bc08:	4659      	mov	r1, fp
 800bc0a:	f7f4 ff9f 	bl	8000b4c <__aeabi_dcmplt>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d079      	beq.n	800bd06 <_dtoa_r+0x4de>
 800bc12:	9b03      	ldr	r3, [sp, #12]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d076      	beq.n	800bd06 <_dtoa_r+0x4de>
 800bc18:	9b02      	ldr	r3, [sp, #8]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	dd36      	ble.n	800bc8c <_dtoa_r+0x464>
 800bc1e:	9b00      	ldr	r3, [sp, #0]
 800bc20:	4650      	mov	r0, sl
 800bc22:	4659      	mov	r1, fp
 800bc24:	1e5f      	subs	r7, r3, #1
 800bc26:	2200      	movs	r2, #0
 800bc28:	4b88      	ldr	r3, [pc, #544]	; (800be4c <_dtoa_r+0x624>)
 800bc2a:	f7f4 fd1d 	bl	8000668 <__aeabi_dmul>
 800bc2e:	9e02      	ldr	r6, [sp, #8]
 800bc30:	4682      	mov	sl, r0
 800bc32:	468b      	mov	fp, r1
 800bc34:	3501      	adds	r5, #1
 800bc36:	4628      	mov	r0, r5
 800bc38:	f7f4 fcac 	bl	8000594 <__aeabi_i2d>
 800bc3c:	4652      	mov	r2, sl
 800bc3e:	465b      	mov	r3, fp
 800bc40:	f7f4 fd12 	bl	8000668 <__aeabi_dmul>
 800bc44:	4b82      	ldr	r3, [pc, #520]	; (800be50 <_dtoa_r+0x628>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	f7f4 fb58 	bl	80002fc <__adddf3>
 800bc4c:	46d0      	mov	r8, sl
 800bc4e:	46d9      	mov	r9, fp
 800bc50:	4682      	mov	sl, r0
 800bc52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc56:	2e00      	cmp	r6, #0
 800bc58:	d158      	bne.n	800bd0c <_dtoa_r+0x4e4>
 800bc5a:	4b7e      	ldr	r3, [pc, #504]	; (800be54 <_dtoa_r+0x62c>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	4640      	mov	r0, r8
 800bc60:	4649      	mov	r1, r9
 800bc62:	f7f4 fb49 	bl	80002f8 <__aeabi_dsub>
 800bc66:	4652      	mov	r2, sl
 800bc68:	465b      	mov	r3, fp
 800bc6a:	4680      	mov	r8, r0
 800bc6c:	4689      	mov	r9, r1
 800bc6e:	f7f4 ff8b 	bl	8000b88 <__aeabi_dcmpgt>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	f040 8295 	bne.w	800c1a2 <_dtoa_r+0x97a>
 800bc78:	4652      	mov	r2, sl
 800bc7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc7e:	4640      	mov	r0, r8
 800bc80:	4649      	mov	r1, r9
 800bc82:	f7f4 ff63 	bl	8000b4c <__aeabi_dcmplt>
 800bc86:	2800      	cmp	r0, #0
 800bc88:	f040 8289 	bne.w	800c19e <_dtoa_r+0x976>
 800bc8c:	ec5b ab19 	vmov	sl, fp, d9
 800bc90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f2c0 8148 	blt.w	800bf28 <_dtoa_r+0x700>
 800bc98:	9a00      	ldr	r2, [sp, #0]
 800bc9a:	2a0e      	cmp	r2, #14
 800bc9c:	f300 8144 	bgt.w	800bf28 <_dtoa_r+0x700>
 800bca0:	4b67      	ldr	r3, [pc, #412]	; (800be40 <_dtoa_r+0x618>)
 800bca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bca6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f280 80d5 	bge.w	800be5c <_dtoa_r+0x634>
 800bcb2:	9b03      	ldr	r3, [sp, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f300 80d1 	bgt.w	800be5c <_dtoa_r+0x634>
 800bcba:	f040 826f 	bne.w	800c19c <_dtoa_r+0x974>
 800bcbe:	4b65      	ldr	r3, [pc, #404]	; (800be54 <_dtoa_r+0x62c>)
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	4649      	mov	r1, r9
 800bcc6:	f7f4 fccf 	bl	8000668 <__aeabi_dmul>
 800bcca:	4652      	mov	r2, sl
 800bccc:	465b      	mov	r3, fp
 800bcce:	f7f4 ff51 	bl	8000b74 <__aeabi_dcmpge>
 800bcd2:	9e03      	ldr	r6, [sp, #12]
 800bcd4:	4637      	mov	r7, r6
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	f040 8245 	bne.w	800c166 <_dtoa_r+0x93e>
 800bcdc:	9d01      	ldr	r5, [sp, #4]
 800bcde:	2331      	movs	r3, #49	; 0x31
 800bce0:	f805 3b01 	strb.w	r3, [r5], #1
 800bce4:	9b00      	ldr	r3, [sp, #0]
 800bce6:	3301      	adds	r3, #1
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	e240      	b.n	800c16e <_dtoa_r+0x946>
 800bcec:	07f2      	lsls	r2, r6, #31
 800bcee:	d505      	bpl.n	800bcfc <_dtoa_r+0x4d4>
 800bcf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcf4:	f7f4 fcb8 	bl	8000668 <__aeabi_dmul>
 800bcf8:	3501      	adds	r5, #1
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	1076      	asrs	r6, r6, #1
 800bcfe:	3708      	adds	r7, #8
 800bd00:	e777      	b.n	800bbf2 <_dtoa_r+0x3ca>
 800bd02:	2502      	movs	r5, #2
 800bd04:	e779      	b.n	800bbfa <_dtoa_r+0x3d2>
 800bd06:	9f00      	ldr	r7, [sp, #0]
 800bd08:	9e03      	ldr	r6, [sp, #12]
 800bd0a:	e794      	b.n	800bc36 <_dtoa_r+0x40e>
 800bd0c:	9901      	ldr	r1, [sp, #4]
 800bd0e:	4b4c      	ldr	r3, [pc, #304]	; (800be40 <_dtoa_r+0x618>)
 800bd10:	4431      	add	r1, r6
 800bd12:	910d      	str	r1, [sp, #52]	; 0x34
 800bd14:	9908      	ldr	r1, [sp, #32]
 800bd16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bd1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd1e:	2900      	cmp	r1, #0
 800bd20:	d043      	beq.n	800bdaa <_dtoa_r+0x582>
 800bd22:	494d      	ldr	r1, [pc, #308]	; (800be58 <_dtoa_r+0x630>)
 800bd24:	2000      	movs	r0, #0
 800bd26:	f7f4 fdc9 	bl	80008bc <__aeabi_ddiv>
 800bd2a:	4652      	mov	r2, sl
 800bd2c:	465b      	mov	r3, fp
 800bd2e:	f7f4 fae3 	bl	80002f8 <__aeabi_dsub>
 800bd32:	9d01      	ldr	r5, [sp, #4]
 800bd34:	4682      	mov	sl, r0
 800bd36:	468b      	mov	fp, r1
 800bd38:	4649      	mov	r1, r9
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	f7f4 ff44 	bl	8000bc8 <__aeabi_d2iz>
 800bd40:	4606      	mov	r6, r0
 800bd42:	f7f4 fc27 	bl	8000594 <__aeabi_i2d>
 800bd46:	4602      	mov	r2, r0
 800bd48:	460b      	mov	r3, r1
 800bd4a:	4640      	mov	r0, r8
 800bd4c:	4649      	mov	r1, r9
 800bd4e:	f7f4 fad3 	bl	80002f8 <__aeabi_dsub>
 800bd52:	3630      	adds	r6, #48	; 0x30
 800bd54:	f805 6b01 	strb.w	r6, [r5], #1
 800bd58:	4652      	mov	r2, sl
 800bd5a:	465b      	mov	r3, fp
 800bd5c:	4680      	mov	r8, r0
 800bd5e:	4689      	mov	r9, r1
 800bd60:	f7f4 fef4 	bl	8000b4c <__aeabi_dcmplt>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d163      	bne.n	800be30 <_dtoa_r+0x608>
 800bd68:	4642      	mov	r2, r8
 800bd6a:	464b      	mov	r3, r9
 800bd6c:	4936      	ldr	r1, [pc, #216]	; (800be48 <_dtoa_r+0x620>)
 800bd6e:	2000      	movs	r0, #0
 800bd70:	f7f4 fac2 	bl	80002f8 <__aeabi_dsub>
 800bd74:	4652      	mov	r2, sl
 800bd76:	465b      	mov	r3, fp
 800bd78:	f7f4 fee8 	bl	8000b4c <__aeabi_dcmplt>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	f040 80b5 	bne.w	800beec <_dtoa_r+0x6c4>
 800bd82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd84:	429d      	cmp	r5, r3
 800bd86:	d081      	beq.n	800bc8c <_dtoa_r+0x464>
 800bd88:	4b30      	ldr	r3, [pc, #192]	; (800be4c <_dtoa_r+0x624>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	4650      	mov	r0, sl
 800bd8e:	4659      	mov	r1, fp
 800bd90:	f7f4 fc6a 	bl	8000668 <__aeabi_dmul>
 800bd94:	4b2d      	ldr	r3, [pc, #180]	; (800be4c <_dtoa_r+0x624>)
 800bd96:	4682      	mov	sl, r0
 800bd98:	468b      	mov	fp, r1
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f7f4 fc62 	bl	8000668 <__aeabi_dmul>
 800bda4:	4680      	mov	r8, r0
 800bda6:	4689      	mov	r9, r1
 800bda8:	e7c6      	b.n	800bd38 <_dtoa_r+0x510>
 800bdaa:	4650      	mov	r0, sl
 800bdac:	4659      	mov	r1, fp
 800bdae:	f7f4 fc5b 	bl	8000668 <__aeabi_dmul>
 800bdb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdb4:	9d01      	ldr	r5, [sp, #4]
 800bdb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdb8:	4682      	mov	sl, r0
 800bdba:	468b      	mov	fp, r1
 800bdbc:	4649      	mov	r1, r9
 800bdbe:	4640      	mov	r0, r8
 800bdc0:	f7f4 ff02 	bl	8000bc8 <__aeabi_d2iz>
 800bdc4:	4606      	mov	r6, r0
 800bdc6:	f7f4 fbe5 	bl	8000594 <__aeabi_i2d>
 800bdca:	3630      	adds	r6, #48	; 0x30
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4640      	mov	r0, r8
 800bdd2:	4649      	mov	r1, r9
 800bdd4:	f7f4 fa90 	bl	80002f8 <__aeabi_dsub>
 800bdd8:	f805 6b01 	strb.w	r6, [r5], #1
 800bddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdde:	429d      	cmp	r5, r3
 800bde0:	4680      	mov	r8, r0
 800bde2:	4689      	mov	r9, r1
 800bde4:	f04f 0200 	mov.w	r2, #0
 800bde8:	d124      	bne.n	800be34 <_dtoa_r+0x60c>
 800bdea:	4b1b      	ldr	r3, [pc, #108]	; (800be58 <_dtoa_r+0x630>)
 800bdec:	4650      	mov	r0, sl
 800bdee:	4659      	mov	r1, fp
 800bdf0:	f7f4 fa84 	bl	80002fc <__adddf3>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4640      	mov	r0, r8
 800bdfa:	4649      	mov	r1, r9
 800bdfc:	f7f4 fec4 	bl	8000b88 <__aeabi_dcmpgt>
 800be00:	2800      	cmp	r0, #0
 800be02:	d173      	bne.n	800beec <_dtoa_r+0x6c4>
 800be04:	4652      	mov	r2, sl
 800be06:	465b      	mov	r3, fp
 800be08:	4913      	ldr	r1, [pc, #76]	; (800be58 <_dtoa_r+0x630>)
 800be0a:	2000      	movs	r0, #0
 800be0c:	f7f4 fa74 	bl	80002f8 <__aeabi_dsub>
 800be10:	4602      	mov	r2, r0
 800be12:	460b      	mov	r3, r1
 800be14:	4640      	mov	r0, r8
 800be16:	4649      	mov	r1, r9
 800be18:	f7f4 fe98 	bl	8000b4c <__aeabi_dcmplt>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	f43f af35 	beq.w	800bc8c <_dtoa_r+0x464>
 800be22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be24:	1e6b      	subs	r3, r5, #1
 800be26:	930f      	str	r3, [sp, #60]	; 0x3c
 800be28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be2c:	2b30      	cmp	r3, #48	; 0x30
 800be2e:	d0f8      	beq.n	800be22 <_dtoa_r+0x5fa>
 800be30:	9700      	str	r7, [sp, #0]
 800be32:	e049      	b.n	800bec8 <_dtoa_r+0x6a0>
 800be34:	4b05      	ldr	r3, [pc, #20]	; (800be4c <_dtoa_r+0x624>)
 800be36:	f7f4 fc17 	bl	8000668 <__aeabi_dmul>
 800be3a:	4680      	mov	r8, r0
 800be3c:	4689      	mov	r9, r1
 800be3e:	e7bd      	b.n	800bdbc <_dtoa_r+0x594>
 800be40:	0800e9a8 	.word	0x0800e9a8
 800be44:	0800e980 	.word	0x0800e980
 800be48:	3ff00000 	.word	0x3ff00000
 800be4c:	40240000 	.word	0x40240000
 800be50:	401c0000 	.word	0x401c0000
 800be54:	40140000 	.word	0x40140000
 800be58:	3fe00000 	.word	0x3fe00000
 800be5c:	9d01      	ldr	r5, [sp, #4]
 800be5e:	4656      	mov	r6, sl
 800be60:	465f      	mov	r7, fp
 800be62:	4642      	mov	r2, r8
 800be64:	464b      	mov	r3, r9
 800be66:	4630      	mov	r0, r6
 800be68:	4639      	mov	r1, r7
 800be6a:	f7f4 fd27 	bl	80008bc <__aeabi_ddiv>
 800be6e:	f7f4 feab 	bl	8000bc8 <__aeabi_d2iz>
 800be72:	4682      	mov	sl, r0
 800be74:	f7f4 fb8e 	bl	8000594 <__aeabi_i2d>
 800be78:	4642      	mov	r2, r8
 800be7a:	464b      	mov	r3, r9
 800be7c:	f7f4 fbf4 	bl	8000668 <__aeabi_dmul>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4630      	mov	r0, r6
 800be86:	4639      	mov	r1, r7
 800be88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800be8c:	f7f4 fa34 	bl	80002f8 <__aeabi_dsub>
 800be90:	f805 6b01 	strb.w	r6, [r5], #1
 800be94:	9e01      	ldr	r6, [sp, #4]
 800be96:	9f03      	ldr	r7, [sp, #12]
 800be98:	1bae      	subs	r6, r5, r6
 800be9a:	42b7      	cmp	r7, r6
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	d135      	bne.n	800bf0e <_dtoa_r+0x6e6>
 800bea2:	f7f4 fa2b 	bl	80002fc <__adddf3>
 800bea6:	4642      	mov	r2, r8
 800bea8:	464b      	mov	r3, r9
 800beaa:	4606      	mov	r6, r0
 800beac:	460f      	mov	r7, r1
 800beae:	f7f4 fe6b 	bl	8000b88 <__aeabi_dcmpgt>
 800beb2:	b9d0      	cbnz	r0, 800beea <_dtoa_r+0x6c2>
 800beb4:	4642      	mov	r2, r8
 800beb6:	464b      	mov	r3, r9
 800beb8:	4630      	mov	r0, r6
 800beba:	4639      	mov	r1, r7
 800bebc:	f7f4 fe3c 	bl	8000b38 <__aeabi_dcmpeq>
 800bec0:	b110      	cbz	r0, 800bec8 <_dtoa_r+0x6a0>
 800bec2:	f01a 0f01 	tst.w	sl, #1
 800bec6:	d110      	bne.n	800beea <_dtoa_r+0x6c2>
 800bec8:	4620      	mov	r0, r4
 800beca:	ee18 1a10 	vmov	r1, s16
 800bece:	f000 fe87 	bl	800cbe0 <_Bfree>
 800bed2:	2300      	movs	r3, #0
 800bed4:	9800      	ldr	r0, [sp, #0]
 800bed6:	702b      	strb	r3, [r5, #0]
 800bed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800beda:	3001      	adds	r0, #1
 800bedc:	6018      	str	r0, [r3, #0]
 800bede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f43f acf1 	beq.w	800b8c8 <_dtoa_r+0xa0>
 800bee6:	601d      	str	r5, [r3, #0]
 800bee8:	e4ee      	b.n	800b8c8 <_dtoa_r+0xa0>
 800beea:	9f00      	ldr	r7, [sp, #0]
 800beec:	462b      	mov	r3, r5
 800beee:	461d      	mov	r5, r3
 800bef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bef4:	2a39      	cmp	r2, #57	; 0x39
 800bef6:	d106      	bne.n	800bf06 <_dtoa_r+0x6de>
 800bef8:	9a01      	ldr	r2, [sp, #4]
 800befa:	429a      	cmp	r2, r3
 800befc:	d1f7      	bne.n	800beee <_dtoa_r+0x6c6>
 800befe:	9901      	ldr	r1, [sp, #4]
 800bf00:	2230      	movs	r2, #48	; 0x30
 800bf02:	3701      	adds	r7, #1
 800bf04:	700a      	strb	r2, [r1, #0]
 800bf06:	781a      	ldrb	r2, [r3, #0]
 800bf08:	3201      	adds	r2, #1
 800bf0a:	701a      	strb	r2, [r3, #0]
 800bf0c:	e790      	b.n	800be30 <_dtoa_r+0x608>
 800bf0e:	4ba6      	ldr	r3, [pc, #664]	; (800c1a8 <_dtoa_r+0x980>)
 800bf10:	2200      	movs	r2, #0
 800bf12:	f7f4 fba9 	bl	8000668 <__aeabi_dmul>
 800bf16:	2200      	movs	r2, #0
 800bf18:	2300      	movs	r3, #0
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	460f      	mov	r7, r1
 800bf1e:	f7f4 fe0b 	bl	8000b38 <__aeabi_dcmpeq>
 800bf22:	2800      	cmp	r0, #0
 800bf24:	d09d      	beq.n	800be62 <_dtoa_r+0x63a>
 800bf26:	e7cf      	b.n	800bec8 <_dtoa_r+0x6a0>
 800bf28:	9a08      	ldr	r2, [sp, #32]
 800bf2a:	2a00      	cmp	r2, #0
 800bf2c:	f000 80d7 	beq.w	800c0de <_dtoa_r+0x8b6>
 800bf30:	9a06      	ldr	r2, [sp, #24]
 800bf32:	2a01      	cmp	r2, #1
 800bf34:	f300 80ba 	bgt.w	800c0ac <_dtoa_r+0x884>
 800bf38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf3a:	2a00      	cmp	r2, #0
 800bf3c:	f000 80b2 	beq.w	800c0a4 <_dtoa_r+0x87c>
 800bf40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf44:	9e07      	ldr	r6, [sp, #28]
 800bf46:	9d04      	ldr	r5, [sp, #16]
 800bf48:	9a04      	ldr	r2, [sp, #16]
 800bf4a:	441a      	add	r2, r3
 800bf4c:	9204      	str	r2, [sp, #16]
 800bf4e:	9a05      	ldr	r2, [sp, #20]
 800bf50:	2101      	movs	r1, #1
 800bf52:	441a      	add	r2, r3
 800bf54:	4620      	mov	r0, r4
 800bf56:	9205      	str	r2, [sp, #20]
 800bf58:	f000 ff44 	bl	800cde4 <__i2b>
 800bf5c:	4607      	mov	r7, r0
 800bf5e:	2d00      	cmp	r5, #0
 800bf60:	dd0c      	ble.n	800bf7c <_dtoa_r+0x754>
 800bf62:	9b05      	ldr	r3, [sp, #20]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	dd09      	ble.n	800bf7c <_dtoa_r+0x754>
 800bf68:	42ab      	cmp	r3, r5
 800bf6a:	9a04      	ldr	r2, [sp, #16]
 800bf6c:	bfa8      	it	ge
 800bf6e:	462b      	movge	r3, r5
 800bf70:	1ad2      	subs	r2, r2, r3
 800bf72:	9204      	str	r2, [sp, #16]
 800bf74:	9a05      	ldr	r2, [sp, #20]
 800bf76:	1aed      	subs	r5, r5, r3
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	9305      	str	r3, [sp, #20]
 800bf7c:	9b07      	ldr	r3, [sp, #28]
 800bf7e:	b31b      	cbz	r3, 800bfc8 <_dtoa_r+0x7a0>
 800bf80:	9b08      	ldr	r3, [sp, #32]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	f000 80af 	beq.w	800c0e6 <_dtoa_r+0x8be>
 800bf88:	2e00      	cmp	r6, #0
 800bf8a:	dd13      	ble.n	800bfb4 <_dtoa_r+0x78c>
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	4632      	mov	r2, r6
 800bf90:	4620      	mov	r0, r4
 800bf92:	f000 ffe7 	bl	800cf64 <__pow5mult>
 800bf96:	ee18 2a10 	vmov	r2, s16
 800bf9a:	4601      	mov	r1, r0
 800bf9c:	4607      	mov	r7, r0
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f000 ff36 	bl	800ce10 <__multiply>
 800bfa4:	ee18 1a10 	vmov	r1, s16
 800bfa8:	4680      	mov	r8, r0
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f000 fe18 	bl	800cbe0 <_Bfree>
 800bfb0:	ee08 8a10 	vmov	s16, r8
 800bfb4:	9b07      	ldr	r3, [sp, #28]
 800bfb6:	1b9a      	subs	r2, r3, r6
 800bfb8:	d006      	beq.n	800bfc8 <_dtoa_r+0x7a0>
 800bfba:	ee18 1a10 	vmov	r1, s16
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f000 ffd0 	bl	800cf64 <__pow5mult>
 800bfc4:	ee08 0a10 	vmov	s16, r0
 800bfc8:	2101      	movs	r1, #1
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f000 ff0a 	bl	800cde4 <__i2b>
 800bfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	f340 8088 	ble.w	800c0ea <_dtoa_r+0x8c2>
 800bfda:	461a      	mov	r2, r3
 800bfdc:	4601      	mov	r1, r0
 800bfde:	4620      	mov	r0, r4
 800bfe0:	f000 ffc0 	bl	800cf64 <__pow5mult>
 800bfe4:	9b06      	ldr	r3, [sp, #24]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	4606      	mov	r6, r0
 800bfea:	f340 8081 	ble.w	800c0f0 <_dtoa_r+0x8c8>
 800bfee:	f04f 0800 	mov.w	r8, #0
 800bff2:	6933      	ldr	r3, [r6, #16]
 800bff4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bff8:	6918      	ldr	r0, [r3, #16]
 800bffa:	f000 fea3 	bl	800cd44 <__hi0bits>
 800bffe:	f1c0 0020 	rsb	r0, r0, #32
 800c002:	9b05      	ldr	r3, [sp, #20]
 800c004:	4418      	add	r0, r3
 800c006:	f010 001f 	ands.w	r0, r0, #31
 800c00a:	f000 8092 	beq.w	800c132 <_dtoa_r+0x90a>
 800c00e:	f1c0 0320 	rsb	r3, r0, #32
 800c012:	2b04      	cmp	r3, #4
 800c014:	f340 808a 	ble.w	800c12c <_dtoa_r+0x904>
 800c018:	f1c0 001c 	rsb	r0, r0, #28
 800c01c:	9b04      	ldr	r3, [sp, #16]
 800c01e:	4403      	add	r3, r0
 800c020:	9304      	str	r3, [sp, #16]
 800c022:	9b05      	ldr	r3, [sp, #20]
 800c024:	4403      	add	r3, r0
 800c026:	4405      	add	r5, r0
 800c028:	9305      	str	r3, [sp, #20]
 800c02a:	9b04      	ldr	r3, [sp, #16]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	dd07      	ble.n	800c040 <_dtoa_r+0x818>
 800c030:	ee18 1a10 	vmov	r1, s16
 800c034:	461a      	mov	r2, r3
 800c036:	4620      	mov	r0, r4
 800c038:	f000 ffee 	bl	800d018 <__lshift>
 800c03c:	ee08 0a10 	vmov	s16, r0
 800c040:	9b05      	ldr	r3, [sp, #20]
 800c042:	2b00      	cmp	r3, #0
 800c044:	dd05      	ble.n	800c052 <_dtoa_r+0x82a>
 800c046:	4631      	mov	r1, r6
 800c048:	461a      	mov	r2, r3
 800c04a:	4620      	mov	r0, r4
 800c04c:	f000 ffe4 	bl	800d018 <__lshift>
 800c050:	4606      	mov	r6, r0
 800c052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c054:	2b00      	cmp	r3, #0
 800c056:	d06e      	beq.n	800c136 <_dtoa_r+0x90e>
 800c058:	ee18 0a10 	vmov	r0, s16
 800c05c:	4631      	mov	r1, r6
 800c05e:	f001 f84b 	bl	800d0f8 <__mcmp>
 800c062:	2800      	cmp	r0, #0
 800c064:	da67      	bge.n	800c136 <_dtoa_r+0x90e>
 800c066:	9b00      	ldr	r3, [sp, #0]
 800c068:	3b01      	subs	r3, #1
 800c06a:	ee18 1a10 	vmov	r1, s16
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	220a      	movs	r2, #10
 800c072:	2300      	movs	r3, #0
 800c074:	4620      	mov	r0, r4
 800c076:	f000 fdd5 	bl	800cc24 <__multadd>
 800c07a:	9b08      	ldr	r3, [sp, #32]
 800c07c:	ee08 0a10 	vmov	s16, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	f000 81b1 	beq.w	800c3e8 <_dtoa_r+0xbc0>
 800c086:	2300      	movs	r3, #0
 800c088:	4639      	mov	r1, r7
 800c08a:	220a      	movs	r2, #10
 800c08c:	4620      	mov	r0, r4
 800c08e:	f000 fdc9 	bl	800cc24 <__multadd>
 800c092:	9b02      	ldr	r3, [sp, #8]
 800c094:	2b00      	cmp	r3, #0
 800c096:	4607      	mov	r7, r0
 800c098:	f300 808e 	bgt.w	800c1b8 <_dtoa_r+0x990>
 800c09c:	9b06      	ldr	r3, [sp, #24]
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	dc51      	bgt.n	800c146 <_dtoa_r+0x91e>
 800c0a2:	e089      	b.n	800c1b8 <_dtoa_r+0x990>
 800c0a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0aa:	e74b      	b.n	800bf44 <_dtoa_r+0x71c>
 800c0ac:	9b03      	ldr	r3, [sp, #12]
 800c0ae:	1e5e      	subs	r6, r3, #1
 800c0b0:	9b07      	ldr	r3, [sp, #28]
 800c0b2:	42b3      	cmp	r3, r6
 800c0b4:	bfbf      	itttt	lt
 800c0b6:	9b07      	ldrlt	r3, [sp, #28]
 800c0b8:	9607      	strlt	r6, [sp, #28]
 800c0ba:	1af2      	sublt	r2, r6, r3
 800c0bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c0be:	bfb6      	itet	lt
 800c0c0:	189b      	addlt	r3, r3, r2
 800c0c2:	1b9e      	subge	r6, r3, r6
 800c0c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c0c6:	9b03      	ldr	r3, [sp, #12]
 800c0c8:	bfb8      	it	lt
 800c0ca:	2600      	movlt	r6, #0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	bfb7      	itett	lt
 800c0d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c0d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c0d8:	1a9d      	sublt	r5, r3, r2
 800c0da:	2300      	movlt	r3, #0
 800c0dc:	e734      	b.n	800bf48 <_dtoa_r+0x720>
 800c0de:	9e07      	ldr	r6, [sp, #28]
 800c0e0:	9d04      	ldr	r5, [sp, #16]
 800c0e2:	9f08      	ldr	r7, [sp, #32]
 800c0e4:	e73b      	b.n	800bf5e <_dtoa_r+0x736>
 800c0e6:	9a07      	ldr	r2, [sp, #28]
 800c0e8:	e767      	b.n	800bfba <_dtoa_r+0x792>
 800c0ea:	9b06      	ldr	r3, [sp, #24]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	dc18      	bgt.n	800c122 <_dtoa_r+0x8fa>
 800c0f0:	f1ba 0f00 	cmp.w	sl, #0
 800c0f4:	d115      	bne.n	800c122 <_dtoa_r+0x8fa>
 800c0f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0fa:	b993      	cbnz	r3, 800c122 <_dtoa_r+0x8fa>
 800c0fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c100:	0d1b      	lsrs	r3, r3, #20
 800c102:	051b      	lsls	r3, r3, #20
 800c104:	b183      	cbz	r3, 800c128 <_dtoa_r+0x900>
 800c106:	9b04      	ldr	r3, [sp, #16]
 800c108:	3301      	adds	r3, #1
 800c10a:	9304      	str	r3, [sp, #16]
 800c10c:	9b05      	ldr	r3, [sp, #20]
 800c10e:	3301      	adds	r3, #1
 800c110:	9305      	str	r3, [sp, #20]
 800c112:	f04f 0801 	mov.w	r8, #1
 800c116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f47f af6a 	bne.w	800bff2 <_dtoa_r+0x7ca>
 800c11e:	2001      	movs	r0, #1
 800c120:	e76f      	b.n	800c002 <_dtoa_r+0x7da>
 800c122:	f04f 0800 	mov.w	r8, #0
 800c126:	e7f6      	b.n	800c116 <_dtoa_r+0x8ee>
 800c128:	4698      	mov	r8, r3
 800c12a:	e7f4      	b.n	800c116 <_dtoa_r+0x8ee>
 800c12c:	f43f af7d 	beq.w	800c02a <_dtoa_r+0x802>
 800c130:	4618      	mov	r0, r3
 800c132:	301c      	adds	r0, #28
 800c134:	e772      	b.n	800c01c <_dtoa_r+0x7f4>
 800c136:	9b03      	ldr	r3, [sp, #12]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	dc37      	bgt.n	800c1ac <_dtoa_r+0x984>
 800c13c:	9b06      	ldr	r3, [sp, #24]
 800c13e:	2b02      	cmp	r3, #2
 800c140:	dd34      	ble.n	800c1ac <_dtoa_r+0x984>
 800c142:	9b03      	ldr	r3, [sp, #12]
 800c144:	9302      	str	r3, [sp, #8]
 800c146:	9b02      	ldr	r3, [sp, #8]
 800c148:	b96b      	cbnz	r3, 800c166 <_dtoa_r+0x93e>
 800c14a:	4631      	mov	r1, r6
 800c14c:	2205      	movs	r2, #5
 800c14e:	4620      	mov	r0, r4
 800c150:	f000 fd68 	bl	800cc24 <__multadd>
 800c154:	4601      	mov	r1, r0
 800c156:	4606      	mov	r6, r0
 800c158:	ee18 0a10 	vmov	r0, s16
 800c15c:	f000 ffcc 	bl	800d0f8 <__mcmp>
 800c160:	2800      	cmp	r0, #0
 800c162:	f73f adbb 	bgt.w	800bcdc <_dtoa_r+0x4b4>
 800c166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c168:	9d01      	ldr	r5, [sp, #4]
 800c16a:	43db      	mvns	r3, r3
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	f04f 0800 	mov.w	r8, #0
 800c172:	4631      	mov	r1, r6
 800c174:	4620      	mov	r0, r4
 800c176:	f000 fd33 	bl	800cbe0 <_Bfree>
 800c17a:	2f00      	cmp	r7, #0
 800c17c:	f43f aea4 	beq.w	800bec8 <_dtoa_r+0x6a0>
 800c180:	f1b8 0f00 	cmp.w	r8, #0
 800c184:	d005      	beq.n	800c192 <_dtoa_r+0x96a>
 800c186:	45b8      	cmp	r8, r7
 800c188:	d003      	beq.n	800c192 <_dtoa_r+0x96a>
 800c18a:	4641      	mov	r1, r8
 800c18c:	4620      	mov	r0, r4
 800c18e:	f000 fd27 	bl	800cbe0 <_Bfree>
 800c192:	4639      	mov	r1, r7
 800c194:	4620      	mov	r0, r4
 800c196:	f000 fd23 	bl	800cbe0 <_Bfree>
 800c19a:	e695      	b.n	800bec8 <_dtoa_r+0x6a0>
 800c19c:	2600      	movs	r6, #0
 800c19e:	4637      	mov	r7, r6
 800c1a0:	e7e1      	b.n	800c166 <_dtoa_r+0x93e>
 800c1a2:	9700      	str	r7, [sp, #0]
 800c1a4:	4637      	mov	r7, r6
 800c1a6:	e599      	b.n	800bcdc <_dtoa_r+0x4b4>
 800c1a8:	40240000 	.word	0x40240000
 800c1ac:	9b08      	ldr	r3, [sp, #32]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f000 80ca 	beq.w	800c348 <_dtoa_r+0xb20>
 800c1b4:	9b03      	ldr	r3, [sp, #12]
 800c1b6:	9302      	str	r3, [sp, #8]
 800c1b8:	2d00      	cmp	r5, #0
 800c1ba:	dd05      	ble.n	800c1c8 <_dtoa_r+0x9a0>
 800c1bc:	4639      	mov	r1, r7
 800c1be:	462a      	mov	r2, r5
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f000 ff29 	bl	800d018 <__lshift>
 800c1c6:	4607      	mov	r7, r0
 800c1c8:	f1b8 0f00 	cmp.w	r8, #0
 800c1cc:	d05b      	beq.n	800c286 <_dtoa_r+0xa5e>
 800c1ce:	6879      	ldr	r1, [r7, #4]
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f000 fcc5 	bl	800cb60 <_Balloc>
 800c1d6:	4605      	mov	r5, r0
 800c1d8:	b928      	cbnz	r0, 800c1e6 <_dtoa_r+0x9be>
 800c1da:	4b87      	ldr	r3, [pc, #540]	; (800c3f8 <_dtoa_r+0xbd0>)
 800c1dc:	4602      	mov	r2, r0
 800c1de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1e2:	f7ff bb3b 	b.w	800b85c <_dtoa_r+0x34>
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	3202      	adds	r2, #2
 800c1ea:	0092      	lsls	r2, r2, #2
 800c1ec:	f107 010c 	add.w	r1, r7, #12
 800c1f0:	300c      	adds	r0, #12
 800c1f2:	f000 fca7 	bl	800cb44 <memcpy>
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f000 ff0c 	bl	800d018 <__lshift>
 800c200:	9b01      	ldr	r3, [sp, #4]
 800c202:	f103 0901 	add.w	r9, r3, #1
 800c206:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c20a:	4413      	add	r3, r2
 800c20c:	9305      	str	r3, [sp, #20]
 800c20e:	f00a 0301 	and.w	r3, sl, #1
 800c212:	46b8      	mov	r8, r7
 800c214:	9304      	str	r3, [sp, #16]
 800c216:	4607      	mov	r7, r0
 800c218:	4631      	mov	r1, r6
 800c21a:	ee18 0a10 	vmov	r0, s16
 800c21e:	f7ff fa77 	bl	800b710 <quorem>
 800c222:	4641      	mov	r1, r8
 800c224:	9002      	str	r0, [sp, #8]
 800c226:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c22a:	ee18 0a10 	vmov	r0, s16
 800c22e:	f000 ff63 	bl	800d0f8 <__mcmp>
 800c232:	463a      	mov	r2, r7
 800c234:	9003      	str	r0, [sp, #12]
 800c236:	4631      	mov	r1, r6
 800c238:	4620      	mov	r0, r4
 800c23a:	f000 ff79 	bl	800d130 <__mdiff>
 800c23e:	68c2      	ldr	r2, [r0, #12]
 800c240:	f109 3bff 	add.w	fp, r9, #4294967295
 800c244:	4605      	mov	r5, r0
 800c246:	bb02      	cbnz	r2, 800c28a <_dtoa_r+0xa62>
 800c248:	4601      	mov	r1, r0
 800c24a:	ee18 0a10 	vmov	r0, s16
 800c24e:	f000 ff53 	bl	800d0f8 <__mcmp>
 800c252:	4602      	mov	r2, r0
 800c254:	4629      	mov	r1, r5
 800c256:	4620      	mov	r0, r4
 800c258:	9207      	str	r2, [sp, #28]
 800c25a:	f000 fcc1 	bl	800cbe0 <_Bfree>
 800c25e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c262:	ea43 0102 	orr.w	r1, r3, r2
 800c266:	9b04      	ldr	r3, [sp, #16]
 800c268:	430b      	orrs	r3, r1
 800c26a:	464d      	mov	r5, r9
 800c26c:	d10f      	bne.n	800c28e <_dtoa_r+0xa66>
 800c26e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c272:	d02a      	beq.n	800c2ca <_dtoa_r+0xaa2>
 800c274:	9b03      	ldr	r3, [sp, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	dd02      	ble.n	800c280 <_dtoa_r+0xa58>
 800c27a:	9b02      	ldr	r3, [sp, #8]
 800c27c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c280:	f88b a000 	strb.w	sl, [fp]
 800c284:	e775      	b.n	800c172 <_dtoa_r+0x94a>
 800c286:	4638      	mov	r0, r7
 800c288:	e7ba      	b.n	800c200 <_dtoa_r+0x9d8>
 800c28a:	2201      	movs	r2, #1
 800c28c:	e7e2      	b.n	800c254 <_dtoa_r+0xa2c>
 800c28e:	9b03      	ldr	r3, [sp, #12]
 800c290:	2b00      	cmp	r3, #0
 800c292:	db04      	blt.n	800c29e <_dtoa_r+0xa76>
 800c294:	9906      	ldr	r1, [sp, #24]
 800c296:	430b      	orrs	r3, r1
 800c298:	9904      	ldr	r1, [sp, #16]
 800c29a:	430b      	orrs	r3, r1
 800c29c:	d122      	bne.n	800c2e4 <_dtoa_r+0xabc>
 800c29e:	2a00      	cmp	r2, #0
 800c2a0:	ddee      	ble.n	800c280 <_dtoa_r+0xa58>
 800c2a2:	ee18 1a10 	vmov	r1, s16
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f000 feb5 	bl	800d018 <__lshift>
 800c2ae:	4631      	mov	r1, r6
 800c2b0:	ee08 0a10 	vmov	s16, r0
 800c2b4:	f000 ff20 	bl	800d0f8 <__mcmp>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	dc03      	bgt.n	800c2c4 <_dtoa_r+0xa9c>
 800c2bc:	d1e0      	bne.n	800c280 <_dtoa_r+0xa58>
 800c2be:	f01a 0f01 	tst.w	sl, #1
 800c2c2:	d0dd      	beq.n	800c280 <_dtoa_r+0xa58>
 800c2c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2c8:	d1d7      	bne.n	800c27a <_dtoa_r+0xa52>
 800c2ca:	2339      	movs	r3, #57	; 0x39
 800c2cc:	f88b 3000 	strb.w	r3, [fp]
 800c2d0:	462b      	mov	r3, r5
 800c2d2:	461d      	mov	r5, r3
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2da:	2a39      	cmp	r2, #57	; 0x39
 800c2dc:	d071      	beq.n	800c3c2 <_dtoa_r+0xb9a>
 800c2de:	3201      	adds	r2, #1
 800c2e0:	701a      	strb	r2, [r3, #0]
 800c2e2:	e746      	b.n	800c172 <_dtoa_r+0x94a>
 800c2e4:	2a00      	cmp	r2, #0
 800c2e6:	dd07      	ble.n	800c2f8 <_dtoa_r+0xad0>
 800c2e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2ec:	d0ed      	beq.n	800c2ca <_dtoa_r+0xaa2>
 800c2ee:	f10a 0301 	add.w	r3, sl, #1
 800c2f2:	f88b 3000 	strb.w	r3, [fp]
 800c2f6:	e73c      	b.n	800c172 <_dtoa_r+0x94a>
 800c2f8:	9b05      	ldr	r3, [sp, #20]
 800c2fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c2fe:	4599      	cmp	r9, r3
 800c300:	d047      	beq.n	800c392 <_dtoa_r+0xb6a>
 800c302:	ee18 1a10 	vmov	r1, s16
 800c306:	2300      	movs	r3, #0
 800c308:	220a      	movs	r2, #10
 800c30a:	4620      	mov	r0, r4
 800c30c:	f000 fc8a 	bl	800cc24 <__multadd>
 800c310:	45b8      	cmp	r8, r7
 800c312:	ee08 0a10 	vmov	s16, r0
 800c316:	f04f 0300 	mov.w	r3, #0
 800c31a:	f04f 020a 	mov.w	r2, #10
 800c31e:	4641      	mov	r1, r8
 800c320:	4620      	mov	r0, r4
 800c322:	d106      	bne.n	800c332 <_dtoa_r+0xb0a>
 800c324:	f000 fc7e 	bl	800cc24 <__multadd>
 800c328:	4680      	mov	r8, r0
 800c32a:	4607      	mov	r7, r0
 800c32c:	f109 0901 	add.w	r9, r9, #1
 800c330:	e772      	b.n	800c218 <_dtoa_r+0x9f0>
 800c332:	f000 fc77 	bl	800cc24 <__multadd>
 800c336:	4639      	mov	r1, r7
 800c338:	4680      	mov	r8, r0
 800c33a:	2300      	movs	r3, #0
 800c33c:	220a      	movs	r2, #10
 800c33e:	4620      	mov	r0, r4
 800c340:	f000 fc70 	bl	800cc24 <__multadd>
 800c344:	4607      	mov	r7, r0
 800c346:	e7f1      	b.n	800c32c <_dtoa_r+0xb04>
 800c348:	9b03      	ldr	r3, [sp, #12]
 800c34a:	9302      	str	r3, [sp, #8]
 800c34c:	9d01      	ldr	r5, [sp, #4]
 800c34e:	ee18 0a10 	vmov	r0, s16
 800c352:	4631      	mov	r1, r6
 800c354:	f7ff f9dc 	bl	800b710 <quorem>
 800c358:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c35c:	9b01      	ldr	r3, [sp, #4]
 800c35e:	f805 ab01 	strb.w	sl, [r5], #1
 800c362:	1aea      	subs	r2, r5, r3
 800c364:	9b02      	ldr	r3, [sp, #8]
 800c366:	4293      	cmp	r3, r2
 800c368:	dd09      	ble.n	800c37e <_dtoa_r+0xb56>
 800c36a:	ee18 1a10 	vmov	r1, s16
 800c36e:	2300      	movs	r3, #0
 800c370:	220a      	movs	r2, #10
 800c372:	4620      	mov	r0, r4
 800c374:	f000 fc56 	bl	800cc24 <__multadd>
 800c378:	ee08 0a10 	vmov	s16, r0
 800c37c:	e7e7      	b.n	800c34e <_dtoa_r+0xb26>
 800c37e:	9b02      	ldr	r3, [sp, #8]
 800c380:	2b00      	cmp	r3, #0
 800c382:	bfc8      	it	gt
 800c384:	461d      	movgt	r5, r3
 800c386:	9b01      	ldr	r3, [sp, #4]
 800c388:	bfd8      	it	le
 800c38a:	2501      	movle	r5, #1
 800c38c:	441d      	add	r5, r3
 800c38e:	f04f 0800 	mov.w	r8, #0
 800c392:	ee18 1a10 	vmov	r1, s16
 800c396:	2201      	movs	r2, #1
 800c398:	4620      	mov	r0, r4
 800c39a:	f000 fe3d 	bl	800d018 <__lshift>
 800c39e:	4631      	mov	r1, r6
 800c3a0:	ee08 0a10 	vmov	s16, r0
 800c3a4:	f000 fea8 	bl	800d0f8 <__mcmp>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	dc91      	bgt.n	800c2d0 <_dtoa_r+0xaa8>
 800c3ac:	d102      	bne.n	800c3b4 <_dtoa_r+0xb8c>
 800c3ae:	f01a 0f01 	tst.w	sl, #1
 800c3b2:	d18d      	bne.n	800c2d0 <_dtoa_r+0xaa8>
 800c3b4:	462b      	mov	r3, r5
 800c3b6:	461d      	mov	r5, r3
 800c3b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3bc:	2a30      	cmp	r2, #48	; 0x30
 800c3be:	d0fa      	beq.n	800c3b6 <_dtoa_r+0xb8e>
 800c3c0:	e6d7      	b.n	800c172 <_dtoa_r+0x94a>
 800c3c2:	9a01      	ldr	r2, [sp, #4]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d184      	bne.n	800c2d2 <_dtoa_r+0xaaa>
 800c3c8:	9b00      	ldr	r3, [sp, #0]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	2331      	movs	r3, #49	; 0x31
 800c3d0:	7013      	strb	r3, [r2, #0]
 800c3d2:	e6ce      	b.n	800c172 <_dtoa_r+0x94a>
 800c3d4:	4b09      	ldr	r3, [pc, #36]	; (800c3fc <_dtoa_r+0xbd4>)
 800c3d6:	f7ff ba95 	b.w	800b904 <_dtoa_r+0xdc>
 800c3da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f47f aa6e 	bne.w	800b8be <_dtoa_r+0x96>
 800c3e2:	4b07      	ldr	r3, [pc, #28]	; (800c400 <_dtoa_r+0xbd8>)
 800c3e4:	f7ff ba8e 	b.w	800b904 <_dtoa_r+0xdc>
 800c3e8:	9b02      	ldr	r3, [sp, #8]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	dcae      	bgt.n	800c34c <_dtoa_r+0xb24>
 800c3ee:	9b06      	ldr	r3, [sp, #24]
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	f73f aea8 	bgt.w	800c146 <_dtoa_r+0x91e>
 800c3f6:	e7a9      	b.n	800c34c <_dtoa_r+0xb24>
 800c3f8:	0800e899 	.word	0x0800e899
 800c3fc:	0800e604 	.word	0x0800e604
 800c400:	0800e831 	.word	0x0800e831

0800c404 <fiprintf>:
 800c404:	b40e      	push	{r1, r2, r3}
 800c406:	b503      	push	{r0, r1, lr}
 800c408:	4601      	mov	r1, r0
 800c40a:	ab03      	add	r3, sp, #12
 800c40c:	4805      	ldr	r0, [pc, #20]	; (800c424 <fiprintf+0x20>)
 800c40e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c412:	6800      	ldr	r0, [r0, #0]
 800c414:	9301      	str	r3, [sp, #4]
 800c416:	f001 fae1 	bl	800d9dc <_vfiprintf_r>
 800c41a:	b002      	add	sp, #8
 800c41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c420:	b003      	add	sp, #12
 800c422:	4770      	bx	lr
 800c424:	200001ac 	.word	0x200001ac

0800c428 <rshift>:
 800c428:	6903      	ldr	r3, [r0, #16]
 800c42a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c42e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c432:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c436:	f100 0414 	add.w	r4, r0, #20
 800c43a:	dd45      	ble.n	800c4c8 <rshift+0xa0>
 800c43c:	f011 011f 	ands.w	r1, r1, #31
 800c440:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c444:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c448:	d10c      	bne.n	800c464 <rshift+0x3c>
 800c44a:	f100 0710 	add.w	r7, r0, #16
 800c44e:	4629      	mov	r1, r5
 800c450:	42b1      	cmp	r1, r6
 800c452:	d334      	bcc.n	800c4be <rshift+0x96>
 800c454:	1a9b      	subs	r3, r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	1eea      	subs	r2, r5, #3
 800c45a:	4296      	cmp	r6, r2
 800c45c:	bf38      	it	cc
 800c45e:	2300      	movcc	r3, #0
 800c460:	4423      	add	r3, r4
 800c462:	e015      	b.n	800c490 <rshift+0x68>
 800c464:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c468:	f1c1 0820 	rsb	r8, r1, #32
 800c46c:	40cf      	lsrs	r7, r1
 800c46e:	f105 0e04 	add.w	lr, r5, #4
 800c472:	46a1      	mov	r9, r4
 800c474:	4576      	cmp	r6, lr
 800c476:	46f4      	mov	ip, lr
 800c478:	d815      	bhi.n	800c4a6 <rshift+0x7e>
 800c47a:	1a9a      	subs	r2, r3, r2
 800c47c:	0092      	lsls	r2, r2, #2
 800c47e:	3a04      	subs	r2, #4
 800c480:	3501      	adds	r5, #1
 800c482:	42ae      	cmp	r6, r5
 800c484:	bf38      	it	cc
 800c486:	2200      	movcc	r2, #0
 800c488:	18a3      	adds	r3, r4, r2
 800c48a:	50a7      	str	r7, [r4, r2]
 800c48c:	b107      	cbz	r7, 800c490 <rshift+0x68>
 800c48e:	3304      	adds	r3, #4
 800c490:	1b1a      	subs	r2, r3, r4
 800c492:	42a3      	cmp	r3, r4
 800c494:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c498:	bf08      	it	eq
 800c49a:	2300      	moveq	r3, #0
 800c49c:	6102      	str	r2, [r0, #16]
 800c49e:	bf08      	it	eq
 800c4a0:	6143      	streq	r3, [r0, #20]
 800c4a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4a6:	f8dc c000 	ldr.w	ip, [ip]
 800c4aa:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4ae:	ea4c 0707 	orr.w	r7, ip, r7
 800c4b2:	f849 7b04 	str.w	r7, [r9], #4
 800c4b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4ba:	40cf      	lsrs	r7, r1
 800c4bc:	e7da      	b.n	800c474 <rshift+0x4c>
 800c4be:	f851 cb04 	ldr.w	ip, [r1], #4
 800c4c2:	f847 cf04 	str.w	ip, [r7, #4]!
 800c4c6:	e7c3      	b.n	800c450 <rshift+0x28>
 800c4c8:	4623      	mov	r3, r4
 800c4ca:	e7e1      	b.n	800c490 <rshift+0x68>

0800c4cc <__hexdig_fun>:
 800c4cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c4d0:	2b09      	cmp	r3, #9
 800c4d2:	d802      	bhi.n	800c4da <__hexdig_fun+0xe>
 800c4d4:	3820      	subs	r0, #32
 800c4d6:	b2c0      	uxtb	r0, r0
 800c4d8:	4770      	bx	lr
 800c4da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c4de:	2b05      	cmp	r3, #5
 800c4e0:	d801      	bhi.n	800c4e6 <__hexdig_fun+0x1a>
 800c4e2:	3847      	subs	r0, #71	; 0x47
 800c4e4:	e7f7      	b.n	800c4d6 <__hexdig_fun+0xa>
 800c4e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c4ea:	2b05      	cmp	r3, #5
 800c4ec:	d801      	bhi.n	800c4f2 <__hexdig_fun+0x26>
 800c4ee:	3827      	subs	r0, #39	; 0x27
 800c4f0:	e7f1      	b.n	800c4d6 <__hexdig_fun+0xa>
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	4770      	bx	lr
	...

0800c4f8 <__gethex>:
 800c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fc:	ed2d 8b02 	vpush	{d8}
 800c500:	b089      	sub	sp, #36	; 0x24
 800c502:	ee08 0a10 	vmov	s16, r0
 800c506:	9304      	str	r3, [sp, #16]
 800c508:	4bb4      	ldr	r3, [pc, #720]	; (800c7dc <__gethex+0x2e4>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	9301      	str	r3, [sp, #4]
 800c50e:	4618      	mov	r0, r3
 800c510:	468b      	mov	fp, r1
 800c512:	4690      	mov	r8, r2
 800c514:	f7f3 fe8e 	bl	8000234 <strlen>
 800c518:	9b01      	ldr	r3, [sp, #4]
 800c51a:	f8db 2000 	ldr.w	r2, [fp]
 800c51e:	4403      	add	r3, r0
 800c520:	4682      	mov	sl, r0
 800c522:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c526:	9305      	str	r3, [sp, #20]
 800c528:	1c93      	adds	r3, r2, #2
 800c52a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c52e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c532:	32fe      	adds	r2, #254	; 0xfe
 800c534:	18d1      	adds	r1, r2, r3
 800c536:	461f      	mov	r7, r3
 800c538:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c53c:	9100      	str	r1, [sp, #0]
 800c53e:	2830      	cmp	r0, #48	; 0x30
 800c540:	d0f8      	beq.n	800c534 <__gethex+0x3c>
 800c542:	f7ff ffc3 	bl	800c4cc <__hexdig_fun>
 800c546:	4604      	mov	r4, r0
 800c548:	2800      	cmp	r0, #0
 800c54a:	d13a      	bne.n	800c5c2 <__gethex+0xca>
 800c54c:	9901      	ldr	r1, [sp, #4]
 800c54e:	4652      	mov	r2, sl
 800c550:	4638      	mov	r0, r7
 800c552:	f001 fb8d 	bl	800dc70 <strncmp>
 800c556:	4605      	mov	r5, r0
 800c558:	2800      	cmp	r0, #0
 800c55a:	d168      	bne.n	800c62e <__gethex+0x136>
 800c55c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c560:	eb07 060a 	add.w	r6, r7, sl
 800c564:	f7ff ffb2 	bl	800c4cc <__hexdig_fun>
 800c568:	2800      	cmp	r0, #0
 800c56a:	d062      	beq.n	800c632 <__gethex+0x13a>
 800c56c:	4633      	mov	r3, r6
 800c56e:	7818      	ldrb	r0, [r3, #0]
 800c570:	2830      	cmp	r0, #48	; 0x30
 800c572:	461f      	mov	r7, r3
 800c574:	f103 0301 	add.w	r3, r3, #1
 800c578:	d0f9      	beq.n	800c56e <__gethex+0x76>
 800c57a:	f7ff ffa7 	bl	800c4cc <__hexdig_fun>
 800c57e:	2301      	movs	r3, #1
 800c580:	fab0 f480 	clz	r4, r0
 800c584:	0964      	lsrs	r4, r4, #5
 800c586:	4635      	mov	r5, r6
 800c588:	9300      	str	r3, [sp, #0]
 800c58a:	463a      	mov	r2, r7
 800c58c:	4616      	mov	r6, r2
 800c58e:	3201      	adds	r2, #1
 800c590:	7830      	ldrb	r0, [r6, #0]
 800c592:	f7ff ff9b 	bl	800c4cc <__hexdig_fun>
 800c596:	2800      	cmp	r0, #0
 800c598:	d1f8      	bne.n	800c58c <__gethex+0x94>
 800c59a:	9901      	ldr	r1, [sp, #4]
 800c59c:	4652      	mov	r2, sl
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f001 fb66 	bl	800dc70 <strncmp>
 800c5a4:	b980      	cbnz	r0, 800c5c8 <__gethex+0xd0>
 800c5a6:	b94d      	cbnz	r5, 800c5bc <__gethex+0xc4>
 800c5a8:	eb06 050a 	add.w	r5, r6, sl
 800c5ac:	462a      	mov	r2, r5
 800c5ae:	4616      	mov	r6, r2
 800c5b0:	3201      	adds	r2, #1
 800c5b2:	7830      	ldrb	r0, [r6, #0]
 800c5b4:	f7ff ff8a 	bl	800c4cc <__hexdig_fun>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d1f8      	bne.n	800c5ae <__gethex+0xb6>
 800c5bc:	1bad      	subs	r5, r5, r6
 800c5be:	00ad      	lsls	r5, r5, #2
 800c5c0:	e004      	b.n	800c5cc <__gethex+0xd4>
 800c5c2:	2400      	movs	r4, #0
 800c5c4:	4625      	mov	r5, r4
 800c5c6:	e7e0      	b.n	800c58a <__gethex+0x92>
 800c5c8:	2d00      	cmp	r5, #0
 800c5ca:	d1f7      	bne.n	800c5bc <__gethex+0xc4>
 800c5cc:	7833      	ldrb	r3, [r6, #0]
 800c5ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c5d2:	2b50      	cmp	r3, #80	; 0x50
 800c5d4:	d13b      	bne.n	800c64e <__gethex+0x156>
 800c5d6:	7873      	ldrb	r3, [r6, #1]
 800c5d8:	2b2b      	cmp	r3, #43	; 0x2b
 800c5da:	d02c      	beq.n	800c636 <__gethex+0x13e>
 800c5dc:	2b2d      	cmp	r3, #45	; 0x2d
 800c5de:	d02e      	beq.n	800c63e <__gethex+0x146>
 800c5e0:	1c71      	adds	r1, r6, #1
 800c5e2:	f04f 0900 	mov.w	r9, #0
 800c5e6:	7808      	ldrb	r0, [r1, #0]
 800c5e8:	f7ff ff70 	bl	800c4cc <__hexdig_fun>
 800c5ec:	1e43      	subs	r3, r0, #1
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	2b18      	cmp	r3, #24
 800c5f2:	d82c      	bhi.n	800c64e <__gethex+0x156>
 800c5f4:	f1a0 0210 	sub.w	r2, r0, #16
 800c5f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c5fc:	f7ff ff66 	bl	800c4cc <__hexdig_fun>
 800c600:	1e43      	subs	r3, r0, #1
 800c602:	b2db      	uxtb	r3, r3
 800c604:	2b18      	cmp	r3, #24
 800c606:	d91d      	bls.n	800c644 <__gethex+0x14c>
 800c608:	f1b9 0f00 	cmp.w	r9, #0
 800c60c:	d000      	beq.n	800c610 <__gethex+0x118>
 800c60e:	4252      	negs	r2, r2
 800c610:	4415      	add	r5, r2
 800c612:	f8cb 1000 	str.w	r1, [fp]
 800c616:	b1e4      	cbz	r4, 800c652 <__gethex+0x15a>
 800c618:	9b00      	ldr	r3, [sp, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	bf14      	ite	ne
 800c61e:	2700      	movne	r7, #0
 800c620:	2706      	moveq	r7, #6
 800c622:	4638      	mov	r0, r7
 800c624:	b009      	add	sp, #36	; 0x24
 800c626:	ecbd 8b02 	vpop	{d8}
 800c62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62e:	463e      	mov	r6, r7
 800c630:	4625      	mov	r5, r4
 800c632:	2401      	movs	r4, #1
 800c634:	e7ca      	b.n	800c5cc <__gethex+0xd4>
 800c636:	f04f 0900 	mov.w	r9, #0
 800c63a:	1cb1      	adds	r1, r6, #2
 800c63c:	e7d3      	b.n	800c5e6 <__gethex+0xee>
 800c63e:	f04f 0901 	mov.w	r9, #1
 800c642:	e7fa      	b.n	800c63a <__gethex+0x142>
 800c644:	230a      	movs	r3, #10
 800c646:	fb03 0202 	mla	r2, r3, r2, r0
 800c64a:	3a10      	subs	r2, #16
 800c64c:	e7d4      	b.n	800c5f8 <__gethex+0x100>
 800c64e:	4631      	mov	r1, r6
 800c650:	e7df      	b.n	800c612 <__gethex+0x11a>
 800c652:	1bf3      	subs	r3, r6, r7
 800c654:	3b01      	subs	r3, #1
 800c656:	4621      	mov	r1, r4
 800c658:	2b07      	cmp	r3, #7
 800c65a:	dc0b      	bgt.n	800c674 <__gethex+0x17c>
 800c65c:	ee18 0a10 	vmov	r0, s16
 800c660:	f000 fa7e 	bl	800cb60 <_Balloc>
 800c664:	4604      	mov	r4, r0
 800c666:	b940      	cbnz	r0, 800c67a <__gethex+0x182>
 800c668:	4b5d      	ldr	r3, [pc, #372]	; (800c7e0 <__gethex+0x2e8>)
 800c66a:	4602      	mov	r2, r0
 800c66c:	21de      	movs	r1, #222	; 0xde
 800c66e:	485d      	ldr	r0, [pc, #372]	; (800c7e4 <__gethex+0x2ec>)
 800c670:	f7ff f830 	bl	800b6d4 <__assert_func>
 800c674:	3101      	adds	r1, #1
 800c676:	105b      	asrs	r3, r3, #1
 800c678:	e7ee      	b.n	800c658 <__gethex+0x160>
 800c67a:	f100 0914 	add.w	r9, r0, #20
 800c67e:	f04f 0b00 	mov.w	fp, #0
 800c682:	f1ca 0301 	rsb	r3, sl, #1
 800c686:	f8cd 9008 	str.w	r9, [sp, #8]
 800c68a:	f8cd b000 	str.w	fp, [sp]
 800c68e:	9306      	str	r3, [sp, #24]
 800c690:	42b7      	cmp	r7, r6
 800c692:	d340      	bcc.n	800c716 <__gethex+0x21e>
 800c694:	9802      	ldr	r0, [sp, #8]
 800c696:	9b00      	ldr	r3, [sp, #0]
 800c698:	f840 3b04 	str.w	r3, [r0], #4
 800c69c:	eba0 0009 	sub.w	r0, r0, r9
 800c6a0:	1080      	asrs	r0, r0, #2
 800c6a2:	0146      	lsls	r6, r0, #5
 800c6a4:	6120      	str	r0, [r4, #16]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f000 fb4c 	bl	800cd44 <__hi0bits>
 800c6ac:	1a30      	subs	r0, r6, r0
 800c6ae:	f8d8 6000 	ldr.w	r6, [r8]
 800c6b2:	42b0      	cmp	r0, r6
 800c6b4:	dd63      	ble.n	800c77e <__gethex+0x286>
 800c6b6:	1b87      	subs	r7, r0, r6
 800c6b8:	4639      	mov	r1, r7
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f000 fef0 	bl	800d4a0 <__any_on>
 800c6c0:	4682      	mov	sl, r0
 800c6c2:	b1a8      	cbz	r0, 800c6f0 <__gethex+0x1f8>
 800c6c4:	1e7b      	subs	r3, r7, #1
 800c6c6:	1159      	asrs	r1, r3, #5
 800c6c8:	f003 021f 	and.w	r2, r3, #31
 800c6cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c6d0:	f04f 0a01 	mov.w	sl, #1
 800c6d4:	fa0a f202 	lsl.w	r2, sl, r2
 800c6d8:	420a      	tst	r2, r1
 800c6da:	d009      	beq.n	800c6f0 <__gethex+0x1f8>
 800c6dc:	4553      	cmp	r3, sl
 800c6de:	dd05      	ble.n	800c6ec <__gethex+0x1f4>
 800c6e0:	1eb9      	subs	r1, r7, #2
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f000 fedc 	bl	800d4a0 <__any_on>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d145      	bne.n	800c778 <__gethex+0x280>
 800c6ec:	f04f 0a02 	mov.w	sl, #2
 800c6f0:	4639      	mov	r1, r7
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f7ff fe98 	bl	800c428 <rshift>
 800c6f8:	443d      	add	r5, r7
 800c6fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6fe:	42ab      	cmp	r3, r5
 800c700:	da4c      	bge.n	800c79c <__gethex+0x2a4>
 800c702:	ee18 0a10 	vmov	r0, s16
 800c706:	4621      	mov	r1, r4
 800c708:	f000 fa6a 	bl	800cbe0 <_Bfree>
 800c70c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c70e:	2300      	movs	r3, #0
 800c710:	6013      	str	r3, [r2, #0]
 800c712:	27a3      	movs	r7, #163	; 0xa3
 800c714:	e785      	b.n	800c622 <__gethex+0x12a>
 800c716:	1e73      	subs	r3, r6, #1
 800c718:	9a05      	ldr	r2, [sp, #20]
 800c71a:	9303      	str	r3, [sp, #12]
 800c71c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c720:	4293      	cmp	r3, r2
 800c722:	d019      	beq.n	800c758 <__gethex+0x260>
 800c724:	f1bb 0f20 	cmp.w	fp, #32
 800c728:	d107      	bne.n	800c73a <__gethex+0x242>
 800c72a:	9b02      	ldr	r3, [sp, #8]
 800c72c:	9a00      	ldr	r2, [sp, #0]
 800c72e:	f843 2b04 	str.w	r2, [r3], #4
 800c732:	9302      	str	r3, [sp, #8]
 800c734:	2300      	movs	r3, #0
 800c736:	9300      	str	r3, [sp, #0]
 800c738:	469b      	mov	fp, r3
 800c73a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c73e:	f7ff fec5 	bl	800c4cc <__hexdig_fun>
 800c742:	9b00      	ldr	r3, [sp, #0]
 800c744:	f000 000f 	and.w	r0, r0, #15
 800c748:	fa00 f00b 	lsl.w	r0, r0, fp
 800c74c:	4303      	orrs	r3, r0
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	f10b 0b04 	add.w	fp, fp, #4
 800c754:	9b03      	ldr	r3, [sp, #12]
 800c756:	e00d      	b.n	800c774 <__gethex+0x27c>
 800c758:	9b03      	ldr	r3, [sp, #12]
 800c75a:	9a06      	ldr	r2, [sp, #24]
 800c75c:	4413      	add	r3, r2
 800c75e:	42bb      	cmp	r3, r7
 800c760:	d3e0      	bcc.n	800c724 <__gethex+0x22c>
 800c762:	4618      	mov	r0, r3
 800c764:	9901      	ldr	r1, [sp, #4]
 800c766:	9307      	str	r3, [sp, #28]
 800c768:	4652      	mov	r2, sl
 800c76a:	f001 fa81 	bl	800dc70 <strncmp>
 800c76e:	9b07      	ldr	r3, [sp, #28]
 800c770:	2800      	cmp	r0, #0
 800c772:	d1d7      	bne.n	800c724 <__gethex+0x22c>
 800c774:	461e      	mov	r6, r3
 800c776:	e78b      	b.n	800c690 <__gethex+0x198>
 800c778:	f04f 0a03 	mov.w	sl, #3
 800c77c:	e7b8      	b.n	800c6f0 <__gethex+0x1f8>
 800c77e:	da0a      	bge.n	800c796 <__gethex+0x29e>
 800c780:	1a37      	subs	r7, r6, r0
 800c782:	4621      	mov	r1, r4
 800c784:	ee18 0a10 	vmov	r0, s16
 800c788:	463a      	mov	r2, r7
 800c78a:	f000 fc45 	bl	800d018 <__lshift>
 800c78e:	1bed      	subs	r5, r5, r7
 800c790:	4604      	mov	r4, r0
 800c792:	f100 0914 	add.w	r9, r0, #20
 800c796:	f04f 0a00 	mov.w	sl, #0
 800c79a:	e7ae      	b.n	800c6fa <__gethex+0x202>
 800c79c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c7a0:	42a8      	cmp	r0, r5
 800c7a2:	dd72      	ble.n	800c88a <__gethex+0x392>
 800c7a4:	1b45      	subs	r5, r0, r5
 800c7a6:	42ae      	cmp	r6, r5
 800c7a8:	dc36      	bgt.n	800c818 <__gethex+0x320>
 800c7aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7ae:	2b02      	cmp	r3, #2
 800c7b0:	d02a      	beq.n	800c808 <__gethex+0x310>
 800c7b2:	2b03      	cmp	r3, #3
 800c7b4:	d02c      	beq.n	800c810 <__gethex+0x318>
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d11c      	bne.n	800c7f4 <__gethex+0x2fc>
 800c7ba:	42ae      	cmp	r6, r5
 800c7bc:	d11a      	bne.n	800c7f4 <__gethex+0x2fc>
 800c7be:	2e01      	cmp	r6, #1
 800c7c0:	d112      	bne.n	800c7e8 <__gethex+0x2f0>
 800c7c2:	9a04      	ldr	r2, [sp, #16]
 800c7c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7c8:	6013      	str	r3, [r2, #0]
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	6123      	str	r3, [r4, #16]
 800c7ce:	f8c9 3000 	str.w	r3, [r9]
 800c7d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7d4:	2762      	movs	r7, #98	; 0x62
 800c7d6:	601c      	str	r4, [r3, #0]
 800c7d8:	e723      	b.n	800c622 <__gethex+0x12a>
 800c7da:	bf00      	nop
 800c7dc:	0800e910 	.word	0x0800e910
 800c7e0:	0800e899 	.word	0x0800e899
 800c7e4:	0800e8aa 	.word	0x0800e8aa
 800c7e8:	1e71      	subs	r1, r6, #1
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f000 fe58 	bl	800d4a0 <__any_on>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	d1e6      	bne.n	800c7c2 <__gethex+0x2ca>
 800c7f4:	ee18 0a10 	vmov	r0, s16
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	f000 f9f1 	bl	800cbe0 <_Bfree>
 800c7fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c800:	2300      	movs	r3, #0
 800c802:	6013      	str	r3, [r2, #0]
 800c804:	2750      	movs	r7, #80	; 0x50
 800c806:	e70c      	b.n	800c622 <__gethex+0x12a>
 800c808:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d1f2      	bne.n	800c7f4 <__gethex+0x2fc>
 800c80e:	e7d8      	b.n	800c7c2 <__gethex+0x2ca>
 800c810:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1d5      	bne.n	800c7c2 <__gethex+0x2ca>
 800c816:	e7ed      	b.n	800c7f4 <__gethex+0x2fc>
 800c818:	1e6f      	subs	r7, r5, #1
 800c81a:	f1ba 0f00 	cmp.w	sl, #0
 800c81e:	d131      	bne.n	800c884 <__gethex+0x38c>
 800c820:	b127      	cbz	r7, 800c82c <__gethex+0x334>
 800c822:	4639      	mov	r1, r7
 800c824:	4620      	mov	r0, r4
 800c826:	f000 fe3b 	bl	800d4a0 <__any_on>
 800c82a:	4682      	mov	sl, r0
 800c82c:	117b      	asrs	r3, r7, #5
 800c82e:	2101      	movs	r1, #1
 800c830:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c834:	f007 071f 	and.w	r7, r7, #31
 800c838:	fa01 f707 	lsl.w	r7, r1, r7
 800c83c:	421f      	tst	r7, r3
 800c83e:	4629      	mov	r1, r5
 800c840:	4620      	mov	r0, r4
 800c842:	bf18      	it	ne
 800c844:	f04a 0a02 	orrne.w	sl, sl, #2
 800c848:	1b76      	subs	r6, r6, r5
 800c84a:	f7ff fded 	bl	800c428 <rshift>
 800c84e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c852:	2702      	movs	r7, #2
 800c854:	f1ba 0f00 	cmp.w	sl, #0
 800c858:	d048      	beq.n	800c8ec <__gethex+0x3f4>
 800c85a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c85e:	2b02      	cmp	r3, #2
 800c860:	d015      	beq.n	800c88e <__gethex+0x396>
 800c862:	2b03      	cmp	r3, #3
 800c864:	d017      	beq.n	800c896 <__gethex+0x39e>
 800c866:	2b01      	cmp	r3, #1
 800c868:	d109      	bne.n	800c87e <__gethex+0x386>
 800c86a:	f01a 0f02 	tst.w	sl, #2
 800c86e:	d006      	beq.n	800c87e <__gethex+0x386>
 800c870:	f8d9 0000 	ldr.w	r0, [r9]
 800c874:	ea4a 0a00 	orr.w	sl, sl, r0
 800c878:	f01a 0f01 	tst.w	sl, #1
 800c87c:	d10e      	bne.n	800c89c <__gethex+0x3a4>
 800c87e:	f047 0710 	orr.w	r7, r7, #16
 800c882:	e033      	b.n	800c8ec <__gethex+0x3f4>
 800c884:	f04f 0a01 	mov.w	sl, #1
 800c888:	e7d0      	b.n	800c82c <__gethex+0x334>
 800c88a:	2701      	movs	r7, #1
 800c88c:	e7e2      	b.n	800c854 <__gethex+0x35c>
 800c88e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c890:	f1c3 0301 	rsb	r3, r3, #1
 800c894:	9315      	str	r3, [sp, #84]	; 0x54
 800c896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d0f0      	beq.n	800c87e <__gethex+0x386>
 800c89c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c8a0:	f104 0314 	add.w	r3, r4, #20
 800c8a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c8a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c8ac:	f04f 0c00 	mov.w	ip, #0
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c8ba:	d01c      	beq.n	800c8f6 <__gethex+0x3fe>
 800c8bc:	3201      	adds	r2, #1
 800c8be:	6002      	str	r2, [r0, #0]
 800c8c0:	2f02      	cmp	r7, #2
 800c8c2:	f104 0314 	add.w	r3, r4, #20
 800c8c6:	d13f      	bne.n	800c948 <__gethex+0x450>
 800c8c8:	f8d8 2000 	ldr.w	r2, [r8]
 800c8cc:	3a01      	subs	r2, #1
 800c8ce:	42b2      	cmp	r2, r6
 800c8d0:	d10a      	bne.n	800c8e8 <__gethex+0x3f0>
 800c8d2:	1171      	asrs	r1, r6, #5
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8da:	f006 061f 	and.w	r6, r6, #31
 800c8de:	fa02 f606 	lsl.w	r6, r2, r6
 800c8e2:	421e      	tst	r6, r3
 800c8e4:	bf18      	it	ne
 800c8e6:	4617      	movne	r7, r2
 800c8e8:	f047 0720 	orr.w	r7, r7, #32
 800c8ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8ee:	601c      	str	r4, [r3, #0]
 800c8f0:	9b04      	ldr	r3, [sp, #16]
 800c8f2:	601d      	str	r5, [r3, #0]
 800c8f4:	e695      	b.n	800c622 <__gethex+0x12a>
 800c8f6:	4299      	cmp	r1, r3
 800c8f8:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8fc:	d8d8      	bhi.n	800c8b0 <__gethex+0x3b8>
 800c8fe:	68a3      	ldr	r3, [r4, #8]
 800c900:	459b      	cmp	fp, r3
 800c902:	db19      	blt.n	800c938 <__gethex+0x440>
 800c904:	6861      	ldr	r1, [r4, #4]
 800c906:	ee18 0a10 	vmov	r0, s16
 800c90a:	3101      	adds	r1, #1
 800c90c:	f000 f928 	bl	800cb60 <_Balloc>
 800c910:	4681      	mov	r9, r0
 800c912:	b918      	cbnz	r0, 800c91c <__gethex+0x424>
 800c914:	4b1a      	ldr	r3, [pc, #104]	; (800c980 <__gethex+0x488>)
 800c916:	4602      	mov	r2, r0
 800c918:	2184      	movs	r1, #132	; 0x84
 800c91a:	e6a8      	b.n	800c66e <__gethex+0x176>
 800c91c:	6922      	ldr	r2, [r4, #16]
 800c91e:	3202      	adds	r2, #2
 800c920:	f104 010c 	add.w	r1, r4, #12
 800c924:	0092      	lsls	r2, r2, #2
 800c926:	300c      	adds	r0, #12
 800c928:	f000 f90c 	bl	800cb44 <memcpy>
 800c92c:	4621      	mov	r1, r4
 800c92e:	ee18 0a10 	vmov	r0, s16
 800c932:	f000 f955 	bl	800cbe0 <_Bfree>
 800c936:	464c      	mov	r4, r9
 800c938:	6923      	ldr	r3, [r4, #16]
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c940:	6122      	str	r2, [r4, #16]
 800c942:	2201      	movs	r2, #1
 800c944:	615a      	str	r2, [r3, #20]
 800c946:	e7bb      	b.n	800c8c0 <__gethex+0x3c8>
 800c948:	6922      	ldr	r2, [r4, #16]
 800c94a:	455a      	cmp	r2, fp
 800c94c:	dd0b      	ble.n	800c966 <__gethex+0x46e>
 800c94e:	2101      	movs	r1, #1
 800c950:	4620      	mov	r0, r4
 800c952:	f7ff fd69 	bl	800c428 <rshift>
 800c956:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c95a:	3501      	adds	r5, #1
 800c95c:	42ab      	cmp	r3, r5
 800c95e:	f6ff aed0 	blt.w	800c702 <__gethex+0x20a>
 800c962:	2701      	movs	r7, #1
 800c964:	e7c0      	b.n	800c8e8 <__gethex+0x3f0>
 800c966:	f016 061f 	ands.w	r6, r6, #31
 800c96a:	d0fa      	beq.n	800c962 <__gethex+0x46a>
 800c96c:	4453      	add	r3, sl
 800c96e:	f1c6 0620 	rsb	r6, r6, #32
 800c972:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c976:	f000 f9e5 	bl	800cd44 <__hi0bits>
 800c97a:	42b0      	cmp	r0, r6
 800c97c:	dbe7      	blt.n	800c94e <__gethex+0x456>
 800c97e:	e7f0      	b.n	800c962 <__gethex+0x46a>
 800c980:	0800e899 	.word	0x0800e899

0800c984 <L_shift>:
 800c984:	f1c2 0208 	rsb	r2, r2, #8
 800c988:	0092      	lsls	r2, r2, #2
 800c98a:	b570      	push	{r4, r5, r6, lr}
 800c98c:	f1c2 0620 	rsb	r6, r2, #32
 800c990:	6843      	ldr	r3, [r0, #4]
 800c992:	6804      	ldr	r4, [r0, #0]
 800c994:	fa03 f506 	lsl.w	r5, r3, r6
 800c998:	432c      	orrs	r4, r5
 800c99a:	40d3      	lsrs	r3, r2
 800c99c:	6004      	str	r4, [r0, #0]
 800c99e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c9a2:	4288      	cmp	r0, r1
 800c9a4:	d3f4      	bcc.n	800c990 <L_shift+0xc>
 800c9a6:	bd70      	pop	{r4, r5, r6, pc}

0800c9a8 <__match>:
 800c9a8:	b530      	push	{r4, r5, lr}
 800c9aa:	6803      	ldr	r3, [r0, #0]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9b2:	b914      	cbnz	r4, 800c9ba <__match+0x12>
 800c9b4:	6003      	str	r3, [r0, #0]
 800c9b6:	2001      	movs	r0, #1
 800c9b8:	bd30      	pop	{r4, r5, pc}
 800c9ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c9c2:	2d19      	cmp	r5, #25
 800c9c4:	bf98      	it	ls
 800c9c6:	3220      	addls	r2, #32
 800c9c8:	42a2      	cmp	r2, r4
 800c9ca:	d0f0      	beq.n	800c9ae <__match+0x6>
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	e7f3      	b.n	800c9b8 <__match+0x10>

0800c9d0 <__hexnan>:
 800c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d4:	680b      	ldr	r3, [r1, #0]
 800c9d6:	115e      	asrs	r6, r3, #5
 800c9d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c9dc:	f013 031f 	ands.w	r3, r3, #31
 800c9e0:	b087      	sub	sp, #28
 800c9e2:	bf18      	it	ne
 800c9e4:	3604      	addne	r6, #4
 800c9e6:	2500      	movs	r5, #0
 800c9e8:	1f37      	subs	r7, r6, #4
 800c9ea:	4690      	mov	r8, r2
 800c9ec:	6802      	ldr	r2, [r0, #0]
 800c9ee:	9301      	str	r3, [sp, #4]
 800c9f0:	4682      	mov	sl, r0
 800c9f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9f6:	46b9      	mov	r9, r7
 800c9f8:	463c      	mov	r4, r7
 800c9fa:	9502      	str	r5, [sp, #8]
 800c9fc:	46ab      	mov	fp, r5
 800c9fe:	7851      	ldrb	r1, [r2, #1]
 800ca00:	1c53      	adds	r3, r2, #1
 800ca02:	9303      	str	r3, [sp, #12]
 800ca04:	b341      	cbz	r1, 800ca58 <__hexnan+0x88>
 800ca06:	4608      	mov	r0, r1
 800ca08:	9205      	str	r2, [sp, #20]
 800ca0a:	9104      	str	r1, [sp, #16]
 800ca0c:	f7ff fd5e 	bl	800c4cc <__hexdig_fun>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d14f      	bne.n	800cab4 <__hexnan+0xe4>
 800ca14:	9904      	ldr	r1, [sp, #16]
 800ca16:	9a05      	ldr	r2, [sp, #20]
 800ca18:	2920      	cmp	r1, #32
 800ca1a:	d818      	bhi.n	800ca4e <__hexnan+0x7e>
 800ca1c:	9b02      	ldr	r3, [sp, #8]
 800ca1e:	459b      	cmp	fp, r3
 800ca20:	dd13      	ble.n	800ca4a <__hexnan+0x7a>
 800ca22:	454c      	cmp	r4, r9
 800ca24:	d206      	bcs.n	800ca34 <__hexnan+0x64>
 800ca26:	2d07      	cmp	r5, #7
 800ca28:	dc04      	bgt.n	800ca34 <__hexnan+0x64>
 800ca2a:	462a      	mov	r2, r5
 800ca2c:	4649      	mov	r1, r9
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f7ff ffa8 	bl	800c984 <L_shift>
 800ca34:	4544      	cmp	r4, r8
 800ca36:	d950      	bls.n	800cada <__hexnan+0x10a>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	f1a4 0904 	sub.w	r9, r4, #4
 800ca3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca42:	f8cd b008 	str.w	fp, [sp, #8]
 800ca46:	464c      	mov	r4, r9
 800ca48:	461d      	mov	r5, r3
 800ca4a:	9a03      	ldr	r2, [sp, #12]
 800ca4c:	e7d7      	b.n	800c9fe <__hexnan+0x2e>
 800ca4e:	2929      	cmp	r1, #41	; 0x29
 800ca50:	d156      	bne.n	800cb00 <__hexnan+0x130>
 800ca52:	3202      	adds	r2, #2
 800ca54:	f8ca 2000 	str.w	r2, [sl]
 800ca58:	f1bb 0f00 	cmp.w	fp, #0
 800ca5c:	d050      	beq.n	800cb00 <__hexnan+0x130>
 800ca5e:	454c      	cmp	r4, r9
 800ca60:	d206      	bcs.n	800ca70 <__hexnan+0xa0>
 800ca62:	2d07      	cmp	r5, #7
 800ca64:	dc04      	bgt.n	800ca70 <__hexnan+0xa0>
 800ca66:	462a      	mov	r2, r5
 800ca68:	4649      	mov	r1, r9
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f7ff ff8a 	bl	800c984 <L_shift>
 800ca70:	4544      	cmp	r4, r8
 800ca72:	d934      	bls.n	800cade <__hexnan+0x10e>
 800ca74:	f1a8 0204 	sub.w	r2, r8, #4
 800ca78:	4623      	mov	r3, r4
 800ca7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca82:	429f      	cmp	r7, r3
 800ca84:	d2f9      	bcs.n	800ca7a <__hexnan+0xaa>
 800ca86:	1b3b      	subs	r3, r7, r4
 800ca88:	f023 0303 	bic.w	r3, r3, #3
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	3401      	adds	r4, #1
 800ca90:	3e03      	subs	r6, #3
 800ca92:	42b4      	cmp	r4, r6
 800ca94:	bf88      	it	hi
 800ca96:	2304      	movhi	r3, #4
 800ca98:	4443      	add	r3, r8
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f843 2b04 	str.w	r2, [r3], #4
 800caa0:	429f      	cmp	r7, r3
 800caa2:	d2fb      	bcs.n	800ca9c <__hexnan+0xcc>
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	b91b      	cbnz	r3, 800cab0 <__hexnan+0xe0>
 800caa8:	4547      	cmp	r7, r8
 800caaa:	d127      	bne.n	800cafc <__hexnan+0x12c>
 800caac:	2301      	movs	r3, #1
 800caae:	603b      	str	r3, [r7, #0]
 800cab0:	2005      	movs	r0, #5
 800cab2:	e026      	b.n	800cb02 <__hexnan+0x132>
 800cab4:	3501      	adds	r5, #1
 800cab6:	2d08      	cmp	r5, #8
 800cab8:	f10b 0b01 	add.w	fp, fp, #1
 800cabc:	dd06      	ble.n	800cacc <__hexnan+0xfc>
 800cabe:	4544      	cmp	r4, r8
 800cac0:	d9c3      	bls.n	800ca4a <__hexnan+0x7a>
 800cac2:	2300      	movs	r3, #0
 800cac4:	f844 3c04 	str.w	r3, [r4, #-4]
 800cac8:	2501      	movs	r5, #1
 800caca:	3c04      	subs	r4, #4
 800cacc:	6822      	ldr	r2, [r4, #0]
 800cace:	f000 000f 	and.w	r0, r0, #15
 800cad2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cad6:	6022      	str	r2, [r4, #0]
 800cad8:	e7b7      	b.n	800ca4a <__hexnan+0x7a>
 800cada:	2508      	movs	r5, #8
 800cadc:	e7b5      	b.n	800ca4a <__hexnan+0x7a>
 800cade:	9b01      	ldr	r3, [sp, #4]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d0df      	beq.n	800caa4 <__hexnan+0xd4>
 800cae4:	f04f 32ff 	mov.w	r2, #4294967295
 800cae8:	f1c3 0320 	rsb	r3, r3, #32
 800caec:	fa22 f303 	lsr.w	r3, r2, r3
 800caf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800caf4:	401a      	ands	r2, r3
 800caf6:	f846 2c04 	str.w	r2, [r6, #-4]
 800cafa:	e7d3      	b.n	800caa4 <__hexnan+0xd4>
 800cafc:	3f04      	subs	r7, #4
 800cafe:	e7d1      	b.n	800caa4 <__hexnan+0xd4>
 800cb00:	2004      	movs	r0, #4
 800cb02:	b007      	add	sp, #28
 800cb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb08 <_localeconv_r>:
 800cb08:	4800      	ldr	r0, [pc, #0]	; (800cb0c <_localeconv_r+0x4>)
 800cb0a:	4770      	bx	lr
 800cb0c:	20000304 	.word	0x20000304

0800cb10 <malloc>:
 800cb10:	4b02      	ldr	r3, [pc, #8]	; (800cb1c <malloc+0xc>)
 800cb12:	4601      	mov	r1, r0
 800cb14:	6818      	ldr	r0, [r3, #0]
 800cb16:	f000 bd67 	b.w	800d5e8 <_malloc_r>
 800cb1a:	bf00      	nop
 800cb1c:	200001ac 	.word	0x200001ac

0800cb20 <__ascii_mbtowc>:
 800cb20:	b082      	sub	sp, #8
 800cb22:	b901      	cbnz	r1, 800cb26 <__ascii_mbtowc+0x6>
 800cb24:	a901      	add	r1, sp, #4
 800cb26:	b142      	cbz	r2, 800cb3a <__ascii_mbtowc+0x1a>
 800cb28:	b14b      	cbz	r3, 800cb3e <__ascii_mbtowc+0x1e>
 800cb2a:	7813      	ldrb	r3, [r2, #0]
 800cb2c:	600b      	str	r3, [r1, #0]
 800cb2e:	7812      	ldrb	r2, [r2, #0]
 800cb30:	1e10      	subs	r0, r2, #0
 800cb32:	bf18      	it	ne
 800cb34:	2001      	movne	r0, #1
 800cb36:	b002      	add	sp, #8
 800cb38:	4770      	bx	lr
 800cb3a:	4610      	mov	r0, r2
 800cb3c:	e7fb      	b.n	800cb36 <__ascii_mbtowc+0x16>
 800cb3e:	f06f 0001 	mvn.w	r0, #1
 800cb42:	e7f8      	b.n	800cb36 <__ascii_mbtowc+0x16>

0800cb44 <memcpy>:
 800cb44:	440a      	add	r2, r1
 800cb46:	4291      	cmp	r1, r2
 800cb48:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb4c:	d100      	bne.n	800cb50 <memcpy+0xc>
 800cb4e:	4770      	bx	lr
 800cb50:	b510      	push	{r4, lr}
 800cb52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb5a:	4291      	cmp	r1, r2
 800cb5c:	d1f9      	bne.n	800cb52 <memcpy+0xe>
 800cb5e:	bd10      	pop	{r4, pc}

0800cb60 <_Balloc>:
 800cb60:	b570      	push	{r4, r5, r6, lr}
 800cb62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb64:	4604      	mov	r4, r0
 800cb66:	460d      	mov	r5, r1
 800cb68:	b976      	cbnz	r6, 800cb88 <_Balloc+0x28>
 800cb6a:	2010      	movs	r0, #16
 800cb6c:	f7ff ffd0 	bl	800cb10 <malloc>
 800cb70:	4602      	mov	r2, r0
 800cb72:	6260      	str	r0, [r4, #36]	; 0x24
 800cb74:	b920      	cbnz	r0, 800cb80 <_Balloc+0x20>
 800cb76:	4b18      	ldr	r3, [pc, #96]	; (800cbd8 <_Balloc+0x78>)
 800cb78:	4818      	ldr	r0, [pc, #96]	; (800cbdc <_Balloc+0x7c>)
 800cb7a:	2166      	movs	r1, #102	; 0x66
 800cb7c:	f7fe fdaa 	bl	800b6d4 <__assert_func>
 800cb80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb84:	6006      	str	r6, [r0, #0]
 800cb86:	60c6      	str	r6, [r0, #12]
 800cb88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb8a:	68f3      	ldr	r3, [r6, #12]
 800cb8c:	b183      	cbz	r3, 800cbb0 <_Balloc+0x50>
 800cb8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb90:	68db      	ldr	r3, [r3, #12]
 800cb92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb96:	b9b8      	cbnz	r0, 800cbc8 <_Balloc+0x68>
 800cb98:	2101      	movs	r1, #1
 800cb9a:	fa01 f605 	lsl.w	r6, r1, r5
 800cb9e:	1d72      	adds	r2, r6, #5
 800cba0:	0092      	lsls	r2, r2, #2
 800cba2:	4620      	mov	r0, r4
 800cba4:	f000 fc9d 	bl	800d4e2 <_calloc_r>
 800cba8:	b160      	cbz	r0, 800cbc4 <_Balloc+0x64>
 800cbaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbae:	e00e      	b.n	800cbce <_Balloc+0x6e>
 800cbb0:	2221      	movs	r2, #33	; 0x21
 800cbb2:	2104      	movs	r1, #4
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f000 fc94 	bl	800d4e2 <_calloc_r>
 800cbba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbbc:	60f0      	str	r0, [r6, #12]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d1e4      	bne.n	800cb8e <_Balloc+0x2e>
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
 800cbc8:	6802      	ldr	r2, [r0, #0]
 800cbca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbce:	2300      	movs	r3, #0
 800cbd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbd4:	e7f7      	b.n	800cbc6 <_Balloc+0x66>
 800cbd6:	bf00      	nop
 800cbd8:	0800e680 	.word	0x0800e680
 800cbdc:	0800e924 	.word	0x0800e924

0800cbe0 <_Bfree>:
 800cbe0:	b570      	push	{r4, r5, r6, lr}
 800cbe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	b976      	cbnz	r6, 800cc08 <_Bfree+0x28>
 800cbea:	2010      	movs	r0, #16
 800cbec:	f7ff ff90 	bl	800cb10 <malloc>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	6268      	str	r0, [r5, #36]	; 0x24
 800cbf4:	b920      	cbnz	r0, 800cc00 <_Bfree+0x20>
 800cbf6:	4b09      	ldr	r3, [pc, #36]	; (800cc1c <_Bfree+0x3c>)
 800cbf8:	4809      	ldr	r0, [pc, #36]	; (800cc20 <_Bfree+0x40>)
 800cbfa:	218a      	movs	r1, #138	; 0x8a
 800cbfc:	f7fe fd6a 	bl	800b6d4 <__assert_func>
 800cc00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc04:	6006      	str	r6, [r0, #0]
 800cc06:	60c6      	str	r6, [r0, #12]
 800cc08:	b13c      	cbz	r4, 800cc1a <_Bfree+0x3a>
 800cc0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cc0c:	6862      	ldr	r2, [r4, #4]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc14:	6021      	str	r1, [r4, #0]
 800cc16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc1a:	bd70      	pop	{r4, r5, r6, pc}
 800cc1c:	0800e680 	.word	0x0800e680
 800cc20:	0800e924 	.word	0x0800e924

0800cc24 <__multadd>:
 800cc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc28:	690d      	ldr	r5, [r1, #16]
 800cc2a:	4607      	mov	r7, r0
 800cc2c:	460c      	mov	r4, r1
 800cc2e:	461e      	mov	r6, r3
 800cc30:	f101 0c14 	add.w	ip, r1, #20
 800cc34:	2000      	movs	r0, #0
 800cc36:	f8dc 3000 	ldr.w	r3, [ip]
 800cc3a:	b299      	uxth	r1, r3
 800cc3c:	fb02 6101 	mla	r1, r2, r1, r6
 800cc40:	0c1e      	lsrs	r6, r3, #16
 800cc42:	0c0b      	lsrs	r3, r1, #16
 800cc44:	fb02 3306 	mla	r3, r2, r6, r3
 800cc48:	b289      	uxth	r1, r1
 800cc4a:	3001      	adds	r0, #1
 800cc4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc50:	4285      	cmp	r5, r0
 800cc52:	f84c 1b04 	str.w	r1, [ip], #4
 800cc56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc5a:	dcec      	bgt.n	800cc36 <__multadd+0x12>
 800cc5c:	b30e      	cbz	r6, 800cca2 <__multadd+0x7e>
 800cc5e:	68a3      	ldr	r3, [r4, #8]
 800cc60:	42ab      	cmp	r3, r5
 800cc62:	dc19      	bgt.n	800cc98 <__multadd+0x74>
 800cc64:	6861      	ldr	r1, [r4, #4]
 800cc66:	4638      	mov	r0, r7
 800cc68:	3101      	adds	r1, #1
 800cc6a:	f7ff ff79 	bl	800cb60 <_Balloc>
 800cc6e:	4680      	mov	r8, r0
 800cc70:	b928      	cbnz	r0, 800cc7e <__multadd+0x5a>
 800cc72:	4602      	mov	r2, r0
 800cc74:	4b0c      	ldr	r3, [pc, #48]	; (800cca8 <__multadd+0x84>)
 800cc76:	480d      	ldr	r0, [pc, #52]	; (800ccac <__multadd+0x88>)
 800cc78:	21b5      	movs	r1, #181	; 0xb5
 800cc7a:	f7fe fd2b 	bl	800b6d4 <__assert_func>
 800cc7e:	6922      	ldr	r2, [r4, #16]
 800cc80:	3202      	adds	r2, #2
 800cc82:	f104 010c 	add.w	r1, r4, #12
 800cc86:	0092      	lsls	r2, r2, #2
 800cc88:	300c      	adds	r0, #12
 800cc8a:	f7ff ff5b 	bl	800cb44 <memcpy>
 800cc8e:	4621      	mov	r1, r4
 800cc90:	4638      	mov	r0, r7
 800cc92:	f7ff ffa5 	bl	800cbe0 <_Bfree>
 800cc96:	4644      	mov	r4, r8
 800cc98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc9c:	3501      	adds	r5, #1
 800cc9e:	615e      	str	r6, [r3, #20]
 800cca0:	6125      	str	r5, [r4, #16]
 800cca2:	4620      	mov	r0, r4
 800cca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cca8:	0800e899 	.word	0x0800e899
 800ccac:	0800e924 	.word	0x0800e924

0800ccb0 <__s2b>:
 800ccb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb4:	460c      	mov	r4, r1
 800ccb6:	4615      	mov	r5, r2
 800ccb8:	461f      	mov	r7, r3
 800ccba:	2209      	movs	r2, #9
 800ccbc:	3308      	adds	r3, #8
 800ccbe:	4606      	mov	r6, r0
 800ccc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	db09      	blt.n	800cce0 <__s2b+0x30>
 800cccc:	4630      	mov	r0, r6
 800ccce:	f7ff ff47 	bl	800cb60 <_Balloc>
 800ccd2:	b940      	cbnz	r0, 800cce6 <__s2b+0x36>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	4b19      	ldr	r3, [pc, #100]	; (800cd3c <__s2b+0x8c>)
 800ccd8:	4819      	ldr	r0, [pc, #100]	; (800cd40 <__s2b+0x90>)
 800ccda:	21ce      	movs	r1, #206	; 0xce
 800ccdc:	f7fe fcfa 	bl	800b6d4 <__assert_func>
 800cce0:	0052      	lsls	r2, r2, #1
 800cce2:	3101      	adds	r1, #1
 800cce4:	e7f0      	b.n	800ccc8 <__s2b+0x18>
 800cce6:	9b08      	ldr	r3, [sp, #32]
 800cce8:	6143      	str	r3, [r0, #20]
 800ccea:	2d09      	cmp	r5, #9
 800ccec:	f04f 0301 	mov.w	r3, #1
 800ccf0:	6103      	str	r3, [r0, #16]
 800ccf2:	dd16      	ble.n	800cd22 <__s2b+0x72>
 800ccf4:	f104 0909 	add.w	r9, r4, #9
 800ccf8:	46c8      	mov	r8, r9
 800ccfa:	442c      	add	r4, r5
 800ccfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cd00:	4601      	mov	r1, r0
 800cd02:	3b30      	subs	r3, #48	; 0x30
 800cd04:	220a      	movs	r2, #10
 800cd06:	4630      	mov	r0, r6
 800cd08:	f7ff ff8c 	bl	800cc24 <__multadd>
 800cd0c:	45a0      	cmp	r8, r4
 800cd0e:	d1f5      	bne.n	800ccfc <__s2b+0x4c>
 800cd10:	f1a5 0408 	sub.w	r4, r5, #8
 800cd14:	444c      	add	r4, r9
 800cd16:	1b2d      	subs	r5, r5, r4
 800cd18:	1963      	adds	r3, r4, r5
 800cd1a:	42bb      	cmp	r3, r7
 800cd1c:	db04      	blt.n	800cd28 <__s2b+0x78>
 800cd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd22:	340a      	adds	r4, #10
 800cd24:	2509      	movs	r5, #9
 800cd26:	e7f6      	b.n	800cd16 <__s2b+0x66>
 800cd28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd2c:	4601      	mov	r1, r0
 800cd2e:	3b30      	subs	r3, #48	; 0x30
 800cd30:	220a      	movs	r2, #10
 800cd32:	4630      	mov	r0, r6
 800cd34:	f7ff ff76 	bl	800cc24 <__multadd>
 800cd38:	e7ee      	b.n	800cd18 <__s2b+0x68>
 800cd3a:	bf00      	nop
 800cd3c:	0800e899 	.word	0x0800e899
 800cd40:	0800e924 	.word	0x0800e924

0800cd44 <__hi0bits>:
 800cd44:	0c03      	lsrs	r3, r0, #16
 800cd46:	041b      	lsls	r3, r3, #16
 800cd48:	b9d3      	cbnz	r3, 800cd80 <__hi0bits+0x3c>
 800cd4a:	0400      	lsls	r0, r0, #16
 800cd4c:	2310      	movs	r3, #16
 800cd4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cd52:	bf04      	itt	eq
 800cd54:	0200      	lsleq	r0, r0, #8
 800cd56:	3308      	addeq	r3, #8
 800cd58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cd5c:	bf04      	itt	eq
 800cd5e:	0100      	lsleq	r0, r0, #4
 800cd60:	3304      	addeq	r3, #4
 800cd62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cd66:	bf04      	itt	eq
 800cd68:	0080      	lsleq	r0, r0, #2
 800cd6a:	3302      	addeq	r3, #2
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	db05      	blt.n	800cd7c <__hi0bits+0x38>
 800cd70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cd74:	f103 0301 	add.w	r3, r3, #1
 800cd78:	bf08      	it	eq
 800cd7a:	2320      	moveq	r3, #32
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	4770      	bx	lr
 800cd80:	2300      	movs	r3, #0
 800cd82:	e7e4      	b.n	800cd4e <__hi0bits+0xa>

0800cd84 <__lo0bits>:
 800cd84:	6803      	ldr	r3, [r0, #0]
 800cd86:	f013 0207 	ands.w	r2, r3, #7
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	d00b      	beq.n	800cda6 <__lo0bits+0x22>
 800cd8e:	07da      	lsls	r2, r3, #31
 800cd90:	d423      	bmi.n	800cdda <__lo0bits+0x56>
 800cd92:	0798      	lsls	r0, r3, #30
 800cd94:	bf49      	itett	mi
 800cd96:	085b      	lsrmi	r3, r3, #1
 800cd98:	089b      	lsrpl	r3, r3, #2
 800cd9a:	2001      	movmi	r0, #1
 800cd9c:	600b      	strmi	r3, [r1, #0]
 800cd9e:	bf5c      	itt	pl
 800cda0:	600b      	strpl	r3, [r1, #0]
 800cda2:	2002      	movpl	r0, #2
 800cda4:	4770      	bx	lr
 800cda6:	b298      	uxth	r0, r3
 800cda8:	b9a8      	cbnz	r0, 800cdd6 <__lo0bits+0x52>
 800cdaa:	0c1b      	lsrs	r3, r3, #16
 800cdac:	2010      	movs	r0, #16
 800cdae:	b2da      	uxtb	r2, r3
 800cdb0:	b90a      	cbnz	r2, 800cdb6 <__lo0bits+0x32>
 800cdb2:	3008      	adds	r0, #8
 800cdb4:	0a1b      	lsrs	r3, r3, #8
 800cdb6:	071a      	lsls	r2, r3, #28
 800cdb8:	bf04      	itt	eq
 800cdba:	091b      	lsreq	r3, r3, #4
 800cdbc:	3004      	addeq	r0, #4
 800cdbe:	079a      	lsls	r2, r3, #30
 800cdc0:	bf04      	itt	eq
 800cdc2:	089b      	lsreq	r3, r3, #2
 800cdc4:	3002      	addeq	r0, #2
 800cdc6:	07da      	lsls	r2, r3, #31
 800cdc8:	d403      	bmi.n	800cdd2 <__lo0bits+0x4e>
 800cdca:	085b      	lsrs	r3, r3, #1
 800cdcc:	f100 0001 	add.w	r0, r0, #1
 800cdd0:	d005      	beq.n	800cdde <__lo0bits+0x5a>
 800cdd2:	600b      	str	r3, [r1, #0]
 800cdd4:	4770      	bx	lr
 800cdd6:	4610      	mov	r0, r2
 800cdd8:	e7e9      	b.n	800cdae <__lo0bits+0x2a>
 800cdda:	2000      	movs	r0, #0
 800cddc:	4770      	bx	lr
 800cdde:	2020      	movs	r0, #32
 800cde0:	4770      	bx	lr
	...

0800cde4 <__i2b>:
 800cde4:	b510      	push	{r4, lr}
 800cde6:	460c      	mov	r4, r1
 800cde8:	2101      	movs	r1, #1
 800cdea:	f7ff feb9 	bl	800cb60 <_Balloc>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	b928      	cbnz	r0, 800cdfe <__i2b+0x1a>
 800cdf2:	4b05      	ldr	r3, [pc, #20]	; (800ce08 <__i2b+0x24>)
 800cdf4:	4805      	ldr	r0, [pc, #20]	; (800ce0c <__i2b+0x28>)
 800cdf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cdfa:	f7fe fc6b 	bl	800b6d4 <__assert_func>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	6144      	str	r4, [r0, #20]
 800ce02:	6103      	str	r3, [r0, #16]
 800ce04:	bd10      	pop	{r4, pc}
 800ce06:	bf00      	nop
 800ce08:	0800e899 	.word	0x0800e899
 800ce0c:	0800e924 	.word	0x0800e924

0800ce10 <__multiply>:
 800ce10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce14:	4691      	mov	r9, r2
 800ce16:	690a      	ldr	r2, [r1, #16]
 800ce18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	bfb8      	it	lt
 800ce20:	460b      	movlt	r3, r1
 800ce22:	460c      	mov	r4, r1
 800ce24:	bfbc      	itt	lt
 800ce26:	464c      	movlt	r4, r9
 800ce28:	4699      	movlt	r9, r3
 800ce2a:	6927      	ldr	r7, [r4, #16]
 800ce2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce30:	68a3      	ldr	r3, [r4, #8]
 800ce32:	6861      	ldr	r1, [r4, #4]
 800ce34:	eb07 060a 	add.w	r6, r7, sl
 800ce38:	42b3      	cmp	r3, r6
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	bfb8      	it	lt
 800ce3e:	3101      	addlt	r1, #1
 800ce40:	f7ff fe8e 	bl	800cb60 <_Balloc>
 800ce44:	b930      	cbnz	r0, 800ce54 <__multiply+0x44>
 800ce46:	4602      	mov	r2, r0
 800ce48:	4b44      	ldr	r3, [pc, #272]	; (800cf5c <__multiply+0x14c>)
 800ce4a:	4845      	ldr	r0, [pc, #276]	; (800cf60 <__multiply+0x150>)
 800ce4c:	f240 115d 	movw	r1, #349	; 0x15d
 800ce50:	f7fe fc40 	bl	800b6d4 <__assert_func>
 800ce54:	f100 0514 	add.w	r5, r0, #20
 800ce58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce5c:	462b      	mov	r3, r5
 800ce5e:	2200      	movs	r2, #0
 800ce60:	4543      	cmp	r3, r8
 800ce62:	d321      	bcc.n	800cea8 <__multiply+0x98>
 800ce64:	f104 0314 	add.w	r3, r4, #20
 800ce68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ce6c:	f109 0314 	add.w	r3, r9, #20
 800ce70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ce74:	9202      	str	r2, [sp, #8]
 800ce76:	1b3a      	subs	r2, r7, r4
 800ce78:	3a15      	subs	r2, #21
 800ce7a:	f022 0203 	bic.w	r2, r2, #3
 800ce7e:	3204      	adds	r2, #4
 800ce80:	f104 0115 	add.w	r1, r4, #21
 800ce84:	428f      	cmp	r7, r1
 800ce86:	bf38      	it	cc
 800ce88:	2204      	movcc	r2, #4
 800ce8a:	9201      	str	r2, [sp, #4]
 800ce8c:	9a02      	ldr	r2, [sp, #8]
 800ce8e:	9303      	str	r3, [sp, #12]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d80c      	bhi.n	800ceae <__multiply+0x9e>
 800ce94:	2e00      	cmp	r6, #0
 800ce96:	dd03      	ble.n	800cea0 <__multiply+0x90>
 800ce98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d05a      	beq.n	800cf56 <__multiply+0x146>
 800cea0:	6106      	str	r6, [r0, #16]
 800cea2:	b005      	add	sp, #20
 800cea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea8:	f843 2b04 	str.w	r2, [r3], #4
 800ceac:	e7d8      	b.n	800ce60 <__multiply+0x50>
 800ceae:	f8b3 a000 	ldrh.w	sl, [r3]
 800ceb2:	f1ba 0f00 	cmp.w	sl, #0
 800ceb6:	d024      	beq.n	800cf02 <__multiply+0xf2>
 800ceb8:	f104 0e14 	add.w	lr, r4, #20
 800cebc:	46a9      	mov	r9, r5
 800cebe:	f04f 0c00 	mov.w	ip, #0
 800cec2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cec6:	f8d9 1000 	ldr.w	r1, [r9]
 800ceca:	fa1f fb82 	uxth.w	fp, r2
 800cece:	b289      	uxth	r1, r1
 800ced0:	fb0a 110b 	mla	r1, sl, fp, r1
 800ced4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ced8:	f8d9 2000 	ldr.w	r2, [r9]
 800cedc:	4461      	add	r1, ip
 800cede:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cee2:	fb0a c20b 	mla	r2, sl, fp, ip
 800cee6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ceea:	b289      	uxth	r1, r1
 800ceec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cef0:	4577      	cmp	r7, lr
 800cef2:	f849 1b04 	str.w	r1, [r9], #4
 800cef6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cefa:	d8e2      	bhi.n	800cec2 <__multiply+0xb2>
 800cefc:	9a01      	ldr	r2, [sp, #4]
 800cefe:	f845 c002 	str.w	ip, [r5, r2]
 800cf02:	9a03      	ldr	r2, [sp, #12]
 800cf04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cf08:	3304      	adds	r3, #4
 800cf0a:	f1b9 0f00 	cmp.w	r9, #0
 800cf0e:	d020      	beq.n	800cf52 <__multiply+0x142>
 800cf10:	6829      	ldr	r1, [r5, #0]
 800cf12:	f104 0c14 	add.w	ip, r4, #20
 800cf16:	46ae      	mov	lr, r5
 800cf18:	f04f 0a00 	mov.w	sl, #0
 800cf1c:	f8bc b000 	ldrh.w	fp, [ip]
 800cf20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cf24:	fb09 220b 	mla	r2, r9, fp, r2
 800cf28:	4492      	add	sl, r2
 800cf2a:	b289      	uxth	r1, r1
 800cf2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cf30:	f84e 1b04 	str.w	r1, [lr], #4
 800cf34:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf38:	f8be 1000 	ldrh.w	r1, [lr]
 800cf3c:	0c12      	lsrs	r2, r2, #16
 800cf3e:	fb09 1102 	mla	r1, r9, r2, r1
 800cf42:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cf46:	4567      	cmp	r7, ip
 800cf48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cf4c:	d8e6      	bhi.n	800cf1c <__multiply+0x10c>
 800cf4e:	9a01      	ldr	r2, [sp, #4]
 800cf50:	50a9      	str	r1, [r5, r2]
 800cf52:	3504      	adds	r5, #4
 800cf54:	e79a      	b.n	800ce8c <__multiply+0x7c>
 800cf56:	3e01      	subs	r6, #1
 800cf58:	e79c      	b.n	800ce94 <__multiply+0x84>
 800cf5a:	bf00      	nop
 800cf5c:	0800e899 	.word	0x0800e899
 800cf60:	0800e924 	.word	0x0800e924

0800cf64 <__pow5mult>:
 800cf64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf68:	4615      	mov	r5, r2
 800cf6a:	f012 0203 	ands.w	r2, r2, #3
 800cf6e:	4606      	mov	r6, r0
 800cf70:	460f      	mov	r7, r1
 800cf72:	d007      	beq.n	800cf84 <__pow5mult+0x20>
 800cf74:	4c25      	ldr	r4, [pc, #148]	; (800d00c <__pow5mult+0xa8>)
 800cf76:	3a01      	subs	r2, #1
 800cf78:	2300      	movs	r3, #0
 800cf7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf7e:	f7ff fe51 	bl	800cc24 <__multadd>
 800cf82:	4607      	mov	r7, r0
 800cf84:	10ad      	asrs	r5, r5, #2
 800cf86:	d03d      	beq.n	800d004 <__pow5mult+0xa0>
 800cf88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf8a:	b97c      	cbnz	r4, 800cfac <__pow5mult+0x48>
 800cf8c:	2010      	movs	r0, #16
 800cf8e:	f7ff fdbf 	bl	800cb10 <malloc>
 800cf92:	4602      	mov	r2, r0
 800cf94:	6270      	str	r0, [r6, #36]	; 0x24
 800cf96:	b928      	cbnz	r0, 800cfa4 <__pow5mult+0x40>
 800cf98:	4b1d      	ldr	r3, [pc, #116]	; (800d010 <__pow5mult+0xac>)
 800cf9a:	481e      	ldr	r0, [pc, #120]	; (800d014 <__pow5mult+0xb0>)
 800cf9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cfa0:	f7fe fb98 	bl	800b6d4 <__assert_func>
 800cfa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfa8:	6004      	str	r4, [r0, #0]
 800cfaa:	60c4      	str	r4, [r0, #12]
 800cfac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cfb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfb4:	b94c      	cbnz	r4, 800cfca <__pow5mult+0x66>
 800cfb6:	f240 2171 	movw	r1, #625	; 0x271
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f7ff ff12 	bl	800cde4 <__i2b>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	6003      	str	r3, [r0, #0]
 800cfca:	f04f 0900 	mov.w	r9, #0
 800cfce:	07eb      	lsls	r3, r5, #31
 800cfd0:	d50a      	bpl.n	800cfe8 <__pow5mult+0x84>
 800cfd2:	4639      	mov	r1, r7
 800cfd4:	4622      	mov	r2, r4
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	f7ff ff1a 	bl	800ce10 <__multiply>
 800cfdc:	4639      	mov	r1, r7
 800cfde:	4680      	mov	r8, r0
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	f7ff fdfd 	bl	800cbe0 <_Bfree>
 800cfe6:	4647      	mov	r7, r8
 800cfe8:	106d      	asrs	r5, r5, #1
 800cfea:	d00b      	beq.n	800d004 <__pow5mult+0xa0>
 800cfec:	6820      	ldr	r0, [r4, #0]
 800cfee:	b938      	cbnz	r0, 800d000 <__pow5mult+0x9c>
 800cff0:	4622      	mov	r2, r4
 800cff2:	4621      	mov	r1, r4
 800cff4:	4630      	mov	r0, r6
 800cff6:	f7ff ff0b 	bl	800ce10 <__multiply>
 800cffa:	6020      	str	r0, [r4, #0]
 800cffc:	f8c0 9000 	str.w	r9, [r0]
 800d000:	4604      	mov	r4, r0
 800d002:	e7e4      	b.n	800cfce <__pow5mult+0x6a>
 800d004:	4638      	mov	r0, r7
 800d006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d00a:	bf00      	nop
 800d00c:	0800ea70 	.word	0x0800ea70
 800d010:	0800e680 	.word	0x0800e680
 800d014:	0800e924 	.word	0x0800e924

0800d018 <__lshift>:
 800d018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d01c:	460c      	mov	r4, r1
 800d01e:	6849      	ldr	r1, [r1, #4]
 800d020:	6923      	ldr	r3, [r4, #16]
 800d022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d026:	68a3      	ldr	r3, [r4, #8]
 800d028:	4607      	mov	r7, r0
 800d02a:	4691      	mov	r9, r2
 800d02c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d030:	f108 0601 	add.w	r6, r8, #1
 800d034:	42b3      	cmp	r3, r6
 800d036:	db0b      	blt.n	800d050 <__lshift+0x38>
 800d038:	4638      	mov	r0, r7
 800d03a:	f7ff fd91 	bl	800cb60 <_Balloc>
 800d03e:	4605      	mov	r5, r0
 800d040:	b948      	cbnz	r0, 800d056 <__lshift+0x3e>
 800d042:	4602      	mov	r2, r0
 800d044:	4b2a      	ldr	r3, [pc, #168]	; (800d0f0 <__lshift+0xd8>)
 800d046:	482b      	ldr	r0, [pc, #172]	; (800d0f4 <__lshift+0xdc>)
 800d048:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d04c:	f7fe fb42 	bl	800b6d4 <__assert_func>
 800d050:	3101      	adds	r1, #1
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	e7ee      	b.n	800d034 <__lshift+0x1c>
 800d056:	2300      	movs	r3, #0
 800d058:	f100 0114 	add.w	r1, r0, #20
 800d05c:	f100 0210 	add.w	r2, r0, #16
 800d060:	4618      	mov	r0, r3
 800d062:	4553      	cmp	r3, sl
 800d064:	db37      	blt.n	800d0d6 <__lshift+0xbe>
 800d066:	6920      	ldr	r0, [r4, #16]
 800d068:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d06c:	f104 0314 	add.w	r3, r4, #20
 800d070:	f019 091f 	ands.w	r9, r9, #31
 800d074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d078:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d07c:	d02f      	beq.n	800d0de <__lshift+0xc6>
 800d07e:	f1c9 0e20 	rsb	lr, r9, #32
 800d082:	468a      	mov	sl, r1
 800d084:	f04f 0c00 	mov.w	ip, #0
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	fa02 f209 	lsl.w	r2, r2, r9
 800d08e:	ea42 020c 	orr.w	r2, r2, ip
 800d092:	f84a 2b04 	str.w	r2, [sl], #4
 800d096:	f853 2b04 	ldr.w	r2, [r3], #4
 800d09a:	4298      	cmp	r0, r3
 800d09c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d0a0:	d8f2      	bhi.n	800d088 <__lshift+0x70>
 800d0a2:	1b03      	subs	r3, r0, r4
 800d0a4:	3b15      	subs	r3, #21
 800d0a6:	f023 0303 	bic.w	r3, r3, #3
 800d0aa:	3304      	adds	r3, #4
 800d0ac:	f104 0215 	add.w	r2, r4, #21
 800d0b0:	4290      	cmp	r0, r2
 800d0b2:	bf38      	it	cc
 800d0b4:	2304      	movcc	r3, #4
 800d0b6:	f841 c003 	str.w	ip, [r1, r3]
 800d0ba:	f1bc 0f00 	cmp.w	ip, #0
 800d0be:	d001      	beq.n	800d0c4 <__lshift+0xac>
 800d0c0:	f108 0602 	add.w	r6, r8, #2
 800d0c4:	3e01      	subs	r6, #1
 800d0c6:	4638      	mov	r0, r7
 800d0c8:	612e      	str	r6, [r5, #16]
 800d0ca:	4621      	mov	r1, r4
 800d0cc:	f7ff fd88 	bl	800cbe0 <_Bfree>
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0da:	3301      	adds	r3, #1
 800d0dc:	e7c1      	b.n	800d062 <__lshift+0x4a>
 800d0de:	3904      	subs	r1, #4
 800d0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0e8:	4298      	cmp	r0, r3
 800d0ea:	d8f9      	bhi.n	800d0e0 <__lshift+0xc8>
 800d0ec:	e7ea      	b.n	800d0c4 <__lshift+0xac>
 800d0ee:	bf00      	nop
 800d0f0:	0800e899 	.word	0x0800e899
 800d0f4:	0800e924 	.word	0x0800e924

0800d0f8 <__mcmp>:
 800d0f8:	b530      	push	{r4, r5, lr}
 800d0fa:	6902      	ldr	r2, [r0, #16]
 800d0fc:	690c      	ldr	r4, [r1, #16]
 800d0fe:	1b12      	subs	r2, r2, r4
 800d100:	d10e      	bne.n	800d120 <__mcmp+0x28>
 800d102:	f100 0314 	add.w	r3, r0, #20
 800d106:	3114      	adds	r1, #20
 800d108:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d10c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d110:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d114:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d118:	42a5      	cmp	r5, r4
 800d11a:	d003      	beq.n	800d124 <__mcmp+0x2c>
 800d11c:	d305      	bcc.n	800d12a <__mcmp+0x32>
 800d11e:	2201      	movs	r2, #1
 800d120:	4610      	mov	r0, r2
 800d122:	bd30      	pop	{r4, r5, pc}
 800d124:	4283      	cmp	r3, r0
 800d126:	d3f3      	bcc.n	800d110 <__mcmp+0x18>
 800d128:	e7fa      	b.n	800d120 <__mcmp+0x28>
 800d12a:	f04f 32ff 	mov.w	r2, #4294967295
 800d12e:	e7f7      	b.n	800d120 <__mcmp+0x28>

0800d130 <__mdiff>:
 800d130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	460c      	mov	r4, r1
 800d136:	4606      	mov	r6, r0
 800d138:	4611      	mov	r1, r2
 800d13a:	4620      	mov	r0, r4
 800d13c:	4690      	mov	r8, r2
 800d13e:	f7ff ffdb 	bl	800d0f8 <__mcmp>
 800d142:	1e05      	subs	r5, r0, #0
 800d144:	d110      	bne.n	800d168 <__mdiff+0x38>
 800d146:	4629      	mov	r1, r5
 800d148:	4630      	mov	r0, r6
 800d14a:	f7ff fd09 	bl	800cb60 <_Balloc>
 800d14e:	b930      	cbnz	r0, 800d15e <__mdiff+0x2e>
 800d150:	4b3a      	ldr	r3, [pc, #232]	; (800d23c <__mdiff+0x10c>)
 800d152:	4602      	mov	r2, r0
 800d154:	f240 2132 	movw	r1, #562	; 0x232
 800d158:	4839      	ldr	r0, [pc, #228]	; (800d240 <__mdiff+0x110>)
 800d15a:	f7fe fabb 	bl	800b6d4 <__assert_func>
 800d15e:	2301      	movs	r3, #1
 800d160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d164:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d168:	bfa4      	itt	ge
 800d16a:	4643      	movge	r3, r8
 800d16c:	46a0      	movge	r8, r4
 800d16e:	4630      	mov	r0, r6
 800d170:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d174:	bfa6      	itte	ge
 800d176:	461c      	movge	r4, r3
 800d178:	2500      	movge	r5, #0
 800d17a:	2501      	movlt	r5, #1
 800d17c:	f7ff fcf0 	bl	800cb60 <_Balloc>
 800d180:	b920      	cbnz	r0, 800d18c <__mdiff+0x5c>
 800d182:	4b2e      	ldr	r3, [pc, #184]	; (800d23c <__mdiff+0x10c>)
 800d184:	4602      	mov	r2, r0
 800d186:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d18a:	e7e5      	b.n	800d158 <__mdiff+0x28>
 800d18c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d190:	6926      	ldr	r6, [r4, #16]
 800d192:	60c5      	str	r5, [r0, #12]
 800d194:	f104 0914 	add.w	r9, r4, #20
 800d198:	f108 0514 	add.w	r5, r8, #20
 800d19c:	f100 0e14 	add.w	lr, r0, #20
 800d1a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d1a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d1a8:	f108 0210 	add.w	r2, r8, #16
 800d1ac:	46f2      	mov	sl, lr
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d1b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d1b8:	fa1f f883 	uxth.w	r8, r3
 800d1bc:	fa11 f18b 	uxtah	r1, r1, fp
 800d1c0:	0c1b      	lsrs	r3, r3, #16
 800d1c2:	eba1 0808 	sub.w	r8, r1, r8
 800d1c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d1ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d1ce:	fa1f f888 	uxth.w	r8, r8
 800d1d2:	1419      	asrs	r1, r3, #16
 800d1d4:	454e      	cmp	r6, r9
 800d1d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d1da:	f84a 3b04 	str.w	r3, [sl], #4
 800d1de:	d8e7      	bhi.n	800d1b0 <__mdiff+0x80>
 800d1e0:	1b33      	subs	r3, r6, r4
 800d1e2:	3b15      	subs	r3, #21
 800d1e4:	f023 0303 	bic.w	r3, r3, #3
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	3415      	adds	r4, #21
 800d1ec:	42a6      	cmp	r6, r4
 800d1ee:	bf38      	it	cc
 800d1f0:	2304      	movcc	r3, #4
 800d1f2:	441d      	add	r5, r3
 800d1f4:	4473      	add	r3, lr
 800d1f6:	469e      	mov	lr, r3
 800d1f8:	462e      	mov	r6, r5
 800d1fa:	4566      	cmp	r6, ip
 800d1fc:	d30e      	bcc.n	800d21c <__mdiff+0xec>
 800d1fe:	f10c 0203 	add.w	r2, ip, #3
 800d202:	1b52      	subs	r2, r2, r5
 800d204:	f022 0203 	bic.w	r2, r2, #3
 800d208:	3d03      	subs	r5, #3
 800d20a:	45ac      	cmp	ip, r5
 800d20c:	bf38      	it	cc
 800d20e:	2200      	movcc	r2, #0
 800d210:	441a      	add	r2, r3
 800d212:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d216:	b17b      	cbz	r3, 800d238 <__mdiff+0x108>
 800d218:	6107      	str	r7, [r0, #16]
 800d21a:	e7a3      	b.n	800d164 <__mdiff+0x34>
 800d21c:	f856 8b04 	ldr.w	r8, [r6], #4
 800d220:	fa11 f288 	uxtah	r2, r1, r8
 800d224:	1414      	asrs	r4, r2, #16
 800d226:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d22a:	b292      	uxth	r2, r2
 800d22c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d230:	f84e 2b04 	str.w	r2, [lr], #4
 800d234:	1421      	asrs	r1, r4, #16
 800d236:	e7e0      	b.n	800d1fa <__mdiff+0xca>
 800d238:	3f01      	subs	r7, #1
 800d23a:	e7ea      	b.n	800d212 <__mdiff+0xe2>
 800d23c:	0800e899 	.word	0x0800e899
 800d240:	0800e924 	.word	0x0800e924

0800d244 <__ulp>:
 800d244:	b082      	sub	sp, #8
 800d246:	ed8d 0b00 	vstr	d0, [sp]
 800d24a:	9b01      	ldr	r3, [sp, #4]
 800d24c:	4912      	ldr	r1, [pc, #72]	; (800d298 <__ulp+0x54>)
 800d24e:	4019      	ands	r1, r3
 800d250:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d254:	2900      	cmp	r1, #0
 800d256:	dd05      	ble.n	800d264 <__ulp+0x20>
 800d258:	2200      	movs	r2, #0
 800d25a:	460b      	mov	r3, r1
 800d25c:	ec43 2b10 	vmov	d0, r2, r3
 800d260:	b002      	add	sp, #8
 800d262:	4770      	bx	lr
 800d264:	4249      	negs	r1, r1
 800d266:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d26a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d26e:	f04f 0200 	mov.w	r2, #0
 800d272:	f04f 0300 	mov.w	r3, #0
 800d276:	da04      	bge.n	800d282 <__ulp+0x3e>
 800d278:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d27c:	fa41 f300 	asr.w	r3, r1, r0
 800d280:	e7ec      	b.n	800d25c <__ulp+0x18>
 800d282:	f1a0 0114 	sub.w	r1, r0, #20
 800d286:	291e      	cmp	r1, #30
 800d288:	bfda      	itte	le
 800d28a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d28e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d292:	2101      	movgt	r1, #1
 800d294:	460a      	mov	r2, r1
 800d296:	e7e1      	b.n	800d25c <__ulp+0x18>
 800d298:	7ff00000 	.word	0x7ff00000

0800d29c <__b2d>:
 800d29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29e:	6905      	ldr	r5, [r0, #16]
 800d2a0:	f100 0714 	add.w	r7, r0, #20
 800d2a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d2a8:	1f2e      	subs	r6, r5, #4
 800d2aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f7ff fd48 	bl	800cd44 <__hi0bits>
 800d2b4:	f1c0 0320 	rsb	r3, r0, #32
 800d2b8:	280a      	cmp	r0, #10
 800d2ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d338 <__b2d+0x9c>
 800d2be:	600b      	str	r3, [r1, #0]
 800d2c0:	dc14      	bgt.n	800d2ec <__b2d+0x50>
 800d2c2:	f1c0 0e0b 	rsb	lr, r0, #11
 800d2c6:	fa24 f10e 	lsr.w	r1, r4, lr
 800d2ca:	42b7      	cmp	r7, r6
 800d2cc:	ea41 030c 	orr.w	r3, r1, ip
 800d2d0:	bf34      	ite	cc
 800d2d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d2d6:	2100      	movcs	r1, #0
 800d2d8:	3015      	adds	r0, #21
 800d2da:	fa04 f000 	lsl.w	r0, r4, r0
 800d2de:	fa21 f10e 	lsr.w	r1, r1, lr
 800d2e2:	ea40 0201 	orr.w	r2, r0, r1
 800d2e6:	ec43 2b10 	vmov	d0, r2, r3
 800d2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2ec:	42b7      	cmp	r7, r6
 800d2ee:	bf3a      	itte	cc
 800d2f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d2f4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d2f8:	2100      	movcs	r1, #0
 800d2fa:	380b      	subs	r0, #11
 800d2fc:	d017      	beq.n	800d32e <__b2d+0x92>
 800d2fe:	f1c0 0c20 	rsb	ip, r0, #32
 800d302:	fa04 f500 	lsl.w	r5, r4, r0
 800d306:	42be      	cmp	r6, r7
 800d308:	fa21 f40c 	lsr.w	r4, r1, ip
 800d30c:	ea45 0504 	orr.w	r5, r5, r4
 800d310:	bf8c      	ite	hi
 800d312:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d316:	2400      	movls	r4, #0
 800d318:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d31c:	fa01 f000 	lsl.w	r0, r1, r0
 800d320:	fa24 f40c 	lsr.w	r4, r4, ip
 800d324:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d328:	ea40 0204 	orr.w	r2, r0, r4
 800d32c:	e7db      	b.n	800d2e6 <__b2d+0x4a>
 800d32e:	ea44 030c 	orr.w	r3, r4, ip
 800d332:	460a      	mov	r2, r1
 800d334:	e7d7      	b.n	800d2e6 <__b2d+0x4a>
 800d336:	bf00      	nop
 800d338:	3ff00000 	.word	0x3ff00000

0800d33c <__d2b>:
 800d33c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d340:	4689      	mov	r9, r1
 800d342:	2101      	movs	r1, #1
 800d344:	ec57 6b10 	vmov	r6, r7, d0
 800d348:	4690      	mov	r8, r2
 800d34a:	f7ff fc09 	bl	800cb60 <_Balloc>
 800d34e:	4604      	mov	r4, r0
 800d350:	b930      	cbnz	r0, 800d360 <__d2b+0x24>
 800d352:	4602      	mov	r2, r0
 800d354:	4b25      	ldr	r3, [pc, #148]	; (800d3ec <__d2b+0xb0>)
 800d356:	4826      	ldr	r0, [pc, #152]	; (800d3f0 <__d2b+0xb4>)
 800d358:	f240 310a 	movw	r1, #778	; 0x30a
 800d35c:	f7fe f9ba 	bl	800b6d4 <__assert_func>
 800d360:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d364:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d368:	bb35      	cbnz	r5, 800d3b8 <__d2b+0x7c>
 800d36a:	2e00      	cmp	r6, #0
 800d36c:	9301      	str	r3, [sp, #4]
 800d36e:	d028      	beq.n	800d3c2 <__d2b+0x86>
 800d370:	4668      	mov	r0, sp
 800d372:	9600      	str	r6, [sp, #0]
 800d374:	f7ff fd06 	bl	800cd84 <__lo0bits>
 800d378:	9900      	ldr	r1, [sp, #0]
 800d37a:	b300      	cbz	r0, 800d3be <__d2b+0x82>
 800d37c:	9a01      	ldr	r2, [sp, #4]
 800d37e:	f1c0 0320 	rsb	r3, r0, #32
 800d382:	fa02 f303 	lsl.w	r3, r2, r3
 800d386:	430b      	orrs	r3, r1
 800d388:	40c2      	lsrs	r2, r0
 800d38a:	6163      	str	r3, [r4, #20]
 800d38c:	9201      	str	r2, [sp, #4]
 800d38e:	9b01      	ldr	r3, [sp, #4]
 800d390:	61a3      	str	r3, [r4, #24]
 800d392:	2b00      	cmp	r3, #0
 800d394:	bf14      	ite	ne
 800d396:	2202      	movne	r2, #2
 800d398:	2201      	moveq	r2, #1
 800d39a:	6122      	str	r2, [r4, #16]
 800d39c:	b1d5      	cbz	r5, 800d3d4 <__d2b+0x98>
 800d39e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d3a2:	4405      	add	r5, r0
 800d3a4:	f8c9 5000 	str.w	r5, [r9]
 800d3a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d3ac:	f8c8 0000 	str.w	r0, [r8]
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	b003      	add	sp, #12
 800d3b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3bc:	e7d5      	b.n	800d36a <__d2b+0x2e>
 800d3be:	6161      	str	r1, [r4, #20]
 800d3c0:	e7e5      	b.n	800d38e <__d2b+0x52>
 800d3c2:	a801      	add	r0, sp, #4
 800d3c4:	f7ff fcde 	bl	800cd84 <__lo0bits>
 800d3c8:	9b01      	ldr	r3, [sp, #4]
 800d3ca:	6163      	str	r3, [r4, #20]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	6122      	str	r2, [r4, #16]
 800d3d0:	3020      	adds	r0, #32
 800d3d2:	e7e3      	b.n	800d39c <__d2b+0x60>
 800d3d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3dc:	f8c9 0000 	str.w	r0, [r9]
 800d3e0:	6918      	ldr	r0, [r3, #16]
 800d3e2:	f7ff fcaf 	bl	800cd44 <__hi0bits>
 800d3e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3ea:	e7df      	b.n	800d3ac <__d2b+0x70>
 800d3ec:	0800e899 	.word	0x0800e899
 800d3f0:	0800e924 	.word	0x0800e924

0800d3f4 <__ratio>:
 800d3f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f8:	4688      	mov	r8, r1
 800d3fa:	4669      	mov	r1, sp
 800d3fc:	4681      	mov	r9, r0
 800d3fe:	f7ff ff4d 	bl	800d29c <__b2d>
 800d402:	a901      	add	r1, sp, #4
 800d404:	4640      	mov	r0, r8
 800d406:	ec55 4b10 	vmov	r4, r5, d0
 800d40a:	f7ff ff47 	bl	800d29c <__b2d>
 800d40e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d412:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d416:	eba3 0c02 	sub.w	ip, r3, r2
 800d41a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d41e:	1a9b      	subs	r3, r3, r2
 800d420:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d424:	ec51 0b10 	vmov	r0, r1, d0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	bfd6      	itet	le
 800d42c:	460a      	movle	r2, r1
 800d42e:	462a      	movgt	r2, r5
 800d430:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d434:	468b      	mov	fp, r1
 800d436:	462f      	mov	r7, r5
 800d438:	bfd4      	ite	le
 800d43a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d43e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d442:	4620      	mov	r0, r4
 800d444:	ee10 2a10 	vmov	r2, s0
 800d448:	465b      	mov	r3, fp
 800d44a:	4639      	mov	r1, r7
 800d44c:	f7f3 fa36 	bl	80008bc <__aeabi_ddiv>
 800d450:	ec41 0b10 	vmov	d0, r0, r1
 800d454:	b003      	add	sp, #12
 800d456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d45a <__copybits>:
 800d45a:	3901      	subs	r1, #1
 800d45c:	b570      	push	{r4, r5, r6, lr}
 800d45e:	1149      	asrs	r1, r1, #5
 800d460:	6914      	ldr	r4, [r2, #16]
 800d462:	3101      	adds	r1, #1
 800d464:	f102 0314 	add.w	r3, r2, #20
 800d468:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d46c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d470:	1f05      	subs	r5, r0, #4
 800d472:	42a3      	cmp	r3, r4
 800d474:	d30c      	bcc.n	800d490 <__copybits+0x36>
 800d476:	1aa3      	subs	r3, r4, r2
 800d478:	3b11      	subs	r3, #17
 800d47a:	f023 0303 	bic.w	r3, r3, #3
 800d47e:	3211      	adds	r2, #17
 800d480:	42a2      	cmp	r2, r4
 800d482:	bf88      	it	hi
 800d484:	2300      	movhi	r3, #0
 800d486:	4418      	add	r0, r3
 800d488:	2300      	movs	r3, #0
 800d48a:	4288      	cmp	r0, r1
 800d48c:	d305      	bcc.n	800d49a <__copybits+0x40>
 800d48e:	bd70      	pop	{r4, r5, r6, pc}
 800d490:	f853 6b04 	ldr.w	r6, [r3], #4
 800d494:	f845 6f04 	str.w	r6, [r5, #4]!
 800d498:	e7eb      	b.n	800d472 <__copybits+0x18>
 800d49a:	f840 3b04 	str.w	r3, [r0], #4
 800d49e:	e7f4      	b.n	800d48a <__copybits+0x30>

0800d4a0 <__any_on>:
 800d4a0:	f100 0214 	add.w	r2, r0, #20
 800d4a4:	6900      	ldr	r0, [r0, #16]
 800d4a6:	114b      	asrs	r3, r1, #5
 800d4a8:	4298      	cmp	r0, r3
 800d4aa:	b510      	push	{r4, lr}
 800d4ac:	db11      	blt.n	800d4d2 <__any_on+0x32>
 800d4ae:	dd0a      	ble.n	800d4c6 <__any_on+0x26>
 800d4b0:	f011 011f 	ands.w	r1, r1, #31
 800d4b4:	d007      	beq.n	800d4c6 <__any_on+0x26>
 800d4b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d4ba:	fa24 f001 	lsr.w	r0, r4, r1
 800d4be:	fa00 f101 	lsl.w	r1, r0, r1
 800d4c2:	428c      	cmp	r4, r1
 800d4c4:	d10b      	bne.n	800d4de <__any_on+0x3e>
 800d4c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d803      	bhi.n	800d4d6 <__any_on+0x36>
 800d4ce:	2000      	movs	r0, #0
 800d4d0:	bd10      	pop	{r4, pc}
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	e7f7      	b.n	800d4c6 <__any_on+0x26>
 800d4d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4da:	2900      	cmp	r1, #0
 800d4dc:	d0f5      	beq.n	800d4ca <__any_on+0x2a>
 800d4de:	2001      	movs	r0, #1
 800d4e0:	e7f6      	b.n	800d4d0 <__any_on+0x30>

0800d4e2 <_calloc_r>:
 800d4e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4e4:	fba1 2402 	umull	r2, r4, r1, r2
 800d4e8:	b94c      	cbnz	r4, 800d4fe <_calloc_r+0x1c>
 800d4ea:	4611      	mov	r1, r2
 800d4ec:	9201      	str	r2, [sp, #4]
 800d4ee:	f000 f87b 	bl	800d5e8 <_malloc_r>
 800d4f2:	9a01      	ldr	r2, [sp, #4]
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	b930      	cbnz	r0, 800d506 <_calloc_r+0x24>
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	b003      	add	sp, #12
 800d4fc:	bd30      	pop	{r4, r5, pc}
 800d4fe:	220c      	movs	r2, #12
 800d500:	6002      	str	r2, [r0, #0]
 800d502:	2500      	movs	r5, #0
 800d504:	e7f8      	b.n	800d4f8 <_calloc_r+0x16>
 800d506:	4621      	mov	r1, r4
 800d508:	f7fc fb2a 	bl	8009b60 <memset>
 800d50c:	e7f4      	b.n	800d4f8 <_calloc_r+0x16>
	...

0800d510 <_free_r>:
 800d510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d512:	2900      	cmp	r1, #0
 800d514:	d044      	beq.n	800d5a0 <_free_r+0x90>
 800d516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d51a:	9001      	str	r0, [sp, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f1a1 0404 	sub.w	r4, r1, #4
 800d522:	bfb8      	it	lt
 800d524:	18e4      	addlt	r4, r4, r3
 800d526:	f000 fec7 	bl	800e2b8 <__malloc_lock>
 800d52a:	4a1e      	ldr	r2, [pc, #120]	; (800d5a4 <_free_r+0x94>)
 800d52c:	9801      	ldr	r0, [sp, #4]
 800d52e:	6813      	ldr	r3, [r2, #0]
 800d530:	b933      	cbnz	r3, 800d540 <_free_r+0x30>
 800d532:	6063      	str	r3, [r4, #4]
 800d534:	6014      	str	r4, [r2, #0]
 800d536:	b003      	add	sp, #12
 800d538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d53c:	f000 bec2 	b.w	800e2c4 <__malloc_unlock>
 800d540:	42a3      	cmp	r3, r4
 800d542:	d908      	bls.n	800d556 <_free_r+0x46>
 800d544:	6825      	ldr	r5, [r4, #0]
 800d546:	1961      	adds	r1, r4, r5
 800d548:	428b      	cmp	r3, r1
 800d54a:	bf01      	itttt	eq
 800d54c:	6819      	ldreq	r1, [r3, #0]
 800d54e:	685b      	ldreq	r3, [r3, #4]
 800d550:	1949      	addeq	r1, r1, r5
 800d552:	6021      	streq	r1, [r4, #0]
 800d554:	e7ed      	b.n	800d532 <_free_r+0x22>
 800d556:	461a      	mov	r2, r3
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	b10b      	cbz	r3, 800d560 <_free_r+0x50>
 800d55c:	42a3      	cmp	r3, r4
 800d55e:	d9fa      	bls.n	800d556 <_free_r+0x46>
 800d560:	6811      	ldr	r1, [r2, #0]
 800d562:	1855      	adds	r5, r2, r1
 800d564:	42a5      	cmp	r5, r4
 800d566:	d10b      	bne.n	800d580 <_free_r+0x70>
 800d568:	6824      	ldr	r4, [r4, #0]
 800d56a:	4421      	add	r1, r4
 800d56c:	1854      	adds	r4, r2, r1
 800d56e:	42a3      	cmp	r3, r4
 800d570:	6011      	str	r1, [r2, #0]
 800d572:	d1e0      	bne.n	800d536 <_free_r+0x26>
 800d574:	681c      	ldr	r4, [r3, #0]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	6053      	str	r3, [r2, #4]
 800d57a:	4421      	add	r1, r4
 800d57c:	6011      	str	r1, [r2, #0]
 800d57e:	e7da      	b.n	800d536 <_free_r+0x26>
 800d580:	d902      	bls.n	800d588 <_free_r+0x78>
 800d582:	230c      	movs	r3, #12
 800d584:	6003      	str	r3, [r0, #0]
 800d586:	e7d6      	b.n	800d536 <_free_r+0x26>
 800d588:	6825      	ldr	r5, [r4, #0]
 800d58a:	1961      	adds	r1, r4, r5
 800d58c:	428b      	cmp	r3, r1
 800d58e:	bf04      	itt	eq
 800d590:	6819      	ldreq	r1, [r3, #0]
 800d592:	685b      	ldreq	r3, [r3, #4]
 800d594:	6063      	str	r3, [r4, #4]
 800d596:	bf04      	itt	eq
 800d598:	1949      	addeq	r1, r1, r5
 800d59a:	6021      	streq	r1, [r4, #0]
 800d59c:	6054      	str	r4, [r2, #4]
 800d59e:	e7ca      	b.n	800d536 <_free_r+0x26>
 800d5a0:	b003      	add	sp, #12
 800d5a2:	bd30      	pop	{r4, r5, pc}
 800d5a4:	20000720 	.word	0x20000720

0800d5a8 <sbrk_aligned>:
 800d5a8:	b570      	push	{r4, r5, r6, lr}
 800d5aa:	4e0e      	ldr	r6, [pc, #56]	; (800d5e4 <sbrk_aligned+0x3c>)
 800d5ac:	460c      	mov	r4, r1
 800d5ae:	6831      	ldr	r1, [r6, #0]
 800d5b0:	4605      	mov	r5, r0
 800d5b2:	b911      	cbnz	r1, 800d5ba <sbrk_aligned+0x12>
 800d5b4:	f000 fb4c 	bl	800dc50 <_sbrk_r>
 800d5b8:	6030      	str	r0, [r6, #0]
 800d5ba:	4621      	mov	r1, r4
 800d5bc:	4628      	mov	r0, r5
 800d5be:	f000 fb47 	bl	800dc50 <_sbrk_r>
 800d5c2:	1c43      	adds	r3, r0, #1
 800d5c4:	d00a      	beq.n	800d5dc <sbrk_aligned+0x34>
 800d5c6:	1cc4      	adds	r4, r0, #3
 800d5c8:	f024 0403 	bic.w	r4, r4, #3
 800d5cc:	42a0      	cmp	r0, r4
 800d5ce:	d007      	beq.n	800d5e0 <sbrk_aligned+0x38>
 800d5d0:	1a21      	subs	r1, r4, r0
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	f000 fb3c 	bl	800dc50 <_sbrk_r>
 800d5d8:	3001      	adds	r0, #1
 800d5da:	d101      	bne.n	800d5e0 <sbrk_aligned+0x38>
 800d5dc:	f04f 34ff 	mov.w	r4, #4294967295
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	bd70      	pop	{r4, r5, r6, pc}
 800d5e4:	20000724 	.word	0x20000724

0800d5e8 <_malloc_r>:
 800d5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ec:	1ccd      	adds	r5, r1, #3
 800d5ee:	f025 0503 	bic.w	r5, r5, #3
 800d5f2:	3508      	adds	r5, #8
 800d5f4:	2d0c      	cmp	r5, #12
 800d5f6:	bf38      	it	cc
 800d5f8:	250c      	movcc	r5, #12
 800d5fa:	2d00      	cmp	r5, #0
 800d5fc:	4607      	mov	r7, r0
 800d5fe:	db01      	blt.n	800d604 <_malloc_r+0x1c>
 800d600:	42a9      	cmp	r1, r5
 800d602:	d905      	bls.n	800d610 <_malloc_r+0x28>
 800d604:	230c      	movs	r3, #12
 800d606:	603b      	str	r3, [r7, #0]
 800d608:	2600      	movs	r6, #0
 800d60a:	4630      	mov	r0, r6
 800d60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d610:	4e2e      	ldr	r6, [pc, #184]	; (800d6cc <_malloc_r+0xe4>)
 800d612:	f000 fe51 	bl	800e2b8 <__malloc_lock>
 800d616:	6833      	ldr	r3, [r6, #0]
 800d618:	461c      	mov	r4, r3
 800d61a:	bb34      	cbnz	r4, 800d66a <_malloc_r+0x82>
 800d61c:	4629      	mov	r1, r5
 800d61e:	4638      	mov	r0, r7
 800d620:	f7ff ffc2 	bl	800d5a8 <sbrk_aligned>
 800d624:	1c43      	adds	r3, r0, #1
 800d626:	4604      	mov	r4, r0
 800d628:	d14d      	bne.n	800d6c6 <_malloc_r+0xde>
 800d62a:	6834      	ldr	r4, [r6, #0]
 800d62c:	4626      	mov	r6, r4
 800d62e:	2e00      	cmp	r6, #0
 800d630:	d140      	bne.n	800d6b4 <_malloc_r+0xcc>
 800d632:	6823      	ldr	r3, [r4, #0]
 800d634:	4631      	mov	r1, r6
 800d636:	4638      	mov	r0, r7
 800d638:	eb04 0803 	add.w	r8, r4, r3
 800d63c:	f000 fb08 	bl	800dc50 <_sbrk_r>
 800d640:	4580      	cmp	r8, r0
 800d642:	d13a      	bne.n	800d6ba <_malloc_r+0xd2>
 800d644:	6821      	ldr	r1, [r4, #0]
 800d646:	3503      	adds	r5, #3
 800d648:	1a6d      	subs	r5, r5, r1
 800d64a:	f025 0503 	bic.w	r5, r5, #3
 800d64e:	3508      	adds	r5, #8
 800d650:	2d0c      	cmp	r5, #12
 800d652:	bf38      	it	cc
 800d654:	250c      	movcc	r5, #12
 800d656:	4629      	mov	r1, r5
 800d658:	4638      	mov	r0, r7
 800d65a:	f7ff ffa5 	bl	800d5a8 <sbrk_aligned>
 800d65e:	3001      	adds	r0, #1
 800d660:	d02b      	beq.n	800d6ba <_malloc_r+0xd2>
 800d662:	6823      	ldr	r3, [r4, #0]
 800d664:	442b      	add	r3, r5
 800d666:	6023      	str	r3, [r4, #0]
 800d668:	e00e      	b.n	800d688 <_malloc_r+0xa0>
 800d66a:	6822      	ldr	r2, [r4, #0]
 800d66c:	1b52      	subs	r2, r2, r5
 800d66e:	d41e      	bmi.n	800d6ae <_malloc_r+0xc6>
 800d670:	2a0b      	cmp	r2, #11
 800d672:	d916      	bls.n	800d6a2 <_malloc_r+0xba>
 800d674:	1961      	adds	r1, r4, r5
 800d676:	42a3      	cmp	r3, r4
 800d678:	6025      	str	r5, [r4, #0]
 800d67a:	bf18      	it	ne
 800d67c:	6059      	strne	r1, [r3, #4]
 800d67e:	6863      	ldr	r3, [r4, #4]
 800d680:	bf08      	it	eq
 800d682:	6031      	streq	r1, [r6, #0]
 800d684:	5162      	str	r2, [r4, r5]
 800d686:	604b      	str	r3, [r1, #4]
 800d688:	4638      	mov	r0, r7
 800d68a:	f104 060b 	add.w	r6, r4, #11
 800d68e:	f000 fe19 	bl	800e2c4 <__malloc_unlock>
 800d692:	f026 0607 	bic.w	r6, r6, #7
 800d696:	1d23      	adds	r3, r4, #4
 800d698:	1af2      	subs	r2, r6, r3
 800d69a:	d0b6      	beq.n	800d60a <_malloc_r+0x22>
 800d69c:	1b9b      	subs	r3, r3, r6
 800d69e:	50a3      	str	r3, [r4, r2]
 800d6a0:	e7b3      	b.n	800d60a <_malloc_r+0x22>
 800d6a2:	6862      	ldr	r2, [r4, #4]
 800d6a4:	42a3      	cmp	r3, r4
 800d6a6:	bf0c      	ite	eq
 800d6a8:	6032      	streq	r2, [r6, #0]
 800d6aa:	605a      	strne	r2, [r3, #4]
 800d6ac:	e7ec      	b.n	800d688 <_malloc_r+0xa0>
 800d6ae:	4623      	mov	r3, r4
 800d6b0:	6864      	ldr	r4, [r4, #4]
 800d6b2:	e7b2      	b.n	800d61a <_malloc_r+0x32>
 800d6b4:	4634      	mov	r4, r6
 800d6b6:	6876      	ldr	r6, [r6, #4]
 800d6b8:	e7b9      	b.n	800d62e <_malloc_r+0x46>
 800d6ba:	230c      	movs	r3, #12
 800d6bc:	603b      	str	r3, [r7, #0]
 800d6be:	4638      	mov	r0, r7
 800d6c0:	f000 fe00 	bl	800e2c4 <__malloc_unlock>
 800d6c4:	e7a1      	b.n	800d60a <_malloc_r+0x22>
 800d6c6:	6025      	str	r5, [r4, #0]
 800d6c8:	e7de      	b.n	800d688 <_malloc_r+0xa0>
 800d6ca:	bf00      	nop
 800d6cc:	20000720 	.word	0x20000720

0800d6d0 <__ssputs_r>:
 800d6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d4:	688e      	ldr	r6, [r1, #8]
 800d6d6:	429e      	cmp	r6, r3
 800d6d8:	4682      	mov	sl, r0
 800d6da:	460c      	mov	r4, r1
 800d6dc:	4690      	mov	r8, r2
 800d6de:	461f      	mov	r7, r3
 800d6e0:	d838      	bhi.n	800d754 <__ssputs_r+0x84>
 800d6e2:	898a      	ldrh	r2, [r1, #12]
 800d6e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d6e8:	d032      	beq.n	800d750 <__ssputs_r+0x80>
 800d6ea:	6825      	ldr	r5, [r4, #0]
 800d6ec:	6909      	ldr	r1, [r1, #16]
 800d6ee:	eba5 0901 	sub.w	r9, r5, r1
 800d6f2:	6965      	ldr	r5, [r4, #20]
 800d6f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d6f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	444b      	add	r3, r9
 800d700:	106d      	asrs	r5, r5, #1
 800d702:	429d      	cmp	r5, r3
 800d704:	bf38      	it	cc
 800d706:	461d      	movcc	r5, r3
 800d708:	0553      	lsls	r3, r2, #21
 800d70a:	d531      	bpl.n	800d770 <__ssputs_r+0xa0>
 800d70c:	4629      	mov	r1, r5
 800d70e:	f7ff ff6b 	bl	800d5e8 <_malloc_r>
 800d712:	4606      	mov	r6, r0
 800d714:	b950      	cbnz	r0, 800d72c <__ssputs_r+0x5c>
 800d716:	230c      	movs	r3, #12
 800d718:	f8ca 3000 	str.w	r3, [sl]
 800d71c:	89a3      	ldrh	r3, [r4, #12]
 800d71e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d722:	81a3      	strh	r3, [r4, #12]
 800d724:	f04f 30ff 	mov.w	r0, #4294967295
 800d728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d72c:	6921      	ldr	r1, [r4, #16]
 800d72e:	464a      	mov	r2, r9
 800d730:	f7ff fa08 	bl	800cb44 <memcpy>
 800d734:	89a3      	ldrh	r3, [r4, #12]
 800d736:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d73a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d73e:	81a3      	strh	r3, [r4, #12]
 800d740:	6126      	str	r6, [r4, #16]
 800d742:	6165      	str	r5, [r4, #20]
 800d744:	444e      	add	r6, r9
 800d746:	eba5 0509 	sub.w	r5, r5, r9
 800d74a:	6026      	str	r6, [r4, #0]
 800d74c:	60a5      	str	r5, [r4, #8]
 800d74e:	463e      	mov	r6, r7
 800d750:	42be      	cmp	r6, r7
 800d752:	d900      	bls.n	800d756 <__ssputs_r+0x86>
 800d754:	463e      	mov	r6, r7
 800d756:	6820      	ldr	r0, [r4, #0]
 800d758:	4632      	mov	r2, r6
 800d75a:	4641      	mov	r1, r8
 800d75c:	f000 fd92 	bl	800e284 <memmove>
 800d760:	68a3      	ldr	r3, [r4, #8]
 800d762:	1b9b      	subs	r3, r3, r6
 800d764:	60a3      	str	r3, [r4, #8]
 800d766:	6823      	ldr	r3, [r4, #0]
 800d768:	4433      	add	r3, r6
 800d76a:	6023      	str	r3, [r4, #0]
 800d76c:	2000      	movs	r0, #0
 800d76e:	e7db      	b.n	800d728 <__ssputs_r+0x58>
 800d770:	462a      	mov	r2, r5
 800d772:	f000 fdad 	bl	800e2d0 <_realloc_r>
 800d776:	4606      	mov	r6, r0
 800d778:	2800      	cmp	r0, #0
 800d77a:	d1e1      	bne.n	800d740 <__ssputs_r+0x70>
 800d77c:	6921      	ldr	r1, [r4, #16]
 800d77e:	4650      	mov	r0, sl
 800d780:	f7ff fec6 	bl	800d510 <_free_r>
 800d784:	e7c7      	b.n	800d716 <__ssputs_r+0x46>
	...

0800d788 <_svfiprintf_r>:
 800d788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d78c:	4698      	mov	r8, r3
 800d78e:	898b      	ldrh	r3, [r1, #12]
 800d790:	061b      	lsls	r3, r3, #24
 800d792:	b09d      	sub	sp, #116	; 0x74
 800d794:	4607      	mov	r7, r0
 800d796:	460d      	mov	r5, r1
 800d798:	4614      	mov	r4, r2
 800d79a:	d50e      	bpl.n	800d7ba <_svfiprintf_r+0x32>
 800d79c:	690b      	ldr	r3, [r1, #16]
 800d79e:	b963      	cbnz	r3, 800d7ba <_svfiprintf_r+0x32>
 800d7a0:	2140      	movs	r1, #64	; 0x40
 800d7a2:	f7ff ff21 	bl	800d5e8 <_malloc_r>
 800d7a6:	6028      	str	r0, [r5, #0]
 800d7a8:	6128      	str	r0, [r5, #16]
 800d7aa:	b920      	cbnz	r0, 800d7b6 <_svfiprintf_r+0x2e>
 800d7ac:	230c      	movs	r3, #12
 800d7ae:	603b      	str	r3, [r7, #0]
 800d7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b4:	e0d1      	b.n	800d95a <_svfiprintf_r+0x1d2>
 800d7b6:	2340      	movs	r3, #64	; 0x40
 800d7b8:	616b      	str	r3, [r5, #20]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d7be:	2320      	movs	r3, #32
 800d7c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7c8:	2330      	movs	r3, #48	; 0x30
 800d7ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d974 <_svfiprintf_r+0x1ec>
 800d7ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7d2:	f04f 0901 	mov.w	r9, #1
 800d7d6:	4623      	mov	r3, r4
 800d7d8:	469a      	mov	sl, r3
 800d7da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7de:	b10a      	cbz	r2, 800d7e4 <_svfiprintf_r+0x5c>
 800d7e0:	2a25      	cmp	r2, #37	; 0x25
 800d7e2:	d1f9      	bne.n	800d7d8 <_svfiprintf_r+0x50>
 800d7e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d7e8:	d00b      	beq.n	800d802 <_svfiprintf_r+0x7a>
 800d7ea:	465b      	mov	r3, fp
 800d7ec:	4622      	mov	r2, r4
 800d7ee:	4629      	mov	r1, r5
 800d7f0:	4638      	mov	r0, r7
 800d7f2:	f7ff ff6d 	bl	800d6d0 <__ssputs_r>
 800d7f6:	3001      	adds	r0, #1
 800d7f8:	f000 80aa 	beq.w	800d950 <_svfiprintf_r+0x1c8>
 800d7fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7fe:	445a      	add	r2, fp
 800d800:	9209      	str	r2, [sp, #36]	; 0x24
 800d802:	f89a 3000 	ldrb.w	r3, [sl]
 800d806:	2b00      	cmp	r3, #0
 800d808:	f000 80a2 	beq.w	800d950 <_svfiprintf_r+0x1c8>
 800d80c:	2300      	movs	r3, #0
 800d80e:	f04f 32ff 	mov.w	r2, #4294967295
 800d812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d816:	f10a 0a01 	add.w	sl, sl, #1
 800d81a:	9304      	str	r3, [sp, #16]
 800d81c:	9307      	str	r3, [sp, #28]
 800d81e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d822:	931a      	str	r3, [sp, #104]	; 0x68
 800d824:	4654      	mov	r4, sl
 800d826:	2205      	movs	r2, #5
 800d828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d82c:	4851      	ldr	r0, [pc, #324]	; (800d974 <_svfiprintf_r+0x1ec>)
 800d82e:	f7f2 fd0f 	bl	8000250 <memchr>
 800d832:	9a04      	ldr	r2, [sp, #16]
 800d834:	b9d8      	cbnz	r0, 800d86e <_svfiprintf_r+0xe6>
 800d836:	06d0      	lsls	r0, r2, #27
 800d838:	bf44      	itt	mi
 800d83a:	2320      	movmi	r3, #32
 800d83c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d840:	0711      	lsls	r1, r2, #28
 800d842:	bf44      	itt	mi
 800d844:	232b      	movmi	r3, #43	; 0x2b
 800d846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d84a:	f89a 3000 	ldrb.w	r3, [sl]
 800d84e:	2b2a      	cmp	r3, #42	; 0x2a
 800d850:	d015      	beq.n	800d87e <_svfiprintf_r+0xf6>
 800d852:	9a07      	ldr	r2, [sp, #28]
 800d854:	4654      	mov	r4, sl
 800d856:	2000      	movs	r0, #0
 800d858:	f04f 0c0a 	mov.w	ip, #10
 800d85c:	4621      	mov	r1, r4
 800d85e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d862:	3b30      	subs	r3, #48	; 0x30
 800d864:	2b09      	cmp	r3, #9
 800d866:	d94e      	bls.n	800d906 <_svfiprintf_r+0x17e>
 800d868:	b1b0      	cbz	r0, 800d898 <_svfiprintf_r+0x110>
 800d86a:	9207      	str	r2, [sp, #28]
 800d86c:	e014      	b.n	800d898 <_svfiprintf_r+0x110>
 800d86e:	eba0 0308 	sub.w	r3, r0, r8
 800d872:	fa09 f303 	lsl.w	r3, r9, r3
 800d876:	4313      	orrs	r3, r2
 800d878:	9304      	str	r3, [sp, #16]
 800d87a:	46a2      	mov	sl, r4
 800d87c:	e7d2      	b.n	800d824 <_svfiprintf_r+0x9c>
 800d87e:	9b03      	ldr	r3, [sp, #12]
 800d880:	1d19      	adds	r1, r3, #4
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	9103      	str	r1, [sp, #12]
 800d886:	2b00      	cmp	r3, #0
 800d888:	bfbb      	ittet	lt
 800d88a:	425b      	neglt	r3, r3
 800d88c:	f042 0202 	orrlt.w	r2, r2, #2
 800d890:	9307      	strge	r3, [sp, #28]
 800d892:	9307      	strlt	r3, [sp, #28]
 800d894:	bfb8      	it	lt
 800d896:	9204      	strlt	r2, [sp, #16]
 800d898:	7823      	ldrb	r3, [r4, #0]
 800d89a:	2b2e      	cmp	r3, #46	; 0x2e
 800d89c:	d10c      	bne.n	800d8b8 <_svfiprintf_r+0x130>
 800d89e:	7863      	ldrb	r3, [r4, #1]
 800d8a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d8a2:	d135      	bne.n	800d910 <_svfiprintf_r+0x188>
 800d8a4:	9b03      	ldr	r3, [sp, #12]
 800d8a6:	1d1a      	adds	r2, r3, #4
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	9203      	str	r2, [sp, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	bfb8      	it	lt
 800d8b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8b4:	3402      	adds	r4, #2
 800d8b6:	9305      	str	r3, [sp, #20]
 800d8b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d984 <_svfiprintf_r+0x1fc>
 800d8bc:	7821      	ldrb	r1, [r4, #0]
 800d8be:	2203      	movs	r2, #3
 800d8c0:	4650      	mov	r0, sl
 800d8c2:	f7f2 fcc5 	bl	8000250 <memchr>
 800d8c6:	b140      	cbz	r0, 800d8da <_svfiprintf_r+0x152>
 800d8c8:	2340      	movs	r3, #64	; 0x40
 800d8ca:	eba0 000a 	sub.w	r0, r0, sl
 800d8ce:	fa03 f000 	lsl.w	r0, r3, r0
 800d8d2:	9b04      	ldr	r3, [sp, #16]
 800d8d4:	4303      	orrs	r3, r0
 800d8d6:	3401      	adds	r4, #1
 800d8d8:	9304      	str	r3, [sp, #16]
 800d8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8de:	4826      	ldr	r0, [pc, #152]	; (800d978 <_svfiprintf_r+0x1f0>)
 800d8e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8e4:	2206      	movs	r2, #6
 800d8e6:	f7f2 fcb3 	bl	8000250 <memchr>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	d038      	beq.n	800d960 <_svfiprintf_r+0x1d8>
 800d8ee:	4b23      	ldr	r3, [pc, #140]	; (800d97c <_svfiprintf_r+0x1f4>)
 800d8f0:	bb1b      	cbnz	r3, 800d93a <_svfiprintf_r+0x1b2>
 800d8f2:	9b03      	ldr	r3, [sp, #12]
 800d8f4:	3307      	adds	r3, #7
 800d8f6:	f023 0307 	bic.w	r3, r3, #7
 800d8fa:	3308      	adds	r3, #8
 800d8fc:	9303      	str	r3, [sp, #12]
 800d8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d900:	4433      	add	r3, r6
 800d902:	9309      	str	r3, [sp, #36]	; 0x24
 800d904:	e767      	b.n	800d7d6 <_svfiprintf_r+0x4e>
 800d906:	fb0c 3202 	mla	r2, ip, r2, r3
 800d90a:	460c      	mov	r4, r1
 800d90c:	2001      	movs	r0, #1
 800d90e:	e7a5      	b.n	800d85c <_svfiprintf_r+0xd4>
 800d910:	2300      	movs	r3, #0
 800d912:	3401      	adds	r4, #1
 800d914:	9305      	str	r3, [sp, #20]
 800d916:	4619      	mov	r1, r3
 800d918:	f04f 0c0a 	mov.w	ip, #10
 800d91c:	4620      	mov	r0, r4
 800d91e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d922:	3a30      	subs	r2, #48	; 0x30
 800d924:	2a09      	cmp	r2, #9
 800d926:	d903      	bls.n	800d930 <_svfiprintf_r+0x1a8>
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d0c5      	beq.n	800d8b8 <_svfiprintf_r+0x130>
 800d92c:	9105      	str	r1, [sp, #20]
 800d92e:	e7c3      	b.n	800d8b8 <_svfiprintf_r+0x130>
 800d930:	fb0c 2101 	mla	r1, ip, r1, r2
 800d934:	4604      	mov	r4, r0
 800d936:	2301      	movs	r3, #1
 800d938:	e7f0      	b.n	800d91c <_svfiprintf_r+0x194>
 800d93a:	ab03      	add	r3, sp, #12
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	462a      	mov	r2, r5
 800d940:	4b0f      	ldr	r3, [pc, #60]	; (800d980 <_svfiprintf_r+0x1f8>)
 800d942:	a904      	add	r1, sp, #16
 800d944:	4638      	mov	r0, r7
 800d946:	f7fc f9b3 	bl	8009cb0 <_printf_float>
 800d94a:	1c42      	adds	r2, r0, #1
 800d94c:	4606      	mov	r6, r0
 800d94e:	d1d6      	bne.n	800d8fe <_svfiprintf_r+0x176>
 800d950:	89ab      	ldrh	r3, [r5, #12]
 800d952:	065b      	lsls	r3, r3, #25
 800d954:	f53f af2c 	bmi.w	800d7b0 <_svfiprintf_r+0x28>
 800d958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d95a:	b01d      	add	sp, #116	; 0x74
 800d95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d960:	ab03      	add	r3, sp, #12
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	462a      	mov	r2, r5
 800d966:	4b06      	ldr	r3, [pc, #24]	; (800d980 <_svfiprintf_r+0x1f8>)
 800d968:	a904      	add	r1, sp, #16
 800d96a:	4638      	mov	r0, r7
 800d96c:	f7fc fc44 	bl	800a1f8 <_printf_i>
 800d970:	e7eb      	b.n	800d94a <_svfiprintf_r+0x1c2>
 800d972:	bf00      	nop
 800d974:	0800ea7c 	.word	0x0800ea7c
 800d978:	0800ea86 	.word	0x0800ea86
 800d97c:	08009cb1 	.word	0x08009cb1
 800d980:	0800d6d1 	.word	0x0800d6d1
 800d984:	0800ea82 	.word	0x0800ea82

0800d988 <__sfputc_r>:
 800d988:	6893      	ldr	r3, [r2, #8]
 800d98a:	3b01      	subs	r3, #1
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	b410      	push	{r4}
 800d990:	6093      	str	r3, [r2, #8]
 800d992:	da08      	bge.n	800d9a6 <__sfputc_r+0x1e>
 800d994:	6994      	ldr	r4, [r2, #24]
 800d996:	42a3      	cmp	r3, r4
 800d998:	db01      	blt.n	800d99e <__sfputc_r+0x16>
 800d99a:	290a      	cmp	r1, #10
 800d99c:	d103      	bne.n	800d9a6 <__sfputc_r+0x1e>
 800d99e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9a2:	f000 b979 	b.w	800dc98 <__swbuf_r>
 800d9a6:	6813      	ldr	r3, [r2, #0]
 800d9a8:	1c58      	adds	r0, r3, #1
 800d9aa:	6010      	str	r0, [r2, #0]
 800d9ac:	7019      	strb	r1, [r3, #0]
 800d9ae:	4608      	mov	r0, r1
 800d9b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9b4:	4770      	bx	lr

0800d9b6 <__sfputs_r>:
 800d9b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9b8:	4606      	mov	r6, r0
 800d9ba:	460f      	mov	r7, r1
 800d9bc:	4614      	mov	r4, r2
 800d9be:	18d5      	adds	r5, r2, r3
 800d9c0:	42ac      	cmp	r4, r5
 800d9c2:	d101      	bne.n	800d9c8 <__sfputs_r+0x12>
 800d9c4:	2000      	movs	r0, #0
 800d9c6:	e007      	b.n	800d9d8 <__sfputs_r+0x22>
 800d9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9cc:	463a      	mov	r2, r7
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	f7ff ffda 	bl	800d988 <__sfputc_r>
 800d9d4:	1c43      	adds	r3, r0, #1
 800d9d6:	d1f3      	bne.n	800d9c0 <__sfputs_r+0xa>
 800d9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9dc <_vfiprintf_r>:
 800d9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e0:	460d      	mov	r5, r1
 800d9e2:	b09d      	sub	sp, #116	; 0x74
 800d9e4:	4614      	mov	r4, r2
 800d9e6:	4698      	mov	r8, r3
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	b118      	cbz	r0, 800d9f4 <_vfiprintf_r+0x18>
 800d9ec:	6983      	ldr	r3, [r0, #24]
 800d9ee:	b90b      	cbnz	r3, 800d9f4 <_vfiprintf_r+0x18>
 800d9f0:	f000 fb42 	bl	800e078 <__sinit>
 800d9f4:	4b89      	ldr	r3, [pc, #548]	; (800dc1c <_vfiprintf_r+0x240>)
 800d9f6:	429d      	cmp	r5, r3
 800d9f8:	d11b      	bne.n	800da32 <_vfiprintf_r+0x56>
 800d9fa:	6875      	ldr	r5, [r6, #4]
 800d9fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9fe:	07d9      	lsls	r1, r3, #31
 800da00:	d405      	bmi.n	800da0e <_vfiprintf_r+0x32>
 800da02:	89ab      	ldrh	r3, [r5, #12]
 800da04:	059a      	lsls	r2, r3, #22
 800da06:	d402      	bmi.n	800da0e <_vfiprintf_r+0x32>
 800da08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da0a:	f000 fbd3 	bl	800e1b4 <__retarget_lock_acquire_recursive>
 800da0e:	89ab      	ldrh	r3, [r5, #12]
 800da10:	071b      	lsls	r3, r3, #28
 800da12:	d501      	bpl.n	800da18 <_vfiprintf_r+0x3c>
 800da14:	692b      	ldr	r3, [r5, #16]
 800da16:	b9eb      	cbnz	r3, 800da54 <_vfiprintf_r+0x78>
 800da18:	4629      	mov	r1, r5
 800da1a:	4630      	mov	r0, r6
 800da1c:	f000 f99c 	bl	800dd58 <__swsetup_r>
 800da20:	b1c0      	cbz	r0, 800da54 <_vfiprintf_r+0x78>
 800da22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da24:	07dc      	lsls	r4, r3, #31
 800da26:	d50e      	bpl.n	800da46 <_vfiprintf_r+0x6a>
 800da28:	f04f 30ff 	mov.w	r0, #4294967295
 800da2c:	b01d      	add	sp, #116	; 0x74
 800da2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da32:	4b7b      	ldr	r3, [pc, #492]	; (800dc20 <_vfiprintf_r+0x244>)
 800da34:	429d      	cmp	r5, r3
 800da36:	d101      	bne.n	800da3c <_vfiprintf_r+0x60>
 800da38:	68b5      	ldr	r5, [r6, #8]
 800da3a:	e7df      	b.n	800d9fc <_vfiprintf_r+0x20>
 800da3c:	4b79      	ldr	r3, [pc, #484]	; (800dc24 <_vfiprintf_r+0x248>)
 800da3e:	429d      	cmp	r5, r3
 800da40:	bf08      	it	eq
 800da42:	68f5      	ldreq	r5, [r6, #12]
 800da44:	e7da      	b.n	800d9fc <_vfiprintf_r+0x20>
 800da46:	89ab      	ldrh	r3, [r5, #12]
 800da48:	0598      	lsls	r0, r3, #22
 800da4a:	d4ed      	bmi.n	800da28 <_vfiprintf_r+0x4c>
 800da4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da4e:	f000 fbb2 	bl	800e1b6 <__retarget_lock_release_recursive>
 800da52:	e7e9      	b.n	800da28 <_vfiprintf_r+0x4c>
 800da54:	2300      	movs	r3, #0
 800da56:	9309      	str	r3, [sp, #36]	; 0x24
 800da58:	2320      	movs	r3, #32
 800da5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800da62:	2330      	movs	r3, #48	; 0x30
 800da64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dc28 <_vfiprintf_r+0x24c>
 800da68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da6c:	f04f 0901 	mov.w	r9, #1
 800da70:	4623      	mov	r3, r4
 800da72:	469a      	mov	sl, r3
 800da74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da78:	b10a      	cbz	r2, 800da7e <_vfiprintf_r+0xa2>
 800da7a:	2a25      	cmp	r2, #37	; 0x25
 800da7c:	d1f9      	bne.n	800da72 <_vfiprintf_r+0x96>
 800da7e:	ebba 0b04 	subs.w	fp, sl, r4
 800da82:	d00b      	beq.n	800da9c <_vfiprintf_r+0xc0>
 800da84:	465b      	mov	r3, fp
 800da86:	4622      	mov	r2, r4
 800da88:	4629      	mov	r1, r5
 800da8a:	4630      	mov	r0, r6
 800da8c:	f7ff ff93 	bl	800d9b6 <__sfputs_r>
 800da90:	3001      	adds	r0, #1
 800da92:	f000 80aa 	beq.w	800dbea <_vfiprintf_r+0x20e>
 800da96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da98:	445a      	add	r2, fp
 800da9a:	9209      	str	r2, [sp, #36]	; 0x24
 800da9c:	f89a 3000 	ldrb.w	r3, [sl]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	f000 80a2 	beq.w	800dbea <_vfiprintf_r+0x20e>
 800daa6:	2300      	movs	r3, #0
 800daa8:	f04f 32ff 	mov.w	r2, #4294967295
 800daac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dab0:	f10a 0a01 	add.w	sl, sl, #1
 800dab4:	9304      	str	r3, [sp, #16]
 800dab6:	9307      	str	r3, [sp, #28]
 800dab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dabc:	931a      	str	r3, [sp, #104]	; 0x68
 800dabe:	4654      	mov	r4, sl
 800dac0:	2205      	movs	r2, #5
 800dac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dac6:	4858      	ldr	r0, [pc, #352]	; (800dc28 <_vfiprintf_r+0x24c>)
 800dac8:	f7f2 fbc2 	bl	8000250 <memchr>
 800dacc:	9a04      	ldr	r2, [sp, #16]
 800dace:	b9d8      	cbnz	r0, 800db08 <_vfiprintf_r+0x12c>
 800dad0:	06d1      	lsls	r1, r2, #27
 800dad2:	bf44      	itt	mi
 800dad4:	2320      	movmi	r3, #32
 800dad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dada:	0713      	lsls	r3, r2, #28
 800dadc:	bf44      	itt	mi
 800dade:	232b      	movmi	r3, #43	; 0x2b
 800dae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dae4:	f89a 3000 	ldrb.w	r3, [sl]
 800dae8:	2b2a      	cmp	r3, #42	; 0x2a
 800daea:	d015      	beq.n	800db18 <_vfiprintf_r+0x13c>
 800daec:	9a07      	ldr	r2, [sp, #28]
 800daee:	4654      	mov	r4, sl
 800daf0:	2000      	movs	r0, #0
 800daf2:	f04f 0c0a 	mov.w	ip, #10
 800daf6:	4621      	mov	r1, r4
 800daf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dafc:	3b30      	subs	r3, #48	; 0x30
 800dafe:	2b09      	cmp	r3, #9
 800db00:	d94e      	bls.n	800dba0 <_vfiprintf_r+0x1c4>
 800db02:	b1b0      	cbz	r0, 800db32 <_vfiprintf_r+0x156>
 800db04:	9207      	str	r2, [sp, #28]
 800db06:	e014      	b.n	800db32 <_vfiprintf_r+0x156>
 800db08:	eba0 0308 	sub.w	r3, r0, r8
 800db0c:	fa09 f303 	lsl.w	r3, r9, r3
 800db10:	4313      	orrs	r3, r2
 800db12:	9304      	str	r3, [sp, #16]
 800db14:	46a2      	mov	sl, r4
 800db16:	e7d2      	b.n	800dabe <_vfiprintf_r+0xe2>
 800db18:	9b03      	ldr	r3, [sp, #12]
 800db1a:	1d19      	adds	r1, r3, #4
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	9103      	str	r1, [sp, #12]
 800db20:	2b00      	cmp	r3, #0
 800db22:	bfbb      	ittet	lt
 800db24:	425b      	neglt	r3, r3
 800db26:	f042 0202 	orrlt.w	r2, r2, #2
 800db2a:	9307      	strge	r3, [sp, #28]
 800db2c:	9307      	strlt	r3, [sp, #28]
 800db2e:	bfb8      	it	lt
 800db30:	9204      	strlt	r2, [sp, #16]
 800db32:	7823      	ldrb	r3, [r4, #0]
 800db34:	2b2e      	cmp	r3, #46	; 0x2e
 800db36:	d10c      	bne.n	800db52 <_vfiprintf_r+0x176>
 800db38:	7863      	ldrb	r3, [r4, #1]
 800db3a:	2b2a      	cmp	r3, #42	; 0x2a
 800db3c:	d135      	bne.n	800dbaa <_vfiprintf_r+0x1ce>
 800db3e:	9b03      	ldr	r3, [sp, #12]
 800db40:	1d1a      	adds	r2, r3, #4
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	9203      	str	r2, [sp, #12]
 800db46:	2b00      	cmp	r3, #0
 800db48:	bfb8      	it	lt
 800db4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800db4e:	3402      	adds	r4, #2
 800db50:	9305      	str	r3, [sp, #20]
 800db52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dc38 <_vfiprintf_r+0x25c>
 800db56:	7821      	ldrb	r1, [r4, #0]
 800db58:	2203      	movs	r2, #3
 800db5a:	4650      	mov	r0, sl
 800db5c:	f7f2 fb78 	bl	8000250 <memchr>
 800db60:	b140      	cbz	r0, 800db74 <_vfiprintf_r+0x198>
 800db62:	2340      	movs	r3, #64	; 0x40
 800db64:	eba0 000a 	sub.w	r0, r0, sl
 800db68:	fa03 f000 	lsl.w	r0, r3, r0
 800db6c:	9b04      	ldr	r3, [sp, #16]
 800db6e:	4303      	orrs	r3, r0
 800db70:	3401      	adds	r4, #1
 800db72:	9304      	str	r3, [sp, #16]
 800db74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db78:	482c      	ldr	r0, [pc, #176]	; (800dc2c <_vfiprintf_r+0x250>)
 800db7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db7e:	2206      	movs	r2, #6
 800db80:	f7f2 fb66 	bl	8000250 <memchr>
 800db84:	2800      	cmp	r0, #0
 800db86:	d03f      	beq.n	800dc08 <_vfiprintf_r+0x22c>
 800db88:	4b29      	ldr	r3, [pc, #164]	; (800dc30 <_vfiprintf_r+0x254>)
 800db8a:	bb1b      	cbnz	r3, 800dbd4 <_vfiprintf_r+0x1f8>
 800db8c:	9b03      	ldr	r3, [sp, #12]
 800db8e:	3307      	adds	r3, #7
 800db90:	f023 0307 	bic.w	r3, r3, #7
 800db94:	3308      	adds	r3, #8
 800db96:	9303      	str	r3, [sp, #12]
 800db98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db9a:	443b      	add	r3, r7
 800db9c:	9309      	str	r3, [sp, #36]	; 0x24
 800db9e:	e767      	b.n	800da70 <_vfiprintf_r+0x94>
 800dba0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dba4:	460c      	mov	r4, r1
 800dba6:	2001      	movs	r0, #1
 800dba8:	e7a5      	b.n	800daf6 <_vfiprintf_r+0x11a>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	3401      	adds	r4, #1
 800dbae:	9305      	str	r3, [sp, #20]
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	f04f 0c0a 	mov.w	ip, #10
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbbc:	3a30      	subs	r2, #48	; 0x30
 800dbbe:	2a09      	cmp	r2, #9
 800dbc0:	d903      	bls.n	800dbca <_vfiprintf_r+0x1ee>
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d0c5      	beq.n	800db52 <_vfiprintf_r+0x176>
 800dbc6:	9105      	str	r1, [sp, #20]
 800dbc8:	e7c3      	b.n	800db52 <_vfiprintf_r+0x176>
 800dbca:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbce:	4604      	mov	r4, r0
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e7f0      	b.n	800dbb6 <_vfiprintf_r+0x1da>
 800dbd4:	ab03      	add	r3, sp, #12
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	462a      	mov	r2, r5
 800dbda:	4b16      	ldr	r3, [pc, #88]	; (800dc34 <_vfiprintf_r+0x258>)
 800dbdc:	a904      	add	r1, sp, #16
 800dbde:	4630      	mov	r0, r6
 800dbe0:	f7fc f866 	bl	8009cb0 <_printf_float>
 800dbe4:	4607      	mov	r7, r0
 800dbe6:	1c78      	adds	r0, r7, #1
 800dbe8:	d1d6      	bne.n	800db98 <_vfiprintf_r+0x1bc>
 800dbea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbec:	07d9      	lsls	r1, r3, #31
 800dbee:	d405      	bmi.n	800dbfc <_vfiprintf_r+0x220>
 800dbf0:	89ab      	ldrh	r3, [r5, #12]
 800dbf2:	059a      	lsls	r2, r3, #22
 800dbf4:	d402      	bmi.n	800dbfc <_vfiprintf_r+0x220>
 800dbf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbf8:	f000 fadd 	bl	800e1b6 <__retarget_lock_release_recursive>
 800dbfc:	89ab      	ldrh	r3, [r5, #12]
 800dbfe:	065b      	lsls	r3, r3, #25
 800dc00:	f53f af12 	bmi.w	800da28 <_vfiprintf_r+0x4c>
 800dc04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc06:	e711      	b.n	800da2c <_vfiprintf_r+0x50>
 800dc08:	ab03      	add	r3, sp, #12
 800dc0a:	9300      	str	r3, [sp, #0]
 800dc0c:	462a      	mov	r2, r5
 800dc0e:	4b09      	ldr	r3, [pc, #36]	; (800dc34 <_vfiprintf_r+0x258>)
 800dc10:	a904      	add	r1, sp, #16
 800dc12:	4630      	mov	r0, r6
 800dc14:	f7fc faf0 	bl	800a1f8 <_printf_i>
 800dc18:	e7e4      	b.n	800dbe4 <_vfiprintf_r+0x208>
 800dc1a:	bf00      	nop
 800dc1c:	0800eab0 	.word	0x0800eab0
 800dc20:	0800ead0 	.word	0x0800ead0
 800dc24:	0800ea90 	.word	0x0800ea90
 800dc28:	0800ea7c 	.word	0x0800ea7c
 800dc2c:	0800ea86 	.word	0x0800ea86
 800dc30:	08009cb1 	.word	0x08009cb1
 800dc34:	0800d9b7 	.word	0x0800d9b7
 800dc38:	0800ea82 	.word	0x0800ea82
 800dc3c:	00000000 	.word	0x00000000

0800dc40 <nan>:
 800dc40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dc48 <nan+0x8>
 800dc44:	4770      	bx	lr
 800dc46:	bf00      	nop
 800dc48:	00000000 	.word	0x00000000
 800dc4c:	7ff80000 	.word	0x7ff80000

0800dc50 <_sbrk_r>:
 800dc50:	b538      	push	{r3, r4, r5, lr}
 800dc52:	4d06      	ldr	r5, [pc, #24]	; (800dc6c <_sbrk_r+0x1c>)
 800dc54:	2300      	movs	r3, #0
 800dc56:	4604      	mov	r4, r0
 800dc58:	4608      	mov	r0, r1
 800dc5a:	602b      	str	r3, [r5, #0]
 800dc5c:	f7f4 fbde 	bl	800241c <_sbrk>
 800dc60:	1c43      	adds	r3, r0, #1
 800dc62:	d102      	bne.n	800dc6a <_sbrk_r+0x1a>
 800dc64:	682b      	ldr	r3, [r5, #0]
 800dc66:	b103      	cbz	r3, 800dc6a <_sbrk_r+0x1a>
 800dc68:	6023      	str	r3, [r4, #0]
 800dc6a:	bd38      	pop	{r3, r4, r5, pc}
 800dc6c:	2000072c 	.word	0x2000072c

0800dc70 <strncmp>:
 800dc70:	b510      	push	{r4, lr}
 800dc72:	b17a      	cbz	r2, 800dc94 <strncmp+0x24>
 800dc74:	4603      	mov	r3, r0
 800dc76:	3901      	subs	r1, #1
 800dc78:	1884      	adds	r4, r0, r2
 800dc7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dc7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dc82:	4290      	cmp	r0, r2
 800dc84:	d101      	bne.n	800dc8a <strncmp+0x1a>
 800dc86:	42a3      	cmp	r3, r4
 800dc88:	d101      	bne.n	800dc8e <strncmp+0x1e>
 800dc8a:	1a80      	subs	r0, r0, r2
 800dc8c:	bd10      	pop	{r4, pc}
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	d1f3      	bne.n	800dc7a <strncmp+0xa>
 800dc92:	e7fa      	b.n	800dc8a <strncmp+0x1a>
 800dc94:	4610      	mov	r0, r2
 800dc96:	e7f9      	b.n	800dc8c <strncmp+0x1c>

0800dc98 <__swbuf_r>:
 800dc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9a:	460e      	mov	r6, r1
 800dc9c:	4614      	mov	r4, r2
 800dc9e:	4605      	mov	r5, r0
 800dca0:	b118      	cbz	r0, 800dcaa <__swbuf_r+0x12>
 800dca2:	6983      	ldr	r3, [r0, #24]
 800dca4:	b90b      	cbnz	r3, 800dcaa <__swbuf_r+0x12>
 800dca6:	f000 f9e7 	bl	800e078 <__sinit>
 800dcaa:	4b21      	ldr	r3, [pc, #132]	; (800dd30 <__swbuf_r+0x98>)
 800dcac:	429c      	cmp	r4, r3
 800dcae:	d12b      	bne.n	800dd08 <__swbuf_r+0x70>
 800dcb0:	686c      	ldr	r4, [r5, #4]
 800dcb2:	69a3      	ldr	r3, [r4, #24]
 800dcb4:	60a3      	str	r3, [r4, #8]
 800dcb6:	89a3      	ldrh	r3, [r4, #12]
 800dcb8:	071a      	lsls	r2, r3, #28
 800dcba:	d52f      	bpl.n	800dd1c <__swbuf_r+0x84>
 800dcbc:	6923      	ldr	r3, [r4, #16]
 800dcbe:	b36b      	cbz	r3, 800dd1c <__swbuf_r+0x84>
 800dcc0:	6923      	ldr	r3, [r4, #16]
 800dcc2:	6820      	ldr	r0, [r4, #0]
 800dcc4:	1ac0      	subs	r0, r0, r3
 800dcc6:	6963      	ldr	r3, [r4, #20]
 800dcc8:	b2f6      	uxtb	r6, r6
 800dcca:	4283      	cmp	r3, r0
 800dccc:	4637      	mov	r7, r6
 800dcce:	dc04      	bgt.n	800dcda <__swbuf_r+0x42>
 800dcd0:	4621      	mov	r1, r4
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	f000 f93c 	bl	800df50 <_fflush_r>
 800dcd8:	bb30      	cbnz	r0, 800dd28 <__swbuf_r+0x90>
 800dcda:	68a3      	ldr	r3, [r4, #8]
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	60a3      	str	r3, [r4, #8]
 800dce0:	6823      	ldr	r3, [r4, #0]
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	6022      	str	r2, [r4, #0]
 800dce6:	701e      	strb	r6, [r3, #0]
 800dce8:	6963      	ldr	r3, [r4, #20]
 800dcea:	3001      	adds	r0, #1
 800dcec:	4283      	cmp	r3, r0
 800dcee:	d004      	beq.n	800dcfa <__swbuf_r+0x62>
 800dcf0:	89a3      	ldrh	r3, [r4, #12]
 800dcf2:	07db      	lsls	r3, r3, #31
 800dcf4:	d506      	bpl.n	800dd04 <__swbuf_r+0x6c>
 800dcf6:	2e0a      	cmp	r6, #10
 800dcf8:	d104      	bne.n	800dd04 <__swbuf_r+0x6c>
 800dcfa:	4621      	mov	r1, r4
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	f000 f927 	bl	800df50 <_fflush_r>
 800dd02:	b988      	cbnz	r0, 800dd28 <__swbuf_r+0x90>
 800dd04:	4638      	mov	r0, r7
 800dd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd08:	4b0a      	ldr	r3, [pc, #40]	; (800dd34 <__swbuf_r+0x9c>)
 800dd0a:	429c      	cmp	r4, r3
 800dd0c:	d101      	bne.n	800dd12 <__swbuf_r+0x7a>
 800dd0e:	68ac      	ldr	r4, [r5, #8]
 800dd10:	e7cf      	b.n	800dcb2 <__swbuf_r+0x1a>
 800dd12:	4b09      	ldr	r3, [pc, #36]	; (800dd38 <__swbuf_r+0xa0>)
 800dd14:	429c      	cmp	r4, r3
 800dd16:	bf08      	it	eq
 800dd18:	68ec      	ldreq	r4, [r5, #12]
 800dd1a:	e7ca      	b.n	800dcb2 <__swbuf_r+0x1a>
 800dd1c:	4621      	mov	r1, r4
 800dd1e:	4628      	mov	r0, r5
 800dd20:	f000 f81a 	bl	800dd58 <__swsetup_r>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	d0cb      	beq.n	800dcc0 <__swbuf_r+0x28>
 800dd28:	f04f 37ff 	mov.w	r7, #4294967295
 800dd2c:	e7ea      	b.n	800dd04 <__swbuf_r+0x6c>
 800dd2e:	bf00      	nop
 800dd30:	0800eab0 	.word	0x0800eab0
 800dd34:	0800ead0 	.word	0x0800ead0
 800dd38:	0800ea90 	.word	0x0800ea90

0800dd3c <__ascii_wctomb>:
 800dd3c:	b149      	cbz	r1, 800dd52 <__ascii_wctomb+0x16>
 800dd3e:	2aff      	cmp	r2, #255	; 0xff
 800dd40:	bf85      	ittet	hi
 800dd42:	238a      	movhi	r3, #138	; 0x8a
 800dd44:	6003      	strhi	r3, [r0, #0]
 800dd46:	700a      	strbls	r2, [r1, #0]
 800dd48:	f04f 30ff 	movhi.w	r0, #4294967295
 800dd4c:	bf98      	it	ls
 800dd4e:	2001      	movls	r0, #1
 800dd50:	4770      	bx	lr
 800dd52:	4608      	mov	r0, r1
 800dd54:	4770      	bx	lr
	...

0800dd58 <__swsetup_r>:
 800dd58:	4b32      	ldr	r3, [pc, #200]	; (800de24 <__swsetup_r+0xcc>)
 800dd5a:	b570      	push	{r4, r5, r6, lr}
 800dd5c:	681d      	ldr	r5, [r3, #0]
 800dd5e:	4606      	mov	r6, r0
 800dd60:	460c      	mov	r4, r1
 800dd62:	b125      	cbz	r5, 800dd6e <__swsetup_r+0x16>
 800dd64:	69ab      	ldr	r3, [r5, #24]
 800dd66:	b913      	cbnz	r3, 800dd6e <__swsetup_r+0x16>
 800dd68:	4628      	mov	r0, r5
 800dd6a:	f000 f985 	bl	800e078 <__sinit>
 800dd6e:	4b2e      	ldr	r3, [pc, #184]	; (800de28 <__swsetup_r+0xd0>)
 800dd70:	429c      	cmp	r4, r3
 800dd72:	d10f      	bne.n	800dd94 <__swsetup_r+0x3c>
 800dd74:	686c      	ldr	r4, [r5, #4]
 800dd76:	89a3      	ldrh	r3, [r4, #12]
 800dd78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd7c:	0719      	lsls	r1, r3, #28
 800dd7e:	d42c      	bmi.n	800ddda <__swsetup_r+0x82>
 800dd80:	06dd      	lsls	r5, r3, #27
 800dd82:	d411      	bmi.n	800dda8 <__swsetup_r+0x50>
 800dd84:	2309      	movs	r3, #9
 800dd86:	6033      	str	r3, [r6, #0]
 800dd88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd8c:	81a3      	strh	r3, [r4, #12]
 800dd8e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd92:	e03e      	b.n	800de12 <__swsetup_r+0xba>
 800dd94:	4b25      	ldr	r3, [pc, #148]	; (800de2c <__swsetup_r+0xd4>)
 800dd96:	429c      	cmp	r4, r3
 800dd98:	d101      	bne.n	800dd9e <__swsetup_r+0x46>
 800dd9a:	68ac      	ldr	r4, [r5, #8]
 800dd9c:	e7eb      	b.n	800dd76 <__swsetup_r+0x1e>
 800dd9e:	4b24      	ldr	r3, [pc, #144]	; (800de30 <__swsetup_r+0xd8>)
 800dda0:	429c      	cmp	r4, r3
 800dda2:	bf08      	it	eq
 800dda4:	68ec      	ldreq	r4, [r5, #12]
 800dda6:	e7e6      	b.n	800dd76 <__swsetup_r+0x1e>
 800dda8:	0758      	lsls	r0, r3, #29
 800ddaa:	d512      	bpl.n	800ddd2 <__swsetup_r+0x7a>
 800ddac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddae:	b141      	cbz	r1, 800ddc2 <__swsetup_r+0x6a>
 800ddb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddb4:	4299      	cmp	r1, r3
 800ddb6:	d002      	beq.n	800ddbe <__swsetup_r+0x66>
 800ddb8:	4630      	mov	r0, r6
 800ddba:	f7ff fba9 	bl	800d510 <_free_r>
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	6363      	str	r3, [r4, #52]	; 0x34
 800ddc2:	89a3      	ldrh	r3, [r4, #12]
 800ddc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ddc8:	81a3      	strh	r3, [r4, #12]
 800ddca:	2300      	movs	r3, #0
 800ddcc:	6063      	str	r3, [r4, #4]
 800ddce:	6923      	ldr	r3, [r4, #16]
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	89a3      	ldrh	r3, [r4, #12]
 800ddd4:	f043 0308 	orr.w	r3, r3, #8
 800ddd8:	81a3      	strh	r3, [r4, #12]
 800ddda:	6923      	ldr	r3, [r4, #16]
 800dddc:	b94b      	cbnz	r3, 800ddf2 <__swsetup_r+0x9a>
 800ddde:	89a3      	ldrh	r3, [r4, #12]
 800dde0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dde4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dde8:	d003      	beq.n	800ddf2 <__swsetup_r+0x9a>
 800ddea:	4621      	mov	r1, r4
 800ddec:	4630      	mov	r0, r6
 800ddee:	f000 fa09 	bl	800e204 <__smakebuf_r>
 800ddf2:	89a0      	ldrh	r0, [r4, #12]
 800ddf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddf8:	f010 0301 	ands.w	r3, r0, #1
 800ddfc:	d00a      	beq.n	800de14 <__swsetup_r+0xbc>
 800ddfe:	2300      	movs	r3, #0
 800de00:	60a3      	str	r3, [r4, #8]
 800de02:	6963      	ldr	r3, [r4, #20]
 800de04:	425b      	negs	r3, r3
 800de06:	61a3      	str	r3, [r4, #24]
 800de08:	6923      	ldr	r3, [r4, #16]
 800de0a:	b943      	cbnz	r3, 800de1e <__swsetup_r+0xc6>
 800de0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de10:	d1ba      	bne.n	800dd88 <__swsetup_r+0x30>
 800de12:	bd70      	pop	{r4, r5, r6, pc}
 800de14:	0781      	lsls	r1, r0, #30
 800de16:	bf58      	it	pl
 800de18:	6963      	ldrpl	r3, [r4, #20]
 800de1a:	60a3      	str	r3, [r4, #8]
 800de1c:	e7f4      	b.n	800de08 <__swsetup_r+0xb0>
 800de1e:	2000      	movs	r0, #0
 800de20:	e7f7      	b.n	800de12 <__swsetup_r+0xba>
 800de22:	bf00      	nop
 800de24:	200001ac 	.word	0x200001ac
 800de28:	0800eab0 	.word	0x0800eab0
 800de2c:	0800ead0 	.word	0x0800ead0
 800de30:	0800ea90 	.word	0x0800ea90

0800de34 <abort>:
 800de34:	b508      	push	{r3, lr}
 800de36:	2006      	movs	r0, #6
 800de38:	f000 faa2 	bl	800e380 <raise>
 800de3c:	2001      	movs	r0, #1
 800de3e:	f7f4 fa75 	bl	800232c <_exit>
	...

0800de44 <__sflush_r>:
 800de44:	898a      	ldrh	r2, [r1, #12]
 800de46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de4a:	4605      	mov	r5, r0
 800de4c:	0710      	lsls	r0, r2, #28
 800de4e:	460c      	mov	r4, r1
 800de50:	d458      	bmi.n	800df04 <__sflush_r+0xc0>
 800de52:	684b      	ldr	r3, [r1, #4]
 800de54:	2b00      	cmp	r3, #0
 800de56:	dc05      	bgt.n	800de64 <__sflush_r+0x20>
 800de58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	dc02      	bgt.n	800de64 <__sflush_r+0x20>
 800de5e:	2000      	movs	r0, #0
 800de60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de66:	2e00      	cmp	r6, #0
 800de68:	d0f9      	beq.n	800de5e <__sflush_r+0x1a>
 800de6a:	2300      	movs	r3, #0
 800de6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de70:	682f      	ldr	r7, [r5, #0]
 800de72:	602b      	str	r3, [r5, #0]
 800de74:	d032      	beq.n	800dedc <__sflush_r+0x98>
 800de76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de78:	89a3      	ldrh	r3, [r4, #12]
 800de7a:	075a      	lsls	r2, r3, #29
 800de7c:	d505      	bpl.n	800de8a <__sflush_r+0x46>
 800de7e:	6863      	ldr	r3, [r4, #4]
 800de80:	1ac0      	subs	r0, r0, r3
 800de82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de84:	b10b      	cbz	r3, 800de8a <__sflush_r+0x46>
 800de86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de88:	1ac0      	subs	r0, r0, r3
 800de8a:	2300      	movs	r3, #0
 800de8c:	4602      	mov	r2, r0
 800de8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de90:	6a21      	ldr	r1, [r4, #32]
 800de92:	4628      	mov	r0, r5
 800de94:	47b0      	blx	r6
 800de96:	1c43      	adds	r3, r0, #1
 800de98:	89a3      	ldrh	r3, [r4, #12]
 800de9a:	d106      	bne.n	800deaa <__sflush_r+0x66>
 800de9c:	6829      	ldr	r1, [r5, #0]
 800de9e:	291d      	cmp	r1, #29
 800dea0:	d82c      	bhi.n	800defc <__sflush_r+0xb8>
 800dea2:	4a2a      	ldr	r2, [pc, #168]	; (800df4c <__sflush_r+0x108>)
 800dea4:	40ca      	lsrs	r2, r1
 800dea6:	07d6      	lsls	r6, r2, #31
 800dea8:	d528      	bpl.n	800defc <__sflush_r+0xb8>
 800deaa:	2200      	movs	r2, #0
 800deac:	6062      	str	r2, [r4, #4]
 800deae:	04d9      	lsls	r1, r3, #19
 800deb0:	6922      	ldr	r2, [r4, #16]
 800deb2:	6022      	str	r2, [r4, #0]
 800deb4:	d504      	bpl.n	800dec0 <__sflush_r+0x7c>
 800deb6:	1c42      	adds	r2, r0, #1
 800deb8:	d101      	bne.n	800debe <__sflush_r+0x7a>
 800deba:	682b      	ldr	r3, [r5, #0]
 800debc:	b903      	cbnz	r3, 800dec0 <__sflush_r+0x7c>
 800debe:	6560      	str	r0, [r4, #84]	; 0x54
 800dec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dec2:	602f      	str	r7, [r5, #0]
 800dec4:	2900      	cmp	r1, #0
 800dec6:	d0ca      	beq.n	800de5e <__sflush_r+0x1a>
 800dec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800decc:	4299      	cmp	r1, r3
 800dece:	d002      	beq.n	800ded6 <__sflush_r+0x92>
 800ded0:	4628      	mov	r0, r5
 800ded2:	f7ff fb1d 	bl	800d510 <_free_r>
 800ded6:	2000      	movs	r0, #0
 800ded8:	6360      	str	r0, [r4, #52]	; 0x34
 800deda:	e7c1      	b.n	800de60 <__sflush_r+0x1c>
 800dedc:	6a21      	ldr	r1, [r4, #32]
 800dede:	2301      	movs	r3, #1
 800dee0:	4628      	mov	r0, r5
 800dee2:	47b0      	blx	r6
 800dee4:	1c41      	adds	r1, r0, #1
 800dee6:	d1c7      	bne.n	800de78 <__sflush_r+0x34>
 800dee8:	682b      	ldr	r3, [r5, #0]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d0c4      	beq.n	800de78 <__sflush_r+0x34>
 800deee:	2b1d      	cmp	r3, #29
 800def0:	d001      	beq.n	800def6 <__sflush_r+0xb2>
 800def2:	2b16      	cmp	r3, #22
 800def4:	d101      	bne.n	800defa <__sflush_r+0xb6>
 800def6:	602f      	str	r7, [r5, #0]
 800def8:	e7b1      	b.n	800de5e <__sflush_r+0x1a>
 800defa:	89a3      	ldrh	r3, [r4, #12]
 800defc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df00:	81a3      	strh	r3, [r4, #12]
 800df02:	e7ad      	b.n	800de60 <__sflush_r+0x1c>
 800df04:	690f      	ldr	r7, [r1, #16]
 800df06:	2f00      	cmp	r7, #0
 800df08:	d0a9      	beq.n	800de5e <__sflush_r+0x1a>
 800df0a:	0793      	lsls	r3, r2, #30
 800df0c:	680e      	ldr	r6, [r1, #0]
 800df0e:	bf08      	it	eq
 800df10:	694b      	ldreq	r3, [r1, #20]
 800df12:	600f      	str	r7, [r1, #0]
 800df14:	bf18      	it	ne
 800df16:	2300      	movne	r3, #0
 800df18:	eba6 0807 	sub.w	r8, r6, r7
 800df1c:	608b      	str	r3, [r1, #8]
 800df1e:	f1b8 0f00 	cmp.w	r8, #0
 800df22:	dd9c      	ble.n	800de5e <__sflush_r+0x1a>
 800df24:	6a21      	ldr	r1, [r4, #32]
 800df26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df28:	4643      	mov	r3, r8
 800df2a:	463a      	mov	r2, r7
 800df2c:	4628      	mov	r0, r5
 800df2e:	47b0      	blx	r6
 800df30:	2800      	cmp	r0, #0
 800df32:	dc06      	bgt.n	800df42 <__sflush_r+0xfe>
 800df34:	89a3      	ldrh	r3, [r4, #12]
 800df36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df3a:	81a3      	strh	r3, [r4, #12]
 800df3c:	f04f 30ff 	mov.w	r0, #4294967295
 800df40:	e78e      	b.n	800de60 <__sflush_r+0x1c>
 800df42:	4407      	add	r7, r0
 800df44:	eba8 0800 	sub.w	r8, r8, r0
 800df48:	e7e9      	b.n	800df1e <__sflush_r+0xda>
 800df4a:	bf00      	nop
 800df4c:	20400001 	.word	0x20400001

0800df50 <_fflush_r>:
 800df50:	b538      	push	{r3, r4, r5, lr}
 800df52:	690b      	ldr	r3, [r1, #16]
 800df54:	4605      	mov	r5, r0
 800df56:	460c      	mov	r4, r1
 800df58:	b913      	cbnz	r3, 800df60 <_fflush_r+0x10>
 800df5a:	2500      	movs	r5, #0
 800df5c:	4628      	mov	r0, r5
 800df5e:	bd38      	pop	{r3, r4, r5, pc}
 800df60:	b118      	cbz	r0, 800df6a <_fflush_r+0x1a>
 800df62:	6983      	ldr	r3, [r0, #24]
 800df64:	b90b      	cbnz	r3, 800df6a <_fflush_r+0x1a>
 800df66:	f000 f887 	bl	800e078 <__sinit>
 800df6a:	4b14      	ldr	r3, [pc, #80]	; (800dfbc <_fflush_r+0x6c>)
 800df6c:	429c      	cmp	r4, r3
 800df6e:	d11b      	bne.n	800dfa8 <_fflush_r+0x58>
 800df70:	686c      	ldr	r4, [r5, #4]
 800df72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d0ef      	beq.n	800df5a <_fflush_r+0xa>
 800df7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df7c:	07d0      	lsls	r0, r2, #31
 800df7e:	d404      	bmi.n	800df8a <_fflush_r+0x3a>
 800df80:	0599      	lsls	r1, r3, #22
 800df82:	d402      	bmi.n	800df8a <_fflush_r+0x3a>
 800df84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df86:	f000 f915 	bl	800e1b4 <__retarget_lock_acquire_recursive>
 800df8a:	4628      	mov	r0, r5
 800df8c:	4621      	mov	r1, r4
 800df8e:	f7ff ff59 	bl	800de44 <__sflush_r>
 800df92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df94:	07da      	lsls	r2, r3, #31
 800df96:	4605      	mov	r5, r0
 800df98:	d4e0      	bmi.n	800df5c <_fflush_r+0xc>
 800df9a:	89a3      	ldrh	r3, [r4, #12]
 800df9c:	059b      	lsls	r3, r3, #22
 800df9e:	d4dd      	bmi.n	800df5c <_fflush_r+0xc>
 800dfa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfa2:	f000 f908 	bl	800e1b6 <__retarget_lock_release_recursive>
 800dfa6:	e7d9      	b.n	800df5c <_fflush_r+0xc>
 800dfa8:	4b05      	ldr	r3, [pc, #20]	; (800dfc0 <_fflush_r+0x70>)
 800dfaa:	429c      	cmp	r4, r3
 800dfac:	d101      	bne.n	800dfb2 <_fflush_r+0x62>
 800dfae:	68ac      	ldr	r4, [r5, #8]
 800dfb0:	e7df      	b.n	800df72 <_fflush_r+0x22>
 800dfb2:	4b04      	ldr	r3, [pc, #16]	; (800dfc4 <_fflush_r+0x74>)
 800dfb4:	429c      	cmp	r4, r3
 800dfb6:	bf08      	it	eq
 800dfb8:	68ec      	ldreq	r4, [r5, #12]
 800dfba:	e7da      	b.n	800df72 <_fflush_r+0x22>
 800dfbc:	0800eab0 	.word	0x0800eab0
 800dfc0:	0800ead0 	.word	0x0800ead0
 800dfc4:	0800ea90 	.word	0x0800ea90

0800dfc8 <std>:
 800dfc8:	2300      	movs	r3, #0
 800dfca:	b510      	push	{r4, lr}
 800dfcc:	4604      	mov	r4, r0
 800dfce:	e9c0 3300 	strd	r3, r3, [r0]
 800dfd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dfd6:	6083      	str	r3, [r0, #8]
 800dfd8:	8181      	strh	r1, [r0, #12]
 800dfda:	6643      	str	r3, [r0, #100]	; 0x64
 800dfdc:	81c2      	strh	r2, [r0, #14]
 800dfde:	6183      	str	r3, [r0, #24]
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	2208      	movs	r2, #8
 800dfe4:	305c      	adds	r0, #92	; 0x5c
 800dfe6:	f7fb fdbb 	bl	8009b60 <memset>
 800dfea:	4b05      	ldr	r3, [pc, #20]	; (800e000 <std+0x38>)
 800dfec:	6263      	str	r3, [r4, #36]	; 0x24
 800dfee:	4b05      	ldr	r3, [pc, #20]	; (800e004 <std+0x3c>)
 800dff0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dff2:	4b05      	ldr	r3, [pc, #20]	; (800e008 <std+0x40>)
 800dff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dff6:	4b05      	ldr	r3, [pc, #20]	; (800e00c <std+0x44>)
 800dff8:	6224      	str	r4, [r4, #32]
 800dffa:	6323      	str	r3, [r4, #48]	; 0x30
 800dffc:	bd10      	pop	{r4, pc}
 800dffe:	bf00      	nop
 800e000:	0800e3b9 	.word	0x0800e3b9
 800e004:	0800e3db 	.word	0x0800e3db
 800e008:	0800e413 	.word	0x0800e413
 800e00c:	0800e437 	.word	0x0800e437

0800e010 <_cleanup_r>:
 800e010:	4901      	ldr	r1, [pc, #4]	; (800e018 <_cleanup_r+0x8>)
 800e012:	f000 b8af 	b.w	800e174 <_fwalk_reent>
 800e016:	bf00      	nop
 800e018:	0800df51 	.word	0x0800df51

0800e01c <__sfmoreglue>:
 800e01c:	b570      	push	{r4, r5, r6, lr}
 800e01e:	2268      	movs	r2, #104	; 0x68
 800e020:	1e4d      	subs	r5, r1, #1
 800e022:	4355      	muls	r5, r2
 800e024:	460e      	mov	r6, r1
 800e026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e02a:	f7ff fadd 	bl	800d5e8 <_malloc_r>
 800e02e:	4604      	mov	r4, r0
 800e030:	b140      	cbz	r0, 800e044 <__sfmoreglue+0x28>
 800e032:	2100      	movs	r1, #0
 800e034:	e9c0 1600 	strd	r1, r6, [r0]
 800e038:	300c      	adds	r0, #12
 800e03a:	60a0      	str	r0, [r4, #8]
 800e03c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e040:	f7fb fd8e 	bl	8009b60 <memset>
 800e044:	4620      	mov	r0, r4
 800e046:	bd70      	pop	{r4, r5, r6, pc}

0800e048 <__sfp_lock_acquire>:
 800e048:	4801      	ldr	r0, [pc, #4]	; (800e050 <__sfp_lock_acquire+0x8>)
 800e04a:	f000 b8b3 	b.w	800e1b4 <__retarget_lock_acquire_recursive>
 800e04e:	bf00      	nop
 800e050:	20000729 	.word	0x20000729

0800e054 <__sfp_lock_release>:
 800e054:	4801      	ldr	r0, [pc, #4]	; (800e05c <__sfp_lock_release+0x8>)
 800e056:	f000 b8ae 	b.w	800e1b6 <__retarget_lock_release_recursive>
 800e05a:	bf00      	nop
 800e05c:	20000729 	.word	0x20000729

0800e060 <__sinit_lock_acquire>:
 800e060:	4801      	ldr	r0, [pc, #4]	; (800e068 <__sinit_lock_acquire+0x8>)
 800e062:	f000 b8a7 	b.w	800e1b4 <__retarget_lock_acquire_recursive>
 800e066:	bf00      	nop
 800e068:	2000072a 	.word	0x2000072a

0800e06c <__sinit_lock_release>:
 800e06c:	4801      	ldr	r0, [pc, #4]	; (800e074 <__sinit_lock_release+0x8>)
 800e06e:	f000 b8a2 	b.w	800e1b6 <__retarget_lock_release_recursive>
 800e072:	bf00      	nop
 800e074:	2000072a 	.word	0x2000072a

0800e078 <__sinit>:
 800e078:	b510      	push	{r4, lr}
 800e07a:	4604      	mov	r4, r0
 800e07c:	f7ff fff0 	bl	800e060 <__sinit_lock_acquire>
 800e080:	69a3      	ldr	r3, [r4, #24]
 800e082:	b11b      	cbz	r3, 800e08c <__sinit+0x14>
 800e084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e088:	f7ff bff0 	b.w	800e06c <__sinit_lock_release>
 800e08c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e090:	6523      	str	r3, [r4, #80]	; 0x50
 800e092:	4b13      	ldr	r3, [pc, #76]	; (800e0e0 <__sinit+0x68>)
 800e094:	4a13      	ldr	r2, [pc, #76]	; (800e0e4 <__sinit+0x6c>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	62a2      	str	r2, [r4, #40]	; 0x28
 800e09a:	42a3      	cmp	r3, r4
 800e09c:	bf04      	itt	eq
 800e09e:	2301      	moveq	r3, #1
 800e0a0:	61a3      	streq	r3, [r4, #24]
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f000 f820 	bl	800e0e8 <__sfp>
 800e0a8:	6060      	str	r0, [r4, #4]
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	f000 f81c 	bl	800e0e8 <__sfp>
 800e0b0:	60a0      	str	r0, [r4, #8]
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f000 f818 	bl	800e0e8 <__sfp>
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	60e0      	str	r0, [r4, #12]
 800e0bc:	2104      	movs	r1, #4
 800e0be:	6860      	ldr	r0, [r4, #4]
 800e0c0:	f7ff ff82 	bl	800dfc8 <std>
 800e0c4:	68a0      	ldr	r0, [r4, #8]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	2109      	movs	r1, #9
 800e0ca:	f7ff ff7d 	bl	800dfc8 <std>
 800e0ce:	68e0      	ldr	r0, [r4, #12]
 800e0d0:	2202      	movs	r2, #2
 800e0d2:	2112      	movs	r1, #18
 800e0d4:	f7ff ff78 	bl	800dfc8 <std>
 800e0d8:	2301      	movs	r3, #1
 800e0da:	61a3      	str	r3, [r4, #24]
 800e0dc:	e7d2      	b.n	800e084 <__sinit+0xc>
 800e0de:	bf00      	nop
 800e0e0:	0800e5f0 	.word	0x0800e5f0
 800e0e4:	0800e011 	.word	0x0800e011

0800e0e8 <__sfp>:
 800e0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ea:	4607      	mov	r7, r0
 800e0ec:	f7ff ffac 	bl	800e048 <__sfp_lock_acquire>
 800e0f0:	4b1e      	ldr	r3, [pc, #120]	; (800e16c <__sfp+0x84>)
 800e0f2:	681e      	ldr	r6, [r3, #0]
 800e0f4:	69b3      	ldr	r3, [r6, #24]
 800e0f6:	b913      	cbnz	r3, 800e0fe <__sfp+0x16>
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f7ff ffbd 	bl	800e078 <__sinit>
 800e0fe:	3648      	adds	r6, #72	; 0x48
 800e100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e104:	3b01      	subs	r3, #1
 800e106:	d503      	bpl.n	800e110 <__sfp+0x28>
 800e108:	6833      	ldr	r3, [r6, #0]
 800e10a:	b30b      	cbz	r3, 800e150 <__sfp+0x68>
 800e10c:	6836      	ldr	r6, [r6, #0]
 800e10e:	e7f7      	b.n	800e100 <__sfp+0x18>
 800e110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e114:	b9d5      	cbnz	r5, 800e14c <__sfp+0x64>
 800e116:	4b16      	ldr	r3, [pc, #88]	; (800e170 <__sfp+0x88>)
 800e118:	60e3      	str	r3, [r4, #12]
 800e11a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e11e:	6665      	str	r5, [r4, #100]	; 0x64
 800e120:	f000 f847 	bl	800e1b2 <__retarget_lock_init_recursive>
 800e124:	f7ff ff96 	bl	800e054 <__sfp_lock_release>
 800e128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e12c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e130:	6025      	str	r5, [r4, #0]
 800e132:	61a5      	str	r5, [r4, #24]
 800e134:	2208      	movs	r2, #8
 800e136:	4629      	mov	r1, r5
 800e138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e13c:	f7fb fd10 	bl	8009b60 <memset>
 800e140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e148:	4620      	mov	r0, r4
 800e14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e14c:	3468      	adds	r4, #104	; 0x68
 800e14e:	e7d9      	b.n	800e104 <__sfp+0x1c>
 800e150:	2104      	movs	r1, #4
 800e152:	4638      	mov	r0, r7
 800e154:	f7ff ff62 	bl	800e01c <__sfmoreglue>
 800e158:	4604      	mov	r4, r0
 800e15a:	6030      	str	r0, [r6, #0]
 800e15c:	2800      	cmp	r0, #0
 800e15e:	d1d5      	bne.n	800e10c <__sfp+0x24>
 800e160:	f7ff ff78 	bl	800e054 <__sfp_lock_release>
 800e164:	230c      	movs	r3, #12
 800e166:	603b      	str	r3, [r7, #0]
 800e168:	e7ee      	b.n	800e148 <__sfp+0x60>
 800e16a:	bf00      	nop
 800e16c:	0800e5f0 	.word	0x0800e5f0
 800e170:	ffff0001 	.word	0xffff0001

0800e174 <_fwalk_reent>:
 800e174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e178:	4606      	mov	r6, r0
 800e17a:	4688      	mov	r8, r1
 800e17c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e180:	2700      	movs	r7, #0
 800e182:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e186:	f1b9 0901 	subs.w	r9, r9, #1
 800e18a:	d505      	bpl.n	800e198 <_fwalk_reent+0x24>
 800e18c:	6824      	ldr	r4, [r4, #0]
 800e18e:	2c00      	cmp	r4, #0
 800e190:	d1f7      	bne.n	800e182 <_fwalk_reent+0xe>
 800e192:	4638      	mov	r0, r7
 800e194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e198:	89ab      	ldrh	r3, [r5, #12]
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d907      	bls.n	800e1ae <_fwalk_reent+0x3a>
 800e19e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	d003      	beq.n	800e1ae <_fwalk_reent+0x3a>
 800e1a6:	4629      	mov	r1, r5
 800e1a8:	4630      	mov	r0, r6
 800e1aa:	47c0      	blx	r8
 800e1ac:	4307      	orrs	r7, r0
 800e1ae:	3568      	adds	r5, #104	; 0x68
 800e1b0:	e7e9      	b.n	800e186 <_fwalk_reent+0x12>

0800e1b2 <__retarget_lock_init_recursive>:
 800e1b2:	4770      	bx	lr

0800e1b4 <__retarget_lock_acquire_recursive>:
 800e1b4:	4770      	bx	lr

0800e1b6 <__retarget_lock_release_recursive>:
 800e1b6:	4770      	bx	lr

0800e1b8 <__swhatbuf_r>:
 800e1b8:	b570      	push	{r4, r5, r6, lr}
 800e1ba:	460e      	mov	r6, r1
 800e1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1c0:	2900      	cmp	r1, #0
 800e1c2:	b096      	sub	sp, #88	; 0x58
 800e1c4:	4614      	mov	r4, r2
 800e1c6:	461d      	mov	r5, r3
 800e1c8:	da08      	bge.n	800e1dc <__swhatbuf_r+0x24>
 800e1ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	602a      	str	r2, [r5, #0]
 800e1d2:	061a      	lsls	r2, r3, #24
 800e1d4:	d410      	bmi.n	800e1f8 <__swhatbuf_r+0x40>
 800e1d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1da:	e00e      	b.n	800e1fa <__swhatbuf_r+0x42>
 800e1dc:	466a      	mov	r2, sp
 800e1de:	f000 f951 	bl	800e484 <_fstat_r>
 800e1e2:	2800      	cmp	r0, #0
 800e1e4:	dbf1      	blt.n	800e1ca <__swhatbuf_r+0x12>
 800e1e6:	9a01      	ldr	r2, [sp, #4]
 800e1e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e1ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e1f0:	425a      	negs	r2, r3
 800e1f2:	415a      	adcs	r2, r3
 800e1f4:	602a      	str	r2, [r5, #0]
 800e1f6:	e7ee      	b.n	800e1d6 <__swhatbuf_r+0x1e>
 800e1f8:	2340      	movs	r3, #64	; 0x40
 800e1fa:	2000      	movs	r0, #0
 800e1fc:	6023      	str	r3, [r4, #0]
 800e1fe:	b016      	add	sp, #88	; 0x58
 800e200:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e204 <__smakebuf_r>:
 800e204:	898b      	ldrh	r3, [r1, #12]
 800e206:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e208:	079d      	lsls	r5, r3, #30
 800e20a:	4606      	mov	r6, r0
 800e20c:	460c      	mov	r4, r1
 800e20e:	d507      	bpl.n	800e220 <__smakebuf_r+0x1c>
 800e210:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e214:	6023      	str	r3, [r4, #0]
 800e216:	6123      	str	r3, [r4, #16]
 800e218:	2301      	movs	r3, #1
 800e21a:	6163      	str	r3, [r4, #20]
 800e21c:	b002      	add	sp, #8
 800e21e:	bd70      	pop	{r4, r5, r6, pc}
 800e220:	ab01      	add	r3, sp, #4
 800e222:	466a      	mov	r2, sp
 800e224:	f7ff ffc8 	bl	800e1b8 <__swhatbuf_r>
 800e228:	9900      	ldr	r1, [sp, #0]
 800e22a:	4605      	mov	r5, r0
 800e22c:	4630      	mov	r0, r6
 800e22e:	f7ff f9db 	bl	800d5e8 <_malloc_r>
 800e232:	b948      	cbnz	r0, 800e248 <__smakebuf_r+0x44>
 800e234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e238:	059a      	lsls	r2, r3, #22
 800e23a:	d4ef      	bmi.n	800e21c <__smakebuf_r+0x18>
 800e23c:	f023 0303 	bic.w	r3, r3, #3
 800e240:	f043 0302 	orr.w	r3, r3, #2
 800e244:	81a3      	strh	r3, [r4, #12]
 800e246:	e7e3      	b.n	800e210 <__smakebuf_r+0xc>
 800e248:	4b0d      	ldr	r3, [pc, #52]	; (800e280 <__smakebuf_r+0x7c>)
 800e24a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e24c:	89a3      	ldrh	r3, [r4, #12]
 800e24e:	6020      	str	r0, [r4, #0]
 800e250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e254:	81a3      	strh	r3, [r4, #12]
 800e256:	9b00      	ldr	r3, [sp, #0]
 800e258:	6163      	str	r3, [r4, #20]
 800e25a:	9b01      	ldr	r3, [sp, #4]
 800e25c:	6120      	str	r0, [r4, #16]
 800e25e:	b15b      	cbz	r3, 800e278 <__smakebuf_r+0x74>
 800e260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e264:	4630      	mov	r0, r6
 800e266:	f000 f91f 	bl	800e4a8 <_isatty_r>
 800e26a:	b128      	cbz	r0, 800e278 <__smakebuf_r+0x74>
 800e26c:	89a3      	ldrh	r3, [r4, #12]
 800e26e:	f023 0303 	bic.w	r3, r3, #3
 800e272:	f043 0301 	orr.w	r3, r3, #1
 800e276:	81a3      	strh	r3, [r4, #12]
 800e278:	89a0      	ldrh	r0, [r4, #12]
 800e27a:	4305      	orrs	r5, r0
 800e27c:	81a5      	strh	r5, [r4, #12]
 800e27e:	e7cd      	b.n	800e21c <__smakebuf_r+0x18>
 800e280:	0800e011 	.word	0x0800e011

0800e284 <memmove>:
 800e284:	4288      	cmp	r0, r1
 800e286:	b510      	push	{r4, lr}
 800e288:	eb01 0402 	add.w	r4, r1, r2
 800e28c:	d902      	bls.n	800e294 <memmove+0x10>
 800e28e:	4284      	cmp	r4, r0
 800e290:	4623      	mov	r3, r4
 800e292:	d807      	bhi.n	800e2a4 <memmove+0x20>
 800e294:	1e43      	subs	r3, r0, #1
 800e296:	42a1      	cmp	r1, r4
 800e298:	d008      	beq.n	800e2ac <memmove+0x28>
 800e29a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e29e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2a2:	e7f8      	b.n	800e296 <memmove+0x12>
 800e2a4:	4402      	add	r2, r0
 800e2a6:	4601      	mov	r1, r0
 800e2a8:	428a      	cmp	r2, r1
 800e2aa:	d100      	bne.n	800e2ae <memmove+0x2a>
 800e2ac:	bd10      	pop	{r4, pc}
 800e2ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2b6:	e7f7      	b.n	800e2a8 <memmove+0x24>

0800e2b8 <__malloc_lock>:
 800e2b8:	4801      	ldr	r0, [pc, #4]	; (800e2c0 <__malloc_lock+0x8>)
 800e2ba:	f7ff bf7b 	b.w	800e1b4 <__retarget_lock_acquire_recursive>
 800e2be:	bf00      	nop
 800e2c0:	20000728 	.word	0x20000728

0800e2c4 <__malloc_unlock>:
 800e2c4:	4801      	ldr	r0, [pc, #4]	; (800e2cc <__malloc_unlock+0x8>)
 800e2c6:	f7ff bf76 	b.w	800e1b6 <__retarget_lock_release_recursive>
 800e2ca:	bf00      	nop
 800e2cc:	20000728 	.word	0x20000728

0800e2d0 <_realloc_r>:
 800e2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2d4:	4680      	mov	r8, r0
 800e2d6:	4614      	mov	r4, r2
 800e2d8:	460e      	mov	r6, r1
 800e2da:	b921      	cbnz	r1, 800e2e6 <_realloc_r+0x16>
 800e2dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e0:	4611      	mov	r1, r2
 800e2e2:	f7ff b981 	b.w	800d5e8 <_malloc_r>
 800e2e6:	b92a      	cbnz	r2, 800e2f4 <_realloc_r+0x24>
 800e2e8:	f7ff f912 	bl	800d510 <_free_r>
 800e2ec:	4625      	mov	r5, r4
 800e2ee:	4628      	mov	r0, r5
 800e2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f4:	f000 f8fa 	bl	800e4ec <_malloc_usable_size_r>
 800e2f8:	4284      	cmp	r4, r0
 800e2fa:	4607      	mov	r7, r0
 800e2fc:	d802      	bhi.n	800e304 <_realloc_r+0x34>
 800e2fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e302:	d812      	bhi.n	800e32a <_realloc_r+0x5a>
 800e304:	4621      	mov	r1, r4
 800e306:	4640      	mov	r0, r8
 800e308:	f7ff f96e 	bl	800d5e8 <_malloc_r>
 800e30c:	4605      	mov	r5, r0
 800e30e:	2800      	cmp	r0, #0
 800e310:	d0ed      	beq.n	800e2ee <_realloc_r+0x1e>
 800e312:	42bc      	cmp	r4, r7
 800e314:	4622      	mov	r2, r4
 800e316:	4631      	mov	r1, r6
 800e318:	bf28      	it	cs
 800e31a:	463a      	movcs	r2, r7
 800e31c:	f7fe fc12 	bl	800cb44 <memcpy>
 800e320:	4631      	mov	r1, r6
 800e322:	4640      	mov	r0, r8
 800e324:	f7ff f8f4 	bl	800d510 <_free_r>
 800e328:	e7e1      	b.n	800e2ee <_realloc_r+0x1e>
 800e32a:	4635      	mov	r5, r6
 800e32c:	e7df      	b.n	800e2ee <_realloc_r+0x1e>

0800e32e <_raise_r>:
 800e32e:	291f      	cmp	r1, #31
 800e330:	b538      	push	{r3, r4, r5, lr}
 800e332:	4604      	mov	r4, r0
 800e334:	460d      	mov	r5, r1
 800e336:	d904      	bls.n	800e342 <_raise_r+0x14>
 800e338:	2316      	movs	r3, #22
 800e33a:	6003      	str	r3, [r0, #0]
 800e33c:	f04f 30ff 	mov.w	r0, #4294967295
 800e340:	bd38      	pop	{r3, r4, r5, pc}
 800e342:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e344:	b112      	cbz	r2, 800e34c <_raise_r+0x1e>
 800e346:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e34a:	b94b      	cbnz	r3, 800e360 <_raise_r+0x32>
 800e34c:	4620      	mov	r0, r4
 800e34e:	f000 f831 	bl	800e3b4 <_getpid_r>
 800e352:	462a      	mov	r2, r5
 800e354:	4601      	mov	r1, r0
 800e356:	4620      	mov	r0, r4
 800e358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e35c:	f000 b818 	b.w	800e390 <_kill_r>
 800e360:	2b01      	cmp	r3, #1
 800e362:	d00a      	beq.n	800e37a <_raise_r+0x4c>
 800e364:	1c59      	adds	r1, r3, #1
 800e366:	d103      	bne.n	800e370 <_raise_r+0x42>
 800e368:	2316      	movs	r3, #22
 800e36a:	6003      	str	r3, [r0, #0]
 800e36c:	2001      	movs	r0, #1
 800e36e:	e7e7      	b.n	800e340 <_raise_r+0x12>
 800e370:	2400      	movs	r4, #0
 800e372:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e376:	4628      	mov	r0, r5
 800e378:	4798      	blx	r3
 800e37a:	2000      	movs	r0, #0
 800e37c:	e7e0      	b.n	800e340 <_raise_r+0x12>
	...

0800e380 <raise>:
 800e380:	4b02      	ldr	r3, [pc, #8]	; (800e38c <raise+0xc>)
 800e382:	4601      	mov	r1, r0
 800e384:	6818      	ldr	r0, [r3, #0]
 800e386:	f7ff bfd2 	b.w	800e32e <_raise_r>
 800e38a:	bf00      	nop
 800e38c:	200001ac 	.word	0x200001ac

0800e390 <_kill_r>:
 800e390:	b538      	push	{r3, r4, r5, lr}
 800e392:	4d07      	ldr	r5, [pc, #28]	; (800e3b0 <_kill_r+0x20>)
 800e394:	2300      	movs	r3, #0
 800e396:	4604      	mov	r4, r0
 800e398:	4608      	mov	r0, r1
 800e39a:	4611      	mov	r1, r2
 800e39c:	602b      	str	r3, [r5, #0]
 800e39e:	f7f3 ffb5 	bl	800230c <_kill>
 800e3a2:	1c43      	adds	r3, r0, #1
 800e3a4:	d102      	bne.n	800e3ac <_kill_r+0x1c>
 800e3a6:	682b      	ldr	r3, [r5, #0]
 800e3a8:	b103      	cbz	r3, 800e3ac <_kill_r+0x1c>
 800e3aa:	6023      	str	r3, [r4, #0]
 800e3ac:	bd38      	pop	{r3, r4, r5, pc}
 800e3ae:	bf00      	nop
 800e3b0:	2000072c 	.word	0x2000072c

0800e3b4 <_getpid_r>:
 800e3b4:	f7f3 bfa2 	b.w	80022fc <_getpid>

0800e3b8 <__sread>:
 800e3b8:	b510      	push	{r4, lr}
 800e3ba:	460c      	mov	r4, r1
 800e3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3c0:	f000 f89c 	bl	800e4fc <_read_r>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	bfab      	itete	ge
 800e3c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3ca:	89a3      	ldrhlt	r3, [r4, #12]
 800e3cc:	181b      	addge	r3, r3, r0
 800e3ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3d2:	bfac      	ite	ge
 800e3d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3d6:	81a3      	strhlt	r3, [r4, #12]
 800e3d8:	bd10      	pop	{r4, pc}

0800e3da <__swrite>:
 800e3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3de:	461f      	mov	r7, r3
 800e3e0:	898b      	ldrh	r3, [r1, #12]
 800e3e2:	05db      	lsls	r3, r3, #23
 800e3e4:	4605      	mov	r5, r0
 800e3e6:	460c      	mov	r4, r1
 800e3e8:	4616      	mov	r6, r2
 800e3ea:	d505      	bpl.n	800e3f8 <__swrite+0x1e>
 800e3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3f0:	2302      	movs	r3, #2
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f000 f868 	bl	800e4c8 <_lseek_r>
 800e3f8:	89a3      	ldrh	r3, [r4, #12]
 800e3fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e402:	81a3      	strh	r3, [r4, #12]
 800e404:	4632      	mov	r2, r6
 800e406:	463b      	mov	r3, r7
 800e408:	4628      	mov	r0, r5
 800e40a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e40e:	f000 b817 	b.w	800e440 <_write_r>

0800e412 <__sseek>:
 800e412:	b510      	push	{r4, lr}
 800e414:	460c      	mov	r4, r1
 800e416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e41a:	f000 f855 	bl	800e4c8 <_lseek_r>
 800e41e:	1c43      	adds	r3, r0, #1
 800e420:	89a3      	ldrh	r3, [r4, #12]
 800e422:	bf15      	itete	ne
 800e424:	6560      	strne	r0, [r4, #84]	; 0x54
 800e426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e42a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e42e:	81a3      	strheq	r3, [r4, #12]
 800e430:	bf18      	it	ne
 800e432:	81a3      	strhne	r3, [r4, #12]
 800e434:	bd10      	pop	{r4, pc}

0800e436 <__sclose>:
 800e436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e43a:	f000 b813 	b.w	800e464 <_close_r>
	...

0800e440 <_write_r>:
 800e440:	b538      	push	{r3, r4, r5, lr}
 800e442:	4d07      	ldr	r5, [pc, #28]	; (800e460 <_write_r+0x20>)
 800e444:	4604      	mov	r4, r0
 800e446:	4608      	mov	r0, r1
 800e448:	4611      	mov	r1, r2
 800e44a:	2200      	movs	r2, #0
 800e44c:	602a      	str	r2, [r5, #0]
 800e44e:	461a      	mov	r2, r3
 800e450:	f7f3 ff93 	bl	800237a <_write>
 800e454:	1c43      	adds	r3, r0, #1
 800e456:	d102      	bne.n	800e45e <_write_r+0x1e>
 800e458:	682b      	ldr	r3, [r5, #0]
 800e45a:	b103      	cbz	r3, 800e45e <_write_r+0x1e>
 800e45c:	6023      	str	r3, [r4, #0]
 800e45e:	bd38      	pop	{r3, r4, r5, pc}
 800e460:	2000072c 	.word	0x2000072c

0800e464 <_close_r>:
 800e464:	b538      	push	{r3, r4, r5, lr}
 800e466:	4d06      	ldr	r5, [pc, #24]	; (800e480 <_close_r+0x1c>)
 800e468:	2300      	movs	r3, #0
 800e46a:	4604      	mov	r4, r0
 800e46c:	4608      	mov	r0, r1
 800e46e:	602b      	str	r3, [r5, #0]
 800e470:	f7f3 ff9f 	bl	80023b2 <_close>
 800e474:	1c43      	adds	r3, r0, #1
 800e476:	d102      	bne.n	800e47e <_close_r+0x1a>
 800e478:	682b      	ldr	r3, [r5, #0]
 800e47a:	b103      	cbz	r3, 800e47e <_close_r+0x1a>
 800e47c:	6023      	str	r3, [r4, #0]
 800e47e:	bd38      	pop	{r3, r4, r5, pc}
 800e480:	2000072c 	.word	0x2000072c

0800e484 <_fstat_r>:
 800e484:	b538      	push	{r3, r4, r5, lr}
 800e486:	4d07      	ldr	r5, [pc, #28]	; (800e4a4 <_fstat_r+0x20>)
 800e488:	2300      	movs	r3, #0
 800e48a:	4604      	mov	r4, r0
 800e48c:	4608      	mov	r0, r1
 800e48e:	4611      	mov	r1, r2
 800e490:	602b      	str	r3, [r5, #0]
 800e492:	f7f3 ff9a 	bl	80023ca <_fstat>
 800e496:	1c43      	adds	r3, r0, #1
 800e498:	d102      	bne.n	800e4a0 <_fstat_r+0x1c>
 800e49a:	682b      	ldr	r3, [r5, #0]
 800e49c:	b103      	cbz	r3, 800e4a0 <_fstat_r+0x1c>
 800e49e:	6023      	str	r3, [r4, #0]
 800e4a0:	bd38      	pop	{r3, r4, r5, pc}
 800e4a2:	bf00      	nop
 800e4a4:	2000072c 	.word	0x2000072c

0800e4a8 <_isatty_r>:
 800e4a8:	b538      	push	{r3, r4, r5, lr}
 800e4aa:	4d06      	ldr	r5, [pc, #24]	; (800e4c4 <_isatty_r+0x1c>)
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	4608      	mov	r0, r1
 800e4b2:	602b      	str	r3, [r5, #0]
 800e4b4:	f7f3 ff99 	bl	80023ea <_isatty>
 800e4b8:	1c43      	adds	r3, r0, #1
 800e4ba:	d102      	bne.n	800e4c2 <_isatty_r+0x1a>
 800e4bc:	682b      	ldr	r3, [r5, #0]
 800e4be:	b103      	cbz	r3, 800e4c2 <_isatty_r+0x1a>
 800e4c0:	6023      	str	r3, [r4, #0]
 800e4c2:	bd38      	pop	{r3, r4, r5, pc}
 800e4c4:	2000072c 	.word	0x2000072c

0800e4c8 <_lseek_r>:
 800e4c8:	b538      	push	{r3, r4, r5, lr}
 800e4ca:	4d07      	ldr	r5, [pc, #28]	; (800e4e8 <_lseek_r+0x20>)
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	4608      	mov	r0, r1
 800e4d0:	4611      	mov	r1, r2
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	602a      	str	r2, [r5, #0]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	f7f3 ff92 	bl	8002400 <_lseek>
 800e4dc:	1c43      	adds	r3, r0, #1
 800e4de:	d102      	bne.n	800e4e6 <_lseek_r+0x1e>
 800e4e0:	682b      	ldr	r3, [r5, #0]
 800e4e2:	b103      	cbz	r3, 800e4e6 <_lseek_r+0x1e>
 800e4e4:	6023      	str	r3, [r4, #0]
 800e4e6:	bd38      	pop	{r3, r4, r5, pc}
 800e4e8:	2000072c 	.word	0x2000072c

0800e4ec <_malloc_usable_size_r>:
 800e4ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4f0:	1f18      	subs	r0, r3, #4
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	bfbc      	itt	lt
 800e4f6:	580b      	ldrlt	r3, [r1, r0]
 800e4f8:	18c0      	addlt	r0, r0, r3
 800e4fa:	4770      	bx	lr

0800e4fc <_read_r>:
 800e4fc:	b538      	push	{r3, r4, r5, lr}
 800e4fe:	4d07      	ldr	r5, [pc, #28]	; (800e51c <_read_r+0x20>)
 800e500:	4604      	mov	r4, r0
 800e502:	4608      	mov	r0, r1
 800e504:	4611      	mov	r1, r2
 800e506:	2200      	movs	r2, #0
 800e508:	602a      	str	r2, [r5, #0]
 800e50a:	461a      	mov	r2, r3
 800e50c:	f7f3 ff18 	bl	8002340 <_read>
 800e510:	1c43      	adds	r3, r0, #1
 800e512:	d102      	bne.n	800e51a <_read_r+0x1e>
 800e514:	682b      	ldr	r3, [r5, #0]
 800e516:	b103      	cbz	r3, 800e51a <_read_r+0x1e>
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	bd38      	pop	{r3, r4, r5, pc}
 800e51c:	2000072c 	.word	0x2000072c

0800e520 <_init>:
 800e520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e522:	bf00      	nop
 800e524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e526:	bc08      	pop	{r3}
 800e528:	469e      	mov	lr, r3
 800e52a:	4770      	bx	lr

0800e52c <_fini>:
 800e52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e52e:	bf00      	nop
 800e530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e532:	bc08      	pop	{r3}
 800e534:	469e      	mov	lr, r3
 800e536:	4770      	bx	lr
