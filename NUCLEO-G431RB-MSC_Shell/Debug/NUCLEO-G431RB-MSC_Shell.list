
NUCLEO-G431RB-MSC_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e740  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  0800e920  0800e920  0001e920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef10  0800ef10  000203e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef10  0800ef10  0001ef10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef18  0800ef18  000203e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef18  0800ef18  0001ef18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef1c  0800ef1c  0001ef1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e0  20000000  0800ef20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  200003e0  0800f300  000203e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  0800f300  00020820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2dd  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e68  00000000  00000000  0003a6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0003d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  0003eb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217d8  00000000  00000000  0003ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cf7  00000000  00000000  000617a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd8a5  00000000  00000000  0007949f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156d44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007454  00000000  00000000  00156d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003e0 	.word	0x200003e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e908 	.word	0x0800e908

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003e4 	.word	0x200003e4
 800021c:	0800e908 	.word	0x0800e908

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9aa 	b.w	8001064 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468e      	mov	lr, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14d      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da2:	428a      	cmp	r2, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	d969      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b152      	cbz	r2, 8000dc4 <__udivmoddi4+0x30>
 8000dae:	fa01 f302 	lsl.w	r3, r1, r2
 8000db2:	f1c2 0120 	rsb	r1, r2, #32
 8000db6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	fbbe f6f8 	udiv	r6, lr, r8
 8000dce:	fa1f f78c 	uxth.w	r7, ip
 8000dd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dda:	fb06 f107 	mul.w	r1, r6, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dea:	f080 811f 	bcs.w	800102c <__udivmoddi4+0x298>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 811c 	bls.w	800102c <__udivmoddi4+0x298>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb00 f707 	mul.w	r7, r0, r7
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x92>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e18:	f080 810a 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	f240 8107 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	b11d      	cbz	r5, 8000e38 <__udivmoddi4+0xa4>
 8000e30:	40d4      	lsrs	r4, r2
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c5 4300 	strd	r4, r3, [r5]
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80ef 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	469e      	mov	lr, r3
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0e0      	beq.n	8000e38 <__udivmoddi4+0xa4>
 8000e76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e7a:	e7dd      	b.n	8000e38 <__udivmoddi4+0xa4>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8092 	bne.w	8000fae <__udivmoddi4+0x21a>
 8000e8a:	eba1 010c 	sub.w	r1, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	0c20      	lsrs	r0, r4, #16
 8000e9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ea2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	4288      	cmp	r0, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ecc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x9a>
 8000ef4:	f1c6 0720 	rsb	r7, r6, #32
 8000ef8:	40b3      	lsls	r3, r6
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40f9      	lsrs	r1, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f306 	lsl.w	r3, r0, r6
 8000f16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 1118 	mls	r1, r9, r8, r1
 8000f24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f54:	fb09 1110 	mls	r1, r9, r0, r1
 8000f58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	458e      	cmp	lr, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	458e      	cmp	lr, r1
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba1 010e 	sub.w	r1, r1, lr
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb61 010e 	sbc.w	r1, r1, lr
 8000f96:	fa01 f707 	lsl.w	r7, r1, r7
 8000f9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f9e:	40f1      	lsrs	r1, r6
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	f1c2 0320 	rsb	r3, r2, #32
 8000fb2:	40d8      	lsrs	r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd0:	0c0b      	lsrs	r3, r1, #16
 8000fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	429e      	cmp	r6, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ffc:	fb07 3316 	mls	r3, r7, r6, r3
 8001000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001004:	fb06 f30e 	mul.w	r3, r6, lr
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0101 	adds.w	r1, ip, r1
 8001010:	f106 38ff 	add.w	r8, r6, #4294967295
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	428b      	cmp	r3, r1
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3e02      	subs	r6, #2
 800101c:	4461      	add	r1, ip
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e705      	b.n	8000e38 <__udivmoddi4+0xa4>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e3      	b.n	8000df8 <__udivmoddi4+0x64>
 8001030:	4618      	mov	r0, r3
 8001032:	e6f8      	b.n	8000e26 <__udivmoddi4+0x92>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4646      	mov	r6, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4640      	mov	r0, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4461      	add	r1, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4630      	mov	r0, r6
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <ISO_RESET>:
 * using a for cycle to delay the operation
 * @param None
 * @retval None
 */
void ISO_RESET()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2102      	movs	r1, #2
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <ISO_RESET+0x38>)
 8001072:	f003 ffd3 	bl	800501c <HAL_GPIO_WritePin>
	for(i=0; i<ISO_RESET_TIME; i++)
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <ISO_RESET+0x3c>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e004      	b.n	8001088 <ISO_RESET+0x20>
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <ISO_RESET+0x3c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <ISO_RESET+0x3c>)
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <ISO_RESET+0x3c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b45      	cmp	r3, #69	; 0x45
 800108e:	ddf6      	ble.n	800107e <ISO_RESET+0x16>
	{
		//wait for at least 2microSec
	}
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2102      	movs	r1, #2
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <ISO_RESET+0x38>)
 8001096:	f003 ffc1 	bl	800501c <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	48000800 	.word	0x48000800
 80010a4:	200006f0 	.word	0x200006f0

080010a8 <StartPWM>:
 * after ISO_RESET command the PWM timers are started to command the power supply and then the motor
 * @param None
 * @retval None
 */
void StartPWM()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	//Timers start
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010ac:	2100      	movs	r1, #0
 80010ae:	4808      	ldr	r0, [pc, #32]	; (80010d0 <StartPWM+0x28>)
 80010b0:	f005 f94c 	bl	800634c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80010b4:	2104      	movs	r1, #4
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <StartPWM+0x28>)
 80010b8:	f005 f948 	bl	800634c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80010bc:	2100      	movs	r1, #0
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <StartPWM+0x28>)
 80010c0:	f006 fc2c 	bl	800791c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80010c4:	2104      	movs	r1, #4
 80010c6:	4802      	ldr	r0, [pc, #8]	; (80010d0 <StartPWM+0x28>)
 80010c8:	f006 fc28 	bl	800791c <HAL_TIMEx_PWMN_Start>
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200004c8 	.word	0x200004c8

080010d4 <StopPWM>:
 * PWM timers are stopped and then the motor is stopped
 * @param None
 * @retval None
 */
void StopPWM()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	//Timers stop
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80010d8:	2100      	movs	r1, #0
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <StopPWM+0x28>)
 80010dc:	f005 fa36 	bl	800654c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80010e0:	2104      	movs	r1, #4
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <StopPWM+0x28>)
 80010e4:	f005 fa32 	bl	800654c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	4804      	ldr	r0, [pc, #16]	; (80010fc <StopPWM+0x28>)
 80010ec:	f006 fcca 	bl	8007a84 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80010f0:	2104      	movs	r1, #4
 80010f2:	4802      	ldr	r0, [pc, #8]	; (80010fc <StopPWM+0x28>)
 80010f4:	f006 fcc6 	bl	8007a84 <HAL_TIMEx_PWMN_Stop>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200004c8 	.word	0x200004c8

08001100 <DutyCycleFuncDef>:
 * @note   This function converts raw voltage data from ADC to current value to be used in the controller
 * @param int
 * @retval None
 */
void DutyCycleFuncDef(int dutycycleIN)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	pulse=(dutycycleIN*TIM1_ARR)/100;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 800110e:	fb02 f303 	mul.w	r3, r2, r3
 8001112:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <DutyCycleFuncDef+0x44>)
 8001114:	fb82 1203 	smull	r1, r2, r2, r3
 8001118:	1152      	asrs	r2, r2, #5
 800111a:	17db      	asrs	r3, r3, #31
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <DutyCycleFuncDef+0x48>)
 8001120:	6013      	str	r3, [r2, #0]
	TIM1->CCR1=pulse;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <DutyCycleFuncDef+0x48>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <DutyCycleFuncDef+0x4c>)
 8001128:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=TIM1_ARR-pulse;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <DutyCycleFuncDef+0x48>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f5c3 52a6 	rsb	r2, r3, #5312	; 0x14c0
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <DutyCycleFuncDef+0x4c>)
 8001134:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	51eb851f 	.word	0x51eb851f
 8001148:	2000068c 	.word	0x2000068c
 800114c:	40012c00 	.word	0x40012c00

08001150 <CurrentConversion>:
 * @note   This function converts raw voltage data from ADC to current value to be used in the controller
 * @param None
 * @retval float
 */
float CurrentConversion()
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit(&huart2, "DMA current recieved\r\n ", sizeof("DMA current recieved\r\n"), HAL_MAX_DELAY);
	Raw_Data_Sum=0;
 8001154:	4b44      	ldr	r3, [pc, #272]	; (8001268 <CurrentConversion+0x118>)
 8001156:	2200      	movs	r2, #0
 8001158:	801a      	strh	r2, [r3, #0]
	for(i=0;i<10;i++){
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <CurrentConversion+0x11c>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e00f      	b.n	8001182 <CurrentConversion+0x32>
		Raw_Data_Sum=Raw_Data_Sum+ADC_buffer[i];
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <CurrentConversion+0x11c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a42      	ldr	r2, [pc, #264]	; (8001270 <CurrentConversion+0x120>)
 8001168:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800116c:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <CurrentConversion+0x118>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	4413      	add	r3, r2
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <CurrentConversion+0x118>)
 8001176:	801a      	strh	r2, [r3, #0]
	for(i=0;i<10;i++){
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <CurrentConversion+0x11c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a3b      	ldr	r2, [pc, #236]	; (800126c <CurrentConversion+0x11c>)
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	4b3a      	ldr	r3, [pc, #232]	; (800126c <CurrentConversion+0x11c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b09      	cmp	r3, #9
 8001188:	ddeb      	ble.n	8001162 <CurrentConversion+0x12>
	}
	Average_Voltage=Raw_Data_Sum/ADC_BUFF_SIZE;
 800118a:	4b37      	ldr	r3, [pc, #220]	; (8001268 <CurrentConversion+0x118>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	4a39      	ldr	r2, [pc, #228]	; (8001274 <CurrentConversion+0x124>)
 8001190:	fba2 2303 	umull	r2, r3, r2, r3
 8001194:	08db      	lsrs	r3, r3, #3
 8001196:	b29b      	uxth	r3, r3
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a0:	4b35      	ldr	r3, [pc, #212]	; (8001278 <CurrentConversion+0x128>)
 80011a2:	edc3 7a00 	vstr	s15, [r3]
	Converted_Average_Voltage=(Average_Voltage/4095.0)*3.3;
 80011a6:	4b34      	ldr	r3, [pc, #208]	; (8001278 <CurrentConversion+0x128>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fa04 	bl	80005b8 <__aeabi_f2d>
 80011b0:	a329      	add	r3, pc, #164	; (adr r3, 8001258 <CurrentConversion+0x108>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff fb81 	bl	80008bc <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	a327      	add	r3, pc, #156	; (adr r3, 8001260 <CurrentConversion+0x110>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff fa4e 	bl	8000668 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fd40 	bl	8000c58 <__aeabi_d2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a28      	ldr	r2, [pc, #160]	; (800127c <CurrentConversion+0x12c>)
 80011dc:	6013      	str	r3, [r2, #0]
	Sensed_Current_Value=12*(Converted_Average_Voltage -2.5); //usually 12 but for this acheur is 2,25 (3x1,5/2)
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <CurrentConversion+0x12c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9e8 	bl	80005b8 <__aeabi_f2d>
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <CurrentConversion+0x130>)
 80011ee:	f7ff f883 	bl	80002f8 <__aeabi_dsub>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <CurrentConversion+0x134>)
 8001200:	f7ff fa32 	bl	8000668 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fd24 	bl	8000c58 <__aeabi_d2f>
 8001210:	4603      	mov	r3, r0
 8001212:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <CurrentConversion+0x138>)
 8001214:	6013      	str	r3, [r2, #0]
	sprintf(Current_Sensed, "current sensed is %.3f \r\n", Sensed_Current_Value);
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <CurrentConversion+0x138>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f9cc 	bl	80005b8 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4919      	ldr	r1, [pc, #100]	; (800128c <CurrentConversion+0x13c>)
 8001226:	481a      	ldr	r0, [pc, #104]	; (8001290 <CurrentConversion+0x140>)
 8001228:	f009 fd14 	bl	800ac54 <siprintf>
	//for debug - prints current value
	if(k==100000){
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <CurrentConversion+0x144>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a19      	ldr	r2, [pc, #100]	; (8001298 <CurrentConversion+0x148>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d109      	bne.n	800124a <CurrentConversion+0xfa>
		HAL_UART_Transmit(&huart2, Current_Sensed, sizeof(Current_Sensed), HAL_MAX_DELAY);
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	2232      	movs	r2, #50	; 0x32
 800123c:	4914      	ldr	r1, [pc, #80]	; (8001290 <CurrentConversion+0x140>)
 800123e:	4817      	ldr	r0, [pc, #92]	; (800129c <CurrentConversion+0x14c>)
 8001240:	f006 fe5b 	bl	8007efa <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart2, ADC_buffer, sizeof(ADC_buffer), HAL_MAX_DELAY);
		k=0;
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <CurrentConversion+0x144>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
	}
	return Sensed_Current_Value;
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <CurrentConversion+0x138>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	ee07 3a90 	vmov	s15, r3
}
 8001252:	eeb0 0a67 	vmov.f32	s0, s15
 8001256:	bd80      	pop	{r7, pc}
 8001258:	00000000 	.word	0x00000000
 800125c:	40affe00 	.word	0x40affe00
 8001260:	66666666 	.word	0x66666666
 8001264:	400a6666 	.word	0x400a6666
 8001268:	200006f4 	.word	0x200006f4
 800126c:	200006f0 	.word	0x200006f0
 8001270:	200006dc 	.word	0x200006dc
 8001274:	cccccccd 	.word	0xcccccccd
 8001278:	200006f8 	.word	0x200006f8
 800127c:	200006fc 	.word	0x200006fc
 8001280:	40040000 	.word	0x40040000
 8001284:	40280000 	.word	0x40280000
 8001288:	20000700 	.word	0x20000700
 800128c:	0800e920 	.word	0x0800e920
 8001290:	2000073c 	.word	0x2000073c
 8001294:	20000778 	.word	0x20000778
 8001298:	000186a0 	.word	0x000186a0
 800129c:	200005f8 	.word	0x200005f8

080012a0 <SpeedCalculation>:
 * @note   This function converts encoder counter value in speed in rad/sec
 * @param int
 * @retval float
 */
float SpeedCalculation(uint32_t counter)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	speed = 2 * 3.14 * (((float)counter-HALF_COUNTER_ENCODER)/RISES_PER_TURN) * SAMPLING_FREQ_SPEED;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001318 <SpeedCalculation+0x78>
 80012b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ba:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800131c <SpeedCalculation+0x7c>
 80012be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012c2:	ee16 0a90 	vmov	r0, s13
 80012c6:	f7ff f977 	bl	80005b8 <__aeabi_f2d>
 80012ca:	a311      	add	r3, pc, #68	; (adr r3, 8001310 <SpeedCalculation+0x70>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff f9ca 	bl	8000668 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <SpeedCalculation+0x80>)
 80012e2:	f7ff f9c1 	bl	8000668 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fcb3 	bl	8000c58 <__aeabi_d2f>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <SpeedCalculation+0x84>)
 80012f6:	6013      	str	r3, [r2, #0]
	return speed;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <SpeedCalculation+0x84>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	ee07 3a90 	vmov	s15, r3
}
 8001300:	eeb0 0a67 	vmov.f32	s0, s15
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	f3af 8000 	nop.w
 8001310:	51eb851f 	.word	0x51eb851f
 8001314:	40191eb8 	.word	0x40191eb8
 8001318:	46fffe00 	.word	0x46fffe00
 800131c:	45800000 	.word	0x45800000
 8001320:	40590000 	.word	0x40590000
 8001324:	200007b8 	.word	0x200007b8

08001328 <CurrentPI>:
 * are defined values. The anti wind-up is done as well in the controller. Current values are defined globally and used in the function.
 * @param float
 * @retval int
 */
int CurrentPI(float CurrentReq)
{
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	ed87 0a01 	vstr	s0, [r7, #4]
	int alpha;

	//new error calculation
	errorI[1]=CurrentReq-CurrentValueFloat;
 8001332:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <CurrentPI+0x108>)
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	ed97 7a01 	vldr	s14, [r7, #4]
 800133c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001340:	4b3c      	ldr	r3, [pc, #240]	; (8001434 <CurrentPI+0x10c>)
 8001342:	edc3 7a01 	vstr	s15, [r3, #4]

	//proportional and integral alpha calculation
	alphaP=KpC*errorI[1];
 8001346:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <CurrentPI+0x10c>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f934 	bl	80005b8 <__aeabi_f2d>
 8001350:	a333      	add	r3, pc, #204	; (adr r3, 8001420 <CurrentPI+0xf8>)
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	f7ff f987 	bl	8000668 <__aeabi_dmul>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fc79 	bl	8000c58 <__aeabi_d2f>
 8001366:	4603      	mov	r3, r0
 8001368:	4a33      	ldr	r2, [pc, #204]	; (8001438 <CurrentPI+0x110>)
 800136a:	6013      	str	r3, [r2, #0]
	alphaI[1]=alphaI[0]+((KiC/(2*SAMPLING_FREQ_CURRENT))*(errorI[1]+errorI[0]));
 800136c:	4b33      	ldr	r3, [pc, #204]	; (800143c <CurrentPI+0x114>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f921 	bl	80005b8 <__aeabi_f2d>
 8001376:	4604      	mov	r4, r0
 8001378:	460d      	mov	r5, r1
 800137a:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <CurrentPI+0x10c>)
 800137c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001380:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <CurrentPI+0x10c>)
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138a:	ee17 0a90 	vmov	r0, s15
 800138e:	f7ff f913 	bl	80005b8 <__aeabi_f2d>
 8001392:	a325      	add	r3, pc, #148	; (adr r3, 8001428 <CurrentPI+0x100>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff f966 	bl	8000668 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4620      	mov	r0, r4
 80013a2:	4629      	mov	r1, r5
 80013a4:	f7fe ffaa 	bl	80002fc <__adddf3>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fc52 	bl	8000c58 <__aeabi_d2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a21      	ldr	r2, [pc, #132]	; (800143c <CurrentPI+0x114>)
 80013b8:	6053      	str	r3, [r2, #4]
	alpha= 100*(alphaP+alphaI[1]);
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <CurrentPI+0x114>)
 80013bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <CurrentPI+0x110>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ca:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001440 <CurrentPI+0x118>
 80013ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d6:	ee17 3a90 	vmov	r3, s15
 80013da:	60fb      	str	r3, [r7, #12]

	//error and alpha values storage
	errorI[0]=errorI[1];
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <CurrentPI+0x10c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <CurrentPI+0x10c>)
 80013e2:	6013      	str	r3, [r2, #0]
	alphaI[0]=alphaI[1];
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <CurrentPI+0x114>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a14      	ldr	r2, [pc, #80]	; (800143c <CurrentPI+0x114>)
 80013ea:	6013      	str	r3, [r2, #0]

	//anti wind-up
	if(alpha>100)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	dd06      	ble.n	8001400 <CurrentPI+0xd8>
	{
		alpha=100;
 80013f2:	2364      	movs	r3, #100	; 0x64
 80013f4:	60fb      	str	r3, [r7, #12]
		alphaI[0]=1;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <CurrentPI+0x114>)
 80013f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	e008      	b.n	8001412 <CurrentPI+0xea>
	}
	else if(alpha<0)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	da05      	bge.n	8001412 <CurrentPI+0xea>
	{
		alpha=0;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
		alphaI[0]=0;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <CurrentPI+0x114>)
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
	}
	return alpha;
 8001412:	68fb      	ldr	r3, [r7, #12]

}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bdb0      	pop	{r4, r5, r7, pc}
 800141c:	f3af 8000 	nop.w
 8001420:	b513f67c 	.word	0xb513f67c
 8001424:	3fa18c10 	.word	0x3fa18c10
 8001428:	ace29051 	.word	0xace29051
 800142c:	3f39cfd0 	.word	0x3f39cfd0
 8001430:	20000704 	.word	0x20000704
 8001434:	2000070c 	.word	0x2000070c
 8001438:	2000071c 	.word	0x2000071c
 800143c:	20000714 	.word	0x20000714
 8001440:	42c80000 	.word	0x42c80000

08001444 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b09e      	sub	sp, #120	; 0x78
 8001448:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	66bb      	str	r3, [r7, #104]	; 0x68
	//variable initialization
	oldCurrent=0;
 8001452:	4ba6      	ldr	r3, [pc, #664]	; (80016ec <main+0x2a8>)
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
	errorI[0]=0;
 800145a:	4ba5      	ldr	r3, [pc, #660]	; (80016f0 <main+0x2ac>)
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
	alphaI[0]=0.5;
 8001462:	4ba4      	ldr	r3, [pc, #656]	; (80016f4 <main+0x2b0>)
 8001464:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001468:	601a      	str	r2, [r3, #0]
	CurrentValueFloat=0;
 800146a:	4ba3      	ldr	r3, [pc, #652]	; (80016f8 <main+0x2b4>)
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
	errorS[0]=0;
 8001472:	4ba2      	ldr	r3, [pc, #648]	; (80016fc <main+0x2b8>)
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
	speedI[0]=0;
 800147a:	4ba1      	ldr	r3, [pc, #644]	; (8001700 <main+0x2bc>)
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001482:	f001 fa2e 	bl	80028e2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001486:	f000 facd 	bl	8001a24 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800148a:	f000 fdbf 	bl	800200c <MX_GPIO_Init>
	MX_DMA_Init();
 800148e:	f000 fd93 	bl	8001fb8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001492:	f000 fd45 	bl	8001f20 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001496:	f000 fb8b 	bl	8001bb0 <MX_TIM1_Init>
	MX_ADC1_Init();
 800149a:	f000 fb0f 	bl	8001abc <MX_ADC1_Init>
	MX_TIM8_Init();
 800149e:	f000 fceb 	bl	8001e78 <MX_TIM8_Init>
	MX_TIM3_Init();
 80014a2:	f000 fc45 	bl	8001d30 <MX_TIM3_Init>
	MX_TIM4_Init();
 80014a6:	f000 fc99 	bl	8001ddc <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2224      	movs	r2, #36	; 0x24
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f008 fd47 	bl	8009f44 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 80014b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ba:	2240      	movs	r2, #64	; 0x40
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f008 fd40 	bl	8009f44 <memset>
 80014c4:	4b8f      	ldr	r3, [pc, #572]	; (8001704 <main+0x2c0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	2100      	movs	r1, #0
 80014ce:	488e      	ldr	r0, [pc, #568]	; (8001708 <main+0x2c4>)
 80014d0:	f008 fd38 	bl	8009f44 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80014d4:	2201      	movs	r2, #1
 80014d6:	498b      	ldr	r1, [pc, #556]	; (8001704 <main+0x2c0>)
 80014d8:	488c      	ldr	r0, [pc, #560]	; (800170c <main+0x2c8>)
 80014da:	f006 fda5 	bl	8008028 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 80014de:	200a      	movs	r0, #10
 80014e0:	f001 fa36 	bl	8002950 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295
 80014e8:	2266      	movs	r2, #102	; 0x66
 80014ea:	4989      	ldr	r1, [pc, #548]	; (8001710 <main+0x2cc>)
 80014ec:	4887      	ldr	r0, [pc, #540]	; (800170c <main+0x2c8>)
 80014ee:	f006 fd04 	bl	8007efa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	2218      	movs	r2, #24
 80014f8:	4986      	ldr	r1, [pc, #536]	; (8001714 <main+0x2d0>)
 80014fa:	4884      	ldr	r0, [pc, #528]	; (800170c <main+0x2c8>)
 80014fc:	f006 fcfd 	bl	8007efa <HAL_UART_Transmit>

	//ADC starting functions
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8001500:	217f      	movs	r1, #127	; 0x7f
 8001502:	4885      	ldr	r0, [pc, #532]	; (8001718 <main+0x2d4>)
 8001504:	f002 febe 	bl	8004284 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, ADC_buffer, ADC_BUFF_SIZE);
 8001508:	220a      	movs	r2, #10
 800150a:	4984      	ldr	r1, [pc, #528]	; (800171c <main+0x2d8>)
 800150c:	4882      	ldr	r0, [pc, #520]	; (8001718 <main+0x2d4>)
 800150e:	f001 fe35 	bl	800317c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim8);
 8001512:	4883      	ldr	r0, [pc, #524]	; (8001720 <main+0x2dc>)
 8001514:	f004 fdec 	bl	80060f0 <HAL_TIM_Base_Start>

	//Encoder mode TIM3 starting
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001518:	213c      	movs	r1, #60	; 0x3c
 800151a:	4882      	ldr	r0, [pc, #520]	; (8001724 <main+0x2e0>)
 800151c:	f005 f952 	bl	80067c4 <HAL_TIM_Encoder_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim3, HALF_COUNTER_ENCODER); //set the counter to the half value
 8001520:	4b80      	ldr	r3, [pc, #512]	; (8001724 <main+0x2e0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001528:	625a      	str	r2, [r3, #36]	; 0x24

	// TIM4 start. Used to measure the time and determine speed
	HAL_TIM_Base_Start_IT(&htim4);
 800152a:	487f      	ldr	r0, [pc, #508]	; (8001728 <main+0x2e4>)
 800152c:	f004 fe42 	bl	80061b4 <HAL_TIM_Base_Start_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8001530:	4b7e      	ldr	r3, [pc, #504]	; (800172c <main+0x2e8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d06e      	beq.n	8001616 <main+0x1d2>
			switch(uartRxBuffer[0]){
 8001538:	4b72      	ldr	r3, [pc, #456]	; (8001704 <main+0x2c0>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b0d      	cmp	r3, #13
 800153e:	d002      	beq.n	8001546 <main+0x102>
 8001540:	2b7f      	cmp	r3, #127	; 0x7f
 8001542:	d045      	beq.n	80015d0 <main+0x18c>
 8001544:	e054      	b.n	80015f0 <main+0x1ac>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	2203      	movs	r2, #3
 800154c:	4978      	ldr	r1, [pc, #480]	; (8001730 <main+0x2ec>)
 800154e:	486f      	ldr	r0, [pc, #444]	; (800170c <main+0x2c8>)
 8001550:	f006 fcd3 	bl	8007efa <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8001554:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800155a:	4413      	add	r3, r2
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 8001564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001568:	4972      	ldr	r1, [pc, #456]	; (8001734 <main+0x2f0>)
 800156a:	4618      	mov	r0, r3
 800156c:	f00a f9bc 	bl	800b8e8 <strtok>
 8001570:	4603      	mov	r3, r0
 8001572:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 8001574:	e00e      	b.n	8001594 <main+0x150>
					argv[argc++] = token;
 8001576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	673a      	str	r2, [r7, #112]	; 0x70
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	3378      	adds	r3, #120	; 0x78
 8001580:	443b      	add	r3, r7
 8001582:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001584:	f843 2c74 	str.w	r2, [r3, #-116]
					token = strtok(NULL, " ");
 8001588:	496a      	ldr	r1, [pc, #424]	; (8001734 <main+0x2f0>)
 800158a:	2000      	movs	r0, #0
 800158c:	f00a f9ac 	bl	800b8e8 <strtok>
 8001590:	4603      	mov	r3, r0
 8001592:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 8001594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ed      	bne.n	8001576 <main+0x132>
				}

				//requested echo transmission to check characters

				HAL_UART_Transmit(&huart2, "\r\n ", sizeof("\r\n "), HAL_MAX_DELAY);
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	2204      	movs	r2, #4
 80015a0:	4965      	ldr	r1, [pc, #404]	; (8001738 <main+0x2f4>)
 80015a2:	485a      	ldr	r0, [pc, #360]	; (800170c <main+0x2c8>)
 80015a4:	f006 fca9 	bl	8007efa <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, cmdBuffer, sizeof(cmdBuffer), HAL_MAX_DELAY);
 80015a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
 80015b0:	2240      	movs	r2, #64	; 0x40
 80015b2:	4856      	ldr	r0, [pc, #344]	; (800170c <main+0x2c8>)
 80015b4:	f006 fca1 	bl	8007efa <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\r\n ", sizeof("\r\n "), HAL_MAX_DELAY);
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
 80015bc:	2204      	movs	r2, #4
 80015be:	495e      	ldr	r1, [pc, #376]	; (8001738 <main+0x2f4>)
 80015c0:	4852      	ldr	r0, [pc, #328]	; (800170c <main+0x2c8>)
 80015c2:	f006 fc9a 	bl	8007efa <HAL_UART_Transmit>

				idx_cmd = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80015ce:	e01f      	b.n	8001610 <main+0x1cc>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80015d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015d2:	1e5a      	subs	r2, r3, #1
 80015d4:	677a      	str	r2, [r7, #116]	; 0x74
 80015d6:	3378      	adds	r3, #120	; 0x78
 80015d8:	443b      	add	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	2201      	movs	r2, #1
 80015e6:	4947      	ldr	r1, [pc, #284]	; (8001704 <main+0x2c0>)
 80015e8:	4848      	ldr	r0, [pc, #288]	; (800170c <main+0x2c8>)
 80015ea:	f006 fc86 	bl	8007efa <HAL_UART_Transmit>
				break;
 80015ee:	e00f      	b.n	8001610 <main+0x1cc>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80015f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	677a      	str	r2, [r7, #116]	; 0x74
 80015f6:	4a43      	ldr	r2, [pc, #268]	; (8001704 <main+0x2c0>)
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	3378      	adds	r3, #120	; 0x78
 80015fc:	443b      	add	r3, r7
 80015fe:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	2201      	movs	r2, #1
 8001608:	493e      	ldr	r1, [pc, #248]	; (8001704 <main+0x2c0>)
 800160a:	4840      	ldr	r0, [pc, #256]	; (800170c <main+0x2c8>)
 800160c:	f006 fc75 	bl	8007efa <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8001610:	4b46      	ldr	r3, [pc, #280]	; (800172c <main+0x2e8>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8001616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8170 	beq.w	80018fe <main+0x4ba>
			if(strcmp(argv[0],"set")==0){
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4946      	ldr	r1, [pc, #280]	; (800173c <main+0x2f8>)
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe fdfc 	bl	8000220 <strcmp>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d12d      	bne.n	800168a <main+0x246>
				if(strcmp(argv[1],"PA5")==0){
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	4943      	ldr	r1, [pc, #268]	; (8001740 <main+0x2fc>)
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fdf4 	bl	8000220 <strcmp>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d11d      	bne.n	800167a <main+0x236>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4618      	mov	r0, r3
 8001642:	f008 fc51 	bl	8009ee8 <atoi>
 8001646:	4603      	mov	r3, r0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	2120      	movs	r1, #32
 800164e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001652:	f003 fce3 	bl	800501c <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4618      	mov	r0, r3
 800165a:	f008 fc45 	bl	8009ee8 <atoi>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	4938      	ldr	r1, [pc, #224]	; (8001744 <main+0x300>)
 8001664:	4828      	ldr	r0, [pc, #160]	; (8001708 <main+0x2c4>)
 8001666:	f009 faf5 	bl	800ac54 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	2220      	movs	r2, #32
 8001670:	4925      	ldr	r1, [pc, #148]	; (8001708 <main+0x2c4>)
 8001672:	4826      	ldr	r0, [pc, #152]	; (800170c <main+0x2c8>)
 8001674:	f006 fc41 	bl	8007efa <HAL_UART_Transmit>
 8001678:	e138      	b.n	80018ec <main+0x4a8>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	2214      	movs	r2, #20
 8001680:	4931      	ldr	r1, [pc, #196]	; (8001748 <main+0x304>)
 8001682:	4822      	ldr	r0, [pc, #136]	; (800170c <main+0x2c8>)
 8001684:	f006 fc39 	bl	8007efa <HAL_UART_Transmit>
 8001688:	e130      	b.n	80018ec <main+0x4a8>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	492f      	ldr	r1, [pc, #188]	; (800174c <main+0x308>)
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe fdc6 	bl	8000220 <strcmp>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d107      	bne.n	80016aa <main+0x266>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	2214      	movs	r2, #20
 80016a0:	4929      	ldr	r1, [pc, #164]	; (8001748 <main+0x304>)
 80016a2:	481a      	ldr	r0, [pc, #104]	; (800170c <main+0x2c8>)
 80016a4:	f006 fc29 	bl	8007efa <HAL_UART_Transmit>
 80016a8:	e120      	b.n	80018ec <main+0x4a8>
			}

			// help function prints all the available commands
			else if(strcmp(argv[0],"help")==0){
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4928      	ldr	r1, [pc, #160]	; (8001750 <main+0x30c>)
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fdb6 	bl	8000220 <strcmp>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d107      	bne.n	80016ca <main+0x286>
				HAL_UART_Transmit(&huart2, helpContent, sizeof(helpContent), HAL_MAX_DELAY);
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	227e      	movs	r2, #126	; 0x7e
 80016c0:	4924      	ldr	r1, [pc, #144]	; (8001754 <main+0x310>)
 80016c2:	4812      	ldr	r0, [pc, #72]	; (800170c <main+0x2c8>)
 80016c4:	f006 fc19 	bl	8007efa <HAL_UART_Transmit>
 80016c8:	e110      	b.n	80018ec <main+0x4a8>
			}
			else if(strcmp(argv[0],"pinout")==0){
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4922      	ldr	r1, [pc, #136]	; (8001758 <main+0x314>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fda6 	bl	8000220 <strcmp>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d142      	bne.n	8001760 <main+0x31c>
				HAL_UART_Transmit(&huart2, pinoutContent, sizeof(pinoutContent), HAL_MAX_DELAY);
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	2289      	movs	r2, #137	; 0x89
 80016e0:	491e      	ldr	r1, [pc, #120]	; (800175c <main+0x318>)
 80016e2:	480a      	ldr	r0, [pc, #40]	; (800170c <main+0x2c8>)
 80016e4:	f006 fc09 	bl	8007efa <HAL_UART_Transmit>
 80016e8:	e100      	b.n	80018ec <main+0x4a8>
 80016ea:	bf00      	nop
 80016ec:	20000720 	.word	0x20000720
 80016f0:	2000070c 	.word	0x2000070c
 80016f4:	20000714 	.word	0x20000714
 80016f8:	20000704 	.word	0x20000704
 80016fc:	2000072c 	.word	0x2000072c
 8001700:	20000734 	.word	0x20000734
 8001704:	20000698 	.word	0x20000698
 8001708:	2000069c 	.word	0x2000069c
 800170c:	200005f8 	.word	0x200005f8
 8001710:	20000018 	.word	0x20000018
 8001714:	20000000 	.word	0x20000000
 8001718:	200003fc 	.word	0x200003fc
 800171c:	200006dc 	.word	0x200006dc
 8001720:	200005ac 	.word	0x200005ac
 8001724:	20000514 	.word	0x20000514
 8001728:	20000560 	.word	0x20000560
 800172c:	20000690 	.word	0x20000690
 8001730:	20000080 	.word	0x20000080
 8001734:	0800e93c 	.word	0x0800e93c
 8001738:	0800e940 	.word	0x0800e940
 800173c:	0800e944 	.word	0x0800e944
 8001740:	0800e948 	.word	0x0800e948
 8001744:	0800e94c 	.word	0x0800e94c
 8001748:	20000084 	.word	0x20000084
 800174c:	0800e968 	.word	0x0800e968
 8001750:	0800e96c 	.word	0x0800e96c
 8001754:	20000098 	.word	0x20000098
 8001758:	0800e974 	.word	0x0800e974
 800175c:	20000118 	.word	0x20000118
			}
			else if(strcmp(argv[0],"start")==0){
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4991      	ldr	r1, [pc, #580]	; (80019a8 <main+0x564>)
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fd5b 	bl	8000220 <strcmp>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d123      	bne.n	80017b8 <main+0x374>
				HAL_UART_Transmit(&huart2, startContent, sizeof(startContent), HAL_MAX_DELAY);
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
 8001774:	220f      	movs	r2, #15
 8001776:	498d      	ldr	r1, [pc, #564]	; (80019ac <main+0x568>)
 8001778:	488d      	ldr	r0, [pc, #564]	; (80019b0 <main+0x56c>)
 800177a:	f006 fbbe 	bl	8007efa <HAL_UART_Transmit>
				//ISO_RESET code
				ISO_RESET();
 800177e:	f7ff fc73 	bl	8001068 <ISO_RESET>
				}
				HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);*/

				//Timers start and dutycycle setting at 50

				dutycycle= 50;
 8001782:	4b8c      	ldr	r3, [pc, #560]	; (80019b4 <main+0x570>)
 8001784:	2232      	movs	r2, #50	; 0x32
 8001786:	601a      	str	r2, [r3, #0]
				DutyCycleFuncDef(dutycycle);
 8001788:	4b8a      	ldr	r3, [pc, #552]	; (80019b4 <main+0x570>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fcb7 	bl	8001100 <DutyCycleFuncDef>
				errorI[0]=0;
 8001792:	4b89      	ldr	r3, [pc, #548]	; (80019b8 <main+0x574>)
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
				alphaI[0]=0.5;
 800179a:	4b88      	ldr	r3, [pc, #544]	; (80019bc <main+0x578>)
 800179c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80017a0:	601a      	str	r2, [r3, #0]
				errorS[0]=0;
 80017a2:	4b87      	ldr	r3, [pc, #540]	; (80019c0 <main+0x57c>)
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
				speedI[0]=0;
 80017aa:	4b86      	ldr	r3, [pc, #536]	; (80019c4 <main+0x580>)
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
				StartPWM();
 80017b2:	f7ff fc79 	bl	80010a8 <StartPWM>
 80017b6:	e099      	b.n	80018ec <main+0x4a8>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);*/

			}
			else if(strcmp(argv[0],"stop")==0){
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4983      	ldr	r1, [pc, #524]	; (80019c8 <main+0x584>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fd2f 	bl	8000220 <strcmp>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d127      	bne.n	8001818 <main+0x3d4>
				HAL_UART_Transmit(&huart2, stopContent, sizeof(stopContent), HAL_MAX_DELAY);
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	2210      	movs	r2, #16
 80017ce:	497f      	ldr	r1, [pc, #508]	; (80019cc <main+0x588>)
 80017d0:	4877      	ldr	r0, [pc, #476]	; (80019b0 <main+0x56c>)
 80017d2:	f006 fb92 	bl	8007efa <HAL_UART_Transmit>
				StopPWM();
 80017d6:	f7ff fc7d 	bl	80010d4 <StopPWM>

				//reset of PWM timers at 50 dutycycle
				dutycycle= 50;
 80017da:	4b76      	ldr	r3, [pc, #472]	; (80019b4 <main+0x570>)
 80017dc:	2232      	movs	r2, #50	; 0x32
 80017de:	601a      	str	r2, [r3, #0]
				DutyCycleFuncDef(dutycycle);
 80017e0:	4b74      	ldr	r3, [pc, #464]	; (80019b4 <main+0x570>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fc8b 	bl	8001100 <DutyCycleFuncDef>
				//setting integral error to zero
				errorI[0]=0;
 80017ea:	4b73      	ldr	r3, [pc, #460]	; (80019b8 <main+0x574>)
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
				alphaI[1]=0;
 80017f2:	4b72      	ldr	r3, [pc, #456]	; (80019bc <main+0x578>)
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	605a      	str	r2, [r3, #4]
				errorS[0]=0;
 80017fa:	4b71      	ldr	r3, [pc, #452]	; (80019c0 <main+0x57c>)
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
				speedI[1]=0;
 8001802:	4b70      	ldr	r3, [pc, #448]	; (80019c4 <main+0x580>)
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
				CurrentPIcontrollerEnable=0;
 800180a:	4b71      	ldr	r3, [pc, #452]	; (80019d0 <main+0x58c>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
				SpeedPIcontrollerEnable=0;
 8001810:	4b70      	ldr	r3, [pc, #448]	; (80019d4 <main+0x590>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e069      	b.n	80018ec <main+0x4a8>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);*/
			}
			else if(strcmp(argv[0],"dutycycle")==0){
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	496f      	ldr	r1, [pc, #444]	; (80019d8 <main+0x594>)
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fcff 	bl	8000220 <strcmp>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d113      	bne.n	8001850 <main+0x40c>

				HAL_UART_Transmit(&huart2, dutyCycleChoiceContent, sizeof(dutyCycleChoiceContent), HAL_MAX_DELAY);
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	221e      	movs	r2, #30
 800182e:	496b      	ldr	r1, [pc, #428]	; (80019dc <main+0x598>)
 8001830:	485f      	ldr	r0, [pc, #380]	; (80019b0 <main+0x56c>)
 8001832:	f006 fb62 	bl	8007efa <HAL_UART_Transmit>

				dutycycle= atoi(argv[1]);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	4618      	mov	r0, r3
 800183a:	f008 fb55 	bl	8009ee8 <atoi>
 800183e:	4603      	mov	r3, r0
 8001840:	4a5c      	ldr	r2, [pc, #368]	; (80019b4 <main+0x570>)
 8001842:	6013      	str	r3, [r2, #0]
				DutyCycleFuncDef(dutycycle);
 8001844:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <main+0x570>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fc59 	bl	8001100 <DutyCycleFuncDef>
 800184e:	e04d      	b.n	80018ec <main+0x4a8>
				TIM1->CCR1=pulse;
				TIM1->CCR2=TIM1_ARR-pulse;*/

				//HAL_UART_Transmit(&huart2, &pulse, sizeof(pulse), HAL_MAX_DELAY);
			}
			else if(strcmp(argv[0],"current")==0){
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4963      	ldr	r1, [pc, #396]	; (80019e0 <main+0x59c>)
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fce3 	bl	8000220 <strcmp>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d120      	bne.n	80018a2 <main+0x45e>

				HAL_UART_Transmit(&huart2, CurrentChoiceContent, sizeof(CurrentChoiceContent), HAL_MAX_DELAY);
 8001860:	f04f 33ff 	mov.w	r3, #4294967295
 8001864:	221b      	movs	r2, #27
 8001866:	495f      	ldr	r1, [pc, #380]	; (80019e4 <main+0x5a0>)
 8001868:	4851      	ldr	r0, [pc, #324]	; (80019b0 <main+0x56c>)
 800186a:	f006 fb46 	bl	8007efa <HAL_UART_Transmit>

				requestedCurrent= atoi(argv[1])/1000.0; // implicit cast from int to float. value from mAmpere to Ampere in float
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	4618      	mov	r0, r3
 8001872:	f008 fb39 	bl	8009ee8 <atoi>
 8001876:	4603      	mov	r3, r0
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe8b 	bl	8000594 <__aeabi_i2d>
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <main+0x5a4>)
 8001884:	f7ff f81a 	bl	80008bc <__aeabi_ddiv>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff f9e2 	bl	8000c58 <__aeabi_d2f>
 8001894:	4603      	mov	r3, r0
 8001896:	4a55      	ldr	r2, [pc, #340]	; (80019ec <main+0x5a8>)
 8001898:	6013      	str	r3, [r2, #0]
				CurrentPIcontrollerEnable=1;
 800189a:	4b4d      	ldr	r3, [pc, #308]	; (80019d0 <main+0x58c>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e024      	b.n	80018ec <main+0x4a8>

			}
			else if(strcmp(argv[0],"speed")==0){
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4952      	ldr	r1, [pc, #328]	; (80019f0 <main+0x5ac>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fcba 	bl	8000220 <strcmp>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d115      	bne.n	80018de <main+0x49a>

				HAL_UART_Transmit(&huart2, CurrentChoiceContent, sizeof(CurrentChoiceContent), HAL_MAX_DELAY);
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	221b      	movs	r2, #27
 80018b8:	494a      	ldr	r1, [pc, #296]	; (80019e4 <main+0x5a0>)
 80018ba:	483d      	ldr	r0, [pc, #244]	; (80019b0 <main+0x56c>)
 80018bc:	f006 fb1d 	bl	8007efa <HAL_UART_Transmit>

				requestedSpeed= atoi(argv[1]); // int value in rpm
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f008 fb10 	bl	8009ee8 <atoi>
 80018c8:	ee07 0a90 	vmov	s15, r0
 80018cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d0:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <main+0x5b0>)
 80018d2:	edc3 7a00 	vstr	s15, [r3]
				SpeedPIcontrollerEnable=1;
 80018d6:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <main+0x590>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	e006      	b.n	80018ec <main+0x4a8>

			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	2214      	movs	r2, #20
 80018e4:	4944      	ldr	r1, [pc, #272]	; (80019f8 <main+0x5b4>)
 80018e6:	4832      	ldr	r0, [pc, #200]	; (80019b0 <main+0x56c>)
 80018e8:	f006 fb07 	bl	8007efa <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	2218      	movs	r2, #24
 80018f2:	4942      	ldr	r1, [pc, #264]	; (80019fc <main+0x5b8>)
 80018f4:	482e      	ldr	r0, [pc, #184]	; (80019b0 <main+0x56c>)
 80018f6:	f006 fb00 	bl	8007efa <HAL_UART_Transmit>
			newCmdReady = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		if(DMA_Received)
 80018fe:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <main+0x5bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d025      	beq.n	8001952 <main+0x50e>
		{
			oldCurrent=CurrentValueFloat;
 8001906:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <main+0x5c0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a3f      	ldr	r2, [pc, #252]	; (8001a08 <main+0x5c4>)
 800190c:	6013      	str	r3, [r2, #0]
			CurrentValueFloat=CurrentConversion();
 800190e:	f7ff fc1f 	bl	8001150 <CurrentConversion>
 8001912:	eef0 7a40 	vmov.f32	s15, s0
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <main+0x5c0>)
 8001918:	edc3 7a00 	vstr	s15, [r3]
			{
				HAL_UART_Transmit(&huart2, Current_Sensed, sizeof(Current_Sensed), HAL_MAX_DELAY);
				//HAL_UART_Transmit(&huart2, ADC_buffer, sizeof(ADC_buffer), HAL_MAX_DELAY);
				k=0;
			}*/
			k++; //value used for debug
 800191c:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <main+0x5c8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	4a3a      	ldr	r2, [pc, #232]	; (8001a0c <main+0x5c8>)
 8001924:	6013      	str	r3, [r2, #0]
			//current controller
			if (CurrentPIcontrollerEnable)
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <main+0x58c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00e      	beq.n	800194c <main+0x508>
			{
				dutycycle=CurrentPI(requestedCurrent);
 800192e:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <main+0x5a8>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	eeb0 0a67 	vmov.f32	s0, s15
 8001938:	f7ff fcf6 	bl	8001328 <CurrentPI>
 800193c:	4603      	mov	r3, r0
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <main+0x570>)
 8001940:	6013      	str	r3, [r2, #0]
				DutyCycleFuncDef(dutycycle);
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <main+0x570>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fbda 	bl	8001100 <DutyCycleFuncDef>
			}
			DMA_Received=0;
 800194c:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <main+0x5bc>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
		}
		if (CounterTaken==1)
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <main+0x5cc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d10c      	bne.n	8001974 <main+0x530>
		{
			RotSpeed = SpeedCalculation(EncoderCounterValue);
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <main+0x5d0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fc9e 	bl	80012a0 <SpeedCalculation>
 8001964:	eef0 7a40 	vmov.f32	s15, s0
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <main+0x5d4>)
 800196a:	edc3 7a00 	vstr	s15, [r3]
			CounterTaken=0;
 800196e:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <main+0x5cc>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
			/*if(SpeedPIcontrollerEnable=1)
				requestedCurrent=SpeedPI(requestedSpeed);*/
		}
		if(k==54321)
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <main+0x5c8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f24d 4231 	movw	r2, #54321	; 0xd431
 800197c:	4293      	cmp	r3, r2
 800197e:	f47f add7 	bne.w	8001530 <main+0xec>
		{
			sprintf(Speed_Sensed, "speed value is %.1f radiant/second \r\n ", RotSpeed);
 8001982:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <main+0x5d4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fe16 	bl	80005b8 <__aeabi_f2d>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4922      	ldr	r1, [pc, #136]	; (8001a1c <main+0x5d8>)
 8001992:	4823      	ldr	r0, [pc, #140]	; (8001a20 <main+0x5dc>)
 8001994:	f009 f95e 	bl	800ac54 <siprintf>
			HAL_UART_Transmit(&huart2,Speed_Sensed , sizeof(Speed_Sensed), HAL_MAX_DELAY);
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
 800199c:	2232      	movs	r2, #50	; 0x32
 800199e:	4920      	ldr	r1, [pc, #128]	; (8001a20 <main+0x5dc>)
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <main+0x56c>)
 80019a2:	f006 faaa 	bl	8007efa <HAL_UART_Transmit>
		if(uartRxReceived){
 80019a6:	e5c3      	b.n	8001530 <main+0xec>
 80019a8:	0800e97c 	.word	0x0800e97c
 80019ac:	200001a4 	.word	0x200001a4
 80019b0:	200005f8 	.word	0x200005f8
 80019b4:	20000688 	.word	0x20000688
 80019b8:	2000070c 	.word	0x2000070c
 80019bc:	20000714 	.word	0x20000714
 80019c0:	2000072c 	.word	0x2000072c
 80019c4:	20000734 	.word	0x20000734
 80019c8:	0800e984 	.word	0x0800e984
 80019cc:	200001b4 	.word	0x200001b4
 80019d0:	20000770 	.word	0x20000770
 80019d4:	20000774 	.word	0x20000774
 80019d8:	0800e98c 	.word	0x0800e98c
 80019dc:	200001c4 	.word	0x200001c4
 80019e0:	0800e998 	.word	0x0800e998
 80019e4:	200001e4 	.word	0x200001e4
 80019e8:	408f4000 	.word	0x408f4000
 80019ec:	20000708 	.word	0x20000708
 80019f0:	0800e9a0 	.word	0x0800e9a0
 80019f4:	20000728 	.word	0x20000728
 80019f8:	20000084 	.word	0x20000084
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000694 	.word	0x20000694
 8001a04:	20000704 	.word	0x20000704
 8001a08:	20000720 	.word	0x20000720
 8001a0c:	20000778 	.word	0x20000778
 8001a10:	200007b4 	.word	0x200007b4
 8001a14:	2000077c 	.word	0x2000077c
 8001a18:	20000724 	.word	0x20000724
 8001a1c:	0800e9a8 	.word	0x0800e9a8
 8001a20:	20000780 	.word	0x20000780

08001a24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b094      	sub	sp, #80	; 0x50
 8001a28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	2238      	movs	r2, #56	; 0x38
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f008 fa86 	bl	8009f44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f003 fb00 	bl	800504c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a56:	2340      	movs	r3, #64	; 0x40
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001a62:	2304      	movs	r3, #4
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001a66:	2355      	movs	r3, #85	; 0x55
 8001a68:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a72:	2302      	movs	r3, #2
 8001a74:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a76:	f107 0318 	add.w	r3, r7, #24
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 fb8a 	bl	8005194 <HAL_RCC_OscConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001a86:	f000 fb81 	bl	800218c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a8a:	230f      	movs	r3, #15
 8001a8c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fe8e 	bl	80057c4 <HAL_RCC_ClockConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8001aae:	f000 fb6d 	bl	800218c <Error_Handler>
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	3750      	adds	r7, #80	; 0x50
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08c      	sub	sp, #48	; 0x30
 8001ac0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8001ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f008 fa35 	bl	8009f44 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001ada:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001adc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001ae0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ae2:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001ae4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ae8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001aea:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001af0:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8001af6:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001afc:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b02:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001b04:	2204      	movs	r2, #4
 8001b06:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b1a:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8001b22:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001b24:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b30:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b32:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b48:	4817      	ldr	r0, [pc, #92]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001b4a:	f001 f98d 	bl	8002e68 <HAL_ADC_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_ADC1_Init+0x9c>
	{
		Error_Handler();
 8001b54:	f000 fb1a 	bl	800218c <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	4619      	mov	r1, r3
 8001b62:	4811      	ldr	r0, [pc, #68]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001b64:	f002 fc22 	bl	80043ac <HAL_ADCEx_MultiModeConfigChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_ADC1_Init+0xb6>
	{
		Error_Handler();
 8001b6e:	f000 fb0d 	bl	800218c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_ADC1_Init+0xf0>)
 8001b74:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b76:	2306      	movs	r3, #6
 8001b78:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b7e:	237f      	movs	r3, #127	; 0x7f
 8001b80:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b82:	2304      	movs	r3, #4
 8001b84:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <MX_ADC1_Init+0xec>)
 8001b90:	f001 fde0 	bl	8003754 <HAL_ADC_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_ADC1_Init+0xe2>
	{
		Error_Handler();
 8001b9a:	f000 faf7 	bl	800218c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	3730      	adds	r7, #48	; 0x30
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200003fc 	.word	0x200003fc
 8001bac:	04300002 	.word	0x04300002

08001bb0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b09c      	sub	sp, #112	; 0x70
 8001bb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
 8001be0:	615a      	str	r2, [r3, #20]
 8001be2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2234      	movs	r2, #52	; 0x34
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f008 f9aa 	bl	8009f44 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001bf0:	4b4d      	ldr	r3, [pc, #308]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001bf2:	4a4e      	ldr	r2, [pc, #312]	; (8001d2c <MX_TIM1_Init+0x17c>)
 8001bf4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001bf6:	4b4c      	ldr	r3, [pc, #304]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001bfc:	4b4a      	ldr	r3, [pc, #296]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001bfe:	2220      	movs	r2, #32
 8001c00:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 5312;
 8001c02:	4b49      	ldr	r3, [pc, #292]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001c04:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8001c08:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0a:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001c10:	4b45      	ldr	r3, [pc, #276]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c16:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c1c:	4842      	ldr	r0, [pc, #264]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001c1e:	f004 fa0f 	bl	8006040 <HAL_TIM_Base_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8001c28:	f000 fab0 	bl	800218c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c30:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c36:	4619      	mov	r1, r3
 8001c38:	483b      	ldr	r0, [pc, #236]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001c3a:	f005 f905 	bl	8006e48 <HAL_TIM_ConfigClockSource>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8001c44:	f000 faa2 	bl	800218c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c48:	4837      	ldr	r0, [pc, #220]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001c4a:	f004 fb1d 	bl	8006288 <HAL_TIM_PWM_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8001c54:	f000 fa9a 	bl	800218c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c68:	4619      	mov	r1, r3
 8001c6a:	482f      	ldr	r0, [pc, #188]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001c6c:	f005 ff68 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8001c76:	f000 fa89 	bl	800218c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7a:	2360      	movs	r3, #96	; 0x60
 8001c7c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 1328;
 8001c7e:	f44f 63a6 	mov.w	r3, #1328	; 0x530
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c84:	2300      	movs	r3, #0
 8001c86:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4821      	ldr	r0, [pc, #132]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001ca2:	f004 ffbd 	bl	8006c20 <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM1_Init+0x100>
	{
		Error_Handler();
 8001cac:	f000 fa6e 	bl	800218c <Error_Handler>
	}
	sConfigOC.Pulse = 3986;
 8001cb0:	f640 7392 	movw	r3, #3986	; 0xf92
 8001cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cba:	2204      	movs	r2, #4
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	481a      	ldr	r0, [pc, #104]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001cc0:	f004 ffae 	bl	8006c20 <HAL_TIM_PWM_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM1_Init+0x11e>
	{
		Error_Handler();
 8001cca:	f000 fa5f 	bl	800218c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 203;
 8001cda:	23cb      	movs	r3, #203	; 0xcb
 8001cdc:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4807      	ldr	r0, [pc, #28]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001d0c:	f005 ff9a 	bl	8007c44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM1_Init+0x16a>
	{
		Error_Handler();
 8001d16:	f000 fa39 	bl	800218c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001d1a:	4803      	ldr	r0, [pc, #12]	; (8001d28 <MX_TIM1_Init+0x178>)
 8001d1c:	f000 fb7a 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8001d20:	bf00      	nop
 8001d22:	3770      	adds	r7, #112	; 0x70
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200004c8 	.word	0x200004c8
 8001d2c:	40012c00 	.word	0x40012c00

08001d30 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	2224      	movs	r2, #36	; 0x24
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f008 f900 	bl	8009f44 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d44:	463b      	mov	r3, r7
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001d4e:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <MX_TIM3_Init+0xa4>)
 8001d50:	4a21      	ldr	r2, [pc, #132]	; (8001dd8 <MX_TIM3_Init+0xa8>)
 8001d52:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001d54:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <MX_TIM3_Init+0xa4>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <MX_TIM3_Init+0xa4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <MX_TIM3_Init+0xa4>)
 8001d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d66:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <MX_TIM3_Init+0xa4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <MX_TIM3_Init+0xa4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d74:	2303      	movs	r3, #3
 8001d76:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <MX_TIM3_Init+0xa4>)
 8001da0:	f004 fc6a 	bl	8006678 <HAL_TIM_Encoder_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 8001daa:	f000 f9ef 	bl	800218c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db6:	463b      	mov	r3, r7
 8001db8:	4619      	mov	r1, r3
 8001dba:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <MX_TIM3_Init+0xa4>)
 8001dbc:	f005 fec0 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 8001dc6:	f000 f9e1 	bl	800218c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	3730      	adds	r7, #48	; 0x30
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000514 	.word	0x20000514
 8001dd8:	40000400 	.word	0x40000400

08001ddc <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de2:	f107 0310 	add.w	r3, r7, #16
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001dfc:	4a1d      	ldr	r2, [pc, #116]	; (8001e74 <MX_TIM4_Init+0x98>)
 8001dfe:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 17000-1;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e02:	f244 2267 	movw	r2, #16999	; 0x4267
 8001e06:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 99;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e10:	2263      	movs	r2, #99	; 0x63
 8001e12:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e20:	4813      	ldr	r0, [pc, #76]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e22:	f004 f90d 	bl	8006040 <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM4_Init+0x54>
	{
		Error_Handler();
 8001e2c:	f000 f9ae 	bl	800218c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e34:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480c      	ldr	r0, [pc, #48]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e3e:	f005 f803 	bl	8006e48 <HAL_TIM_ConfigClockSource>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 8001e48:	f000 f9a0 	bl	800218c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e5a:	f005 fe71 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 8001e64:	f000 f992 	bl	800218c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000560 	.word	0x20000560
 8001e74:	40000800 	.word	0x40000800

08001e78 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <MX_TIM8_Init+0xa0>)
 8001e98:	4a20      	ldr	r2, [pc, #128]	; (8001f1c <MX_TIM8_Init+0xa4>)
 8001e9a:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <MX_TIM8_Init+0xa0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <MX_TIM8_Init+0xa0>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 530;
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <MX_TIM8_Init+0xa0>)
 8001eaa:	f240 2212 	movw	r2, #530	; 0x212
 8001eae:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <MX_TIM8_Init+0xa0>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <MX_TIM8_Init+0xa0>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <MX_TIM8_Init+0xa0>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ec2:	4815      	ldr	r0, [pc, #84]	; (8001f18 <MX_TIM8_Init+0xa0>)
 8001ec4:	f004 f8bc 	bl	8006040 <HAL_TIM_Base_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 8001ece:	f000 f95d 	bl	800218c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	4619      	mov	r1, r3
 8001ede:	480e      	ldr	r0, [pc, #56]	; (8001f18 <MX_TIM8_Init+0xa0>)
 8001ee0:	f004 ffb2 	bl	8006e48 <HAL_TIM_ConfigClockSource>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 8001eea:	f000 f94f 	bl	800218c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001eee:	2320      	movs	r3, #32
 8001ef0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	4619      	mov	r1, r3
 8001efe:	4806      	ldr	r0, [pc, #24]	; (8001f18 <MX_TIM8_Init+0xa0>)
 8001f00:	f005 fe1e 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 8001f0a:	f000 f93f 	bl	800218c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200005ac 	.word	0x200005ac
 8001f1c:	40013400 	.word	0x40013400

08001f20 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001f24:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f26:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <MX_USART2_UART_Init+0x94>)
 8001f28:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001f2a:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f30:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f50:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f68:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f6a:	f005 ff76 	bl	8007e5a <HAL_UART_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8001f74:	f000 f90a 	bl	800218c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f78:	2100      	movs	r1, #0
 8001f7a:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f7c:	f007 fee9 	bl	8009d52 <HAL_UARTEx_SetTxFifoThreshold>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8001f86:	f000 f901 	bl	800218c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f8e:	f007 ff1e 	bl	8009dce <HAL_UARTEx_SetRxFifoThreshold>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8001f98:	f000 f8f8 	bl	800218c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f9c:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <MX_USART2_UART_Init+0x90>)
 8001f9e:	f007 fe9f 	bl	8009ce0 <HAL_UARTEx_DisableFifoMode>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8001fa8:	f000 f8f0 	bl	800218c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200005f8 	.word	0x200005f8
 8001fb4:	40004400 	.word	0x40004400

08001fb8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <MX_DMA_Init+0x50>)
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc2:	4a11      	ldr	r2, [pc, #68]	; (8002008 <MX_DMA_Init+0x50>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	6493      	str	r3, [r2, #72]	; 0x48
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <MX_DMA_Init+0x50>)
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <MX_DMA_Init+0x50>)
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fda:	4a0b      	ldr	r2, [pc, #44]	; (8002008 <MX_DMA_Init+0x50>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6493      	str	r3, [r2, #72]	; 0x48
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <MX_DMA_Init+0x50>)
 8001fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	200b      	movs	r0, #11
 8001ff4:	f002 fb36 	bl	8004664 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ff8:	200b      	movs	r0, #11
 8001ffa:	f002 fb4d 	bl	8004698 <HAL_NVIC_EnableIRQ>

}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000

0800200c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <MX_GPIO_Init+0xd4>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	4a2e      	ldr	r2, [pc, #184]	; (80020e0 <MX_GPIO_Init+0xd4>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <MX_GPIO_Init+0xd4>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <MX_GPIO_Init+0xd4>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <MX_GPIO_Init+0xd4>)
 8002040:	f043 0320 	orr.w	r3, r3, #32
 8002044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <MX_GPIO_Init+0xd4>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <MX_GPIO_Init+0xd4>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	4a22      	ldr	r2, [pc, #136]	; (80020e0 <MX_GPIO_Init+0xd4>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <MX_GPIO_Init+0xd4>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	2102      	movs	r1, #2
 800206e:	481d      	ldr	r0, [pc, #116]	; (80020e4 <MX_GPIO_Init+0xd8>)
 8002070:	f002 ffd4 	bl	800501c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	2120      	movs	r1, #32
 8002078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207c:	f002 ffce 	bl	800501c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BLUE_BUTTON_Pin */
	GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002084:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002086:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800208a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	4619      	mov	r1, r3
 8002096:	4813      	ldr	r0, [pc, #76]	; (80020e4 <MX_GPIO_Init+0xd8>)
 8002098:	f002 fe3e 	bl	8004d18 <HAL_GPIO_Init>

	/*Configure GPIO pin : ISO_RESET_Pin */
	GPIO_InitStruct.Pin = ISO_RESET_Pin;
 800209c:	2302      	movs	r3, #2
 800209e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	4619      	mov	r1, r3
 80020b2:	480c      	ldr	r0, [pc, #48]	; (80020e4 <MX_GPIO_Init+0xd8>)
 80020b4:	f002 fe30 	bl	8004d18 <HAL_GPIO_Init>

	/*Configure GPIO pin : GREEN_LED_Pin */
	GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80020b8:	2320      	movs	r3, #32
 80020ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020bc:	2301      	movs	r3, #1
 80020be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	4619      	mov	r1, r3
 80020ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d2:	f002 fe21 	bl	8004d18 <HAL_GPIO_Init>

}
 80020d6:	bf00      	nop
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	48000800 	.word	0x48000800

080020e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	uartRxReceived=1;
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_UART_RxCpltCallback+0x20>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80020f6:	2201      	movs	r2, #1
 80020f8:	4904      	ldr	r1, [pc, #16]	; (800210c <HAL_UART_RxCpltCallback+0x24>)
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <HAL_UART_RxCpltCallback+0x28>)
 80020fc:	f005 ff94 	bl	8008028 <HAL_UART_Receive_IT>

}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000690 	.word	0x20000690
 800210c:	20000698 	.word	0x20000698
 8002110:	200005f8 	.word	0x200005f8

08002114 <HAL_ADC_ConvCpltCallback>:
 * @brief  ADC callback function
 * @note   This function is called  when the DMA buffer of ADC value is full. The DMA_Received variable is set to 1 to start data conversion in the main
 * @param  ADC handler
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*hadc){
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, "DMA callback entered \r\n", sizeof("DMA callback entered \r\n"), HAL_MAX_DELAY);
	DMA_Received=1;
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <HAL_ADC_ConvCpltCallback+0x1c>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000694 	.word	0x20000694

08002134 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002146:	f000 fbe5 	bl	8002914 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM4)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a0b      	ldr	r2, [pc, #44]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d10c      	bne.n	800216e <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		EncoderCounterValue=__HAL_TIM_GET_COUNTER(&htim3);
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800215c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim3, HALF_COUNTER_ENCODER);
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002166:	625a      	str	r2, [r3, #36]	; 0x24
		CounterTaken = 1;
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]
	}
	/* USER CODE END Callback 1 */
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40001000 	.word	0x40001000
 800217c:	40000800 	.word	0x40000800
 8002180:	20000514 	.word	0x20000514
 8002184:	2000077c 	.word	0x2000077c
 8002188:	200007b4 	.word	0x200007b4

0800218c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002190:	b672      	cpsid	i
}
 8002192:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002194:	e7fe      	b.n	8002194 <Error_Handler+0x8>
	...

08002198 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <HAL_MspInit+0x44>)
 80021a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a2:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <HAL_MspInit+0x44>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6613      	str	r3, [r2, #96]	; 0x60
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <HAL_MspInit+0x44>)
 80021ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_MspInit+0x44>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	4a08      	ldr	r2, [pc, #32]	; (80021dc <HAL_MspInit+0x44>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6593      	str	r3, [r2, #88]	; 0x58
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_MspInit+0x44>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000

080021e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b09a      	sub	sp, #104	; 0x68
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	2244      	movs	r2, #68	; 0x44
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f007 fe9f 	bl	8009f44 <memset>
  if(hadc->Instance==ADC1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800220e:	d167      	bne.n	80022e0 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002214:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002216:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800221a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	4618      	mov	r0, r3
 8002222:	f003 fd1d 	bl	8005c60 <HAL_RCCEx_PeriphCLKConfig>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800222c:	f7ff ffae 	bl	800218c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <HAL_ADC_MspInit+0x108>)
 8002232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002234:	4a2c      	ldr	r2, [pc, #176]	; (80022e8 <HAL_ADC_MspInit+0x108>)
 8002236:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800223a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <HAL_ADC_MspInit+0x108>)
 800223e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <HAL_ADC_MspInit+0x108>)
 800224a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224c:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <HAL_ADC_MspInit+0x108>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_ADC_MspInit+0x108>)
 8002256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_CURRENT_Pin;
 8002260:	2301      	movs	r3, #1
 8002262:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002264:	2303      	movs	r3, #3
 8002266:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(ADC_CURRENT_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002270:	4619      	mov	r1, r3
 8002272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002276:	f002 fd4f 	bl	8004d18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800227a:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <HAL_ADC_MspInit+0x10c>)
 800227c:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <HAL_ADC_MspInit+0x110>)
 800227e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002280:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <HAL_ADC_MspInit+0x10c>)
 8002282:	2205      	movs	r2, #5
 8002284:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_ADC_MspInit+0x10c>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800228c:	4b17      	ldr	r3, [pc, #92]	; (80022ec <HAL_ADC_MspInit+0x10c>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_ADC_MspInit+0x10c>)
 8002294:	2280      	movs	r2, #128	; 0x80
 8002296:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <HAL_ADC_MspInit+0x10c>)
 800229a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800229e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_ADC_MspInit+0x10c>)
 80022a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022a8:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_ADC_MspInit+0x10c>)
 80022aa:	2220      	movs	r2, #32
 80022ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022ae:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_ADC_MspInit+0x10c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <HAL_ADC_MspInit+0x10c>)
 80022b6:	f002 f9fd 	bl	80046b4 <HAL_DMA_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80022c0:	f7ff ff64 	bl	800218c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a09      	ldr	r2, [pc, #36]	; (80022ec <HAL_ADC_MspInit+0x10c>)
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
 80022ca:	4a08      	ldr	r2, [pc, #32]	; (80022ec <HAL_ADC_MspInit+0x10c>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2100      	movs	r1, #0
 80022d4:	2012      	movs	r0, #18
 80022d6:	f002 f9c5 	bl	8004664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80022da:	2012      	movs	r0, #18
 80022dc:	f002 f9dc 	bl	8004698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022e0:	bf00      	nop
 80022e2:	3768      	adds	r7, #104	; 0x68
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	20000468 	.word	0x20000468
 80022f0:	40020008 	.word	0x40020008

080022f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <HAL_TIM_Base_MspInit+0x8c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d10c      	bne.n	8002320 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <HAL_TIM_Base_MspInit+0x90>)
 8002308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230a:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <HAL_TIM_Base_MspInit+0x90>)
 800230c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002310:	6613      	str	r3, [r2, #96]	; 0x60
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <HAL_TIM_Base_MspInit+0x90>)
 8002314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800231e:	e02a      	b.n	8002376 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a18      	ldr	r2, [pc, #96]	; (8002388 <HAL_TIM_Base_MspInit+0x94>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d114      	bne.n	8002354 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <HAL_TIM_Base_MspInit+0x90>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	4a15      	ldr	r2, [pc, #84]	; (8002384 <HAL_TIM_Base_MspInit+0x90>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6593      	str	r3, [r2, #88]	; 0x58
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_TIM_Base_MspInit+0x90>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	201e      	movs	r0, #30
 8002348:	f002 f98c 	bl	8004664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800234c:	201e      	movs	r0, #30
 800234e:	f002 f9a3 	bl	8004698 <HAL_NVIC_EnableIRQ>
}
 8002352:	e010      	b.n	8002376 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_TIM_Base_MspInit+0x98>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10b      	bne.n	8002376 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_TIM_Base_MspInit+0x90>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_TIM_Base_MspInit+0x90>)
 8002364:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002368:	6613      	str	r3, [r2, #96]	; 0x60
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_TIM_Base_MspInit+0x90>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
}
 8002376:	bf00      	nop
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40012c00 	.word	0x40012c00
 8002384:	40021000 	.word	0x40021000
 8002388:	40000800 	.word	0x40000800
 800238c:	40013400 	.word	0x40013400

08002390 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a17      	ldr	r2, [pc, #92]	; (800240c <HAL_TIM_Encoder_MspInit+0x7c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d128      	bne.n	8002404 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <HAL_TIM_Encoder_MspInit+0x80>)
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	4a16      	ldr	r2, [pc, #88]	; (8002410 <HAL_TIM_Encoder_MspInit+0x80>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6593      	str	r3, [r2, #88]	; 0x58
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <HAL_TIM_Encoder_MspInit+0x80>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_TIM_Encoder_MspInit+0x80>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_TIM_Encoder_MspInit+0x80>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_TIM_Encoder_MspInit+0x80>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80023e2:	2350      	movs	r3, #80	; 0x50
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023f2:	2302      	movs	r3, #2
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002400:	f002 fc8a 	bl	8004d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002404:	bf00      	nop
 8002406:	3728      	adds	r7, #40	; 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40000400 	.word	0x40000400
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a12      	ldr	r2, [pc, #72]	; (800247c <HAL_TIM_MspPostInit+0x68>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d11d      	bne.n	8002472 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_TIM_MspPostInit+0x6c>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	4a11      	ldr	r2, [pc, #68]	; (8002480 <HAL_TIM_MspPostInit+0x6c>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <HAL_TIM_MspPostInit+0x6c>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800244e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8002452:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002460:	2306      	movs	r3, #6
 8002462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	4619      	mov	r1, r3
 800246a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800246e:	f002 fc53 	bl	8004d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002472:	bf00      	nop
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40021000 	.word	0x40021000

08002484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b09a      	sub	sp, #104	; 0x68
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	2244      	movs	r2, #68	; 0x44
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f007 fd4d 	bl	8009f44 <memset>
  if(huart->Instance==USART2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a23      	ldr	r2, [pc, #140]	; (800253c <HAL_UART_MspInit+0xb8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d13e      	bne.n	8002532 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024b4:	2302      	movs	r3, #2
 80024b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 fbcd 	bl	8005c60 <HAL_RCCEx_PeriphCLKConfig>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024cc:	f7ff fe5e 	bl	800218c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_UART_MspInit+0xbc>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	4a1a      	ldr	r2, [pc, #104]	; (8002540 <HAL_UART_MspInit+0xbc>)
 80024d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024da:	6593      	str	r3, [r2, #88]	; 0x58
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <HAL_UART_MspInit+0xbc>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_UART_MspInit+0xbc>)
 80024ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <HAL_UART_MspInit+0xbc>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_UART_MspInit+0xbc>)
 80024f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002500:	230c      	movs	r3, #12
 8002502:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002510:	2307      	movs	r3, #7
 8002512:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002518:	4619      	mov	r1, r3
 800251a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251e:	f002 fbfb 	bl	8004d18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	2026      	movs	r0, #38	; 0x26
 8002528:	f002 f89c 	bl	8004664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800252c:	2026      	movs	r0, #38	; 0x26
 800252e:	f002 f8b3 	bl	8004698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002532:	bf00      	nop
 8002534:	3768      	adds	r7, #104	; 0x68
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40004400 	.word	0x40004400
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_InitTick+0xcc>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	4a2c      	ldr	r2, [pc, #176]	; (8002610 <HAL_InitTick+0xcc>)
 8002560:	f043 0310 	orr.w	r3, r3, #16
 8002564:	6593      	str	r3, [r2, #88]	; 0x58
 8002566:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <HAL_InitTick+0xcc>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002572:	f107 020c 	add.w	r2, r7, #12
 8002576:	f107 0310 	add.w	r3, r7, #16
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f003 faf7 	bl	8005b70 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002582:	f003 fac9 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8002586:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258a:	4a22      	ldr	r2, [pc, #136]	; (8002614 <HAL_InitTick+0xd0>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	0c9b      	lsrs	r3, r3, #18
 8002592:	3b01      	subs	r3, #1
 8002594:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_InitTick+0xd4>)
 8002598:	4a20      	ldr	r2, [pc, #128]	; (800261c <HAL_InitTick+0xd8>)
 800259a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800259c:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <HAL_InitTick+0xd4>)
 800259e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025a4:	4a1c      	ldr	r2, [pc, #112]	; (8002618 <HAL_InitTick+0xd4>)
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_InitTick+0xd4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_InitTick+0xd4>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80025b6:	4818      	ldr	r0, [pc, #96]	; (8002618 <HAL_InitTick+0xd4>)
 80025b8:	f003 fd42 	bl	8006040 <HAL_TIM_Base_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80025c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d11b      	bne.n	8002602 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80025ca:	4813      	ldr	r0, [pc, #76]	; (8002618 <HAL_InitTick+0xd4>)
 80025cc:	f003 fdf2 	bl	80061b4 <HAL_TIM_Base_Start_IT>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80025d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d111      	bne.n	8002602 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025de:	2036      	movs	r0, #54	; 0x36
 80025e0:	f002 f85a 	bl	8004698 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b0f      	cmp	r3, #15
 80025e8:	d808      	bhi.n	80025fc <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80025ea:	2200      	movs	r2, #0
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	2036      	movs	r0, #54	; 0x36
 80025f0:	f002 f838 	bl	8004664 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025f4:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_InitTick+0xdc>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e002      	b.n	8002602 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002606:	4618      	mov	r0, r3
 8002608:	3730      	adds	r7, #48	; 0x30
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	431bde83 	.word	0x431bde83
 8002618:	200007bc 	.word	0x200007bc
 800261c:	40001000 	.word	0x40001000
 8002620:	20000204 	.word	0x20000204

08002624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002628:	e7fe      	b.n	8002628 <NMI_Handler+0x4>

0800262a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <HardFault_Handler+0x4>

08002630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <MemManage_Handler+0x4>

08002636 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <BusFault_Handler+0x4>

0800263c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <UsageFault_Handler+0x4>

08002642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <DMA1_Channel1_IRQHandler+0x10>)
 8002682:	f002 f9fa 	bl	8004a7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000468 	.word	0x20000468

08002690 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <ADC1_2_IRQHandler+0x10>)
 8002696:	f000 fe25 	bl	80032e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200003fc 	.word	0x200003fc

080026a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <TIM4_IRQHandler+0x10>)
 80026aa:	f004 f939 	bl	8006920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000560 	.word	0x20000560

080026b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <USART2_IRQHandler+0x10>)
 80026be:	f005 fd09 	bl	80080d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200005f8 	.word	0x200005f8

080026cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <TIM6_DAC_IRQHandler+0x10>)
 80026d2:	f004 f925 	bl	8006920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200007bc 	.word	0x200007bc

080026e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
	return 1;
 80026e4:	2301      	movs	r3, #1
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_kill>:

int _kill(int pid, int sig)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026fa:	f007 fbf9 	bl	8009ef0 <__errno>
 80026fe:	4603      	mov	r3, r0
 8002700:	2216      	movs	r2, #22
 8002702:	601a      	str	r2, [r3, #0]
	return -1;
 8002704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_exit>:

void _exit (int status)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002718:	f04f 31ff 	mov.w	r1, #4294967295
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ffe7 	bl	80026f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002722:	e7fe      	b.n	8002722 <_exit+0x12>

08002724 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	e00a      	b.n	800274c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002736:	f3af 8000 	nop.w
 800273a:	4601      	mov	r1, r0
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	60ba      	str	r2, [r7, #8]
 8002742:	b2ca      	uxtb	r2, r1
 8002744:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3301      	adds	r3, #1
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	dbf0      	blt.n	8002736 <_read+0x12>
	}

return len;
 8002754:	687b      	ldr	r3, [r7, #4]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	e009      	b.n	8002784 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	60ba      	str	r2, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3301      	adds	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	dbf1      	blt.n	8002770 <_write+0x12>
	}
	return len;
 800278c:	687b      	ldr	r3, [r7, #4]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <_close>:

int _close(int file)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
	return -1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027be:	605a      	str	r2, [r3, #4]
	return 0;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <_isatty>:

int _isatty(int file)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
	return 1;
 80027d6:	2301      	movs	r3, #1
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
	return 0;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002808:	4a14      	ldr	r2, [pc, #80]	; (800285c <_sbrk+0x5c>)
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <_sbrk+0x60>)
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <_sbrk+0x64>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <_sbrk+0x64>)
 800281e:	4a12      	ldr	r2, [pc, #72]	; (8002868 <_sbrk+0x68>)
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <_sbrk+0x64>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	429a      	cmp	r2, r3
 800282e:	d207      	bcs.n	8002840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002830:	f007 fb5e 	bl	8009ef0 <__errno>
 8002834:	4603      	mov	r3, r0
 8002836:	220c      	movs	r2, #12
 8002838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800283a:	f04f 33ff 	mov.w	r3, #4294967295
 800283e:	e009      	b.n	8002854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <_sbrk+0x64>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <_sbrk+0x64>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	4a05      	ldr	r2, [pc, #20]	; (8002864 <_sbrk+0x64>)
 8002850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002852:	68fb      	ldr	r3, [r7, #12]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20008000 	.word	0x20008000
 8002860:	00000400 	.word	0x00000400
 8002864:	20000808 	.word	0x20000808
 8002868:	20000820 	.word	0x20000820

0800286c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <SystemInit+0x20>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	4a05      	ldr	r2, [pc, #20]	; (800288c <SystemInit+0x20>)
 8002878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800287c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002890:	480d      	ldr	r0, [pc, #52]	; (80028c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002892:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002894:	480d      	ldr	r0, [pc, #52]	; (80028cc <LoopForever+0x6>)
  ldr r1, =_edata
 8002896:	490e      	ldr	r1, [pc, #56]	; (80028d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002898:	4a0e      	ldr	r2, [pc, #56]	; (80028d4 <LoopForever+0xe>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800289c:	e002      	b.n	80028a4 <LoopCopyDataInit>

0800289e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a2:	3304      	adds	r3, #4

080028a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a8:	d3f9      	bcc.n	800289e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028aa:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028ac:	4c0b      	ldr	r4, [pc, #44]	; (80028dc <LoopForever+0x16>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b0:	e001      	b.n	80028b6 <LoopFillZerobss>

080028b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b4:	3204      	adds	r2, #4

080028b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b8:	d3fb      	bcc.n	80028b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028ba:	f7ff ffd7 	bl	800286c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028be:	f007 fb1d 	bl	8009efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028c2:	f7fe fdbf 	bl	8001444 <main>

080028c6 <LoopForever>:

LoopForever:
    b LoopForever
 80028c6:	e7fe      	b.n	80028c6 <LoopForever>
  ldr   r0, =_estack
 80028c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80028cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028d0:	200003e0 	.word	0x200003e0
  ldr r2, =_sidata
 80028d4:	0800ef20 	.word	0x0800ef20
  ldr r2, =_sbss
 80028d8:	200003e0 	.word	0x200003e0
  ldr r4, =_ebss
 80028dc:	20000820 	.word	0x20000820

080028e0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028e0:	e7fe      	b.n	80028e0 <COMP1_2_3_IRQHandler>

080028e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028ec:	2003      	movs	r0, #3
 80028ee:	f001 feae 	bl	800464e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028f2:	200f      	movs	r0, #15
 80028f4:	f7ff fe26 	bl	8002544 <HAL_InitTick>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	71fb      	strb	r3, [r7, #7]
 8002902:	e001      	b.n	8002908 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002904:	f7ff fc48 	bl	8002198 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002908:	79fb      	ldrb	r3, [r7, #7]

}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_IncTick+0x1c>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_IncTick+0x20>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4413      	add	r3, r2
 8002922:	4a03      	ldr	r2, [pc, #12]	; (8002930 <HAL_IncTick+0x1c>)
 8002924:	6013      	str	r3, [r2, #0]
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	2000080c 	.word	0x2000080c
 8002934:	20000208 	.word	0x20000208

08002938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return uwTick;
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <HAL_GetTick+0x14>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	2000080c 	.word	0x2000080c

08002950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002958:	f7ff ffee 	bl	8002938 <HAL_GetTick>
 800295c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d004      	beq.n	8002974 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_Delay+0x40>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4413      	add	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002974:	bf00      	nop
 8002976:	f7ff ffdf 	bl	8002938 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	429a      	cmp	r2, r3
 8002984:	d8f7      	bhi.n	8002976 <HAL_Delay+0x26>
  {
  }
}
 8002986:	bf00      	nop
 8002988:	bf00      	nop
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000208 	.word	0x20000208

08002994 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	609a      	str	r2, [r3, #8]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3360      	adds	r3, #96	; 0x60
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <LL_ADC_SetOffset+0x44>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	03fff000 	.word	0x03fff000

08002a44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3360      	adds	r3, #96	; 0x60
 8002a52:	461a      	mov	r2, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3360      	adds	r3, #96	; 0x60
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b087      	sub	sp, #28
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3360      	adds	r3, #96	; 0x60
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3360      	adds	r3, #96	; 0x60
 8002aec:	461a      	mov	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	615a      	str	r2, [r3, #20]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b087      	sub	sp, #28
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3330      	adds	r3, #48	; 0x30
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	4413      	add	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	211f      	movs	r1, #31
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	401a      	ands	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0e9b      	lsrs	r3, r3, #26
 8002b96:	f003 011f 	and.w	r1, r3, #31
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002baa:	bf00      	nop
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3314      	adds	r3, #20
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	0e5b      	lsrs	r3, r3, #25
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	4413      	add	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	0d1b      	lsrs	r3, r3, #20
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2107      	movs	r1, #7
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	401a      	ands	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	0d1b      	lsrs	r3, r3, #20
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	431a      	orrs	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c26:	bf00      	nop
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d10a      	bne.n	8002c5e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002c5c:	e00a      	b.n	8002c74 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	407f0000 	.word	0x407f0000

08002c84 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 031f 	and.w	r3, r3, #31
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ccc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6093      	str	r3, [r2, #8]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf4:	d101      	bne.n	8002cfa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d44:	d101      	bne.n	8002d4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d94:	f043 0202 	orr.w	r2, r3, #2
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <LL_ADC_IsEnabled+0x18>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <LL_ADC_IsEnabled+0x1a>
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d101      	bne.n	8002de6 <LL_ADC_IsDisableOngoing+0x18>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <LL_ADC_IsDisableOngoing+0x1a>
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e08:	f043 0204 	orr.w	r2, r3, #4
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d101      	bne.n	8002e34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d101      	bne.n	8002e5a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e177      	b.n	8003172 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff f9a5 	bl	80021e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff19 	bl	8002ce0 <LL_ADC_IsDeepPowerDownEnabled>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d004      	beq.n	8002ebe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff feff 	bl	8002cbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff ff34 	bl	8002d30 <LL_ADC_IsInternalRegulatorEnabled>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d115      	bne.n	8002efa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ff18 	bl	8002d08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ed8:	4b9c      	ldr	r3, [pc, #624]	; (800314c <HAL_ADC_Init+0x2e4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	099b      	lsrs	r3, r3, #6
 8002ede:	4a9c      	ldr	r2, [pc, #624]	; (8003150 <HAL_ADC_Init+0x2e8>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	099b      	lsrs	r3, r3, #6
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eec:	e002      	b.n	8002ef4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f9      	bne.n	8002eee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ff16 	bl	8002d30 <LL_ADC_IsInternalRegulatorEnabled>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10d      	bne.n	8002f26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	f043 0210 	orr.w	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ff76 	bl	8002e1c <LL_ADC_REG_IsConversionOngoing>
 8002f30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 8110 	bne.w	8003160 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f040 810c 	bne.w	8003160 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f50:	f043 0202 	orr.w	r2, r3, #2
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff23 	bl	8002da8 <LL_ADC_IsEnabled>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d111      	bne.n	8002f8c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f6c:	f7ff ff1c 	bl	8002da8 <LL_ADC_IsEnabled>
 8002f70:	4604      	mov	r4, r0
 8002f72:	4878      	ldr	r0, [pc, #480]	; (8003154 <HAL_ADC_Init+0x2ec>)
 8002f74:	f7ff ff18 	bl	8002da8 <LL_ADC_IsEnabled>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4323      	orrs	r3, r4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4619      	mov	r1, r3
 8002f86:	4874      	ldr	r0, [pc, #464]	; (8003158 <HAL_ADC_Init+0x2f0>)
 8002f88:	f7ff fd04 	bl	8002994 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7f5b      	ldrb	r3, [r3, #29]
 8002f90:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f96:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f9c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002fa2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002faa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d106      	bne.n	8002fc8 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	045b      	lsls	r3, r3, #17
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d009      	beq.n	8002fe4 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	4b5c      	ldr	r3, [pc, #368]	; (800315c <HAL_ADC_Init+0x2f4>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	69b9      	ldr	r1, [r7, #24]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff ff02 	bl	8002e1c <LL_ADC_REG_IsConversionOngoing>
 8003018:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff0f 	bl	8002e42 <LL_ADC_INJ_IsConversionOngoing>
 8003024:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d16d      	bne.n	8003108 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d16a      	bne.n	8003108 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003036:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800303e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800304e:	f023 0302 	bic.w	r3, r3, #2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	69b9      	ldr	r1, [r7, #24]
 8003058:	430b      	orrs	r3, r1
 800305a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d017      	beq.n	8003094 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003072:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800307c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003080:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6911      	ldr	r1, [r2, #16]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	430b      	orrs	r3, r1
 800308e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003092:	e013      	b.n	80030bc <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d118      	bne.n	80030f8 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030d0:	f023 0304 	bic.w	r3, r3, #4
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030dc:	4311      	orrs	r1, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030e2:	4311      	orrs	r1, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030e8:	430a      	orrs	r2, r1
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0201 	orr.w	r2, r2, #1
 80030f4:	611a      	str	r2, [r3, #16]
 80030f6:	e007      	b.n	8003108 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d10c      	bne.n	800312a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f023 010f 	bic.w	r1, r3, #15
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	1e5a      	subs	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
 8003128:	e007      	b.n	800313a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 020f 	bic.w	r2, r2, #15
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	f043 0201 	orr.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	65da      	str	r2, [r3, #92]	; 0x5c
 800314a:	e011      	b.n	8003170 <HAL_ADC_Init+0x308>
 800314c:	20000200 	.word	0x20000200
 8003150:	053e2d63 	.word	0x053e2d63
 8003154:	50000100 	.word	0x50000100
 8003158:	50000300 	.word	0x50000300
 800315c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	f043 0210 	orr.w	r2, r3, #16
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003170:	7ffb      	ldrb	r3, [r7, #31]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3724      	adds	r7, #36	; 0x24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd90      	pop	{r4, r7, pc}
 800317a:	bf00      	nop

0800317c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003188:	4851      	ldr	r0, [pc, #324]	; (80032d0 <HAL_ADC_Start_DMA+0x154>)
 800318a:	f7ff fd7b 	bl	8002c84 <LL_ADC_GetMultimode>
 800318e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fe41 	bl	8002e1c <LL_ADC_REG_IsConversionOngoing>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	f040 808f 	bne.w	80032c0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_Start_DMA+0x34>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e08a      	b.n	80032c6 <HAL_ADC_Start_DMA+0x14a>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d002      	beq.n	80031ca <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b09      	cmp	r3, #9
 80031c8:	d173      	bne.n	80032b2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 feb2 	bl	8003f34 <ADC_Enable>
 80031d0:	4603      	mov	r3, r0
 80031d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d166      	bne.n	80032a8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a38      	ldr	r2, [pc, #224]	; (80032d4 <HAL_ADC_Start_DMA+0x158>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d002      	beq.n	80031fe <HAL_ADC_Start_DMA+0x82>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	e001      	b.n	8003202 <HAL_ADC_Start_DMA+0x86>
 80031fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	4293      	cmp	r3, r2
 8003208:	d002      	beq.n	8003210 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d105      	bne.n	800321c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322c:	f023 0206 	bic.w	r2, r3, #6
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	661a      	str	r2, [r3, #96]	; 0x60
 8003234:	e002      	b.n	800323c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	4a25      	ldr	r2, [pc, #148]	; (80032d8 <HAL_ADC_Start_DMA+0x15c>)
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	4a24      	ldr	r2, [pc, #144]	; (80032dc <HAL_ADC_Start_DMA+0x160>)
 800324a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	4a23      	ldr	r2, [pc, #140]	; (80032e0 <HAL_ADC_Start_DMA+0x164>)
 8003252:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	221c      	movs	r2, #28
 800325a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0210 	orr.w	r2, r2, #16
 8003272:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3340      	adds	r3, #64	; 0x40
 800328e:	4619      	mov	r1, r3
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f001 fab6 	bl	8004804 <HAL_DMA_Start_IT>
 8003298:	4603      	mov	r3, r0
 800329a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fda7 	bl	8002df4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032a6:	e00d      	b.n	80032c4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80032b0:	e008      	b.n	80032c4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80032be:	e001      	b.n	80032c4 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
 80032c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	50000300 	.word	0x50000300
 80032d4:	50000100 	.word	0x50000100
 80032d8:	080040b7 	.word	0x080040b7
 80032dc:	0800418f 	.word	0x0800418f
 80032e0:	080041ab 	.word	0x080041ab

080032e4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80032ec:	2300      	movs	r3, #0
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003300:	4883      	ldr	r0, [pc, #524]	; (8003510 <HAL_ADC_IRQHandler+0x22c>)
 8003302:	f7ff fcbf 	bl	8002c84 <LL_ADC_GetMultimode>
 8003306:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d017      	beq.n	8003342 <HAL_ADC_IRQHandler+0x5e>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d012      	beq.n	8003342 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d105      	bne.n	8003334 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f001 f82f 	bl	8004398 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2202      	movs	r2, #2
 8003340:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d004      	beq.n	8003356 <HAL_ADC_IRQHandler+0x72>
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10a      	bne.n	800336c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8085 	beq.w	800346c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d07f      	beq.n	800346c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fbd5 	bl	8002b38 <LL_ADC_REG_IsTriggerSourceSWStart>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d064      	beq.n	800345e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5e      	ldr	r2, [pc, #376]	; (8003514 <HAL_ADC_IRQHandler+0x230>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d002      	beq.n	80033a4 <HAL_ADC_IRQHandler+0xc0>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	e001      	b.n	80033a8 <HAL_ADC_IRQHandler+0xc4>
 80033a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d008      	beq.n	80033c2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d002      	beq.n	80033c2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2b09      	cmp	r3, #9
 80033c0:	d104      	bne.n	80033cc <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	623b      	str	r3, [r7, #32]
 80033ca:	e00d      	b.n	80033e8 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a50      	ldr	r2, [pc, #320]	; (8003514 <HAL_ADC_IRQHandler+0x230>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d002      	beq.n	80033dc <HAL_ADC_IRQHandler+0xf8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	e001      	b.n	80033e0 <HAL_ADC_IRQHandler+0xfc>
 80033dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033e0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d135      	bne.n	800345e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d12e      	bne.n	800345e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fd09 	bl	8002e1c <LL_ADC_REG_IsConversionOngoing>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d11a      	bne.n	8003446 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 020c 	bic.w	r2, r2, #12
 800341e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003424:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d112      	bne.n	800345e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	f043 0201 	orr.w	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	65da      	str	r2, [r3, #92]	; 0x5c
 8003444:	e00b      	b.n	800345e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	f043 0210 	orr.w	r2, r3, #16
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003456:	f043 0201 	orr.w	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fe fe58 	bl	8002114 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	220c      	movs	r2, #12
 800346a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <HAL_ADC_IRQHandler+0x19c>
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10b      	bne.n	8003498 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 809e 	beq.w	80035c8 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8098 	beq.w	80035c8 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d105      	bne.n	80034b0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fb7e 	bl	8002bb6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80034ba:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fb39 	bl	8002b38 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034c6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a11      	ldr	r2, [pc, #68]	; (8003514 <HAL_ADC_IRQHandler+0x230>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d002      	beq.n	80034d8 <HAL_ADC_IRQHandler+0x1f4>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	e001      	b.n	80034dc <HAL_ADC_IRQHandler+0x1f8>
 80034d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d008      	beq.n	80034f6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	d002      	beq.n	80034f6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b07      	cmp	r3, #7
 80034f4:	d104      	bne.n	8003500 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	623b      	str	r3, [r7, #32]
 80034fe:	e011      	b.n	8003524 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a03      	ldr	r2, [pc, #12]	; (8003514 <HAL_ADC_IRQHandler+0x230>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d006      	beq.n	8003518 <HAL_ADC_IRQHandler+0x234>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	e005      	b.n	800351c <HAL_ADC_IRQHandler+0x238>
 8003510:	50000300 	.word	0x50000300
 8003514:	50000100 	.word	0x50000100
 8003518:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800351c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d047      	beq.n	80035ba <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <HAL_ADC_IRQHandler+0x260>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d03f      	beq.n	80035ba <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003540:	2b00      	cmp	r3, #0
 8003542:	d13a      	bne.n	80035ba <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	d133      	bne.n	80035ba <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d12e      	bne.n	80035ba <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fc6e 	bl	8002e42 <LL_ADC_INJ_IsConversionOngoing>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d11a      	bne.n	80035a2 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800357a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003580:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d112      	bne.n	80035ba <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	65da      	str	r2, [r3, #92]	; 0x5c
 80035a0:	e00b      	b.n	80035ba <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	f043 0210 	orr.w	r2, r3, #16
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b2:	f043 0201 	orr.w	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fec4 	bl	8004348 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2260      	movs	r2, #96	; 0x60
 80035c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d011      	beq.n	80035f6 <HAL_ADC_IRQHandler+0x312>
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00c      	beq.n	80035f6 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f89f 	bl	800372c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d012      	beq.n	8003626 <HAL_ADC_IRQHandler+0x342>
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 feaa 	bl	8004370 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362c:	2b00      	cmp	r3, #0
 800362e:	d012      	beq.n	8003656 <HAL_ADC_IRQHandler+0x372>
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00d      	beq.n	8003656 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fe9c 	bl	8004384 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003654:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	d036      	beq.n	80036ce <HAL_ADC_IRQHandler+0x3ea>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	d031      	beq.n	80036ce <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d102      	bne.n	8003678 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003672:	2301      	movs	r3, #1
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	e014      	b.n	80036a2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800367e:	4825      	ldr	r0, [pc, #148]	; (8003714 <HAL_ADC_IRQHandler+0x430>)
 8003680:	f7ff fb0e 	bl	8002ca0 <LL_ADC_GetMultiDMATransfer>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800368a:	2301      	movs	r3, #1
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
 800368e:	e008      	b.n	80036a2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800369e:	2301      	movs	r3, #1
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d10e      	bne.n	80036c6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b8:	f043 0202 	orr.w	r2, r3, #2
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f83d 	bl	8003740 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2210      	movs	r2, #16
 80036cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d018      	beq.n	800370a <HAL_ADC_IRQHandler+0x426>
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d013      	beq.n	800370a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f2:	f043 0208 	orr.w	r2, r3, #8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003702:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fe29 	bl	800435c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800370a:	bf00      	nop
 800370c:	3728      	adds	r7, #40	; 0x28
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	50000300 	.word	0x50000300

08003718 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b0b6      	sub	sp, #216	; 0xd8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x22>
 8003772:	2302      	movs	r3, #2
 8003774:	e3c8      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x7b4>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fb4a 	bl	8002e1c <LL_ADC_REG_IsConversionOngoing>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 83ad 	bne.w	8003eea <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	f7ff f9de 	bl	8002b5e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fb38 	bl	8002e1c <LL_ADC_REG_IsConversionOngoing>
 80037ac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fb44 	bl	8002e42 <LL_ADC_INJ_IsConversionOngoing>
 80037ba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 81d9 	bne.w	8003b7a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f040 81d4 	bne.w	8003b7a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037da:	d10f      	bne.n	80037fc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2200      	movs	r2, #0
 80037e6:	4619      	mov	r1, r3
 80037e8:	f7ff f9f8 	bl	8002bdc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff f98c 	bl	8002b12 <LL_ADC_SetSamplingTimeCommonConfig>
 80037fa:	e00e      	b.n	800381a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	6819      	ldr	r1, [r3, #0]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	461a      	mov	r2, r3
 800380a:	f7ff f9e7 	bl	8002bdc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff f97c 	bl	8002b12 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	08db      	lsrs	r3, r3, #3
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b04      	cmp	r3, #4
 800383a:	d022      	beq.n	8003882 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6919      	ldr	r1, [r3, #16]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800384c:	f7ff f8d6 	bl	80029fc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6919      	ldr	r1, [r3, #16]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	461a      	mov	r2, r3
 800385e:	f7ff f922 	bl	8002aa6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6919      	ldr	r1, [r3, #16]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	7f1b      	ldrb	r3, [r3, #28]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d102      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x124>
 8003872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003876:	e000      	b.n	800387a <HAL_ADC_ConfigChannel+0x126>
 8003878:	2300      	movs	r3, #0
 800387a:	461a      	mov	r2, r3
 800387c:	f7ff f92e 	bl	8002adc <LL_ADC_SetOffsetSaturation>
 8003880:	e17b      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff f8db 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 800388e:	4603      	mov	r3, r0
 8003890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x15a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff f8d0 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 80038a4:	4603      	mov	r3, r0
 80038a6:	0e9b      	lsrs	r3, r3, #26
 80038a8:	f003 021f 	and.w	r2, r3, #31
 80038ac:	e01e      	b.n	80038ec <HAL_ADC_ConfigChannel+0x198>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff f8c5 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80038dc:	2320      	movs	r3, #32
 80038de:	e004      	b.n	80038ea <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80038e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038e4:	fab3 f383 	clz	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x1b0>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	0e9b      	lsrs	r3, r3, #26
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	e018      	b.n	8003936 <HAL_ADC_ConfigChannel+0x1e2>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003910:	fa93 f3a3 	rbit	r3, r3
 8003914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800391c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003920:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003928:	2320      	movs	r3, #32
 800392a:	e004      	b.n	8003936 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800392c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003936:	429a      	cmp	r2, r3
 8003938:	d106      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2200      	movs	r2, #0
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff f894 	bl	8002a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2101      	movs	r1, #1
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff f878 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003954:	4603      	mov	r3, r0
 8003956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x220>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff f86d 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 800396a:	4603      	mov	r3, r0
 800396c:	0e9b      	lsrs	r3, r3, #26
 800396e:	f003 021f 	and.w	r2, r3, #31
 8003972:	e01e      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x25e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff f862 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003980:	4603      	mov	r3, r0
 8003982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003996:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800399a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80039a2:	2320      	movs	r3, #32
 80039a4:	e004      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80039a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039aa:	fab3 f383 	clz	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d105      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x276>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	0e9b      	lsrs	r3, r3, #26
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	e018      	b.n	80039fc <HAL_ADC_ConfigChannel+0x2a8>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039d6:	fa93 f3a3 	rbit	r3, r3
 80039da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80039e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80039ee:	2320      	movs	r3, #32
 80039f0:	e004      	b.n	80039fc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80039f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d106      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2101      	movs	r1, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff f831 	bl	8002a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2102      	movs	r1, #2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff f815 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x2e6>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2102      	movs	r1, #2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff f80a 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003a30:	4603      	mov	r3, r0
 8003a32:	0e9b      	lsrs	r3, r3, #26
 8003a34:	f003 021f 	and.w	r2, r3, #31
 8003a38:	e01e      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x324>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2102      	movs	r1, #2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe ffff 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003a46:	4603      	mov	r3, r0
 8003a48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a50:	fa93 f3a3 	rbit	r3, r3
 8003a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003a68:	2320      	movs	r3, #32
 8003a6a:	e004      	b.n	8003a76 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003a6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a70:	fab3 f383 	clz	r3, r3
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x33c>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	0e9b      	lsrs	r3, r3, #26
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	e016      	b.n	8003abe <HAL_ADC_ConfigChannel+0x36a>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a9c:	fa93 f3a3 	rbit	r3, r3
 8003aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003aa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	e004      	b.n	8003abe <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d106      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2102      	movs	r1, #2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe ffd0 	bl	8002a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2103      	movs	r1, #3
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe ffb4 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x3a8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2103      	movs	r1, #3
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe ffa9 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003af2:	4603      	mov	r3, r0
 8003af4:	0e9b      	lsrs	r3, r3, #26
 8003af6:	f003 021f 	and.w	r2, r3, #31
 8003afa:	e017      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x3d8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2103      	movs	r1, #3
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe ff9e 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b16:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003b1e:	2320      	movs	r3, #32
 8003b20:	e003      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d105      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x3f0>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	0e9b      	lsrs	r3, r3, #26
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	e011      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x414>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b4c:	fa93 f3a3 	rbit	r3, r3
 8003b50:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b54:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003b5c:	2320      	movs	r3, #32
 8003b5e:	e003      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d106      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2200      	movs	r2, #0
 8003b72:	2103      	movs	r1, #3
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe ff7b 	bl	8002a70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff f912 	bl	8002da8 <LL_ADC_IsEnabled>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f040 8140 	bne.w	8003e0c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	6819      	ldr	r1, [r3, #0]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f7ff f84b 	bl	8002c34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	4a8f      	ldr	r2, [pc, #572]	; (8003de0 <HAL_ADC_ConfigChannel+0x68c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	f040 8131 	bne.w	8003e0c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x47e>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	0e9b      	lsrs	r3, r3, #26
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	2b09      	cmp	r3, #9
 8003bc8:	bf94      	ite	ls
 8003bca:	2301      	movls	r3, #1
 8003bcc:	2300      	movhi	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	e019      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x4b2>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003be2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003bea:	2320      	movs	r3, #32
 8003bec:	e003      	b.n	8003bf6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bf0:	fab3 f383 	clz	r3, r3
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	bf94      	ite	ls
 8003c00:	2301      	movls	r3, #1
 8003c02:	2300      	movhi	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d079      	beq.n	8003cfe <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d107      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x4d2>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	0e9b      	lsrs	r3, r3, #26
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	069b      	lsls	r3, r3, #26
 8003c20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c24:	e015      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x4fe>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c36:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003c3e:	2320      	movs	r3, #32
 8003c40:	e003      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c44:	fab3 f383 	clz	r3, r3
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	069b      	lsls	r3, r3, #26
 8003c4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x51e>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	0e9b      	lsrs	r3, r3, #26
 8003c64:	3301      	adds	r3, #1
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c70:	e017      	b.n	8003ca2 <HAL_ADC_ConfigChannel+0x54e>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7a:	fa93 f3a3 	rbit	r3, r3
 8003c7e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	e003      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c90:	fab3 f383 	clz	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	3301      	adds	r3, #1
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	ea42 0103 	orr.w	r1, r2, r3
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x574>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	0e9b      	lsrs	r3, r3, #26
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f003 021f 	and.w	r2, r3, #31
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	051b      	lsls	r3, r3, #20
 8003cc6:	e018      	b.n	8003cfa <HAL_ADC_ConfigChannel+0x5a6>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	e003      	b.n	8003cec <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	f003 021f 	and.w	r2, r3, #31
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	e081      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d107      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x5c6>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	0e9b      	lsrs	r3, r3, #26
 8003d10:	3301      	adds	r3, #1
 8003d12:	069b      	lsls	r3, r3, #26
 8003d14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d18:	e015      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x5f2>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003d32:	2320      	movs	r3, #32
 8003d34:	e003      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	fab3 f383 	clz	r3, r3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	069b      	lsls	r3, r3, #26
 8003d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x612>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	0e9b      	lsrs	r3, r3, #26
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	2101      	movs	r1, #1
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	e017      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x642>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	61fb      	str	r3, [r7, #28]
  return result;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003d7e:	2320      	movs	r3, #32
 8003d80:	e003      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	fab3 f383 	clz	r3, r3
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f003 031f 	and.w	r3, r3, #31
 8003d90:	2101      	movs	r1, #1
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	ea42 0103 	orr.w	r1, r2, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10d      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x66e>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	0e9b      	lsrs	r3, r3, #26
 8003dac:	3301      	adds	r3, #1
 8003dae:	f003 021f 	and.w	r2, r3, #31
 8003db2:	4613      	mov	r3, r2
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	4413      	add	r3, r2
 8003db8:	3b1e      	subs	r3, #30
 8003dba:	051b      	lsls	r3, r3, #20
 8003dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dc0:	e01e      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x6ac>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa93 f3a3 	rbit	r3, r3
 8003dce:	613b      	str	r3, [r7, #16]
  return result;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d104      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003dda:	2320      	movs	r3, #32
 8003ddc:	e006      	b.n	8003dec <HAL_ADC_ConfigChannel+0x698>
 8003dde:	bf00      	nop
 8003de0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	3301      	adds	r3, #1
 8003dee:	f003 021f 	and.w	r2, r3, #31
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	3b1e      	subs	r3, #30
 8003dfa:	051b      	lsls	r3, r3, #20
 8003dfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e00:	430b      	orrs	r3, r1
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	6892      	ldr	r2, [r2, #8]
 8003e06:	4619      	mov	r1, r3
 8003e08:	f7fe fee8 	bl	8002bdc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <HAL_ADC_ConfigChannel+0x7bc>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d071      	beq.n	8003efc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e18:	483e      	ldr	r0, [pc, #248]	; (8003f14 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e1a:	f7fe fde1 	bl	80029e0 <LL_ADC_GetCommonPathInternalCh>
 8003e1e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a3c      	ldr	r2, [pc, #240]	; (8003f18 <HAL_ADC_ConfigChannel+0x7c4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_ADC_ConfigChannel+0x6e2>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a3a      	ldr	r2, [pc, #232]	; (8003f1c <HAL_ADC_ConfigChannel+0x7c8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d127      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d121      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e4a:	d157      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e54:	4619      	mov	r1, r3
 8003e56:	482f      	ldr	r0, [pc, #188]	; (8003f14 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e58:	f7fe fdaf 	bl	80029ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e5c:	4b30      	ldr	r3, [pc, #192]	; (8003f20 <HAL_ADC_ConfigChannel+0x7cc>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	099b      	lsrs	r3, r3, #6
 8003e62:	4a30      	ldr	r2, [pc, #192]	; (8003f24 <HAL_ADC_ConfigChannel+0x7d0>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e76:	e002      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f9      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e84:	e03a      	b.n	8003efc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a27      	ldr	r2, [pc, #156]	; (8003f28 <HAL_ADC_ConfigChannel+0x7d4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d113      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x764>
 8003e90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10d      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a22      	ldr	r2, [pc, #136]	; (8003f2c <HAL_ADC_ConfigChannel+0x7d8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d02a      	beq.n	8003efc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ea6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4818      	ldr	r0, [pc, #96]	; (8003f14 <HAL_ADC_ConfigChannel+0x7c0>)
 8003eb2:	f7fe fd82 	bl	80029ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003eb6:	e021      	b.n	8003efc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d11c      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d116      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <HAL_ADC_ConfigChannel+0x7d8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d011      	beq.n	8003efc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003edc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	480c      	ldr	r0, [pc, #48]	; (8003f14 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ee4:	f7fe fd69 	bl	80029ba <LL_ADC_SetCommonPathInternalCh>
 8003ee8:	e008      	b.n	8003efc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eee:	f043 0220 	orr.w	r2, r3, #32
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f04:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	37d8      	adds	r7, #216	; 0xd8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	80080000 	.word	0x80080000
 8003f14:	50000300 	.word	0x50000300
 8003f18:	c3210000 	.word	0xc3210000
 8003f1c:	90c00010 	.word	0x90c00010
 8003f20:	20000200 	.word	0x20000200
 8003f24:	053e2d63 	.word	0x053e2d63
 8003f28:	c7520000 	.word	0xc7520000
 8003f2c:	50000100 	.word	0x50000100
 8003f30:	cb840000 	.word	0xcb840000

08003f34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe ff31 	bl	8002da8 <LL_ADC_IsEnabled>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d14d      	bne.n	8003fe8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	4b28      	ldr	r3, [pc, #160]	; (8003ff4 <ADC_Enable+0xc0>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5e:	f043 0210 	orr.w	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6a:	f043 0201 	orr.w	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e039      	b.n	8003fea <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe feec 	bl	8002d58 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f80:	f7fe fcda 	bl	8002938 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f86:	e028      	b.n	8003fda <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe ff0b 	bl	8002da8 <LL_ADC_IsEnabled>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d104      	bne.n	8003fa2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe fedb 	bl	8002d58 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fa2:	f7fe fcc9 	bl	8002938 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d914      	bls.n	8003fda <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d00d      	beq.n	8003fda <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc2:	f043 0210 	orr.w	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e007      	b.n	8003fea <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d1cf      	bne.n	8003f88 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	8000003f 	.word	0x8000003f

08003ff8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe fee2 	bl	8002dce <LL_ADC_IsDisableOngoing>
 800400a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe fec9 	bl	8002da8 <LL_ADC_IsEnabled>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d047      	beq.n	80040ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d144      	bne.n	80040ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 030d 	and.w	r3, r3, #13
 800402c:	2b01      	cmp	r3, #1
 800402e:	d10c      	bne.n	800404a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe fea3 	bl	8002d80 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2203      	movs	r2, #3
 8004040:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004042:	f7fe fc79 	bl	8002938 <HAL_GetTick>
 8004046:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004048:	e029      	b.n	800409e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404e:	f043 0210 	orr.w	r2, r3, #16
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405a:	f043 0201 	orr.w	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e023      	b.n	80040ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004066:	f7fe fc67 	bl	8002938 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d914      	bls.n	800409e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004086:	f043 0210 	orr.w	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e007      	b.n	80040ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1dc      	bne.n	8004066 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d14b      	bne.n	8004168 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d021      	beq.n	800412e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe fd22 	bl	8002b38 <LL_ADC_REG_IsTriggerSourceSWStart>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d032      	beq.n	8004160 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d12b      	bne.n	8004160 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d11f      	bne.n	8004160 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	f043 0201 	orr.w	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	65da      	str	r2, [r3, #92]	; 0x5c
 800412c:	e018      	b.n	8004160 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d111      	bne.n	8004160 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	f043 0201 	orr.w	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7fd ffd7 	bl	8002114 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004166:	e00e      	b.n	8004186 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff fae3 	bl	8003740 <HAL_ADC_ErrorCallback>
}
 800417a:	e004      	b.n	8004186 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
}
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7ff fabb 	bl	8003718 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041a2:	bf00      	nop
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c8:	f043 0204 	orr.w	r2, r3, #4
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f7ff fab5 	bl	8003740 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <LL_ADC_IsEnabled>:
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <LL_ADC_IsEnabled+0x18>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <LL_ADC_IsEnabled+0x1a>
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <LL_ADC_StartCalibration>:
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004216:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004220:	4313      	orrs	r3, r2
 8004222:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	609a      	str	r2, [r3, #8]
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <LL_ADC_IsCalibrationOnGoing>:
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800424a:	d101      	bne.n	8004250 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <LL_ADC_REG_IsConversionOngoing>:
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b04      	cmp	r3, #4
 8004270:	d101      	bne.n	8004276 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_ADCEx_Calibration_Start+0x1c>
 800429c:	2302      	movs	r3, #2
 800429e:	e04d      	b.n	800433c <HAL_ADCEx_Calibration_Start+0xb8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff fea5 	bl	8003ff8 <ADC_Disable>
 80042ae:	4603      	mov	r3, r0
 80042b0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d136      	bne.n	8004326 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042c0:	f023 0302 	bic.w	r3, r3, #2
 80042c4:	f043 0202 	orr.w	r2, r3, #2
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6839      	ldr	r1, [r7, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff ff96 	bl	8004204 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80042d8:	e014      	b.n	8004304 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3301      	adds	r3, #1
 80042de:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4a18      	ldr	r2, [pc, #96]	; (8004344 <HAL_ADCEx_Calibration_Start+0xc0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d90d      	bls.n	8004304 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	f023 0312 	bic.w	r3, r3, #18
 80042f0:	f043 0210 	orr.w	r2, r3, #16
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e01b      	b.n	800433c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ff94 	bl	8004236 <LL_ADC_IsCalibrationOnGoing>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e2      	bne.n	80042da <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	f023 0303 	bic.w	r3, r3, #3
 800431c:	f043 0201 	orr.w	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	65da      	str	r2, [r3, #92]	; 0x5c
 8004324:	e005      	b.n	8004332 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	f043 0210 	orr.w	r2, r3, #16
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800433a:	7bfb      	ldrb	r3, [r7, #15]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	0004de01 	.word	0x0004de01

08004348 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b0a1      	sub	sp, #132	; 0x84
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e08b      	b.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80043d2:	2300      	movs	r3, #0
 80043d4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80043d6:	2300      	movs	r3, #0
 80043d8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043e2:	d102      	bne.n	80043ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043e4:	4b41      	ldr	r3, [pc, #260]	; (80044ec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	e001      	b.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f8:	f043 0220 	orr.w	r2, r3, #32
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e06a      	b.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ff25 	bl	800425e <LL_ADC_REG_IsConversionOngoing>
 8004414:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff ff1f 	bl	800425e <LL_ADC_REG_IsConversionOngoing>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d14c      	bne.n	80044c0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004428:	2b00      	cmp	r3, #0
 800442a:	d149      	bne.n	80044c0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800442c:	4b30      	ldr	r3, [pc, #192]	; (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800442e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d028      	beq.n	800448a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6859      	ldr	r1, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800444a:	035b      	lsls	r3, r3, #13
 800444c:	430b      	orrs	r3, r1
 800444e:	431a      	orrs	r2, r3
 8004450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004452:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004454:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004458:	f7ff fec1 	bl	80041de <LL_ADC_IsEnabled>
 800445c:	4604      	mov	r4, r0
 800445e:	4823      	ldr	r0, [pc, #140]	; (80044ec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004460:	f7ff febd 	bl	80041de <LL_ADC_IsEnabled>
 8004464:	4603      	mov	r3, r0
 8004466:	4323      	orrs	r3, r4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d133      	bne.n	80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800446c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004474:	f023 030f 	bic.w	r3, r3, #15
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	6811      	ldr	r1, [r2, #0]
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	6892      	ldr	r2, [r2, #8]
 8004480:	430a      	orrs	r2, r1
 8004482:	431a      	orrs	r2, r3
 8004484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004486:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004488:	e024      	b.n	80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800448a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004494:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004496:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800449a:	f7ff fea0 	bl	80041de <LL_ADC_IsEnabled>
 800449e:	4604      	mov	r4, r0
 80044a0:	4812      	ldr	r0, [pc, #72]	; (80044ec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80044a2:	f7ff fe9c 	bl	80041de <LL_ADC_IsEnabled>
 80044a6:	4603      	mov	r3, r0
 80044a8:	4323      	orrs	r3, r4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d112      	bne.n	80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80044b6:	f023 030f 	bic.w	r3, r3, #15
 80044ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80044bc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044be:	e009      	b.n	80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80044d2:	e000      	b.n	80044d6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80044de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3784      	adds	r7, #132	; 0x84
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd90      	pop	{r4, r7, pc}
 80044ea:	bf00      	nop
 80044ec:	50000100 	.word	0x50000100
 80044f0:	50000300 	.word	0x50000300

080044f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004504:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004510:	4013      	ands	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800451c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004526:	4a04      	ldr	r2, [pc, #16]	; (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	60d3      	str	r3, [r2, #12]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <__NVIC_GetPriorityGrouping+0x18>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	f003 0307 	and.w	r3, r3, #7
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db0b      	blt.n	8004582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	f003 021f 	and.w	r2, r3, #31
 8004570:	4907      	ldr	r1, [pc, #28]	; (8004590 <__NVIC_EnableIRQ+0x38>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2001      	movs	r0, #1
 800457a:	fa00 f202 	lsl.w	r2, r0, r2
 800457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000e100 	.word	0xe000e100

08004594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	6039      	str	r1, [r7, #0]
 800459e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	db0a      	blt.n	80045be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	490c      	ldr	r1, [pc, #48]	; (80045e0 <__NVIC_SetPriority+0x4c>)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	0112      	lsls	r2, r2, #4
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	440b      	add	r3, r1
 80045b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045bc:	e00a      	b.n	80045d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	4908      	ldr	r1, [pc, #32]	; (80045e4 <__NVIC_SetPriority+0x50>)
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	3b04      	subs	r3, #4
 80045cc:	0112      	lsls	r2, r2, #4
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	440b      	add	r3, r1
 80045d2:	761a      	strb	r2, [r3, #24]
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000e100 	.word	0xe000e100
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	; 0x24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f1c3 0307 	rsb	r3, r3, #7
 8004602:	2b04      	cmp	r3, #4
 8004604:	bf28      	it	cs
 8004606:	2304      	movcs	r3, #4
 8004608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3304      	adds	r3, #4
 800460e:	2b06      	cmp	r3, #6
 8004610:	d902      	bls.n	8004618 <NVIC_EncodePriority+0x30>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3b03      	subs	r3, #3
 8004616:	e000      	b.n	800461a <NVIC_EncodePriority+0x32>
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800461c:	f04f 32ff 	mov.w	r2, #4294967295
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43da      	mvns	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	401a      	ands	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004630:	f04f 31ff 	mov.w	r1, #4294967295
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	43d9      	mvns	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	4313      	orrs	r3, r2
         );
}
 8004642:	4618      	mov	r0, r3
 8004644:	3724      	adds	r7, #36	; 0x24
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff ff4c 	bl	80044f4 <__NVIC_SetPriorityGrouping>
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004672:	f7ff ff63 	bl	800453c <__NVIC_GetPriorityGrouping>
 8004676:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	6978      	ldr	r0, [r7, #20]
 800467e:	f7ff ffb3 	bl	80045e8 <NVIC_EncodePriority>
 8004682:	4602      	mov	r2, r0
 8004684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004688:	4611      	mov	r1, r2
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff ff82 	bl	8004594 <__NVIC_SetPriority>
}
 8004690:	bf00      	nop
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ff56 	bl	8004558 <__NVIC_EnableIRQ>
}
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e08d      	b.n	80047e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	4b47      	ldr	r3, [pc, #284]	; (80047ec <HAL_DMA_Init+0x138>)
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d80f      	bhi.n	80046f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	4b45      	ldr	r3, [pc, #276]	; (80047f0 <HAL_DMA_Init+0x13c>)
 80046da:	4413      	add	r3, r2
 80046dc:	4a45      	ldr	r2, [pc, #276]	; (80047f4 <HAL_DMA_Init+0x140>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	009a      	lsls	r2, r3, #2
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a42      	ldr	r2, [pc, #264]	; (80047f8 <HAL_DMA_Init+0x144>)
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
 80046f0:	e00e      	b.n	8004710 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	4b40      	ldr	r3, [pc, #256]	; (80047fc <HAL_DMA_Init+0x148>)
 80046fa:	4413      	add	r3, r2
 80046fc:	4a3d      	ldr	r2, [pc, #244]	; (80047f4 <HAL_DMA_Init+0x140>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	009a      	lsls	r2, r3, #2
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a3c      	ldr	r2, [pc, #240]	; (8004800 <HAL_DMA_Init+0x14c>)
 800470e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800474c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fa76 	bl	8004c54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004770:	d102      	bne.n	8004778 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800478c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d010      	beq.n	80047b8 <HAL_DMA_Init+0x104>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b04      	cmp	r3, #4
 800479c:	d80c      	bhi.n	80047b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fa96 	bl	8004cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047b4:	605a      	str	r2, [r3, #4]
 80047b6:	e008      	b.n	80047ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40020407 	.word	0x40020407
 80047f0:	bffdfff8 	.word	0xbffdfff8
 80047f4:	cccccccd 	.word	0xcccccccd
 80047f8:	40020000 	.word	0x40020000
 80047fc:	bffdfbf8 	.word	0xbffdfbf8
 8004800:	40020400 	.word	0x40020400

08004804 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_DMA_Start_IT+0x20>
 8004820:	2302      	movs	r3, #2
 8004822:	e066      	b.n	80048f2 <HAL_DMA_Start_IT+0xee>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d155      	bne.n	80048e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f9bb 	bl	8004bd8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 020e 	orr.w	r2, r2, #14
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e00f      	b.n	800489c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0204 	bic.w	r2, r2, #4
 800488a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 020a 	orr.w	r2, r2, #10
 800489a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	e005      	b.n	80048f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
 80048ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b085      	sub	sp, #20
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d005      	beq.n	800491e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2204      	movs	r2, #4
 8004916:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
 800491c:	e037      	b.n	800498e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 020e 	bic.w	r2, r2, #14
 800492c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800493c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0201 	bic.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	f003 021f 	and.w	r2, r3, #31
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	2101      	movs	r1, #1
 800495c:	fa01 f202 	lsl.w	r2, r1, r2
 8004960:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800496a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00c      	beq.n	800498e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004982:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800498c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d00d      	beq.n	80049e0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2204      	movs	r2, #4
 80049c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	73fb      	strb	r3, [r7, #15]
 80049de:	e047      	b.n	8004a70 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 020e 	bic.w	r2, r2, #14
 80049ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0201 	bic.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a14:	f003 021f 	and.w	r2, r3, #31
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a22:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a2c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00c      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a44:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a4e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4798      	blx	r3
    }
  }
  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d026      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x7a>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d021      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d107      	bne.n	8004ace <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0204 	bic.w	r2, r2, #4
 8004acc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	f003 021f 	and.w	r2, r3, #31
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2104      	movs	r1, #4
 8004adc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d071      	beq.n	8004bce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004af2:	e06c      	b.n	8004bce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	2202      	movs	r2, #2
 8004afe:	409a      	lsls	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d02e      	beq.n	8004b66 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d029      	beq.n	8004b66 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10b      	bne.n	8004b38 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 020a 	bic.w	r2, r2, #10
 8004b2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3c:	f003 021f 	and.w	r2, r3, #31
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	2102      	movs	r1, #2
 8004b46:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d038      	beq.n	8004bce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b64:	e033      	b.n	8004bce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	f003 031f 	and.w	r3, r3, #31
 8004b6e:	2208      	movs	r2, #8
 8004b70:	409a      	lsls	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d02a      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d025      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 020e 	bic.w	r2, r2, #14
 8004b92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	f003 021f 	and.w	r2, r3, #31
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
}
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d004      	beq.n	8004c02 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c00:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	f003 021f 	and.w	r2, r3, #31
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	2101      	movs	r1, #1
 8004c10:	fa01 f202 	lsl.w	r2, r1, r2
 8004c14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d108      	bne.n	8004c38 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c36:	e007      	b.n	8004c48 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	60da      	str	r2, [r3, #12]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	4b16      	ldr	r3, [pc, #88]	; (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d802      	bhi.n	8004c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c68:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	e001      	b.n	8004c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004c6e:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c70:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	3b08      	subs	r3, #8
 8004c7e:	4a12      	ldr	r2, [pc, #72]	; (8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	091b      	lsrs	r3, r3, #4
 8004c86:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8c:	089b      	lsrs	r3, r3, #2
 8004c8e:	009a      	lsls	r2, r3, #2
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4413      	add	r3, r2
 8004c94:	461a      	mov	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a0b      	ldr	r2, [pc, #44]	; (8004ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	409a      	lsls	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40020407 	.word	0x40020407
 8004cc0:	40020800 	.word	0x40020800
 8004cc4:	40020820 	.word	0x40020820
 8004cc8:	cccccccd 	.word	0xcccccccd
 8004ccc:	40020880 	.word	0x40020880

08004cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a08      	ldr	r2, [pc, #32]	; (8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004cf2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	1000823f 	.word	0x1000823f
 8004d14:	40020940 	.word	0x40020940

08004d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d26:	e15a      	b.n	8004fde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	4013      	ands	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 814c 	beq.w	8004fd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d005      	beq.n	8004d58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d130      	bne.n	8004dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	2203      	movs	r2, #3
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d8e:	2201      	movs	r2, #1
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	091b      	lsrs	r3, r3, #4
 8004da4:	f003 0201 	and.w	r2, r3, #1
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d017      	beq.n	8004df6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d123      	bne.n	8004e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	08da      	lsrs	r2, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3208      	adds	r2, #8
 8004e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	220f      	movs	r2, #15
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4013      	ands	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	08da      	lsrs	r2, r3, #3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3208      	adds	r2, #8
 8004e44:	6939      	ldr	r1, [r7, #16]
 8004e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	2203      	movs	r2, #3
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 0203 	and.w	r2, r3, #3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80a6 	beq.w	8004fd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e8c:	4b5b      	ldr	r3, [pc, #364]	; (8004ffc <HAL_GPIO_Init+0x2e4>)
 8004e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e90:	4a5a      	ldr	r2, [pc, #360]	; (8004ffc <HAL_GPIO_Init+0x2e4>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6613      	str	r3, [r2, #96]	; 0x60
 8004e98:	4b58      	ldr	r3, [pc, #352]	; (8004ffc <HAL_GPIO_Init+0x2e4>)
 8004e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ea4:	4a56      	ldr	r2, [pc, #344]	; (8005000 <HAL_GPIO_Init+0x2e8>)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	089b      	lsrs	r3, r3, #2
 8004eaa:	3302      	adds	r3, #2
 8004eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	220f      	movs	r2, #15
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ece:	d01f      	beq.n	8004f10 <HAL_GPIO_Init+0x1f8>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a4c      	ldr	r2, [pc, #304]	; (8005004 <HAL_GPIO_Init+0x2ec>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d019      	beq.n	8004f0c <HAL_GPIO_Init+0x1f4>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a4b      	ldr	r2, [pc, #300]	; (8005008 <HAL_GPIO_Init+0x2f0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d013      	beq.n	8004f08 <HAL_GPIO_Init+0x1f0>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a4a      	ldr	r2, [pc, #296]	; (800500c <HAL_GPIO_Init+0x2f4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00d      	beq.n	8004f04 <HAL_GPIO_Init+0x1ec>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a49      	ldr	r2, [pc, #292]	; (8005010 <HAL_GPIO_Init+0x2f8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d007      	beq.n	8004f00 <HAL_GPIO_Init+0x1e8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a48      	ldr	r2, [pc, #288]	; (8005014 <HAL_GPIO_Init+0x2fc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d101      	bne.n	8004efc <HAL_GPIO_Init+0x1e4>
 8004ef8:	2305      	movs	r3, #5
 8004efa:	e00a      	b.n	8004f12 <HAL_GPIO_Init+0x1fa>
 8004efc:	2306      	movs	r3, #6
 8004efe:	e008      	b.n	8004f12 <HAL_GPIO_Init+0x1fa>
 8004f00:	2304      	movs	r3, #4
 8004f02:	e006      	b.n	8004f12 <HAL_GPIO_Init+0x1fa>
 8004f04:	2303      	movs	r3, #3
 8004f06:	e004      	b.n	8004f12 <HAL_GPIO_Init+0x1fa>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e002      	b.n	8004f12 <HAL_GPIO_Init+0x1fa>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <HAL_GPIO_Init+0x1fa>
 8004f10:	2300      	movs	r3, #0
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	f002 0203 	and.w	r2, r2, #3
 8004f18:	0092      	lsls	r2, r2, #2
 8004f1a:	4093      	lsls	r3, r2
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f22:	4937      	ldr	r1, [pc, #220]	; (8005000 <HAL_GPIO_Init+0x2e8>)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	089b      	lsrs	r3, r3, #2
 8004f28:	3302      	adds	r3, #2
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f30:	4b39      	ldr	r3, [pc, #228]	; (8005018 <HAL_GPIO_Init+0x300>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f54:	4a30      	ldr	r2, [pc, #192]	; (8005018 <HAL_GPIO_Init+0x300>)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f5a:	4b2f      	ldr	r3, [pc, #188]	; (8005018 <HAL_GPIO_Init+0x300>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	43db      	mvns	r3, r3
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4013      	ands	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f7e:	4a26      	ldr	r2, [pc, #152]	; (8005018 <HAL_GPIO_Init+0x300>)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004f84:	4b24      	ldr	r3, [pc, #144]	; (8005018 <HAL_GPIO_Init+0x300>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4013      	ands	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <HAL_GPIO_Init+0x300>)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004fae:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <HAL_GPIO_Init+0x300>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fd2:	4a11      	ldr	r2, [pc, #68]	; (8005018 <HAL_GPIO_Init+0x300>)
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f47f ae9d 	bne.w	8004d28 <HAL_GPIO_Init+0x10>
  }
}
 8004fee:	bf00      	nop
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40021000 	.word	0x40021000
 8005000:	40010000 	.word	0x40010000
 8005004:	48000400 	.word	0x48000400
 8005008:	48000800 	.word	0x48000800
 800500c:	48000c00 	.word	0x48000c00
 8005010:	48001000 	.word	0x48001000
 8005014:	48001400 	.word	0x48001400
 8005018:	40010400 	.word	0x40010400

0800501c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	807b      	strh	r3, [r7, #2]
 8005028:	4613      	mov	r3, r2
 800502a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800502c:	787b      	ldrb	r3, [r7, #1]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005038:	e002      	b.n	8005040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800503a:	887a      	ldrh	r2, [r7, #2]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d141      	bne.n	80050de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800505a:	4b4b      	ldr	r3, [pc, #300]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005066:	d131      	bne.n	80050cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005068:	4b47      	ldr	r3, [pc, #284]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800506e:	4a46      	ldr	r2, [pc, #280]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005078:	4b43      	ldr	r3, [pc, #268]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005080:	4a41      	ldr	r2, [pc, #260]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005086:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005088:	4b40      	ldr	r3, [pc, #256]	; (800518c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2232      	movs	r2, #50	; 0x32
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	4a3f      	ldr	r2, [pc, #252]	; (8005190 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	0c9b      	lsrs	r3, r3, #18
 800509a:	3301      	adds	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800509e:	e002      	b.n	80050a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050a6:	4b38      	ldr	r3, [pc, #224]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b2:	d102      	bne.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f2      	bne.n	80050a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050ba:	4b33      	ldr	r3, [pc, #204]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c6:	d158      	bne.n	800517a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e057      	b.n	800517c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050cc:	4b2e      	ldr	r3, [pc, #184]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d2:	4a2d      	ldr	r2, [pc, #180]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050dc:	e04d      	b.n	800517a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e4:	d141      	bne.n	800516a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050e6:	4b28      	ldr	r3, [pc, #160]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f2:	d131      	bne.n	8005158 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050f4:	4b24      	ldr	r3, [pc, #144]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050fa:	4a23      	ldr	r2, [pc, #140]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005100:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005104:	4b20      	ldr	r3, [pc, #128]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800510c:	4a1e      	ldr	r2, [pc, #120]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005112:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005114:	4b1d      	ldr	r3, [pc, #116]	; (800518c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2232      	movs	r2, #50	; 0x32
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	4a1c      	ldr	r2, [pc, #112]	; (8005190 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	0c9b      	lsrs	r3, r3, #18
 8005126:	3301      	adds	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800512a:	e002      	b.n	8005132 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3b01      	subs	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513e:	d102      	bne.n	8005146 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f2      	bne.n	800512c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800514e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005152:	d112      	bne.n	800517a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e011      	b.n	800517c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800515e:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005164:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005168:	e007      	b.n	800517a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800516a:	4b07      	ldr	r3, [pc, #28]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005172:	4a05      	ldr	r2, [pc, #20]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005174:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005178:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	40007000 	.word	0x40007000
 800518c:	20000200 	.word	0x20000200
 8005190:	431bde83 	.word	0x431bde83

08005194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e306      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d075      	beq.n	800529e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051b2:	4b97      	ldr	r3, [pc, #604]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051bc:	4b94      	ldr	r3, [pc, #592]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b0c      	cmp	r3, #12
 80051ca:	d102      	bne.n	80051d2 <HAL_RCC_OscConfig+0x3e>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d002      	beq.n	80051d8 <HAL_RCC_OscConfig+0x44>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d10b      	bne.n	80051f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d8:	4b8d      	ldr	r3, [pc, #564]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d05b      	beq.n	800529c <HAL_RCC_OscConfig+0x108>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d157      	bne.n	800529c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e2e1      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f8:	d106      	bne.n	8005208 <HAL_RCC_OscConfig+0x74>
 80051fa:	4b85      	ldr	r3, [pc, #532]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a84      	ldr	r2, [pc, #528]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	e01d      	b.n	8005244 <HAL_RCC_OscConfig+0xb0>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005210:	d10c      	bne.n	800522c <HAL_RCC_OscConfig+0x98>
 8005212:	4b7f      	ldr	r3, [pc, #508]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a7e      	ldr	r2, [pc, #504]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	4b7c      	ldr	r3, [pc, #496]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a7b      	ldr	r2, [pc, #492]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	e00b      	b.n	8005244 <HAL_RCC_OscConfig+0xb0>
 800522c:	4b78      	ldr	r3, [pc, #480]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a77      	ldr	r2, [pc, #476]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	4b75      	ldr	r3, [pc, #468]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a74      	ldr	r2, [pc, #464]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800523e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d013      	beq.n	8005274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524c:	f7fd fb74 	bl	8002938 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005254:	f7fd fb70 	bl	8002938 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b64      	cmp	r3, #100	; 0x64
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e2a6      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005266:	4b6a      	ldr	r3, [pc, #424]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0xc0>
 8005272:	e014      	b.n	800529e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005274:	f7fd fb60 	bl	8002938 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800527c:	f7fd fb5c 	bl	8002938 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b64      	cmp	r3, #100	; 0x64
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e292      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800528e:	4b60      	ldr	r3, [pc, #384]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f0      	bne.n	800527c <HAL_RCC_OscConfig+0xe8>
 800529a:	e000      	b.n	800529e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800529c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d075      	beq.n	8005396 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052aa:	4b59      	ldr	r3, [pc, #356]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052b4:	4b56      	ldr	r3, [pc, #344]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	d102      	bne.n	80052ca <HAL_RCC_OscConfig+0x136>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d002      	beq.n	80052d0 <HAL_RCC_OscConfig+0x13c>
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d11f      	bne.n	8005310 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052d0:	4b4f      	ldr	r3, [pc, #316]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_RCC_OscConfig+0x154>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e265      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e8:	4b49      	ldr	r3, [pc, #292]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	061b      	lsls	r3, r3, #24
 80052f6:	4946      	ldr	r1, [pc, #280]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052fc:	4b45      	ldr	r3, [pc, #276]	; (8005414 <HAL_RCC_OscConfig+0x280>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f7fd f91f 	bl	8002544 <HAL_InitTick>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d043      	beq.n	8005394 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e251      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d023      	beq.n	8005360 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005318:	4b3d      	ldr	r3, [pc, #244]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a3c      	ldr	r2, [pc, #240]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800531e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005324:	f7fd fb08 	bl	8002938 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532c:	f7fd fb04 	bl	8002938 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e23a      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800533e:	4b34      	ldr	r3, [pc, #208]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534a:	4b31      	ldr	r3, [pc, #196]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	061b      	lsls	r3, r3, #24
 8005358:	492d      	ldr	r1, [pc, #180]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800535a:	4313      	orrs	r3, r2
 800535c:	604b      	str	r3, [r1, #4]
 800535e:	e01a      	b.n	8005396 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005360:	4b2b      	ldr	r3, [pc, #172]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2a      	ldr	r2, [pc, #168]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800536a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fd fae4 	bl	8002938 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005374:	f7fd fae0 	bl	8002938 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e216      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005386:	4b22      	ldr	r3, [pc, #136]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x1e0>
 8005392:	e000      	b.n	8005396 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005394:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d041      	beq.n	8005426 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01c      	beq.n	80053e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053aa:	4b19      	ldr	r3, [pc, #100]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80053ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b0:	4a17      	ldr	r2, [pc, #92]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ba:	f7fd fabd 	bl	8002938 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053c2:	f7fd fab9 	bl	8002938 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e1ef      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053d4:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80053d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0ef      	beq.n	80053c2 <HAL_RCC_OscConfig+0x22e>
 80053e2:	e020      	b.n	8005426 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053e4:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80053e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ea:	4a09      	ldr	r2, [pc, #36]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fd faa0 	bl	8002938 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053fa:	e00d      	b.n	8005418 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053fc:	f7fd fa9c 	bl	8002938 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d906      	bls.n	8005418 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e1d2      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000
 8005414:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005418:	4b8c      	ldr	r3, [pc, #560]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 800541a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1ea      	bne.n	80053fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 80a6 	beq.w	8005580 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005434:	2300      	movs	r3, #0
 8005436:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005438:	4b84      	ldr	r3, [pc, #528]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_RCC_OscConfig+0x2b4>
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <HAL_RCC_OscConfig+0x2b6>
 8005448:	2300      	movs	r3, #0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00d      	beq.n	800546a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800544e:	4b7f      	ldr	r3, [pc, #508]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005452:	4a7e      	ldr	r2, [pc, #504]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005458:	6593      	str	r3, [r2, #88]	; 0x58
 800545a:	4b7c      	ldr	r3, [pc, #496]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 800545c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005466:	2301      	movs	r3, #1
 8005468:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800546a:	4b79      	ldr	r3, [pc, #484]	; (8005650 <HAL_RCC_OscConfig+0x4bc>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	2b00      	cmp	r3, #0
 8005474:	d118      	bne.n	80054a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005476:	4b76      	ldr	r3, [pc, #472]	; (8005650 <HAL_RCC_OscConfig+0x4bc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a75      	ldr	r2, [pc, #468]	; (8005650 <HAL_RCC_OscConfig+0x4bc>)
 800547c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005482:	f7fd fa59 	bl	8002938 <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005488:	e008      	b.n	800549c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800548a:	f7fd fa55 	bl	8002938 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e18b      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800549c:	4b6c      	ldr	r3, [pc, #432]	; (8005650 <HAL_RCC_OscConfig+0x4bc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0f0      	beq.n	800548a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d108      	bne.n	80054c2 <HAL_RCC_OscConfig+0x32e>
 80054b0:	4b66      	ldr	r3, [pc, #408]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b6:	4a65      	ldr	r2, [pc, #404]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054b8:	f043 0301 	orr.w	r3, r3, #1
 80054bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054c0:	e024      	b.n	800550c <HAL_RCC_OscConfig+0x378>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d110      	bne.n	80054ec <HAL_RCC_OscConfig+0x358>
 80054ca:	4b60      	ldr	r3, [pc, #384]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d0:	4a5e      	ldr	r2, [pc, #376]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054d2:	f043 0304 	orr.w	r3, r3, #4
 80054d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054da:	4b5c      	ldr	r3, [pc, #368]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e0:	4a5a      	ldr	r2, [pc, #360]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054ea:	e00f      	b.n	800550c <HAL_RCC_OscConfig+0x378>
 80054ec:	4b57      	ldr	r3, [pc, #348]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f2:	4a56      	ldr	r2, [pc, #344]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054f4:	f023 0301 	bic.w	r3, r3, #1
 80054f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054fc:	4b53      	ldr	r3, [pc, #332]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	4a52      	ldr	r2, [pc, #328]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005504:	f023 0304 	bic.w	r3, r3, #4
 8005508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d016      	beq.n	8005542 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005514:	f7fd fa10 	bl	8002938 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800551a:	e00a      	b.n	8005532 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800551c:	f7fd fa0c 	bl	8002938 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e140      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005532:	4b46      	ldr	r3, [pc, #280]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0ed      	beq.n	800551c <HAL_RCC_OscConfig+0x388>
 8005540:	e015      	b.n	800556e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005542:	f7fd f9f9 	bl	8002938 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005548:	e00a      	b.n	8005560 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554a:	f7fd f9f5 	bl	8002938 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	f241 3288 	movw	r2, #5000	; 0x1388
 8005558:	4293      	cmp	r3, r2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e129      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005560:	4b3a      	ldr	r3, [pc, #232]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1ed      	bne.n	800554a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800556e:	7ffb      	ldrb	r3, [r7, #31]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d105      	bne.n	8005580 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005574:	4b35      	ldr	r3, [pc, #212]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005578:	4a34      	ldr	r2, [pc, #208]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 800557a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800557e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b00      	cmp	r3, #0
 800558a:	d03c      	beq.n	8005606 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01c      	beq.n	80055ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005594:	4b2d      	ldr	r3, [pc, #180]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800559a:	4a2c      	ldr	r2, [pc, #176]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a4:	f7fd f9c8 	bl	8002938 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ac:	f7fd f9c4 	bl	8002938 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e0fa      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055be:	4b23      	ldr	r3, [pc, #140]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80055c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0ef      	beq.n	80055ac <HAL_RCC_OscConfig+0x418>
 80055cc:	e01b      	b.n	8005606 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055ce:	4b1f      	ldr	r3, [pc, #124]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80055d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055d4:	4a1d      	ldr	r2, [pc, #116]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055de:	f7fd f9ab 	bl	8002938 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055e6:	f7fd f9a7 	bl	8002938 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e0dd      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055f8:	4b14      	ldr	r3, [pc, #80]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80055fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1ef      	bne.n	80055e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 80d1 	beq.w	80057b2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005610:	4b0e      	ldr	r3, [pc, #56]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 030c 	and.w	r3, r3, #12
 8005618:	2b0c      	cmp	r3, #12
 800561a:	f000 808b 	beq.w	8005734 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d15e      	bne.n	80056e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005626:	4b09      	ldr	r3, [pc, #36]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a08      	ldr	r2, [pc, #32]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 800562c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005632:	f7fd f981 	bl	8002938 <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005638:	e00c      	b.n	8005654 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563a:	f7fd f97d 	bl	8002938 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d905      	bls.n	8005654 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e0b3      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
 800564c:	40021000 	.word	0x40021000
 8005650:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005654:	4b59      	ldr	r3, [pc, #356]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1ec      	bne.n	800563a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005660:	4b56      	ldr	r3, [pc, #344]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	4b56      	ldr	r3, [pc, #344]	; (80057c0 <HAL_RCC_OscConfig+0x62c>)
 8005666:	4013      	ands	r3, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6a11      	ldr	r1, [r2, #32]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005670:	3a01      	subs	r2, #1
 8005672:	0112      	lsls	r2, r2, #4
 8005674:	4311      	orrs	r1, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800567a:	0212      	lsls	r2, r2, #8
 800567c:	4311      	orrs	r1, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005682:	0852      	lsrs	r2, r2, #1
 8005684:	3a01      	subs	r2, #1
 8005686:	0552      	lsls	r2, r2, #21
 8005688:	4311      	orrs	r1, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800568e:	0852      	lsrs	r2, r2, #1
 8005690:	3a01      	subs	r2, #1
 8005692:	0652      	lsls	r2, r2, #25
 8005694:	4311      	orrs	r1, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800569a:	06d2      	lsls	r2, r2, #27
 800569c:	430a      	orrs	r2, r1
 800569e:	4947      	ldr	r1, [pc, #284]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a4:	4b45      	ldr	r3, [pc, #276]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a44      	ldr	r2, [pc, #272]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 80056aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056b0:	4b42      	ldr	r3, [pc, #264]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4a41      	ldr	r2, [pc, #260]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 80056b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056bc:	f7fd f93c 	bl	8002938 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c4:	f7fd f938 	bl	8002938 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e06e      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056d6:	4b39      	ldr	r3, [pc, #228]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCC_OscConfig+0x530>
 80056e2:	e066      	b.n	80057b2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e4:	4b35      	ldr	r3, [pc, #212]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a34      	ldr	r2, [pc, #208]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 80056ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80056f0:	4b32      	ldr	r3, [pc, #200]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4a31      	ldr	r2, [pc, #196]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 80056f6:	f023 0303 	bic.w	r3, r3, #3
 80056fa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056fc:	4b2f      	ldr	r3, [pc, #188]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	4a2e      	ldr	r2, [pc, #184]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 8005702:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570c:	f7fd f914 	bl	8002938 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005714:	f7fd f910 	bl	8002938 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e046      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005726:	4b25      	ldr	r3, [pc, #148]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0x580>
 8005732:	e03e      	b.n	80057b2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e039      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005740:	4b1e      	ldr	r3, [pc, #120]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f003 0203 	and.w	r2, r3, #3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	429a      	cmp	r2, r3
 8005752:	d12c      	bne.n	80057ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	3b01      	subs	r3, #1
 8005760:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d123      	bne.n	80057ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005772:	429a      	cmp	r2, r3
 8005774:	d11b      	bne.n	80057ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005782:	429a      	cmp	r2, r3
 8005784:	d113      	bne.n	80057ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	3b01      	subs	r3, #1
 8005794:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005796:	429a      	cmp	r2, r3
 8005798:	d109      	bne.n	80057ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a4:	085b      	lsrs	r3, r3, #1
 80057a6:	3b01      	subs	r3, #1
 80057a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d001      	beq.n	80057b2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40021000 	.word	0x40021000
 80057c0:	019f800c 	.word	0x019f800c

080057c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80057ce:	2300      	movs	r3, #0
 80057d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e11e      	b.n	8005a1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057dc:	4b91      	ldr	r3, [pc, #580]	; (8005a24 <HAL_RCC_ClockConfig+0x260>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d910      	bls.n	800580c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ea:	4b8e      	ldr	r3, [pc, #568]	; (8005a24 <HAL_RCC_ClockConfig+0x260>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f023 020f 	bic.w	r2, r3, #15
 80057f2:	498c      	ldr	r1, [pc, #560]	; (8005a24 <HAL_RCC_ClockConfig+0x260>)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fa:	4b8a      	ldr	r3, [pc, #552]	; (8005a24 <HAL_RCC_ClockConfig+0x260>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d001      	beq.n	800580c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e106      	b.n	8005a1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d073      	beq.n	8005900 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b03      	cmp	r3, #3
 800581e:	d129      	bne.n	8005874 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005820:	4b81      	ldr	r3, [pc, #516]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e0f4      	b.n	8005a1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005830:	f000 f9d0 	bl	8005bd4 <RCC_GetSysClockFreqFromPLLSource>
 8005834:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4a7c      	ldr	r2, [pc, #496]	; (8005a2c <HAL_RCC_ClockConfig+0x268>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d93f      	bls.n	80058be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800583e:	4b7a      	ldr	r3, [pc, #488]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005852:	2b00      	cmp	r3, #0
 8005854:	d033      	beq.n	80058be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800585a:	2b00      	cmp	r3, #0
 800585c:	d12f      	bne.n	80058be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800585e:	4b72      	ldr	r3, [pc, #456]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005866:	4a70      	ldr	r2, [pc, #448]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 8005868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800586e:	2380      	movs	r3, #128	; 0x80
 8005870:	617b      	str	r3, [r7, #20]
 8005872:	e024      	b.n	80058be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b02      	cmp	r3, #2
 800587a:	d107      	bne.n	800588c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800587c:	4b6a      	ldr	r3, [pc, #424]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e0c6      	b.n	8005a1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800588c:	4b66      	ldr	r3, [pc, #408]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0be      	b.n	8005a1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800589c:	f000 f8ce 	bl	8005a3c <HAL_RCC_GetSysClockFreq>
 80058a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4a61      	ldr	r2, [pc, #388]	; (8005a2c <HAL_RCC_ClockConfig+0x268>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d909      	bls.n	80058be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058aa:	4b5f      	ldr	r3, [pc, #380]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b2:	4a5d      	ldr	r2, [pc, #372]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 80058b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80058ba:	2380      	movs	r3, #128	; 0x80
 80058bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058be:	4b5a      	ldr	r3, [pc, #360]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f023 0203 	bic.w	r2, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4957      	ldr	r1, [pc, #348]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d0:	f7fd f832 	bl	8002938 <HAL_GetTick>
 80058d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d6:	e00a      	b.n	80058ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d8:	f7fd f82e 	bl	8002938 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e095      	b.n	8005a1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ee:	4b4e      	ldr	r3, [pc, #312]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 020c 	and.w	r2, r3, #12
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d1eb      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d023      	beq.n	8005954 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005918:	4b43      	ldr	r3, [pc, #268]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	4a42      	ldr	r2, [pc, #264]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 800591e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005922:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005930:	4b3d      	ldr	r3, [pc, #244]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005938:	4a3b      	ldr	r2, [pc, #236]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 800593a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800593e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005940:	4b39      	ldr	r3, [pc, #228]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	4936      	ldr	r1, [pc, #216]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 800594e:	4313      	orrs	r3, r2
 8005950:	608b      	str	r3, [r1, #8]
 8005952:	e008      	b.n	8005966 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b80      	cmp	r3, #128	; 0x80
 8005958:	d105      	bne.n	8005966 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800595a:	4b33      	ldr	r3, [pc, #204]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	4a32      	ldr	r2, [pc, #200]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 8005960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005964:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005966:	4b2f      	ldr	r3, [pc, #188]	; (8005a24 <HAL_RCC_ClockConfig+0x260>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d21d      	bcs.n	80059b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005974:	4b2b      	ldr	r3, [pc, #172]	; (8005a24 <HAL_RCC_ClockConfig+0x260>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f023 020f 	bic.w	r2, r3, #15
 800597c:	4929      	ldr	r1, [pc, #164]	; (8005a24 <HAL_RCC_ClockConfig+0x260>)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	4313      	orrs	r3, r2
 8005982:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005984:	f7fc ffd8 	bl	8002938 <HAL_GetTick>
 8005988:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800598c:	f7fc ffd4 	bl	8002938 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f241 3288 	movw	r2, #5000	; 0x1388
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e03b      	b.n	8005a1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a2:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <HAL_RCC_ClockConfig+0x260>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d1ed      	bne.n	800598c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d008      	beq.n	80059ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059bc:	4b1a      	ldr	r3, [pc, #104]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	4917      	ldr	r1, [pc, #92]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d009      	beq.n	80059ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059da:	4b13      	ldr	r3, [pc, #76]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	490f      	ldr	r1, [pc, #60]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059ee:	f000 f825 	bl	8005a3c <HAL_RCC_GetSysClockFreq>
 80059f2:	4602      	mov	r2, r0
 80059f4:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	091b      	lsrs	r3, r3, #4
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	490c      	ldr	r1, [pc, #48]	; (8005a30 <HAL_RCC_ClockConfig+0x26c>)
 8005a00:	5ccb      	ldrb	r3, [r1, r3]
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0a:	4a0a      	ldr	r2, [pc, #40]	; (8005a34 <HAL_RCC_ClockConfig+0x270>)
 8005a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <HAL_RCC_ClockConfig+0x274>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fc fd96 	bl	8002544 <HAL_InitTick>
 8005a18:	4603      	mov	r3, r0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40022000 	.word	0x40022000
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	04c4b400 	.word	0x04c4b400
 8005a30:	0800e9d0 	.word	0x0800e9d0
 8005a34:	20000200 	.word	0x20000200
 8005a38:	20000204 	.word	0x20000204

08005a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a42:	4b2c      	ldr	r3, [pc, #176]	; (8005af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d102      	bne.n	8005a54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a4e:	4b2a      	ldr	r3, [pc, #168]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	e047      	b.n	8005ae4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a54:	4b27      	ldr	r3, [pc, #156]	; (8005af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d102      	bne.n	8005a66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a60:	4b26      	ldr	r3, [pc, #152]	; (8005afc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	e03e      	b.n	8005ae4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a66:	4b23      	ldr	r3, [pc, #140]	; (8005af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 030c 	and.w	r3, r3, #12
 8005a6e:	2b0c      	cmp	r3, #12
 8005a70:	d136      	bne.n	8005ae0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a72:	4b20      	ldr	r3, [pc, #128]	; (8005af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a7c:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	091b      	lsrs	r3, r3, #4
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	3301      	adds	r3, #1
 8005a88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d10c      	bne.n	8005aaa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a90:	4a1a      	ldr	r2, [pc, #104]	; (8005afc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	4a16      	ldr	r2, [pc, #88]	; (8005af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a9a:	68d2      	ldr	r2, [r2, #12]
 8005a9c:	0a12      	lsrs	r2, r2, #8
 8005a9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
 8005aa6:	617b      	str	r3, [r7, #20]
      break;
 8005aa8:	e00c      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005aaa:	4a13      	ldr	r2, [pc, #76]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab2:	4a10      	ldr	r2, [pc, #64]	; (8005af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ab4:	68d2      	ldr	r2, [r2, #12]
 8005ab6:	0a12      	lsrs	r2, r2, #8
 8005ab8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005abc:	fb02 f303 	mul.w	r3, r2, r3
 8005ac0:	617b      	str	r3, [r7, #20]
      break;
 8005ac2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	0e5b      	lsrs	r3, r3, #25
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	3301      	adds	r3, #1
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	613b      	str	r3, [r7, #16]
 8005ade:	e001      	b.n	8005ae4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ae4:	693b      	ldr	r3, [r7, #16]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40021000 	.word	0x40021000
 8005af8:	00f42400 	.word	0x00f42400
 8005afc:	016e3600 	.word	0x016e3600

08005b00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b06:	681b      	ldr	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000200 	.word	0x20000200

08005b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b1c:	f7ff fff0 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0a1b      	lsrs	r3, r3, #8
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4904      	ldr	r1, [pc, #16]	; (8005b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	0800e9e0 	.word	0x0800e9e0

08005b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b48:	f7ff ffda 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	0adb      	lsrs	r3, r3, #11
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	4904      	ldr	r1, [pc, #16]	; (8005b6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b5a:	5ccb      	ldrb	r3, [r1, r3]
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	0800e9e0 	.word	0x0800e9e0

08005b70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	220f      	movs	r2, #15
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b80:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <HAL_RCC_GetClockConfig+0x5c>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0203 	and.w	r2, r3, #3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <HAL_RCC_GetClockConfig+0x5c>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <HAL_RCC_GetClockConfig+0x5c>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005ba4:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <HAL_RCC_GetClockConfig+0x5c>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	08db      	lsrs	r3, r3, #3
 8005baa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005bb2:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <HAL_RCC_GetClockConfig+0x60>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 020f 	and.w	r2, r3, #15
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	601a      	str	r2, [r3, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40022000 	.word	0x40022000

08005bd4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bda:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005be4:	4b1b      	ldr	r3, [pc, #108]	; (8005c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	091b      	lsrs	r3, r3, #4
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d10c      	bne.n	8005c12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bf8:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	4a14      	ldr	r2, [pc, #80]	; (8005c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c02:	68d2      	ldr	r2, [r2, #12]
 8005c04:	0a12      	lsrs	r2, r2, #8
 8005c06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c0a:	fb02 f303 	mul.w	r3, r2, r3
 8005c0e:	617b      	str	r3, [r7, #20]
    break;
 8005c10:	e00c      	b.n	8005c2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c12:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1a:	4a0e      	ldr	r2, [pc, #56]	; (8005c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c1c:	68d2      	ldr	r2, [r2, #12]
 8005c1e:	0a12      	lsrs	r2, r2, #8
 8005c20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c24:	fb02 f303 	mul.w	r3, r2, r3
 8005c28:	617b      	str	r3, [r7, #20]
    break;
 8005c2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c2c:	4b09      	ldr	r3, [pc, #36]	; (8005c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	0e5b      	lsrs	r3, r3, #25
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	3301      	adds	r3, #1
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c46:	687b      	ldr	r3, [r7, #4]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	371c      	adds	r7, #28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	40021000 	.word	0x40021000
 8005c58:	016e3600 	.word	0x016e3600
 8005c5c:	00f42400 	.word	0x00f42400

08005c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c68:	2300      	movs	r3, #0
 8005c6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 8098 	beq.w	8005dae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c82:	4b43      	ldr	r3, [pc, #268]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10d      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c8e:	4b40      	ldr	r3, [pc, #256]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c92:	4a3f      	ldr	r2, [pc, #252]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c98:	6593      	str	r3, [r2, #88]	; 0x58
 8005c9a:	4b3d      	ldr	r3, [pc, #244]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca2:	60bb      	str	r3, [r7, #8]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005caa:	4b3a      	ldr	r3, [pc, #232]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a39      	ldr	r2, [pc, #228]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cb6:	f7fc fe3f 	bl	8002938 <HAL_GetTick>
 8005cba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cbc:	e009      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cbe:	f7fc fe3b 	bl	8002938 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d902      	bls.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	74fb      	strb	r3, [r7, #19]
        break;
 8005cd0:	e005      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cd2:	4b30      	ldr	r3, [pc, #192]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0ef      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005cde:	7cfb      	ldrb	r3, [r7, #19]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d159      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ce4:	4b2a      	ldr	r3, [pc, #168]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01e      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d019      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d00:	4b23      	ldr	r3, [pc, #140]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d0c:	4b20      	ldr	r3, [pc, #128]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	4a1f      	ldr	r2, [pc, #124]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d1c:	4b1c      	ldr	r3, [pc, #112]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d22:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d2c:	4a18      	ldr	r2, [pc, #96]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d016      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3e:	f7fc fdfb 	bl	8002938 <HAL_GetTick>
 8005d42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d44:	e00b      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d46:	f7fc fdf7 	bl	8002938 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d902      	bls.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	74fb      	strb	r3, [r7, #19]
            break;
 8005d5c:	e006      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d5e:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0ec      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005d6c:	7cfb      	ldrb	r3, [r7, #19]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10b      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d72:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	4903      	ldr	r1, [pc, #12]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d88:	e008      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d8a:	7cfb      	ldrb	r3, [r7, #19]
 8005d8c:	74bb      	strb	r3, [r7, #18]
 8005d8e:	e005      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d90:	40021000 	.word	0x40021000
 8005d94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d98:	7cfb      	ldrb	r3, [r7, #19]
 8005d9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d9c:	7c7b      	ldrb	r3, [r7, #17]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d105      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005da2:	4ba6      	ldr	r3, [pc, #664]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da6:	4aa5      	ldr	r2, [pc, #660]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dba:	4ba0      	ldr	r3, [pc, #640]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc0:	f023 0203 	bic.w	r2, r3, #3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	499c      	ldr	r1, [pc, #624]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ddc:	4b97      	ldr	r3, [pc, #604]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de2:	f023 020c 	bic.w	r2, r3, #12
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	4994      	ldr	r1, [pc, #592]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dfe:	4b8f      	ldr	r3, [pc, #572]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	498b      	ldr	r1, [pc, #556]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e20:	4b86      	ldr	r3, [pc, #536]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	4983      	ldr	r1, [pc, #524]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e42:	4b7e      	ldr	r3, [pc, #504]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	497a      	ldr	r1, [pc, #488]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e64:	4b75      	ldr	r3, [pc, #468]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	4972      	ldr	r1, [pc, #456]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e86:	4b6d      	ldr	r3, [pc, #436]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	4969      	ldr	r1, [pc, #420]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ea8:	4b64      	ldr	r3, [pc, #400]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	4961      	ldr	r1, [pc, #388]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eca:	4b5c      	ldr	r3, [pc, #368]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	4958      	ldr	r1, [pc, #352]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d015      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005eec:	4b53      	ldr	r3, [pc, #332]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	4950      	ldr	r1, [pc, #320]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f0a:	d105      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f0c:	4b4b      	ldr	r3, [pc, #300]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4a4a      	ldr	r2, [pc, #296]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d015      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f24:	4b45      	ldr	r3, [pc, #276]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	4942      	ldr	r1, [pc, #264]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f42:	d105      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f44:	4b3d      	ldr	r3, [pc, #244]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	4a3c      	ldr	r2, [pc, #240]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f4e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d015      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f5c:	4b37      	ldr	r3, [pc, #220]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6a:	4934      	ldr	r1, [pc, #208]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f7a:	d105      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f7c:	4b2f      	ldr	r3, [pc, #188]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4a2e      	ldr	r2, [pc, #184]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f86:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d015      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f94:	4b29      	ldr	r3, [pc, #164]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa2:	4926      	ldr	r1, [pc, #152]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fb2:	d105      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fb4:	4b21      	ldr	r3, [pc, #132]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4a20      	ldr	r2, [pc, #128]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fbe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d015      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fcc:	4b1b      	ldr	r3, [pc, #108]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fda:	4918      	ldr	r1, [pc, #96]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fea:	d105      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fec:	4b13      	ldr	r3, [pc, #76]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	4a12      	ldr	r2, [pc, #72]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ff6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d015      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006004:	4b0d      	ldr	r3, [pc, #52]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006012:	490a      	ldr	r1, [pc, #40]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006014:	4313      	orrs	r3, r2
 8006016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006022:	d105      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006024:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	4a04      	ldr	r2, [pc, #16]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800602a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006030:	7cbb      	ldrb	r3, [r7, #18]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40021000 	.word	0x40021000

08006040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e049      	b.n	80060e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fc f944 	bl	80022f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3304      	adds	r3, #4
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f001 f804 	bl	800708c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	d001      	beq.n	8006108 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e042      	b.n	800618e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a21      	ldr	r2, [pc, #132]	; (800619c <HAL_TIM_Base_Start+0xac>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d018      	beq.n	800614c <HAL_TIM_Base_Start+0x5c>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006122:	d013      	beq.n	800614c <HAL_TIM_Base_Start+0x5c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1d      	ldr	r2, [pc, #116]	; (80061a0 <HAL_TIM_Base_Start+0xb0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00e      	beq.n	800614c <HAL_TIM_Base_Start+0x5c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <HAL_TIM_Base_Start+0xb4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d009      	beq.n	800614c <HAL_TIM_Base_Start+0x5c>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a1a      	ldr	r2, [pc, #104]	; (80061a8 <HAL_TIM_Base_Start+0xb8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d004      	beq.n	800614c <HAL_TIM_Base_Start+0x5c>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a19      	ldr	r2, [pc, #100]	; (80061ac <HAL_TIM_Base_Start+0xbc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d115      	bne.n	8006178 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	4b17      	ldr	r3, [pc, #92]	; (80061b0 <HAL_TIM_Base_Start+0xc0>)
 8006154:	4013      	ands	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b06      	cmp	r3, #6
 800615c:	d015      	beq.n	800618a <HAL_TIM_Base_Start+0x9a>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006164:	d011      	beq.n	800618a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0201 	orr.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006176:	e008      	b.n	800618a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	e000      	b.n	800618c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40012c00 	.word	0x40012c00
 80061a0:	40000400 	.word	0x40000400
 80061a4:	40000800 	.word	0x40000800
 80061a8:	40013400 	.word	0x40013400
 80061ac:	40014000 	.word	0x40014000
 80061b0:	00010007 	.word	0x00010007

080061b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d001      	beq.n	80061cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e04a      	b.n	8006262 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a21      	ldr	r2, [pc, #132]	; (8006270 <HAL_TIM_Base_Start_IT+0xbc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d018      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x6c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f6:	d013      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x6c>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <HAL_TIM_Base_Start_IT+0xc0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00e      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x6c>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1c      	ldr	r2, [pc, #112]	; (8006278 <HAL_TIM_Base_Start_IT+0xc4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d009      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x6c>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1a      	ldr	r2, [pc, #104]	; (800627c <HAL_TIM_Base_Start_IT+0xc8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x6c>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a19      	ldr	r2, [pc, #100]	; (8006280 <HAL_TIM_Base_Start_IT+0xcc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d115      	bne.n	800624c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	4b17      	ldr	r3, [pc, #92]	; (8006284 <HAL_TIM_Base_Start_IT+0xd0>)
 8006228:	4013      	ands	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b06      	cmp	r3, #6
 8006230:	d015      	beq.n	800625e <HAL_TIM_Base_Start_IT+0xaa>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006238:	d011      	beq.n	800625e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624a:	e008      	b.n	800625e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	e000      	b.n	8006260 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40012c00 	.word	0x40012c00
 8006274:	40000400 	.word	0x40000400
 8006278:	40000800 	.word	0x40000800
 800627c:	40013400 	.word	0x40013400
 8006280:	40014000 	.word	0x40014000
 8006284:	00010007 	.word	0x00010007

08006288 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e049      	b.n	800632e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f841 	bl	8006336 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f000 fee0 	bl	800708c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
	...

0800634c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d109      	bne.n	8006370 <HAL_TIM_PWM_Start+0x24>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	bf14      	ite	ne
 8006368:	2301      	movne	r3, #1
 800636a:	2300      	moveq	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	e03c      	b.n	80063ea <HAL_TIM_PWM_Start+0x9e>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b04      	cmp	r3, #4
 8006374:	d109      	bne.n	800638a <HAL_TIM_PWM_Start+0x3e>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b01      	cmp	r3, #1
 8006380:	bf14      	ite	ne
 8006382:	2301      	movne	r3, #1
 8006384:	2300      	moveq	r3, #0
 8006386:	b2db      	uxtb	r3, r3
 8006388:	e02f      	b.n	80063ea <HAL_TIM_PWM_Start+0x9e>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b08      	cmp	r3, #8
 800638e:	d109      	bne.n	80063a4 <HAL_TIM_PWM_Start+0x58>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b01      	cmp	r3, #1
 800639a:	bf14      	ite	ne
 800639c:	2301      	movne	r3, #1
 800639e:	2300      	moveq	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	e022      	b.n	80063ea <HAL_TIM_PWM_Start+0x9e>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b0c      	cmp	r3, #12
 80063a8:	d109      	bne.n	80063be <HAL_TIM_PWM_Start+0x72>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	bf14      	ite	ne
 80063b6:	2301      	movne	r3, #1
 80063b8:	2300      	moveq	r3, #0
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	e015      	b.n	80063ea <HAL_TIM_PWM_Start+0x9e>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b10      	cmp	r3, #16
 80063c2:	d109      	bne.n	80063d8 <HAL_TIM_PWM_Start+0x8c>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	bf14      	ite	ne
 80063d0:	2301      	movne	r3, #1
 80063d2:	2300      	moveq	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	e008      	b.n	80063ea <HAL_TIM_PWM_Start+0x9e>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	bf14      	ite	ne
 80063e4:	2301      	movne	r3, #1
 80063e6:	2300      	moveq	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e097      	b.n	8006522 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d104      	bne.n	8006402 <HAL_TIM_PWM_Start+0xb6>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006400:	e023      	b.n	800644a <HAL_TIM_PWM_Start+0xfe>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b04      	cmp	r3, #4
 8006406:	d104      	bne.n	8006412 <HAL_TIM_PWM_Start+0xc6>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006410:	e01b      	b.n	800644a <HAL_TIM_PWM_Start+0xfe>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b08      	cmp	r3, #8
 8006416:	d104      	bne.n	8006422 <HAL_TIM_PWM_Start+0xd6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006420:	e013      	b.n	800644a <HAL_TIM_PWM_Start+0xfe>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b0c      	cmp	r3, #12
 8006426:	d104      	bne.n	8006432 <HAL_TIM_PWM_Start+0xe6>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006430:	e00b      	b.n	800644a <HAL_TIM_PWM_Start+0xfe>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b10      	cmp	r3, #16
 8006436:	d104      	bne.n	8006442 <HAL_TIM_PWM_Start+0xf6>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006440:	e003      	b.n	800644a <HAL_TIM_PWM_Start+0xfe>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2202      	movs	r2, #2
 8006446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2201      	movs	r2, #1
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f001 fa3c 	bl	80078d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a33      	ldr	r2, [pc, #204]	; (800652c <HAL_TIM_PWM_Start+0x1e0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d013      	beq.n	800648a <HAL_TIM_PWM_Start+0x13e>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a32      	ldr	r2, [pc, #200]	; (8006530 <HAL_TIM_PWM_Start+0x1e4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00e      	beq.n	800648a <HAL_TIM_PWM_Start+0x13e>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a30      	ldr	r2, [pc, #192]	; (8006534 <HAL_TIM_PWM_Start+0x1e8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d009      	beq.n	800648a <HAL_TIM_PWM_Start+0x13e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2f      	ldr	r2, [pc, #188]	; (8006538 <HAL_TIM_PWM_Start+0x1ec>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d004      	beq.n	800648a <HAL_TIM_PWM_Start+0x13e>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a2d      	ldr	r2, [pc, #180]	; (800653c <HAL_TIM_PWM_Start+0x1f0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d101      	bne.n	800648e <HAL_TIM_PWM_Start+0x142>
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <HAL_TIM_PWM_Start+0x144>
 800648e:	2300      	movs	r3, #0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a20      	ldr	r2, [pc, #128]	; (800652c <HAL_TIM_PWM_Start+0x1e0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d018      	beq.n	80064e0 <HAL_TIM_PWM_Start+0x194>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b6:	d013      	beq.n	80064e0 <HAL_TIM_PWM_Start+0x194>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a20      	ldr	r2, [pc, #128]	; (8006540 <HAL_TIM_PWM_Start+0x1f4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00e      	beq.n	80064e0 <HAL_TIM_PWM_Start+0x194>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1f      	ldr	r2, [pc, #124]	; (8006544 <HAL_TIM_PWM_Start+0x1f8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d009      	beq.n	80064e0 <HAL_TIM_PWM_Start+0x194>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a17      	ldr	r2, [pc, #92]	; (8006530 <HAL_TIM_PWM_Start+0x1e4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d004      	beq.n	80064e0 <HAL_TIM_PWM_Start+0x194>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a16      	ldr	r2, [pc, #88]	; (8006534 <HAL_TIM_PWM_Start+0x1e8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d115      	bne.n	800650c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	4b18      	ldr	r3, [pc, #96]	; (8006548 <HAL_TIM_PWM_Start+0x1fc>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b06      	cmp	r3, #6
 80064f0:	d015      	beq.n	800651e <HAL_TIM_PWM_Start+0x1d2>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f8:	d011      	beq.n	800651e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0201 	orr.w	r2, r2, #1
 8006508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650a:	e008      	b.n	800651e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0201 	orr.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	e000      	b.n	8006520 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40013400 	.word	0x40013400
 8006534:	40014000 	.word	0x40014000
 8006538:	40014400 	.word	0x40014400
 800653c:	40014800 	.word	0x40014800
 8006540:	40000400 	.word	0x40000400
 8006544:	40000800 	.word	0x40000800
 8006548:	00010007 	.word	0x00010007

0800654c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2200      	movs	r2, #0
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f001 f9b6 	bl	80078d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a3e      	ldr	r2, [pc, #248]	; (8006664 <HAL_TIM_PWM_Stop+0x118>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <HAL_TIM_PWM_Stop+0x4a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a3d      	ldr	r2, [pc, #244]	; (8006668 <HAL_TIM_PWM_Stop+0x11c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00e      	beq.n	8006596 <HAL_TIM_PWM_Stop+0x4a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a3b      	ldr	r2, [pc, #236]	; (800666c <HAL_TIM_PWM_Stop+0x120>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d009      	beq.n	8006596 <HAL_TIM_PWM_Stop+0x4a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a3a      	ldr	r2, [pc, #232]	; (8006670 <HAL_TIM_PWM_Stop+0x124>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d004      	beq.n	8006596 <HAL_TIM_PWM_Stop+0x4a>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a38      	ldr	r2, [pc, #224]	; (8006674 <HAL_TIM_PWM_Stop+0x128>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d101      	bne.n	800659a <HAL_TIM_PWM_Stop+0x4e>
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <HAL_TIM_PWM_Stop+0x50>
 800659a:	2300      	movs	r3, #0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d017      	beq.n	80065d0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6a1a      	ldr	r2, [r3, #32]
 80065a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10f      	bne.n	80065d0 <HAL_TIM_PWM_Stop+0x84>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6a1a      	ldr	r2, [r3, #32]
 80065b6:	f244 4344 	movw	r3, #17476	; 0x4444
 80065ba:	4013      	ands	r3, r2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d107      	bne.n	80065d0 <HAL_TIM_PWM_Stop+0x84>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6a1a      	ldr	r2, [r3, #32]
 80065d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80065da:	4013      	ands	r3, r2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10f      	bne.n	8006600 <HAL_TIM_PWM_Stop+0xb4>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6a1a      	ldr	r2, [r3, #32]
 80065e6:	f244 4344 	movw	r3, #17476	; 0x4444
 80065ea:	4013      	ands	r3, r2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d107      	bne.n	8006600 <HAL_TIM_PWM_Stop+0xb4>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0201 	bic.w	r2, r2, #1
 80065fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d104      	bne.n	8006610 <HAL_TIM_PWM_Stop+0xc4>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800660e:	e023      	b.n	8006658 <HAL_TIM_PWM_Stop+0x10c>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b04      	cmp	r3, #4
 8006614:	d104      	bne.n	8006620 <HAL_TIM_PWM_Stop+0xd4>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800661e:	e01b      	b.n	8006658 <HAL_TIM_PWM_Stop+0x10c>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b08      	cmp	r3, #8
 8006624:	d104      	bne.n	8006630 <HAL_TIM_PWM_Stop+0xe4>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800662e:	e013      	b.n	8006658 <HAL_TIM_PWM_Stop+0x10c>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b0c      	cmp	r3, #12
 8006634:	d104      	bne.n	8006640 <HAL_TIM_PWM_Stop+0xf4>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800663e:	e00b      	b.n	8006658 <HAL_TIM_PWM_Stop+0x10c>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b10      	cmp	r3, #16
 8006644:	d104      	bne.n	8006650 <HAL_TIM_PWM_Stop+0x104>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800664e:	e003      	b.n	8006658 <HAL_TIM_PWM_Stop+0x10c>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	40012c00 	.word	0x40012c00
 8006668:	40013400 	.word	0x40013400
 800666c:	40014000 	.word	0x40014000
 8006670:	40014400 	.word	0x40014400
 8006674:	40014800 	.word	0x40014800

08006678 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e097      	b.n	80067bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7fb fe75 	bl	8002390 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2202      	movs	r2, #2
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6812      	ldr	r2, [r2, #0]
 80066b8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80066bc:	f023 0307 	bic.w	r3, r3, #7
 80066c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4619      	mov	r1, r3
 80066cc:	4610      	mov	r0, r2
 80066ce:	f000 fcdd 	bl	800708c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	4313      	orrs	r3, r2
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006718:	f023 030c 	bic.w	r3, r3, #12
 800671c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	4313      	orrs	r3, r2
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	011a      	lsls	r2, r3, #4
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	031b      	lsls	r3, r3, #12
 8006748:	4313      	orrs	r3, r2
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006756:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800675e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	4313      	orrs	r3, r2
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d110      	bne.n	8006816 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d102      	bne.n	8006800 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80067fa:	7b7b      	ldrb	r3, [r7, #13]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d001      	beq.n	8006804 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e089      	b.n	8006918 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006814:	e031      	b.n	800687a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b04      	cmp	r3, #4
 800681a:	d110      	bne.n	800683e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d102      	bne.n	8006828 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006822:	7b3b      	ldrb	r3, [r7, #12]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d001      	beq.n	800682c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e075      	b.n	8006918 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800683c:	e01d      	b.n	800687a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d108      	bne.n	8006856 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d105      	bne.n	8006856 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800684a:	7b7b      	ldrb	r3, [r7, #13]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d102      	bne.n	8006856 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006850:	7b3b      	ldrb	r3, [r7, #12]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d001      	beq.n	800685a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e05e      	b.n	8006918 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2202      	movs	r2, #2
 8006876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b04      	cmp	r3, #4
 8006884:	d010      	beq.n	80068a8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006886:	e01f      	b.n	80068c8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2201      	movs	r2, #1
 800688e:	2100      	movs	r1, #0
 8006890:	4618      	mov	r0, r3
 8006892:	f001 f81d 	bl	80078d0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f042 0202 	orr.w	r2, r2, #2
 80068a4:	60da      	str	r2, [r3, #12]
      break;
 80068a6:	e02e      	b.n	8006906 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2201      	movs	r2, #1
 80068ae:	2104      	movs	r1, #4
 80068b0:	4618      	mov	r0, r3
 80068b2:	f001 f80d 	bl	80078d0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0204 	orr.w	r2, r2, #4
 80068c4:	60da      	str	r2, [r3, #12]
      break;
 80068c6:	e01e      	b.n	8006906 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2201      	movs	r2, #1
 80068ce:	2100      	movs	r1, #0
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fffd 	bl	80078d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2201      	movs	r2, #1
 80068dc:	2104      	movs	r1, #4
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fff6 	bl	80078d0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0202 	orr.w	r2, r2, #2
 80068f2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0204 	orr.w	r2, r2, #4
 8006902:	60da      	str	r2, [r3, #12]
      break;
 8006904:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0201 	orr.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b02      	cmp	r3, #2
 8006934:	d122      	bne.n	800697c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b02      	cmp	r3, #2
 8006942:	d11b      	bne.n	800697c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0202 	mvn.w	r2, #2
 800694c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fb74 	bl	8007050 <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fb66 	bl	800703c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fb77 	bl	8007064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b04      	cmp	r3, #4
 8006988:	d122      	bne.n	80069d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b04      	cmp	r3, #4
 8006996:	d11b      	bne.n	80069d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0204 	mvn.w	r2, #4
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2202      	movs	r2, #2
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fb4a 	bl	8007050 <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fb3c 	bl	800703c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fb4d 	bl	8007064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b08      	cmp	r3, #8
 80069dc:	d122      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d11b      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0208 	mvn.w	r2, #8
 80069f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2204      	movs	r2, #4
 80069fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fb20 	bl	8007050 <HAL_TIM_IC_CaptureCallback>
 8006a10:	e005      	b.n	8006a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fb12 	bl	800703c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fb23 	bl	8007064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	2b10      	cmp	r3, #16
 8006a30:	d122      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0310 	and.w	r3, r3, #16
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d11b      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0210 	mvn.w	r2, #16
 8006a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 faf6 	bl	8007050 <HAL_TIM_IC_CaptureCallback>
 8006a64:	e005      	b.n	8006a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fae8 	bl	800703c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 faf9 	bl	8007064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d10e      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d107      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0201 	mvn.w	r2, #1
 8006a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fb fb48 	bl	8002134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aae:	2b80      	cmp	r3, #128	; 0x80
 8006ab0:	d10e      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abc:	2b80      	cmp	r3, #128	; 0x80
 8006abe:	d107      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 f964 	bl	8007d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ade:	d10e      	bne.n	8006afe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aea:	2b80      	cmp	r3, #128	; 0x80
 8006aec:	d107      	bne.n	8006afe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 f957 	bl	8007dac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d10e      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d107      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 faa7 	bl	8007078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d10e      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d107      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f06f 0220 	mvn.w	r2, #32
 8006b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 f917 	bl	8007d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b64:	d10f      	bne.n	8006b86 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b74:	d107      	bne.n	8006b86 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 f91d 	bl	8007dc0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b94:	d10f      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ba4:	d107      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 f90f 	bl	8007dd4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bc4:	d10f      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bd4:	d107      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 f901 	bl	8007de8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bf4:	d10f      	bne.n	8006c16 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c04:	d107      	bne.n	8006c16 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 f8f3 	bl	8007dfc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e0ff      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b14      	cmp	r3, #20
 8006c4a:	f200 80f0 	bhi.w	8006e2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c4e:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c54:	08006ca9 	.word	0x08006ca9
 8006c58:	08006e2f 	.word	0x08006e2f
 8006c5c:	08006e2f 	.word	0x08006e2f
 8006c60:	08006e2f 	.word	0x08006e2f
 8006c64:	08006ce9 	.word	0x08006ce9
 8006c68:	08006e2f 	.word	0x08006e2f
 8006c6c:	08006e2f 	.word	0x08006e2f
 8006c70:	08006e2f 	.word	0x08006e2f
 8006c74:	08006d2b 	.word	0x08006d2b
 8006c78:	08006e2f 	.word	0x08006e2f
 8006c7c:	08006e2f 	.word	0x08006e2f
 8006c80:	08006e2f 	.word	0x08006e2f
 8006c84:	08006d6b 	.word	0x08006d6b
 8006c88:	08006e2f 	.word	0x08006e2f
 8006c8c:	08006e2f 	.word	0x08006e2f
 8006c90:	08006e2f 	.word	0x08006e2f
 8006c94:	08006dad 	.word	0x08006dad
 8006c98:	08006e2f 	.word	0x08006e2f
 8006c9c:	08006e2f 	.word	0x08006e2f
 8006ca0:	08006e2f 	.word	0x08006e2f
 8006ca4:	08006ded 	.word	0x08006ded
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68b9      	ldr	r1, [r7, #8]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fa7c 	bl	80071ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0208 	orr.w	r2, r2, #8
 8006cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0204 	bic.w	r2, r2, #4
 8006cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6999      	ldr	r1, [r3, #24]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	691a      	ldr	r2, [r3, #16]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	619a      	str	r2, [r3, #24]
      break;
 8006ce6:	e0a5      	b.n	8006e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 faec 	bl	80072cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699a      	ldr	r2, [r3, #24]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6999      	ldr	r1, [r3, #24]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	021a      	lsls	r2, r3, #8
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	619a      	str	r2, [r3, #24]
      break;
 8006d28:	e084      	b.n	8006e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fb55 	bl	80073e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69da      	ldr	r2, [r3, #28]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0208 	orr.w	r2, r2, #8
 8006d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69da      	ldr	r2, [r3, #28]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0204 	bic.w	r2, r2, #4
 8006d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69d9      	ldr	r1, [r3, #28]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	61da      	str	r2, [r3, #28]
      break;
 8006d68:	e064      	b.n	8006e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fbbd 	bl	80074f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69da      	ldr	r2, [r3, #28]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69da      	ldr	r2, [r3, #28]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69d9      	ldr	r1, [r3, #28]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	021a      	lsls	r2, r3, #8
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	61da      	str	r2, [r3, #28]
      break;
 8006daa:	e043      	b.n	8006e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68b9      	ldr	r1, [r7, #8]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fc26 	bl	8007604 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0208 	orr.w	r2, r2, #8
 8006dc6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0204 	bic.w	r2, r2, #4
 8006dd6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	691a      	ldr	r2, [r3, #16]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006dea:	e023      	b.n	8006e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68b9      	ldr	r1, [r7, #8]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fc6a 	bl	80076cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e16:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	021a      	lsls	r2, r3, #8
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006e2c:	e002      	b.n	8006e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	75fb      	strb	r3, [r7, #23]
      break;
 8006e32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop

08006e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_TIM_ConfigClockSource+0x1c>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e0de      	b.n	8007022 <HAL_TIM_ConfigClockSource+0x1da>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a63      	ldr	r2, [pc, #396]	; (800702c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	f000 80a9 	beq.w	8006ff6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ea4:	4a61      	ldr	r2, [pc, #388]	; (800702c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	f200 80ae 	bhi.w	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
 8006eac:	4a60      	ldr	r2, [pc, #384]	; (8007030 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	f000 80a1 	beq.w	8006ff6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006eb4:	4a5e      	ldr	r2, [pc, #376]	; (8007030 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	f200 80a6 	bhi.w	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ebc:	4a5d      	ldr	r2, [pc, #372]	; (8007034 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	f000 8099 	beq.w	8006ff6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ec4:	4a5b      	ldr	r2, [pc, #364]	; (8007034 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	f200 809e 	bhi.w	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ecc:	4a5a      	ldr	r2, [pc, #360]	; (8007038 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	f000 8091 	beq.w	8006ff6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ed4:	4a58      	ldr	r2, [pc, #352]	; (8007038 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	f200 8096 	bhi.w	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
 8006edc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ee0:	f000 8089 	beq.w	8006ff6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ee4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ee8:	f200 808e 	bhi.w	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
 8006eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef0:	d03e      	beq.n	8006f70 <HAL_TIM_ConfigClockSource+0x128>
 8006ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef6:	f200 8087 	bhi.w	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
 8006efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efe:	f000 8086 	beq.w	800700e <HAL_TIM_ConfigClockSource+0x1c6>
 8006f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f06:	d87f      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f08:	2b70      	cmp	r3, #112	; 0x70
 8006f0a:	d01a      	beq.n	8006f42 <HAL_TIM_ConfigClockSource+0xfa>
 8006f0c:	2b70      	cmp	r3, #112	; 0x70
 8006f0e:	d87b      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f10:	2b60      	cmp	r3, #96	; 0x60
 8006f12:	d050      	beq.n	8006fb6 <HAL_TIM_ConfigClockSource+0x16e>
 8006f14:	2b60      	cmp	r3, #96	; 0x60
 8006f16:	d877      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f18:	2b50      	cmp	r3, #80	; 0x50
 8006f1a:	d03c      	beq.n	8006f96 <HAL_TIM_ConfigClockSource+0x14e>
 8006f1c:	2b50      	cmp	r3, #80	; 0x50
 8006f1e:	d873      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f20:	2b40      	cmp	r3, #64	; 0x40
 8006f22:	d058      	beq.n	8006fd6 <HAL_TIM_ConfigClockSource+0x18e>
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d86f      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f28:	2b30      	cmp	r3, #48	; 0x30
 8006f2a:	d064      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006f2c:	2b30      	cmp	r3, #48	; 0x30
 8006f2e:	d86b      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d060      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d867      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d05c      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d05a      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006f40:	e062      	b.n	8007008 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6899      	ldr	r1, [r3, #8]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f000 fc9d 	bl	8007890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	609a      	str	r2, [r3, #8]
      break;
 8006f6e:	e04f      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	6899      	ldr	r1, [r3, #8]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f000 fc86 	bl	8007890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f92:	609a      	str	r2, [r3, #8]
      break;
 8006f94:	e03c      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	6859      	ldr	r1, [r3, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f000 fbf8 	bl	8007798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2150      	movs	r1, #80	; 0x50
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fc51 	bl	8007856 <TIM_ITRx_SetConfig>
      break;
 8006fb4:	e02c      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	6859      	ldr	r1, [r3, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f000 fc17 	bl	80077f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2160      	movs	r1, #96	; 0x60
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fc41 	bl	8007856 <TIM_ITRx_SetConfig>
      break;
 8006fd4:	e01c      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	6859      	ldr	r1, [r3, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f000 fbd8 	bl	8007798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2140      	movs	r1, #64	; 0x40
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fc31 	bl	8007856 <TIM_ITRx_SetConfig>
      break;
 8006ff4:	e00c      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4619      	mov	r1, r3
 8007000:	4610      	mov	r0, r2
 8007002:	f000 fc28 	bl	8007856 <TIM_ITRx_SetConfig>
      break;
 8007006:	e003      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	73fb      	strb	r3, [r7, #15]
      break;
 800700c:	e000      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800700e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	00100070 	.word	0x00100070
 8007030:	00100040 	.word	0x00100040
 8007034:	00100030 	.word	0x00100030
 8007038:	00100020 	.word	0x00100020

0800703c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a3c      	ldr	r2, [pc, #240]	; (8007190 <TIM_Base_SetConfig+0x104>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00f      	beq.n	80070c4 <TIM_Base_SetConfig+0x38>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070aa:	d00b      	beq.n	80070c4 <TIM_Base_SetConfig+0x38>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a39      	ldr	r2, [pc, #228]	; (8007194 <TIM_Base_SetConfig+0x108>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d007      	beq.n	80070c4 <TIM_Base_SetConfig+0x38>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a38      	ldr	r2, [pc, #224]	; (8007198 <TIM_Base_SetConfig+0x10c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <TIM_Base_SetConfig+0x38>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a37      	ldr	r2, [pc, #220]	; (800719c <TIM_Base_SetConfig+0x110>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d108      	bne.n	80070d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a2d      	ldr	r2, [pc, #180]	; (8007190 <TIM_Base_SetConfig+0x104>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d01b      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e4:	d017      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a2a      	ldr	r2, [pc, #168]	; (8007194 <TIM_Base_SetConfig+0x108>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d013      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a29      	ldr	r2, [pc, #164]	; (8007198 <TIM_Base_SetConfig+0x10c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00f      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a28      	ldr	r2, [pc, #160]	; (800719c <TIM_Base_SetConfig+0x110>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00b      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a27      	ldr	r2, [pc, #156]	; (80071a0 <TIM_Base_SetConfig+0x114>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d007      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a26      	ldr	r2, [pc, #152]	; (80071a4 <TIM_Base_SetConfig+0x118>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d003      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a25      	ldr	r2, [pc, #148]	; (80071a8 <TIM_Base_SetConfig+0x11c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d108      	bne.n	8007128 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800711c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4313      	orrs	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a10      	ldr	r2, [pc, #64]	; (8007190 <TIM_Base_SetConfig+0x104>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00f      	beq.n	8007174 <TIM_Base_SetConfig+0xe8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a11      	ldr	r2, [pc, #68]	; (800719c <TIM_Base_SetConfig+0x110>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00b      	beq.n	8007174 <TIM_Base_SetConfig+0xe8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a10      	ldr	r2, [pc, #64]	; (80071a0 <TIM_Base_SetConfig+0x114>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d007      	beq.n	8007174 <TIM_Base_SetConfig+0xe8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a0f      	ldr	r2, [pc, #60]	; (80071a4 <TIM_Base_SetConfig+0x118>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_Base_SetConfig+0xe8>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a0e      	ldr	r2, [pc, #56]	; (80071a8 <TIM_Base_SetConfig+0x11c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d103      	bne.n	800717c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	691a      	ldr	r2, [r3, #16]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	615a      	str	r2, [r3, #20]
}
 8007182:	bf00      	nop
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40012c00 	.word	0x40012c00
 8007194:	40000400 	.word	0x40000400
 8007198:	40000800 	.word	0x40000800
 800719c:	40013400 	.word	0x40013400
 80071a0:	40014000 	.word	0x40014000
 80071a4:	40014400 	.word	0x40014400
 80071a8:	40014800 	.word	0x40014800

080071ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	f023 0201 	bic.w	r2, r3, #1
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 0303 	bic.w	r3, r3, #3
 80071e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f023 0302 	bic.w	r3, r3, #2
 80071f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a2c      	ldr	r2, [pc, #176]	; (80072b8 <TIM_OC1_SetConfig+0x10c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d00f      	beq.n	800722c <TIM_OC1_SetConfig+0x80>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a2b      	ldr	r2, [pc, #172]	; (80072bc <TIM_OC1_SetConfig+0x110>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00b      	beq.n	800722c <TIM_OC1_SetConfig+0x80>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a2a      	ldr	r2, [pc, #168]	; (80072c0 <TIM_OC1_SetConfig+0x114>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d007      	beq.n	800722c <TIM_OC1_SetConfig+0x80>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a29      	ldr	r2, [pc, #164]	; (80072c4 <TIM_OC1_SetConfig+0x118>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d003      	beq.n	800722c <TIM_OC1_SetConfig+0x80>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a28      	ldr	r2, [pc, #160]	; (80072c8 <TIM_OC1_SetConfig+0x11c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d10c      	bne.n	8007246 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f023 0308 	bic.w	r3, r3, #8
 8007232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	4313      	orrs	r3, r2
 800723c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f023 0304 	bic.w	r3, r3, #4
 8007244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a1b      	ldr	r2, [pc, #108]	; (80072b8 <TIM_OC1_SetConfig+0x10c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00f      	beq.n	800726e <TIM_OC1_SetConfig+0xc2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a1a      	ldr	r2, [pc, #104]	; (80072bc <TIM_OC1_SetConfig+0x110>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d00b      	beq.n	800726e <TIM_OC1_SetConfig+0xc2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a19      	ldr	r2, [pc, #100]	; (80072c0 <TIM_OC1_SetConfig+0x114>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d007      	beq.n	800726e <TIM_OC1_SetConfig+0xc2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a18      	ldr	r2, [pc, #96]	; (80072c4 <TIM_OC1_SetConfig+0x118>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d003      	beq.n	800726e <TIM_OC1_SetConfig+0xc2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <TIM_OC1_SetConfig+0x11c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d111      	bne.n	8007292 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800727c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4313      	orrs	r3, r2
 8007286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	4313      	orrs	r3, r2
 8007290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	621a      	str	r2, [r3, #32]
}
 80072ac:	bf00      	nop
 80072ae:	371c      	adds	r7, #28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	40012c00 	.word	0x40012c00
 80072bc:	40013400 	.word	0x40013400
 80072c0:	40014000 	.word	0x40014000
 80072c4:	40014400 	.word	0x40014400
 80072c8:	40014800 	.word	0x40014800

080072cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	f023 0210 	bic.w	r2, r3, #16
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f023 0320 	bic.w	r3, r3, #32
 800731a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	011b      	lsls	r3, r3, #4
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a28      	ldr	r2, [pc, #160]	; (80073cc <TIM_OC2_SetConfig+0x100>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d003      	beq.n	8007338 <TIM_OC2_SetConfig+0x6c>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a27      	ldr	r2, [pc, #156]	; (80073d0 <TIM_OC2_SetConfig+0x104>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d10d      	bne.n	8007354 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800733e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007352:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a1d      	ldr	r2, [pc, #116]	; (80073cc <TIM_OC2_SetConfig+0x100>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00f      	beq.n	800737c <TIM_OC2_SetConfig+0xb0>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a1c      	ldr	r2, [pc, #112]	; (80073d0 <TIM_OC2_SetConfig+0x104>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d00b      	beq.n	800737c <TIM_OC2_SetConfig+0xb0>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a1b      	ldr	r2, [pc, #108]	; (80073d4 <TIM_OC2_SetConfig+0x108>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d007      	beq.n	800737c <TIM_OC2_SetConfig+0xb0>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a1a      	ldr	r2, [pc, #104]	; (80073d8 <TIM_OC2_SetConfig+0x10c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d003      	beq.n	800737c <TIM_OC2_SetConfig+0xb0>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a19      	ldr	r2, [pc, #100]	; (80073dc <TIM_OC2_SetConfig+0x110>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d113      	bne.n	80073a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800738a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	4313      	orrs	r3, r2
 8007396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	621a      	str	r2, [r3, #32]
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	40012c00 	.word	0x40012c00
 80073d0:	40013400 	.word	0x40013400
 80073d4:	40014000 	.word	0x40014000
 80073d8:	40014400 	.word	0x40014400
 80073dc:	40014800 	.word	0x40014800

080073e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800740e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 0303 	bic.w	r3, r3, #3
 800741a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800742c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	021b      	lsls	r3, r3, #8
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	4313      	orrs	r3, r2
 8007438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a27      	ldr	r2, [pc, #156]	; (80074dc <TIM_OC3_SetConfig+0xfc>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d003      	beq.n	800744a <TIM_OC3_SetConfig+0x6a>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a26      	ldr	r2, [pc, #152]	; (80074e0 <TIM_OC3_SetConfig+0x100>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d10d      	bne.n	8007466 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	021b      	lsls	r3, r3, #8
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	4313      	orrs	r3, r2
 800745c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a1c      	ldr	r2, [pc, #112]	; (80074dc <TIM_OC3_SetConfig+0xfc>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d00f      	beq.n	800748e <TIM_OC3_SetConfig+0xae>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a1b      	ldr	r2, [pc, #108]	; (80074e0 <TIM_OC3_SetConfig+0x100>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d00b      	beq.n	800748e <TIM_OC3_SetConfig+0xae>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a1a      	ldr	r2, [pc, #104]	; (80074e4 <TIM_OC3_SetConfig+0x104>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d007      	beq.n	800748e <TIM_OC3_SetConfig+0xae>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a19      	ldr	r2, [pc, #100]	; (80074e8 <TIM_OC3_SetConfig+0x108>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d003      	beq.n	800748e <TIM_OC3_SetConfig+0xae>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a18      	ldr	r2, [pc, #96]	; (80074ec <TIM_OC3_SetConfig+0x10c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d113      	bne.n	80074b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800749c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	621a      	str	r2, [r3, #32]
}
 80074d0:	bf00      	nop
 80074d2:	371c      	adds	r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	40012c00 	.word	0x40012c00
 80074e0:	40013400 	.word	0x40013400
 80074e4:	40014000 	.word	0x40014000
 80074e8:	40014400 	.word	0x40014400
 80074ec:	40014800 	.word	0x40014800

080074f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800751e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800752a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	021b      	lsls	r3, r3, #8
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4313      	orrs	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800753e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	031b      	lsls	r3, r3, #12
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	4313      	orrs	r3, r2
 800754a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a28      	ldr	r2, [pc, #160]	; (80075f0 <TIM_OC4_SetConfig+0x100>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d003      	beq.n	800755c <TIM_OC4_SetConfig+0x6c>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a27      	ldr	r2, [pc, #156]	; (80075f4 <TIM_OC4_SetConfig+0x104>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d10d      	bne.n	8007578 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	031b      	lsls	r3, r3, #12
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007576:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a1d      	ldr	r2, [pc, #116]	; (80075f0 <TIM_OC4_SetConfig+0x100>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00f      	beq.n	80075a0 <TIM_OC4_SetConfig+0xb0>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a1c      	ldr	r2, [pc, #112]	; (80075f4 <TIM_OC4_SetConfig+0x104>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d00b      	beq.n	80075a0 <TIM_OC4_SetConfig+0xb0>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a1b      	ldr	r2, [pc, #108]	; (80075f8 <TIM_OC4_SetConfig+0x108>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d007      	beq.n	80075a0 <TIM_OC4_SetConfig+0xb0>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a1a      	ldr	r2, [pc, #104]	; (80075fc <TIM_OC4_SetConfig+0x10c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d003      	beq.n	80075a0 <TIM_OC4_SetConfig+0xb0>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a19      	ldr	r2, [pc, #100]	; (8007600 <TIM_OC4_SetConfig+0x110>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d113      	bne.n	80075c8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	019b      	lsls	r3, r3, #6
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	019b      	lsls	r3, r3, #6
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	621a      	str	r2, [r3, #32]
}
 80075e2:	bf00      	nop
 80075e4:	371c      	adds	r7, #28
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	40012c00 	.word	0x40012c00
 80075f4:	40013400 	.word	0x40013400
 80075f8:	40014000 	.word	0x40014000
 80075fc:	40014400 	.word	0x40014400
 8007600:	40014800 	.word	0x40014800

08007604 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800762a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007648:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	041b      	lsls	r3, r3, #16
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <TIM_OC5_SetConfig+0xb4>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00f      	beq.n	800767e <TIM_OC5_SetConfig+0x7a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a16      	ldr	r2, [pc, #88]	; (80076bc <TIM_OC5_SetConfig+0xb8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00b      	beq.n	800767e <TIM_OC5_SetConfig+0x7a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a15      	ldr	r2, [pc, #84]	; (80076c0 <TIM_OC5_SetConfig+0xbc>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d007      	beq.n	800767e <TIM_OC5_SetConfig+0x7a>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a14      	ldr	r2, [pc, #80]	; (80076c4 <TIM_OC5_SetConfig+0xc0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d003      	beq.n	800767e <TIM_OC5_SetConfig+0x7a>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a13      	ldr	r2, [pc, #76]	; (80076c8 <TIM_OC5_SetConfig+0xc4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d109      	bne.n	8007692 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007684:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	4313      	orrs	r3, r2
 8007690:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	621a      	str	r2, [r3, #32]
}
 80076ac:	bf00      	nop
 80076ae:	371c      	adds	r7, #28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	40012c00 	.word	0x40012c00
 80076bc:	40013400 	.word	0x40013400
 80076c0:	40014000 	.word	0x40014000
 80076c4:	40014400 	.word	0x40014400
 80076c8:	40014800 	.word	0x40014800

080076cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	021b      	lsls	r3, r3, #8
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4313      	orrs	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	051b      	lsls	r3, r3, #20
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a18      	ldr	r2, [pc, #96]	; (8007784 <TIM_OC6_SetConfig+0xb8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00f      	beq.n	8007748 <TIM_OC6_SetConfig+0x7c>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a17      	ldr	r2, [pc, #92]	; (8007788 <TIM_OC6_SetConfig+0xbc>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00b      	beq.n	8007748 <TIM_OC6_SetConfig+0x7c>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a16      	ldr	r2, [pc, #88]	; (800778c <TIM_OC6_SetConfig+0xc0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d007      	beq.n	8007748 <TIM_OC6_SetConfig+0x7c>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a15      	ldr	r2, [pc, #84]	; (8007790 <TIM_OC6_SetConfig+0xc4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d003      	beq.n	8007748 <TIM_OC6_SetConfig+0x7c>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a14      	ldr	r2, [pc, #80]	; (8007794 <TIM_OC6_SetConfig+0xc8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d109      	bne.n	800775c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800774e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	029b      	lsls	r3, r3, #10
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4313      	orrs	r3, r2
 800775a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	621a      	str	r2, [r3, #32]
}
 8007776:	bf00      	nop
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	40012c00 	.word	0x40012c00
 8007788:	40013400 	.word	0x40013400
 800778c:	40014000 	.word	0x40014000
 8007790:	40014400 	.word	0x40014400
 8007794:	40014800 	.word	0x40014800

08007798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a1b      	ldr	r3, [r3, #32]
 80077a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	f023 0201 	bic.w	r2, r3, #1
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f023 030a 	bic.w	r3, r3, #10
 80077d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	4313      	orrs	r3, r2
 80077dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	621a      	str	r2, [r3, #32]
}
 80077ea:	bf00      	nop
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b087      	sub	sp, #28
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	f023 0210 	bic.w	r2, r3, #16
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007820:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	031b      	lsls	r3, r3, #12
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	4313      	orrs	r3, r2
 800782a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007832:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	011b      	lsls	r3, r3, #4
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4313      	orrs	r3, r2
 800783c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	621a      	str	r2, [r3, #32]
}
 800784a:	bf00      	nop
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007856:	b480      	push	{r7}
 8007858:	b085      	sub	sp, #20
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800786c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4313      	orrs	r3, r2
 8007878:	f043 0307 	orr.w	r3, r3, #7
 800787c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	609a      	str	r2, [r3, #8]
}
 8007884:	bf00      	nop
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	021a      	lsls	r2, r3, #8
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	431a      	orrs	r2, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	609a      	str	r2, [r3, #8]
}
 80078c4:	bf00      	nop
 80078c6:	371c      	adds	r7, #28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f003 031f 	and.w	r3, r3, #31
 80078e2:	2201      	movs	r2, #1
 80078e4:	fa02 f303 	lsl.w	r3, r2, r3
 80078e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6a1a      	ldr	r2, [r3, #32]
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	43db      	mvns	r3, r3
 80078f2:	401a      	ands	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a1a      	ldr	r2, [r3, #32]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f003 031f 	and.w	r3, r3, #31
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	fa01 f303 	lsl.w	r3, r1, r3
 8007908:	431a      	orrs	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	621a      	str	r2, [r3, #32]
}
 800790e:	bf00      	nop
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
	...

0800791c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d109      	bne.n	8007940 <HAL_TIMEx_PWMN_Start+0x24>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b01      	cmp	r3, #1
 8007936:	bf14      	ite	ne
 8007938:	2301      	movne	r3, #1
 800793a:	2300      	moveq	r3, #0
 800793c:	b2db      	uxtb	r3, r3
 800793e:	e022      	b.n	8007986 <HAL_TIMEx_PWMN_Start+0x6a>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b04      	cmp	r3, #4
 8007944:	d109      	bne.n	800795a <HAL_TIMEx_PWMN_Start+0x3e>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b01      	cmp	r3, #1
 8007950:	bf14      	ite	ne
 8007952:	2301      	movne	r3, #1
 8007954:	2300      	moveq	r3, #0
 8007956:	b2db      	uxtb	r3, r3
 8007958:	e015      	b.n	8007986 <HAL_TIMEx_PWMN_Start+0x6a>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b08      	cmp	r3, #8
 800795e:	d109      	bne.n	8007974 <HAL_TIMEx_PWMN_Start+0x58>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b01      	cmp	r3, #1
 800796a:	bf14      	ite	ne
 800796c:	2301      	movne	r3, #1
 800796e:	2300      	moveq	r3, #0
 8007970:	b2db      	uxtb	r3, r3
 8007972:	e008      	b.n	8007986 <HAL_TIMEx_PWMN_Start+0x6a>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b01      	cmp	r3, #1
 800797e:	bf14      	ite	ne
 8007980:	2301      	movne	r3, #1
 8007982:	2300      	moveq	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e069      	b.n	8007a62 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d104      	bne.n	800799e <HAL_TIMEx_PWMN_Start+0x82>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800799c:	e013      	b.n	80079c6 <HAL_TIMEx_PWMN_Start+0xaa>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d104      	bne.n	80079ae <HAL_TIMEx_PWMN_Start+0x92>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079ac:	e00b      	b.n	80079c6 <HAL_TIMEx_PWMN_Start+0xaa>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d104      	bne.n	80079be <HAL_TIMEx_PWMN_Start+0xa2>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079bc:	e003      	b.n	80079c6 <HAL_TIMEx_PWMN_Start+0xaa>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2204      	movs	r2, #4
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fa1e 	bl	8007e10 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a20      	ldr	r2, [pc, #128]	; (8007a6c <HAL_TIMEx_PWMN_Start+0x150>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d018      	beq.n	8007a20 <HAL_TIMEx_PWMN_Start+0x104>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f6:	d013      	beq.n	8007a20 <HAL_TIMEx_PWMN_Start+0x104>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a1c      	ldr	r2, [pc, #112]	; (8007a70 <HAL_TIMEx_PWMN_Start+0x154>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00e      	beq.n	8007a20 <HAL_TIMEx_PWMN_Start+0x104>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a1b      	ldr	r2, [pc, #108]	; (8007a74 <HAL_TIMEx_PWMN_Start+0x158>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d009      	beq.n	8007a20 <HAL_TIMEx_PWMN_Start+0x104>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a19      	ldr	r2, [pc, #100]	; (8007a78 <HAL_TIMEx_PWMN_Start+0x15c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d004      	beq.n	8007a20 <HAL_TIMEx_PWMN_Start+0x104>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a18      	ldr	r2, [pc, #96]	; (8007a7c <HAL_TIMEx_PWMN_Start+0x160>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d115      	bne.n	8007a4c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689a      	ldr	r2, [r3, #8]
 8007a26:	4b16      	ldr	r3, [pc, #88]	; (8007a80 <HAL_TIMEx_PWMN_Start+0x164>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b06      	cmp	r3, #6
 8007a30:	d015      	beq.n	8007a5e <HAL_TIMEx_PWMN_Start+0x142>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a38:	d011      	beq.n	8007a5e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0201 	orr.w	r2, r2, #1
 8007a48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a4a:	e008      	b.n	8007a5e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0201 	orr.w	r2, r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	e000      	b.n	8007a60 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	40012c00 	.word	0x40012c00
 8007a70:	40000400 	.word	0x40000400
 8007a74:	40000800 	.word	0x40000800
 8007a78:	40013400 	.word	0x40013400
 8007a7c:	40014000 	.word	0x40014000
 8007a80:	00010007 	.word	0x00010007

08007a84 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 f9ba 	bl	8007e10 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6a1a      	ldr	r2, [r3, #32]
 8007aa2:	f241 1311 	movw	r3, #4369	; 0x1111
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10f      	bne.n	8007acc <HAL_TIMEx_PWMN_Stop+0x48>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6a1a      	ldr	r2, [r3, #32]
 8007ab2:	f244 4344 	movw	r3, #17476	; 0x4444
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d107      	bne.n	8007acc <HAL_TIMEx_PWMN_Stop+0x48>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007aca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6a1a      	ldr	r2, [r3, #32]
 8007ad2:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10f      	bne.n	8007afc <HAL_TIMEx_PWMN_Stop+0x78>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6a1a      	ldr	r2, [r3, #32]
 8007ae2:	f244 4344 	movw	r3, #17476	; 0x4444
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d107      	bne.n	8007afc <HAL_TIMEx_PWMN_Stop+0x78>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0201 	bic.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d104      	bne.n	8007b0c <HAL_TIMEx_PWMN_Stop+0x88>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b0a:	e013      	b.n	8007b34 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d104      	bne.n	8007b1c <HAL_TIMEx_PWMN_Stop+0x98>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b1a:	e00b      	b.n	8007b34 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2b08      	cmp	r3, #8
 8007b20:	d104      	bne.n	8007b2c <HAL_TIMEx_PWMN_Stop+0xa8>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b2a:	e003      	b.n	8007b34 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d101      	bne.n	8007b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e065      	b.n	8007c24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a2c      	ldr	r2, [pc, #176]	; (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d004      	beq.n	8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a2b      	ldr	r2, [pc, #172]	; (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d108      	bne.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a1b      	ldr	r2, [pc, #108]	; (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d018      	beq.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bce:	d013      	beq.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a18      	ldr	r2, [pc, #96]	; (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00e      	beq.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a17      	ldr	r2, [pc, #92]	; (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d009      	beq.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a12      	ldr	r2, [pc, #72]	; (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d004      	beq.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a13      	ldr	r2, [pc, #76]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d10c      	bne.n	8007c12 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	40012c00 	.word	0x40012c00
 8007c34:	40013400 	.word	0x40013400
 8007c38:	40000400 	.word	0x40000400
 8007c3c:	40000800 	.word	0x40000800
 8007c40:	40014000 	.word	0x40014000

08007c44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d101      	bne.n	8007c60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e087      	b.n	8007d70 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	041b      	lsls	r3, r3, #16
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a27      	ldr	r2, [pc, #156]	; (8007d7c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d004      	beq.n	8007cee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a25      	ldr	r2, [pc, #148]	; (8007d80 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d106      	bne.n	8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a1e      	ldr	r2, [pc, #120]	; (8007d7c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d004      	beq.n	8007d10 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1d      	ldr	r2, [pc, #116]	; (8007d80 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d126      	bne.n	8007d5e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1a:	051b      	lsls	r3, r3, #20
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a0e      	ldr	r2, [pc, #56]	; (8007d7c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d004      	beq.n	8007d50 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a0d      	ldr	r2, [pc, #52]	; (8007d80 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d106      	bne.n	8007d5e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	40012c00 	.word	0x40012c00
 8007d80:	40013400 	.word	0x40013400

08007d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f003 031f 	and.w	r3, r3, #31
 8007e22:	2204      	movs	r2, #4
 8007e24:	fa02 f303 	lsl.w	r3, r2, r3
 8007e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a1a      	ldr	r2, [r3, #32]
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	43db      	mvns	r3, r3
 8007e32:	401a      	ands	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6a1a      	ldr	r2, [r3, #32]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f003 031f 	and.w	r3, r3, #31
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	fa01 f303 	lsl.w	r3, r1, r3
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	621a      	str	r2, [r3, #32]
}
 8007e4e:	bf00      	nop
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e042      	b.n	8007ef2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d106      	bne.n	8007e84 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7fa fb00 	bl	8002484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2224      	movs	r2, #36	; 0x24
 8007e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0201 	bic.w	r2, r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fc51 	bl	8008744 <UART_SetConfig>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e022      	b.n	8007ef2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 ff11 	bl	8008cdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ec8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ed8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0201 	orr.w	r2, r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 ff98 	bl	8008e20 <UART_CheckIdleState>
 8007ef0:	4603      	mov	r3, r0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b08a      	sub	sp, #40	; 0x28
 8007efe:	af02      	add	r7, sp, #8
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	603b      	str	r3, [r7, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	f040 8083 	bne.w	800801c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <HAL_UART_Transmit+0x28>
 8007f1c:	88fb      	ldrh	r3, [r7, #6]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e07b      	b.n	800801e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d101      	bne.n	8007f34 <HAL_UART_Transmit+0x3a>
 8007f30:	2302      	movs	r3, #2
 8007f32:	e074      	b.n	800801e <HAL_UART_Transmit+0x124>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2221      	movs	r2, #33	; 0x21
 8007f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f4c:	f7fa fcf4 	bl	8002938 <HAL_GetTick>
 8007f50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	88fa      	ldrh	r2, [r7, #6]
 8007f56:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	88fa      	ldrh	r2, [r7, #6]
 8007f5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f6a:	d108      	bne.n	8007f7e <HAL_UART_Transmit+0x84>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d104      	bne.n	8007f7e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	61bb      	str	r3, [r7, #24]
 8007f7c:	e003      	b.n	8007f86 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007f8e:	e02c      	b.n	8007fea <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2200      	movs	r2, #0
 8007f98:	2180      	movs	r1, #128	; 0x80
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 ff8b 	bl	8008eb6 <UART_WaitOnFlagUntilTimeout>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e039      	b.n	800801e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10b      	bne.n	8007fc8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	3302      	adds	r3, #2
 8007fc4:	61bb      	str	r3, [r7, #24]
 8007fc6:	e007      	b.n	8007fd8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	781a      	ldrb	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1cc      	bne.n	8007f90 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2140      	movs	r1, #64	; 0x40
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 ff58 	bl	8008eb6 <UART_WaitOnFlagUntilTimeout>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e006      	b.n	800801e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2220      	movs	r2, #32
 8008014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	e000      	b.n	800801e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800801c:	2302      	movs	r3, #2
  }
}
 800801e:	4618      	mov	r0, r3
 8008020:	3720      	adds	r7, #32
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08a      	sub	sp, #40	; 0x28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803c:	2b20      	cmp	r3, #32
 800803e:	d142      	bne.n	80080c6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <HAL_UART_Receive_IT+0x24>
 8008046:	88fb      	ldrh	r3, [r7, #6]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e03b      	b.n	80080c8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008056:	2b01      	cmp	r3, #1
 8008058:	d101      	bne.n	800805e <HAL_UART_Receive_IT+0x36>
 800805a:	2302      	movs	r3, #2
 800805c:	e034      	b.n	80080c8 <HAL_UART_Receive_IT+0xa0>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a17      	ldr	r2, [pc, #92]	; (80080d0 <HAL_UART_Receive_IT+0xa8>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d01f      	beq.n	80080b6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d018      	beq.n	80080b6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	613b      	str	r3, [r7, #16]
   return(result);
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	623b      	str	r3, [r7, #32]
 80080a4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	69f9      	ldr	r1, [r7, #28]
 80080a8:	6a3a      	ldr	r2, [r7, #32]
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e6      	bne.n	8008084 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080b6:	88fb      	ldrh	r3, [r7, #6]
 80080b8:	461a      	mov	r2, r3
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 ffc3 	bl	8009048 <UART_Start_Receive_IT>
 80080c2:	4603      	mov	r3, r0
 80080c4:	e000      	b.n	80080c8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80080c6:	2302      	movs	r3, #2
  }
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3728      	adds	r7, #40	; 0x28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	40008000 	.word	0x40008000

080080d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b0ba      	sub	sp, #232	; 0xe8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80080fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8008102:	4013      	ands	r3, r2
 8008104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800810c:	2b00      	cmp	r3, #0
 800810e:	d11b      	bne.n	8008148 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	d015      	beq.n	8008148 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800811c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008120:	f003 0320 	and.w	r3, r3, #32
 8008124:	2b00      	cmp	r3, #0
 8008126:	d105      	bne.n	8008134 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800812c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d009      	beq.n	8008148 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 82d6 	beq.w	80086ea <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
      }
      return;
 8008146:	e2d0      	b.n	80086ea <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 811f 	beq.w	8008390 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008152:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008156:	4b8b      	ldr	r3, [pc, #556]	; (8008384 <HAL_UART_IRQHandler+0x2b0>)
 8008158:	4013      	ands	r3, r2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d106      	bne.n	800816c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800815e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008162:	4b89      	ldr	r3, [pc, #548]	; (8008388 <HAL_UART_IRQHandler+0x2b4>)
 8008164:	4013      	ands	r3, r2
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 8112 	beq.w	8008390 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800816c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	2b00      	cmp	r3, #0
 8008176:	d011      	beq.n	800819c <HAL_UART_IRQHandler+0xc8>
 8008178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800817c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00b      	beq.n	800819c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2201      	movs	r2, #1
 800818a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008192:	f043 0201 	orr.w	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800819c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a0:	f003 0302 	and.w	r3, r3, #2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d011      	beq.n	80081cc <HAL_UART_IRQHandler+0xf8>
 80081a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00b      	beq.n	80081cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2202      	movs	r2, #2
 80081ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081c2:	f043 0204 	orr.w	r2, r3, #4
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d011      	beq.n	80081fc <HAL_UART_IRQHandler+0x128>
 80081d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2204      	movs	r2, #4
 80081ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f2:	f043 0202 	orr.w	r2, r3, #2
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b00      	cmp	r3, #0
 8008206:	d017      	beq.n	8008238 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800820c:	f003 0320 	and.w	r3, r3, #32
 8008210:	2b00      	cmp	r3, #0
 8008212:	d105      	bne.n	8008220 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008214:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008218:	4b5a      	ldr	r3, [pc, #360]	; (8008384 <HAL_UART_IRQHandler+0x2b0>)
 800821a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00b      	beq.n	8008238 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2208      	movs	r2, #8
 8008226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800822e:	f043 0208 	orr.w	r2, r3, #8
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008240:	2b00      	cmp	r3, #0
 8008242:	d012      	beq.n	800826a <HAL_UART_IRQHandler+0x196>
 8008244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008248:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00c      	beq.n	800826a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008260:	f043 0220 	orr.w	r2, r3, #32
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 823c 	beq.w	80086ee <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827a:	f003 0320 	and.w	r3, r3, #32
 800827e:	2b00      	cmp	r3, #0
 8008280:	d013      	beq.n	80082aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b00      	cmp	r3, #0
 800828c:	d105      	bne.n	800829a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800828e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d007      	beq.n	80082aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082be:	2b40      	cmp	r3, #64	; 0x40
 80082c0:	d005      	beq.n	80082ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d04f      	beq.n	800836e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 ffe4 	bl	800929c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082de:	2b40      	cmp	r3, #64	; 0x40
 80082e0:	d141      	bne.n	8008366 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3308      	adds	r3, #8
 80082e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082f0:	e853 3f00 	ldrex	r3, [r3]
 80082f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3308      	adds	r3, #8
 800830a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800830e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800831a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800831e:	e841 2300 	strex	r3, r2, [r1]
 8008322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1d9      	bne.n	80082e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d013      	beq.n	800835e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800833a:	4a14      	ldr	r2, [pc, #80]	; (800838c <HAL_UART_IRQHandler+0x2b8>)
 800833c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008342:	4618      	mov	r0, r3
 8008344:	f7fc fb32 	bl	80049ac <HAL_DMA_Abort_IT>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d017      	beq.n	800837e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008358:	4610      	mov	r0, r2
 800835a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800835c:	e00f      	b.n	800837e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f9da 	bl	8008718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008364:	e00b      	b.n	800837e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f9d6 	bl	8008718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836c:	e007      	b.n	800837e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f9d2 	bl	8008718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800837c:	e1b7      	b.n	80086ee <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800837e:	bf00      	nop
    return;
 8008380:	e1b5      	b.n	80086ee <HAL_UART_IRQHandler+0x61a>
 8008382:	bf00      	nop
 8008384:	10000001 	.word	0x10000001
 8008388:	04000120 	.word	0x04000120
 800838c:	08009369 	.word	0x08009369

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008394:	2b01      	cmp	r3, #1
 8008396:	f040 814a 	bne.w	800862e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800839a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800839e:	f003 0310 	and.w	r3, r3, #16
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 8143 	beq.w	800862e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ac:	f003 0310 	and.w	r3, r3, #16
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 813c 	beq.w	800862e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2210      	movs	r2, #16
 80083bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c8:	2b40      	cmp	r3, #64	; 0x40
 80083ca:	f040 80b5 	bne.w	8008538 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 8187 	beq.w	80086f2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083ee:	429a      	cmp	r2, r3
 80083f0:	f080 817f 	bcs.w	80086f2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0320 	and.w	r3, r3, #32
 800840a:	2b00      	cmp	r3, #0
 800840c:	f040 8086 	bne.w	800851c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800842c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	461a      	mov	r2, r3
 8008436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800843a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800843e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008446:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1da      	bne.n	8008410 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3308      	adds	r3, #8
 8008460:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800846a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800846c:	f023 0301 	bic.w	r3, r3, #1
 8008470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3308      	adds	r3, #8
 800847a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800847e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008482:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008486:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e1      	bne.n	800845a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3308      	adds	r3, #8
 80084b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e3      	bne.n	8008496 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ec:	f023 0310 	bic.w	r3, r3, #16
 80084f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	461a      	mov	r2, r3
 80084fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008500:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008502:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008504:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008506:	e841 2300 	strex	r3, r2, [r1]
 800850a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800850c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1e4      	bne.n	80084dc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008516:	4618      	mov	r0, r3
 8008518:	f7fc f9ef 	bl	80048fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008528:	b29b      	uxth	r3, r3
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	b29b      	uxth	r3, r3
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f8fb 	bl	800872c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008536:	e0dc      	b.n	80086f2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008544:	b29b      	uxth	r3, r3
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008552:	b29b      	uxth	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 80ce 	beq.w	80086f6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800855a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 80c9 	beq.w	80086f6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	461a      	mov	r2, r3
 8008582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008586:	647b      	str	r3, [r7, #68]	; 0x44
 8008588:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800858c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e4      	bne.n	8008564 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3308      	adds	r3, #8
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	623b      	str	r3, [r7, #32]
   return(result);
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085b0:	f023 0301 	bic.w	r3, r3, #1
 80085b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3308      	adds	r3, #8
 80085be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085c2:	633a      	str	r2, [r7, #48]	; 0x30
 80085c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e1      	bne.n	800859a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2220      	movs	r2, #32
 80085da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0310 	bic.w	r3, r3, #16
 80085fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800860c:	61fb      	str	r3, [r7, #28]
 800860e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008610:	69b9      	ldr	r1, [r7, #24]
 8008612:	69fa      	ldr	r2, [r7, #28]
 8008614:	e841 2300 	strex	r3, r2, [r1]
 8008618:	617b      	str	r3, [r7, #20]
   return(result);
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1e4      	bne.n	80085ea <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f880 	bl	800872c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800862c:	e063      	b.n	80086f6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800862e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00e      	beq.n	8008658 <HAL_UART_IRQHandler+0x584>
 800863a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800863e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d008      	beq.n	8008658 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800864e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 fb27 	bl	8009ca4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008656:	e051      	b.n	80086fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800865c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008660:	2b00      	cmp	r3, #0
 8008662:	d014      	beq.n	800868e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866c:	2b00      	cmp	r3, #0
 800866e:	d105      	bne.n	800867c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008678:	2b00      	cmp	r3, #0
 800867a:	d008      	beq.n	800868e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008680:	2b00      	cmp	r3, #0
 8008682:	d03a      	beq.n	80086fa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	4798      	blx	r3
    }
    return;
 800868c:	e035      	b.n	80086fa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800868e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	d009      	beq.n	80086ae <HAL_UART_IRQHandler+0x5da>
 800869a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800869e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fe74 	bl	8009394 <UART_EndTransmit_IT>
    return;
 80086ac:	e026      	b.n	80086fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <HAL_UART_IRQHandler+0x5fa>
 80086ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f001 fb00 	bl	8009ccc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086cc:	e016      	b.n	80086fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d010      	beq.n	80086fc <HAL_UART_IRQHandler+0x628>
 80086da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	da0c      	bge.n	80086fc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f001 fae8 	bl	8009cb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086e8:	e008      	b.n	80086fc <HAL_UART_IRQHandler+0x628>
      return;
 80086ea:	bf00      	nop
 80086ec:	e006      	b.n	80086fc <HAL_UART_IRQHandler+0x628>
    return;
 80086ee:	bf00      	nop
 80086f0:	e004      	b.n	80086fc <HAL_UART_IRQHandler+0x628>
      return;
 80086f2:	bf00      	nop
 80086f4:	e002      	b.n	80086fc <HAL_UART_IRQHandler+0x628>
      return;
 80086f6:	bf00      	nop
 80086f8:	e000      	b.n	80086fc <HAL_UART_IRQHandler+0x628>
    return;
 80086fa:	bf00      	nop
  }
}
 80086fc:	37e8      	adds	r7, #232	; 0xe8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop

08008704 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008748:	b08c      	sub	sp, #48	; 0x30
 800874a:	af00      	add	r7, sp, #0
 800874c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	431a      	orrs	r2, r3
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	431a      	orrs	r2, r3
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	4313      	orrs	r3, r2
 800876a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	4bab      	ldr	r3, [pc, #684]	; (8008a20 <UART_SetConfig+0x2dc>)
 8008774:	4013      	ands	r3, r2
 8008776:	697a      	ldr	r2, [r7, #20]
 8008778:	6812      	ldr	r2, [r2, #0]
 800877a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800877c:	430b      	orrs	r3, r1
 800877e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4aa0      	ldr	r2, [pc, #640]	; (8008a24 <UART_SetConfig+0x2e0>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d004      	beq.n	80087b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ac:	4313      	orrs	r3, r2
 80087ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80087ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087c4:	430b      	orrs	r3, r1
 80087c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ce:	f023 010f 	bic.w	r1, r3, #15
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a91      	ldr	r2, [pc, #580]	; (8008a28 <UART_SetConfig+0x2e4>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d125      	bne.n	8008834 <UART_SetConfig+0xf0>
 80087e8:	4b90      	ldr	r3, [pc, #576]	; (8008a2c <UART_SetConfig+0x2e8>)
 80087ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ee:	f003 0303 	and.w	r3, r3, #3
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d81a      	bhi.n	800882c <UART_SetConfig+0xe8>
 80087f6:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <UART_SetConfig+0xb8>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	0800880d 	.word	0x0800880d
 8008800:	0800881d 	.word	0x0800881d
 8008804:	08008815 	.word	0x08008815
 8008808:	08008825 	.word	0x08008825
 800880c:	2301      	movs	r3, #1
 800880e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008812:	e0d6      	b.n	80089c2 <UART_SetConfig+0x27e>
 8008814:	2302      	movs	r3, #2
 8008816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800881a:	e0d2      	b.n	80089c2 <UART_SetConfig+0x27e>
 800881c:	2304      	movs	r3, #4
 800881e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008822:	e0ce      	b.n	80089c2 <UART_SetConfig+0x27e>
 8008824:	2308      	movs	r3, #8
 8008826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800882a:	e0ca      	b.n	80089c2 <UART_SetConfig+0x27e>
 800882c:	2310      	movs	r3, #16
 800882e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008832:	e0c6      	b.n	80089c2 <UART_SetConfig+0x27e>
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a7d      	ldr	r2, [pc, #500]	; (8008a30 <UART_SetConfig+0x2ec>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d138      	bne.n	80088b0 <UART_SetConfig+0x16c>
 800883e:	4b7b      	ldr	r3, [pc, #492]	; (8008a2c <UART_SetConfig+0x2e8>)
 8008840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008844:	f003 030c 	and.w	r3, r3, #12
 8008848:	2b0c      	cmp	r3, #12
 800884a:	d82d      	bhi.n	80088a8 <UART_SetConfig+0x164>
 800884c:	a201      	add	r2, pc, #4	; (adr r2, 8008854 <UART_SetConfig+0x110>)
 800884e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008852:	bf00      	nop
 8008854:	08008889 	.word	0x08008889
 8008858:	080088a9 	.word	0x080088a9
 800885c:	080088a9 	.word	0x080088a9
 8008860:	080088a9 	.word	0x080088a9
 8008864:	08008899 	.word	0x08008899
 8008868:	080088a9 	.word	0x080088a9
 800886c:	080088a9 	.word	0x080088a9
 8008870:	080088a9 	.word	0x080088a9
 8008874:	08008891 	.word	0x08008891
 8008878:	080088a9 	.word	0x080088a9
 800887c:	080088a9 	.word	0x080088a9
 8008880:	080088a9 	.word	0x080088a9
 8008884:	080088a1 	.word	0x080088a1
 8008888:	2300      	movs	r3, #0
 800888a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800888e:	e098      	b.n	80089c2 <UART_SetConfig+0x27e>
 8008890:	2302      	movs	r3, #2
 8008892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008896:	e094      	b.n	80089c2 <UART_SetConfig+0x27e>
 8008898:	2304      	movs	r3, #4
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800889e:	e090      	b.n	80089c2 <UART_SetConfig+0x27e>
 80088a0:	2308      	movs	r3, #8
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088a6:	e08c      	b.n	80089c2 <UART_SetConfig+0x27e>
 80088a8:	2310      	movs	r3, #16
 80088aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ae:	e088      	b.n	80089c2 <UART_SetConfig+0x27e>
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a5f      	ldr	r2, [pc, #380]	; (8008a34 <UART_SetConfig+0x2f0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d125      	bne.n	8008906 <UART_SetConfig+0x1c2>
 80088ba:	4b5c      	ldr	r3, [pc, #368]	; (8008a2c <UART_SetConfig+0x2e8>)
 80088bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088c4:	2b30      	cmp	r3, #48	; 0x30
 80088c6:	d016      	beq.n	80088f6 <UART_SetConfig+0x1b2>
 80088c8:	2b30      	cmp	r3, #48	; 0x30
 80088ca:	d818      	bhi.n	80088fe <UART_SetConfig+0x1ba>
 80088cc:	2b20      	cmp	r3, #32
 80088ce:	d00a      	beq.n	80088e6 <UART_SetConfig+0x1a2>
 80088d0:	2b20      	cmp	r3, #32
 80088d2:	d814      	bhi.n	80088fe <UART_SetConfig+0x1ba>
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <UART_SetConfig+0x19a>
 80088d8:	2b10      	cmp	r3, #16
 80088da:	d008      	beq.n	80088ee <UART_SetConfig+0x1aa>
 80088dc:	e00f      	b.n	80088fe <UART_SetConfig+0x1ba>
 80088de:	2300      	movs	r3, #0
 80088e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088e4:	e06d      	b.n	80089c2 <UART_SetConfig+0x27e>
 80088e6:	2302      	movs	r3, #2
 80088e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ec:	e069      	b.n	80089c2 <UART_SetConfig+0x27e>
 80088ee:	2304      	movs	r3, #4
 80088f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088f4:	e065      	b.n	80089c2 <UART_SetConfig+0x27e>
 80088f6:	2308      	movs	r3, #8
 80088f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088fc:	e061      	b.n	80089c2 <UART_SetConfig+0x27e>
 80088fe:	2310      	movs	r3, #16
 8008900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008904:	e05d      	b.n	80089c2 <UART_SetConfig+0x27e>
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a4b      	ldr	r2, [pc, #300]	; (8008a38 <UART_SetConfig+0x2f4>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d125      	bne.n	800895c <UART_SetConfig+0x218>
 8008910:	4b46      	ldr	r3, [pc, #280]	; (8008a2c <UART_SetConfig+0x2e8>)
 8008912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008916:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800891a:	2bc0      	cmp	r3, #192	; 0xc0
 800891c:	d016      	beq.n	800894c <UART_SetConfig+0x208>
 800891e:	2bc0      	cmp	r3, #192	; 0xc0
 8008920:	d818      	bhi.n	8008954 <UART_SetConfig+0x210>
 8008922:	2b80      	cmp	r3, #128	; 0x80
 8008924:	d00a      	beq.n	800893c <UART_SetConfig+0x1f8>
 8008926:	2b80      	cmp	r3, #128	; 0x80
 8008928:	d814      	bhi.n	8008954 <UART_SetConfig+0x210>
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <UART_SetConfig+0x1f0>
 800892e:	2b40      	cmp	r3, #64	; 0x40
 8008930:	d008      	beq.n	8008944 <UART_SetConfig+0x200>
 8008932:	e00f      	b.n	8008954 <UART_SetConfig+0x210>
 8008934:	2300      	movs	r3, #0
 8008936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800893a:	e042      	b.n	80089c2 <UART_SetConfig+0x27e>
 800893c:	2302      	movs	r3, #2
 800893e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008942:	e03e      	b.n	80089c2 <UART_SetConfig+0x27e>
 8008944:	2304      	movs	r3, #4
 8008946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800894a:	e03a      	b.n	80089c2 <UART_SetConfig+0x27e>
 800894c:	2308      	movs	r3, #8
 800894e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008952:	e036      	b.n	80089c2 <UART_SetConfig+0x27e>
 8008954:	2310      	movs	r3, #16
 8008956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800895a:	e032      	b.n	80089c2 <UART_SetConfig+0x27e>
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a30      	ldr	r2, [pc, #192]	; (8008a24 <UART_SetConfig+0x2e0>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d12a      	bne.n	80089bc <UART_SetConfig+0x278>
 8008966:	4b31      	ldr	r3, [pc, #196]	; (8008a2c <UART_SetConfig+0x2e8>)
 8008968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800896c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008970:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008974:	d01a      	beq.n	80089ac <UART_SetConfig+0x268>
 8008976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800897a:	d81b      	bhi.n	80089b4 <UART_SetConfig+0x270>
 800897c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008980:	d00c      	beq.n	800899c <UART_SetConfig+0x258>
 8008982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008986:	d815      	bhi.n	80089b4 <UART_SetConfig+0x270>
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <UART_SetConfig+0x250>
 800898c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008990:	d008      	beq.n	80089a4 <UART_SetConfig+0x260>
 8008992:	e00f      	b.n	80089b4 <UART_SetConfig+0x270>
 8008994:	2300      	movs	r3, #0
 8008996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800899a:	e012      	b.n	80089c2 <UART_SetConfig+0x27e>
 800899c:	2302      	movs	r3, #2
 800899e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089a2:	e00e      	b.n	80089c2 <UART_SetConfig+0x27e>
 80089a4:	2304      	movs	r3, #4
 80089a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089aa:	e00a      	b.n	80089c2 <UART_SetConfig+0x27e>
 80089ac:	2308      	movs	r3, #8
 80089ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089b2:	e006      	b.n	80089c2 <UART_SetConfig+0x27e>
 80089b4:	2310      	movs	r3, #16
 80089b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ba:	e002      	b.n	80089c2 <UART_SetConfig+0x27e>
 80089bc:	2310      	movs	r3, #16
 80089be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a17      	ldr	r2, [pc, #92]	; (8008a24 <UART_SetConfig+0x2e0>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	f040 80a8 	bne.w	8008b1e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089d2:	2b08      	cmp	r3, #8
 80089d4:	d834      	bhi.n	8008a40 <UART_SetConfig+0x2fc>
 80089d6:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <UART_SetConfig+0x298>)
 80089d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089dc:	08008a01 	.word	0x08008a01
 80089e0:	08008a41 	.word	0x08008a41
 80089e4:	08008a09 	.word	0x08008a09
 80089e8:	08008a41 	.word	0x08008a41
 80089ec:	08008a0f 	.word	0x08008a0f
 80089f0:	08008a41 	.word	0x08008a41
 80089f4:	08008a41 	.word	0x08008a41
 80089f8:	08008a41 	.word	0x08008a41
 80089fc:	08008a17 	.word	0x08008a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a00:	f7fd f88a 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8008a04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a06:	e021      	b.n	8008a4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a08:	4b0c      	ldr	r3, [pc, #48]	; (8008a3c <UART_SetConfig+0x2f8>)
 8008a0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a0c:	e01e      	b.n	8008a4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a0e:	f7fd f815 	bl	8005a3c <HAL_RCC_GetSysClockFreq>
 8008a12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a14:	e01a      	b.n	8008a4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a1c:	e016      	b.n	8008a4c <UART_SetConfig+0x308>
 8008a1e:	bf00      	nop
 8008a20:	cfff69f3 	.word	0xcfff69f3
 8008a24:	40008000 	.word	0x40008000
 8008a28:	40013800 	.word	0x40013800
 8008a2c:	40021000 	.word	0x40021000
 8008a30:	40004400 	.word	0x40004400
 8008a34:	40004800 	.word	0x40004800
 8008a38:	40004c00 	.word	0x40004c00
 8008a3c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008a40:	2300      	movs	r3, #0
 8008a42:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a4a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 812a 	beq.w	8008ca8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	4a9e      	ldr	r2, [pc, #632]	; (8008cd4 <UART_SetConfig+0x590>)
 8008a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a66:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	4413      	add	r3, r2
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d305      	bcc.n	8008a84 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d903      	bls.n	8008a8c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a8a:	e10d      	b.n	8008ca8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	2200      	movs	r2, #0
 8008a90:	60bb      	str	r3, [r7, #8]
 8008a92:	60fa      	str	r2, [r7, #12]
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a98:	4a8e      	ldr	r2, [pc, #568]	; (8008cd4 <UART_SetConfig+0x590>)
 8008a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	607a      	str	r2, [r7, #4]
 8008aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008aae:	f7f8 f923 	bl	8000cf8 <__aeabi_uldivmod>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	f04f 0200 	mov.w	r2, #0
 8008abe:	f04f 0300 	mov.w	r3, #0
 8008ac2:	020b      	lsls	r3, r1, #8
 8008ac4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ac8:	0202      	lsls	r2, r0, #8
 8008aca:	6979      	ldr	r1, [r7, #20]
 8008acc:	6849      	ldr	r1, [r1, #4]
 8008ace:	0849      	lsrs	r1, r1, #1
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	eb12 0804 	adds.w	r8, r2, r4
 8008ada:	eb43 0905 	adc.w	r9, r3, r5
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	469a      	mov	sl, r3
 8008ae6:	4693      	mov	fp, r2
 8008ae8:	4652      	mov	r2, sl
 8008aea:	465b      	mov	r3, fp
 8008aec:	4640      	mov	r0, r8
 8008aee:	4649      	mov	r1, r9
 8008af0:	f7f8 f902 	bl	8000cf8 <__aeabi_uldivmod>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4613      	mov	r3, r2
 8008afa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b02:	d308      	bcc.n	8008b16 <UART_SetConfig+0x3d2>
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b0a:	d204      	bcs.n	8008b16 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6a3a      	ldr	r2, [r7, #32]
 8008b12:	60da      	str	r2, [r3, #12]
 8008b14:	e0c8      	b.n	8008ca8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b1c:	e0c4      	b.n	8008ca8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	69db      	ldr	r3, [r3, #28]
 8008b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b26:	d167      	bne.n	8008bf8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008b28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d828      	bhi.n	8008b82 <UART_SetConfig+0x43e>
 8008b30:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <UART_SetConfig+0x3f4>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b5d 	.word	0x08008b5d
 8008b3c:	08008b65 	.word	0x08008b65
 8008b40:	08008b6d 	.word	0x08008b6d
 8008b44:	08008b83 	.word	0x08008b83
 8008b48:	08008b73 	.word	0x08008b73
 8008b4c:	08008b83 	.word	0x08008b83
 8008b50:	08008b83 	.word	0x08008b83
 8008b54:	08008b83 	.word	0x08008b83
 8008b58:	08008b7b 	.word	0x08008b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b5c:	f7fc ffdc 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8008b60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b62:	e014      	b.n	8008b8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b64:	f7fc ffee 	bl	8005b44 <HAL_RCC_GetPCLK2Freq>
 8008b68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b6a:	e010      	b.n	8008b8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b6c:	4b5a      	ldr	r3, [pc, #360]	; (8008cd8 <UART_SetConfig+0x594>)
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b70:	e00d      	b.n	8008b8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b72:	f7fc ff63 	bl	8005a3c <HAL_RCC_GetSysClockFreq>
 8008b76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b78:	e009      	b.n	8008b8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b80:	e005      	b.n	8008b8e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 8089 	beq.w	8008ca8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9a:	4a4e      	ldr	r2, [pc, #312]	; (8008cd4 <UART_SetConfig+0x590>)
 8008b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ba8:	005a      	lsls	r2, r3, #1
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	085b      	lsrs	r3, r3, #1
 8008bb0:	441a      	add	r2, r3
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	2b0f      	cmp	r3, #15
 8008bc0:	d916      	bls.n	8008bf0 <UART_SetConfig+0x4ac>
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc8:	d212      	bcs.n	8008bf0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	f023 030f 	bic.w	r3, r3, #15
 8008bd2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	085b      	lsrs	r3, r3, #1
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	f003 0307 	and.w	r3, r3, #7
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	8bfb      	ldrh	r3, [r7, #30]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	8bfa      	ldrh	r2, [r7, #30]
 8008bec:	60da      	str	r2, [r3, #12]
 8008bee:	e05b      	b.n	8008ca8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008bf6:	e057      	b.n	8008ca8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d828      	bhi.n	8008c52 <UART_SetConfig+0x50e>
 8008c00:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <UART_SetConfig+0x4c4>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c2d 	.word	0x08008c2d
 8008c0c:	08008c35 	.word	0x08008c35
 8008c10:	08008c3d 	.word	0x08008c3d
 8008c14:	08008c53 	.word	0x08008c53
 8008c18:	08008c43 	.word	0x08008c43
 8008c1c:	08008c53 	.word	0x08008c53
 8008c20:	08008c53 	.word	0x08008c53
 8008c24:	08008c53 	.word	0x08008c53
 8008c28:	08008c4b 	.word	0x08008c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c2c:	f7fc ff74 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8008c30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c32:	e014      	b.n	8008c5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c34:	f7fc ff86 	bl	8005b44 <HAL_RCC_GetPCLK2Freq>
 8008c38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c3a:	e010      	b.n	8008c5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c3c:	4b26      	ldr	r3, [pc, #152]	; (8008cd8 <UART_SetConfig+0x594>)
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c40:	e00d      	b.n	8008c5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c42:	f7fc fefb 	bl	8005a3c <HAL_RCC_GetSysClockFreq>
 8008c46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c48:	e009      	b.n	8008c5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c50:	e005      	b.n	8008c5e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c5c:	bf00      	nop
    }

    if (pclk != 0U)
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d021      	beq.n	8008ca8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c68:	4a1a      	ldr	r2, [pc, #104]	; (8008cd4 <UART_SetConfig+0x590>)
 8008c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	085b      	lsrs	r3, r3, #1
 8008c7c:	441a      	add	r2, r3
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	2b0f      	cmp	r3, #15
 8008c8c:	d909      	bls.n	8008ca2 <UART_SetConfig+0x55e>
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c94:	d205      	bcs.n	8008ca2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	60da      	str	r2, [r3, #12]
 8008ca0:	e002      	b.n	8008ca8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008cc4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3730      	adds	r7, #48	; 0x30
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cd2:	bf00      	nop
 8008cd4:	0800e9e8 	.word	0x0800e9e8
 8008cd8:	00f42400 	.word	0x00f42400

08008cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00a      	beq.n	8008d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0a:	f003 0302 	and.w	r3, r3, #2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00a      	beq.n	8008d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	430a      	orrs	r2, r1
 8008d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2c:	f003 0304 	and.w	r3, r3, #4
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00a      	beq.n	8008d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4e:	f003 0308 	and.w	r3, r3, #8
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00a      	beq.n	8008d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d70:	f003 0310 	and.w	r3, r3, #16
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00a      	beq.n	8008d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	f003 0320 	and.w	r3, r3, #32
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d01a      	beq.n	8008df2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dda:	d10a      	bne.n	8008df2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	605a      	str	r2, [r3, #4]
  }
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e30:	f7f9 fd82 	bl	8002938 <HAL_GetTick>
 8008e34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0308 	and.w	r3, r3, #8
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	d10e      	bne.n	8008e62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f82f 	bl	8008eb6 <UART_WaitOnFlagUntilTimeout>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e025      	b.n	8008eae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	2b04      	cmp	r3, #4
 8008e6e:	d10e      	bne.n	8008e8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f819 	bl	8008eb6 <UART_WaitOnFlagUntilTimeout>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e00f      	b.n	8008eae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2220      	movs	r2, #32
 8008e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b09c      	sub	sp, #112	; 0x70
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	60f8      	str	r0, [r7, #12]
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	603b      	str	r3, [r7, #0]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec6:	e0a9      	b.n	800901c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ece:	f000 80a5 	beq.w	800901c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ed2:	f7f9 fd31 	bl	8002938 <HAL_GetTick>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d302      	bcc.n	8008ee8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d140      	bne.n	8008f6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008efc:	667b      	str	r3, [r7, #100]	; 0x64
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	461a      	mov	r2, r3
 8008f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e6      	bne.n	8008ee8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3308      	adds	r3, #8
 8008f20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	f023 0301 	bic.w	r3, r3, #1
 8008f30:	663b      	str	r3, [r7, #96]	; 0x60
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3308      	adds	r3, #8
 8008f38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f42:	e841 2300 	strex	r3, r2, [r1]
 8008f46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1e5      	bne.n	8008f1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2220      	movs	r2, #32
 8008f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e069      	b.n	800903e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0304 	and.w	r3, r3, #4
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d051      	beq.n	800901c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f86:	d149      	bne.n	800901c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	461a      	mov	r2, r3
 8008fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fb8:	e841 2300 	strex	r3, r2, [r1]
 8008fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1e6      	bne.n	8008f92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3308      	adds	r3, #8
 8008fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f023 0301 	bic.w	r3, r3, #1
 8008fda:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fe4:	623a      	str	r2, [r7, #32]
 8008fe6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe8:	69f9      	ldr	r1, [r7, #28]
 8008fea:	6a3a      	ldr	r2, [r7, #32]
 8008fec:	e841 2300 	strex	r3, r2, [r1]
 8008ff0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e5      	bne.n	8008fc4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2220      	movs	r2, #32
 8008ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2220      	movs	r2, #32
 8009004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2220      	movs	r2, #32
 800900c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e010      	b.n	800903e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	69da      	ldr	r2, [r3, #28]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	4013      	ands	r3, r2
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	429a      	cmp	r2, r3
 800902a:	bf0c      	ite	eq
 800902c:	2301      	moveq	r3, #1
 800902e:	2300      	movne	r3, #0
 8009030:	b2db      	uxtb	r3, r3
 8009032:	461a      	mov	r2, r3
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	429a      	cmp	r2, r3
 8009038:	f43f af46 	beq.w	8008ec8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3770      	adds	r7, #112	; 0x70
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009048:	b480      	push	{r7}
 800904a:	b0a3      	sub	sp, #140	; 0x8c
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	4613      	mov	r3, r2
 8009054:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	88fa      	ldrh	r2, [r7, #6]
 8009060:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	88fa      	ldrh	r2, [r7, #6]
 8009068:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800907a:	d10e      	bne.n	800909a <UART_Start_Receive_IT+0x52>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d105      	bne.n	8009090 <UART_Start_Receive_IT+0x48>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f240 12ff 	movw	r2, #511	; 0x1ff
 800908a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800908e:	e02d      	b.n	80090ec <UART_Start_Receive_IT+0xa4>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	22ff      	movs	r2, #255	; 0xff
 8009094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009098:	e028      	b.n	80090ec <UART_Start_Receive_IT+0xa4>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10d      	bne.n	80090be <UART_Start_Receive_IT+0x76>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d104      	bne.n	80090b4 <UART_Start_Receive_IT+0x6c>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	22ff      	movs	r2, #255	; 0xff
 80090ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090b2:	e01b      	b.n	80090ec <UART_Start_Receive_IT+0xa4>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	227f      	movs	r2, #127	; 0x7f
 80090b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090bc:	e016      	b.n	80090ec <UART_Start_Receive_IT+0xa4>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090c6:	d10d      	bne.n	80090e4 <UART_Start_Receive_IT+0x9c>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d104      	bne.n	80090da <UART_Start_Receive_IT+0x92>
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	227f      	movs	r2, #127	; 0x7f
 80090d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090d8:	e008      	b.n	80090ec <UART_Start_Receive_IT+0xa4>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	223f      	movs	r2, #63	; 0x3f
 80090de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090e2:	e003      	b.n	80090ec <UART_Start_Receive_IT+0xa4>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2222      	movs	r2, #34	; 0x22
 80090f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3308      	adds	r3, #8
 8009102:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800910c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800910e:	f043 0301 	orr.w	r3, r3, #1
 8009112:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3308      	adds	r3, #8
 800911c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009120:	673a      	str	r2, [r7, #112]	; 0x70
 8009122:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009126:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800912e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e3      	bne.n	80090fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800913c:	d153      	bne.n	80091e6 <UART_Start_Receive_IT+0x19e>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009144:	88fa      	ldrh	r2, [r7, #6]
 8009146:	429a      	cmp	r2, r3
 8009148:	d34d      	bcc.n	80091e6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009152:	d107      	bne.n	8009164 <UART_Start_Receive_IT+0x11c>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d103      	bne.n	8009164 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4a4b      	ldr	r2, [pc, #300]	; (800928c <UART_Start_Receive_IT+0x244>)
 8009160:	671a      	str	r2, [r3, #112]	; 0x70
 8009162:	e002      	b.n	800916a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4a4a      	ldr	r2, [pc, #296]	; (8009290 <UART_Start_Receive_IT+0x248>)
 8009168:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d01a      	beq.n	80091b0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009182:	e853 3f00 	ldrex	r3, [r3]
 8009186:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800918a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800918e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	461a      	mov	r2, r3
 8009198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800919c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800919e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80091aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e4      	bne.n	800917a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3308      	adds	r3, #8
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ba:	e853 3f00 	ldrex	r3, [r3]
 80091be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80091d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80091d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e5      	bne.n	80091b0 <UART_Start_Receive_IT+0x168>
 80091e4:	e04a      	b.n	800927c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ee:	d107      	bne.n	8009200 <UART_Start_Receive_IT+0x1b8>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d103      	bne.n	8009200 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4a26      	ldr	r2, [pc, #152]	; (8009294 <UART_Start_Receive_IT+0x24c>)
 80091fc:	671a      	str	r2, [r3, #112]	; 0x70
 80091fe:	e002      	b.n	8009206 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4a25      	ldr	r2, [pc, #148]	; (8009298 <UART_Start_Receive_IT+0x250>)
 8009204:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d019      	beq.n	800924a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800922a:	677b      	str	r3, [r7, #116]	; 0x74
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	461a      	mov	r2, r3
 8009232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009234:	637b      	str	r3, [r7, #52]	; 0x34
 8009236:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800923a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800923c:	e841 2300 	strex	r3, r2, [r1]
 8009240:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e6      	bne.n	8009216 <UART_Start_Receive_IT+0x1ce>
 8009248:	e018      	b.n	800927c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	e853 3f00 	ldrex	r3, [r3]
 8009256:	613b      	str	r3, [r7, #16]
   return(result);
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	f043 0320 	orr.w	r3, r3, #32
 800925e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	461a      	mov	r2, r3
 8009266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009268:	623b      	str	r3, [r7, #32]
 800926a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926c:	69f9      	ldr	r1, [r7, #28]
 800926e:	6a3a      	ldr	r2, [r7, #32]
 8009270:	e841 2300 	strex	r3, r2, [r1]
 8009274:	61bb      	str	r3, [r7, #24]
   return(result);
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e6      	bne.n	800924a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	378c      	adds	r7, #140	; 0x8c
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	080099a5 	.word	0x080099a5
 8009290:	080096ad 	.word	0x080096ad
 8009294:	0800954b 	.word	0x0800954b
 8009298:	080093eb 	.word	0x080093eb

0800929c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800929c:	b480      	push	{r7}
 800929e:	b095      	sub	sp, #84	; 0x54
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c2:	643b      	str	r3, [r7, #64]	; 0x40
 80092c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092ca:	e841 2300 	strex	r3, r2, [r1]
 80092ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1e6      	bne.n	80092a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3308      	adds	r3, #8
 80092dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092de:	6a3b      	ldr	r3, [r7, #32]
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092ec:	f023 0301 	bic.w	r3, r3, #1
 80092f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3308      	adds	r3, #8
 80092f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e3      	bne.n	80092d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009312:	2b01      	cmp	r3, #1
 8009314:	d118      	bne.n	8009348 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	e853 3f00 	ldrex	r3, [r3]
 8009322:	60bb      	str	r3, [r7, #8]
   return(result);
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	f023 0310 	bic.w	r3, r3, #16
 800932a:	647b      	str	r3, [r7, #68]	; 0x44
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	461a      	mov	r2, r3
 8009332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009334:	61bb      	str	r3, [r7, #24]
 8009336:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	6979      	ldr	r1, [r7, #20]
 800933a:	69ba      	ldr	r2, [r7, #24]
 800933c:	e841 2300 	strex	r3, r2, [r1]
 8009340:	613b      	str	r3, [r7, #16]
   return(result);
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e6      	bne.n	8009316 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2220      	movs	r2, #32
 800934c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800935c:	bf00      	nop
 800935e:	3754      	adds	r7, #84	; 0x54
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009374:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f7ff f9c6 	bl	8008718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800938c:	bf00      	nop
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b088      	sub	sp, #32
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093b0:	61fb      	str	r3, [r7, #28]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	61bb      	str	r3, [r7, #24]
 80093bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	6979      	ldr	r1, [r7, #20]
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	613b      	str	r3, [r7, #16]
   return(result);
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e6      	bne.n	800939c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7ff f991 	bl	8008704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093e2:	bf00      	nop
 80093e4:	3720      	adds	r7, #32
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b096      	sub	sp, #88	; 0x58
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009402:	2b22      	cmp	r3, #34	; 0x22
 8009404:	f040 8095 	bne.w	8009532 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009412:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009416:	b2d9      	uxtb	r1, r3
 8009418:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800941c:	b2da      	uxtb	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009422:	400a      	ands	r2, r1
 8009424:	b2d2      	uxtb	r2, r2
 8009426:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800942c:	1c5a      	adds	r2, r3, #1
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009438:	b29b      	uxth	r3, r3
 800943a:	3b01      	subs	r3, #1
 800943c:	b29a      	uxth	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800944a:	b29b      	uxth	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d178      	bne.n	8009542 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800945e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009464:	653b      	str	r3, [r7, #80]	; 0x50
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800946e:	647b      	str	r3, [r7, #68]	; 0x44
 8009470:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800947c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e6      	bne.n	8009450 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3308      	adds	r3, #8
 8009488:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	623b      	str	r3, [r7, #32]
   return(result);
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	f023 0301 	bic.w	r3, r3, #1
 8009498:	64fb      	str	r3, [r7, #76]	; 0x4c
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3308      	adds	r3, #8
 80094a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094a2:	633a      	str	r2, [r7, #48]	; 0x30
 80094a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e5      	bne.n	8009482 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d12e      	bne.n	800952a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	e853 3f00 	ldrex	r3, [r3]
 80094de:	60fb      	str	r3, [r7, #12]
   return(result);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 0310 	bic.w	r3, r3, #16
 80094e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	461a      	mov	r2, r3
 80094ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094f0:	61fb      	str	r3, [r7, #28]
 80094f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f4:	69b9      	ldr	r1, [r7, #24]
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	e841 2300 	strex	r3, r2, [r1]
 80094fc:	617b      	str	r3, [r7, #20]
   return(result);
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e6      	bne.n	80094d2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	69db      	ldr	r3, [r3, #28]
 800950a:	f003 0310 	and.w	r3, r3, #16
 800950e:	2b10      	cmp	r3, #16
 8009510:	d103      	bne.n	800951a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2210      	movs	r2, #16
 8009518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7ff f902 	bl	800872c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009528:	e00b      	b.n	8009542 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7f8 fddc 	bl	80020e8 <HAL_UART_RxCpltCallback>
}
 8009530:	e007      	b.n	8009542 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f042 0208 	orr.w	r2, r2, #8
 8009540:	619a      	str	r2, [r3, #24]
}
 8009542:	bf00      	nop
 8009544:	3758      	adds	r7, #88	; 0x58
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b096      	sub	sp, #88	; 0x58
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009558:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009562:	2b22      	cmp	r3, #34	; 0x22
 8009564:	f040 8095 	bne.w	8009692 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009576:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009578:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800957c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009580:	4013      	ands	r3, r2
 8009582:	b29a      	uxth	r2, r3
 8009584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009586:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800958c:	1c9a      	adds	r2, r3, #2
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009598:	b29b      	uxth	r3, r3
 800959a:	3b01      	subs	r3, #1
 800959c:	b29a      	uxth	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d178      	bne.n	80096a2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b8:	e853 3f00 	ldrex	r3, [r3]
 80095bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	461a      	mov	r2, r3
 80095cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ce:	643b      	str	r3, [r7, #64]	; 0x40
 80095d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095d6:	e841 2300 	strex	r3, r2, [r1]
 80095da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1e6      	bne.n	80095b0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3308      	adds	r3, #8
 80095e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	e853 3f00 	ldrex	r3, [r3]
 80095f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	f023 0301 	bic.w	r3, r3, #1
 80095f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3308      	adds	r3, #8
 8009600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009602:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009604:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800960a:	e841 2300 	strex	r3, r2, [r1]
 800960e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1e5      	bne.n	80095e2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2220      	movs	r2, #32
 800961a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009628:	2b01      	cmp	r3, #1
 800962a:	d12e      	bne.n	800968a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	e853 3f00 	ldrex	r3, [r3]
 800963e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	f023 0310 	bic.w	r3, r3, #16
 8009646:	647b      	str	r3, [r7, #68]	; 0x44
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	461a      	mov	r2, r3
 800964e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009650:	61bb      	str	r3, [r7, #24]
 8009652:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009654:	6979      	ldr	r1, [r7, #20]
 8009656:	69ba      	ldr	r2, [r7, #24]
 8009658:	e841 2300 	strex	r3, r2, [r1]
 800965c:	613b      	str	r3, [r7, #16]
   return(result);
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1e6      	bne.n	8009632 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	f003 0310 	and.w	r3, r3, #16
 800966e:	2b10      	cmp	r3, #16
 8009670:	d103      	bne.n	800967a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2210      	movs	r2, #16
 8009678:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009680:	4619      	mov	r1, r3
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7ff f852 	bl	800872c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009688:	e00b      	b.n	80096a2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7f8 fd2c 	bl	80020e8 <HAL_UART_RxCpltCallback>
}
 8009690:	e007      	b.n	80096a2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	699a      	ldr	r2, [r3, #24]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f042 0208 	orr.w	r2, r2, #8
 80096a0:	619a      	str	r2, [r3, #24]
}
 80096a2:	bf00      	nop
 80096a4:	3758      	adds	r7, #88	; 0x58
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
	...

080096ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b0a6      	sub	sp, #152	; 0x98
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096ba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e2:	2b22      	cmp	r3, #34	; 0x22
 80096e4:	f040 814f 	bne.w	8009986 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096ee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096f2:	e0f6      	b.n	80098e2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80096fe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009702:	b2d9      	uxtb	r1, r3
 8009704:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009708:	b2da      	uxtb	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800970e:	400a      	ands	r2, r1
 8009710:	b2d2      	uxtb	r2, r2
 8009712:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009718:	1c5a      	adds	r2, r3, #1
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009724:	b29b      	uxth	r3, r3
 8009726:	3b01      	subs	r3, #1
 8009728:	b29a      	uxth	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800973a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800973e:	f003 0307 	and.w	r3, r3, #7
 8009742:	2b00      	cmp	r3, #0
 8009744:	d053      	beq.n	80097ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009746:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	2b00      	cmp	r3, #0
 8009750:	d011      	beq.n	8009776 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009752:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00b      	beq.n	8009776 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2201      	movs	r2, #1
 8009764:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800976c:	f043 0201 	orr.w	r2, r3, #1
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009776:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800977a:	f003 0302 	and.w	r3, r3, #2
 800977e:	2b00      	cmp	r3, #0
 8009780:	d011      	beq.n	80097a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009782:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00b      	beq.n	80097a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2202      	movs	r2, #2
 8009794:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800979c:	f043 0204 	orr.w	r2, r3, #4
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097aa:	f003 0304 	and.w	r3, r3, #4
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d011      	beq.n	80097d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80097b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00b      	beq.n	80097d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2204      	movs	r2, #4
 80097c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097cc:	f043 0202 	orr.w	r2, r3, #2
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d006      	beq.n	80097ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7fe ff99 	bl	8008718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d173      	bne.n	80098e2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800980a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800980e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800981c:	66bb      	str	r3, [r7, #104]	; 0x68
 800981e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009820:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009822:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009824:	e841 2300 	strex	r3, r2, [r1]
 8009828:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800982a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1e4      	bne.n	80097fa <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3308      	adds	r3, #8
 8009836:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800983a:	e853 3f00 	ldrex	r3, [r3]
 800983e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009846:	f023 0301 	bic.w	r3, r3, #1
 800984a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	3308      	adds	r3, #8
 8009852:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009854:	657a      	str	r2, [r7, #84]	; 0x54
 8009856:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009858:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800985a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800985c:	e841 2300 	strex	r3, r2, [r1]
 8009860:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1e3      	bne.n	8009830 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2220      	movs	r2, #32
 800986c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800987a:	2b01      	cmp	r3, #1
 800987c:	d12e      	bne.n	80098dc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800988c:	e853 3f00 	ldrex	r3, [r3]
 8009890:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	f023 0310 	bic.w	r3, r3, #16
 8009898:	67bb      	str	r3, [r7, #120]	; 0x78
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	461a      	mov	r2, r3
 80098a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098a2:	643b      	str	r3, [r7, #64]	; 0x40
 80098a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098aa:	e841 2300 	strex	r3, r2, [r1]
 80098ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1e6      	bne.n	8009884 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	f003 0310 	and.w	r3, r3, #16
 80098c0:	2b10      	cmp	r3, #16
 80098c2:	d103      	bne.n	80098cc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2210      	movs	r2, #16
 80098ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fe ff29 	bl	800872c <HAL_UARTEx_RxEventCallback>
 80098da:	e002      	b.n	80098e2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f7f8 fc03 	bl	80020e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80098e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d006      	beq.n	80098f8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80098ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098ee:	f003 0320 	and.w	r3, r3, #32
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f47f aefe 	bne.w	80096f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009902:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009906:	2b00      	cmp	r3, #0
 8009908:	d045      	beq.n	8009996 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009910:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009914:	429a      	cmp	r2, r3
 8009916:	d23e      	bcs.n	8009996 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	3308      	adds	r3, #8
 800991e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	e853 3f00 	ldrex	r3, [r3]
 8009926:	61fb      	str	r3, [r7, #28]
   return(result);
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800992e:	673b      	str	r3, [r7, #112]	; 0x70
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	3308      	adds	r3, #8
 8009936:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009938:	62fa      	str	r2, [r7, #44]	; 0x2c
 800993a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800993e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009940:	e841 2300 	strex	r3, r2, [r1]
 8009944:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1e5      	bne.n	8009918 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a14      	ldr	r2, [pc, #80]	; (80099a0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009950:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	e853 3f00 	ldrex	r3, [r3]
 800995e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	f043 0320 	orr.w	r3, r3, #32
 8009966:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	461a      	mov	r2, r3
 800996e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009970:	61bb      	str	r3, [r7, #24]
 8009972:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009974:	6979      	ldr	r1, [r7, #20]
 8009976:	69ba      	ldr	r2, [r7, #24]
 8009978:	e841 2300 	strex	r3, r2, [r1]
 800997c:	613b      	str	r3, [r7, #16]
   return(result);
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e6      	bne.n	8009952 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009984:	e007      	b.n	8009996 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	699a      	ldr	r2, [r3, #24]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f042 0208 	orr.w	r2, r2, #8
 8009994:	619a      	str	r2, [r3, #24]
}
 8009996:	bf00      	nop
 8009998:	3798      	adds	r7, #152	; 0x98
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	080093eb 	.word	0x080093eb

080099a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b0a8      	sub	sp, #160	; 0xa0
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80099b2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	69db      	ldr	r3, [r3, #28]
 80099bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099da:	2b22      	cmp	r3, #34	; 0x22
 80099dc:	f040 8153 	bne.w	8009c86 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80099e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80099ea:	e0fa      	b.n	8009be2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80099fe:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009a02:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009a06:	4013      	ands	r3, r2
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a14:	1c9a      	adds	r2, r3, #2
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	3b01      	subs	r3, #1
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	69db      	ldr	r3, [r3, #28]
 8009a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009a36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d053      	beq.n	8009aea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d011      	beq.n	8009a72 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009a4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00b      	beq.n	8009a72 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a68:	f043 0201 	orr.w	r2, r3, #1
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a76:	f003 0302 	and.w	r3, r3, #2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d011      	beq.n	8009aa2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009a7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00b      	beq.n	8009aa2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2202      	movs	r2, #2
 8009a90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a98:	f043 0204 	orr.w	r2, r3, #4
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aa6:	f003 0304 	and.w	r3, r3, #4
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d011      	beq.n	8009ad2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009aae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00b      	beq.n	8009ad2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2204      	movs	r2, #4
 8009ac0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ac8:	f043 0202 	orr.w	r2, r3, #2
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d006      	beq.n	8009aea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7fe fe1b 	bl	8008718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d175      	bne.n	8009be2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009afe:	e853 3f00 	ldrex	r3, [r3]
 8009b02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b1a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b20:	e841 2300 	strex	r3, r2, [r1]
 8009b24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1e4      	bne.n	8009af6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	3308      	adds	r3, #8
 8009b32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b36:	e853 3f00 	ldrex	r3, [r3]
 8009b3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b42:	f023 0301 	bic.w	r3, r3, #1
 8009b46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3308      	adds	r3, #8
 8009b50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b54:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b5c:	e841 2300 	strex	r3, r2, [r1]
 8009b60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e1      	bne.n	8009b2c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d12e      	bne.n	8009bdc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	e853 3f00 	ldrex	r3, [r3]
 8009b90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b94:	f023 0310 	bic.w	r3, r3, #16
 8009b98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8009ba4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009baa:	e841 2300 	strex	r3, r2, [r1]
 8009bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1e6      	bne.n	8009b84 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	69db      	ldr	r3, [r3, #28]
 8009bbc:	f003 0310 	and.w	r3, r3, #16
 8009bc0:	2b10      	cmp	r3, #16
 8009bc2:	d103      	bne.n	8009bcc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2210      	movs	r2, #16
 8009bca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7fe fda9 	bl	800872c <HAL_UARTEx_RxEventCallback>
 8009bda:	e002      	b.n	8009be2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7f8 fa83 	bl	80020e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009be2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d006      	beq.n	8009bf8 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009bea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f47f aefa 	bne.w	80099ec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bfe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c02:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d045      	beq.n	8009c96 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c10:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d23e      	bcs.n	8009c96 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3308      	adds	r3, #8
 8009c1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	e853 3f00 	ldrex	r3, [r3]
 8009c26:	623b      	str	r3, [r7, #32]
   return(result);
 8009c28:	6a3b      	ldr	r3, [r7, #32]
 8009c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c2e:	677b      	str	r3, [r7, #116]	; 0x74
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3308      	adds	r3, #8
 8009c36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c38:	633a      	str	r2, [r7, #48]	; 0x30
 8009c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c40:	e841 2300 	strex	r3, r2, [r1]
 8009c44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1e5      	bne.n	8009c18 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a14      	ldr	r2, [pc, #80]	; (8009ca0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009c50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	e853 3f00 	ldrex	r3, [r3]
 8009c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f043 0320 	orr.w	r3, r3, #32
 8009c66:	673b      	str	r3, [r7, #112]	; 0x70
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c70:	61fb      	str	r3, [r7, #28]
 8009c72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c74:	69b9      	ldr	r1, [r7, #24]
 8009c76:	69fa      	ldr	r2, [r7, #28]
 8009c78:	e841 2300 	strex	r3, r2, [r1]
 8009c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1e6      	bne.n	8009c52 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c84:	e007      	b.n	8009c96 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	699a      	ldr	r2, [r3, #24]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f042 0208 	orr.w	r2, r2, #8
 8009c94:	619a      	str	r2, [r3, #24]
}
 8009c96:	bf00      	nop
 8009c98:	37a0      	adds	r7, #160	; 0xa0
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	0800954b 	.word	0x0800954b

08009ca4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d101      	bne.n	8009cf6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	e027      	b.n	8009d46 <HAL_UARTEx_DisableFifoMode+0x66>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2224      	movs	r2, #36	; 0x24
 8009d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 0201 	bic.w	r2, r2, #1
 8009d1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d101      	bne.n	8009d6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d66:	2302      	movs	r3, #2
 8009d68:	e02d      	b.n	8009dc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2224      	movs	r2, #36	; 0x24
 8009d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 0201 	bic.w	r2, r2, #1
 8009d90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	430a      	orrs	r2, r1
 8009da4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f850 	bl	8009e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2220      	movs	r2, #32
 8009db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d101      	bne.n	8009de6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009de2:	2302      	movs	r3, #2
 8009de4:	e02d      	b.n	8009e42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2224      	movs	r2, #36	; 0x24
 8009df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0201 	bic.w	r2, r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f812 	bl	8009e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2220      	movs	r2, #32
 8009e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d108      	bne.n	8009e6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e6c:	e031      	b.n	8009ed2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e6e:	2308      	movs	r3, #8
 8009e70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e72:	2308      	movs	r3, #8
 8009e74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	0e5b      	lsrs	r3, r3, #25
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	f003 0307 	and.w	r3, r3, #7
 8009e84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	0f5b      	lsrs	r3, r3, #29
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	f003 0307 	and.w	r3, r3, #7
 8009e94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	7b3a      	ldrb	r2, [r7, #12]
 8009e9a:	4911      	ldr	r1, [pc, #68]	; (8009ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8009e9c:	5c8a      	ldrb	r2, [r1, r2]
 8009e9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ea2:	7b3a      	ldrb	r2, [r7, #12]
 8009ea4:	490f      	ldr	r1, [pc, #60]	; (8009ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8009ea6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ea8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009eb4:	7bfb      	ldrb	r3, [r7, #15]
 8009eb6:	7b7a      	ldrb	r2, [r7, #13]
 8009eb8:	4909      	ldr	r1, [pc, #36]	; (8009ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8009eba:	5c8a      	ldrb	r2, [r1, r2]
 8009ebc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ec0:	7b7a      	ldrb	r2, [r7, #13]
 8009ec2:	4908      	ldr	r1, [pc, #32]	; (8009ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8009ec4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ec6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ed2:	bf00      	nop
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	0800ea00 	.word	0x0800ea00
 8009ee4:	0800ea08 	.word	0x0800ea08

08009ee8 <atoi>:
 8009ee8:	220a      	movs	r2, #10
 8009eea:	2100      	movs	r1, #0
 8009eec:	f001 bddc 	b.w	800baa8 <strtol>

08009ef0 <__errno>:
 8009ef0:	4b01      	ldr	r3, [pc, #4]	; (8009ef8 <__errno+0x8>)
 8009ef2:	6818      	ldr	r0, [r3, #0]
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	2000020c 	.word	0x2000020c

08009efc <__libc_init_array>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	4d0d      	ldr	r5, [pc, #52]	; (8009f34 <__libc_init_array+0x38>)
 8009f00:	4c0d      	ldr	r4, [pc, #52]	; (8009f38 <__libc_init_array+0x3c>)
 8009f02:	1b64      	subs	r4, r4, r5
 8009f04:	10a4      	asrs	r4, r4, #2
 8009f06:	2600      	movs	r6, #0
 8009f08:	42a6      	cmp	r6, r4
 8009f0a:	d109      	bne.n	8009f20 <__libc_init_array+0x24>
 8009f0c:	4d0b      	ldr	r5, [pc, #44]	; (8009f3c <__libc_init_array+0x40>)
 8009f0e:	4c0c      	ldr	r4, [pc, #48]	; (8009f40 <__libc_init_array+0x44>)
 8009f10:	f004 fcfa 	bl	800e908 <_init>
 8009f14:	1b64      	subs	r4, r4, r5
 8009f16:	10a4      	asrs	r4, r4, #2
 8009f18:	2600      	movs	r6, #0
 8009f1a:	42a6      	cmp	r6, r4
 8009f1c:	d105      	bne.n	8009f2a <__libc_init_array+0x2e>
 8009f1e:	bd70      	pop	{r4, r5, r6, pc}
 8009f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f24:	4798      	blx	r3
 8009f26:	3601      	adds	r6, #1
 8009f28:	e7ee      	b.n	8009f08 <__libc_init_array+0xc>
 8009f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f2e:	4798      	blx	r3
 8009f30:	3601      	adds	r6, #1
 8009f32:	e7f2      	b.n	8009f1a <__libc_init_array+0x1e>
 8009f34:	0800ef18 	.word	0x0800ef18
 8009f38:	0800ef18 	.word	0x0800ef18
 8009f3c:	0800ef18 	.word	0x0800ef18
 8009f40:	0800ef1c 	.word	0x0800ef1c

08009f44 <memset>:
 8009f44:	4402      	add	r2, r0
 8009f46:	4603      	mov	r3, r0
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d100      	bne.n	8009f4e <memset+0xa>
 8009f4c:	4770      	bx	lr
 8009f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f52:	e7f9      	b.n	8009f48 <memset+0x4>

08009f54 <__cvt>:
 8009f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f58:	ec55 4b10 	vmov	r4, r5, d0
 8009f5c:	2d00      	cmp	r5, #0
 8009f5e:	460e      	mov	r6, r1
 8009f60:	4619      	mov	r1, r3
 8009f62:	462b      	mov	r3, r5
 8009f64:	bfbb      	ittet	lt
 8009f66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f6a:	461d      	movlt	r5, r3
 8009f6c:	2300      	movge	r3, #0
 8009f6e:	232d      	movlt	r3, #45	; 0x2d
 8009f70:	700b      	strb	r3, [r1, #0]
 8009f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f78:	4691      	mov	r9, r2
 8009f7a:	f023 0820 	bic.w	r8, r3, #32
 8009f7e:	bfbc      	itt	lt
 8009f80:	4622      	movlt	r2, r4
 8009f82:	4614      	movlt	r4, r2
 8009f84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f88:	d005      	beq.n	8009f96 <__cvt+0x42>
 8009f8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f8e:	d100      	bne.n	8009f92 <__cvt+0x3e>
 8009f90:	3601      	adds	r6, #1
 8009f92:	2102      	movs	r1, #2
 8009f94:	e000      	b.n	8009f98 <__cvt+0x44>
 8009f96:	2103      	movs	r1, #3
 8009f98:	ab03      	add	r3, sp, #12
 8009f9a:	9301      	str	r3, [sp, #4]
 8009f9c:	ab02      	add	r3, sp, #8
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	ec45 4b10 	vmov	d0, r4, r5
 8009fa4:	4653      	mov	r3, sl
 8009fa6:	4632      	mov	r2, r6
 8009fa8:	f001 fe32 	bl	800bc10 <_dtoa_r>
 8009fac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009fb0:	4607      	mov	r7, r0
 8009fb2:	d102      	bne.n	8009fba <__cvt+0x66>
 8009fb4:	f019 0f01 	tst.w	r9, #1
 8009fb8:	d022      	beq.n	800a000 <__cvt+0xac>
 8009fba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fbe:	eb07 0906 	add.w	r9, r7, r6
 8009fc2:	d110      	bne.n	8009fe6 <__cvt+0x92>
 8009fc4:	783b      	ldrb	r3, [r7, #0]
 8009fc6:	2b30      	cmp	r3, #48	; 0x30
 8009fc8:	d10a      	bne.n	8009fe0 <__cvt+0x8c>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4620      	mov	r0, r4
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	f7f6 fdb1 	bl	8000b38 <__aeabi_dcmpeq>
 8009fd6:	b918      	cbnz	r0, 8009fe0 <__cvt+0x8c>
 8009fd8:	f1c6 0601 	rsb	r6, r6, #1
 8009fdc:	f8ca 6000 	str.w	r6, [sl]
 8009fe0:	f8da 3000 	ldr.w	r3, [sl]
 8009fe4:	4499      	add	r9, r3
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4620      	mov	r0, r4
 8009fec:	4629      	mov	r1, r5
 8009fee:	f7f6 fda3 	bl	8000b38 <__aeabi_dcmpeq>
 8009ff2:	b108      	cbz	r0, 8009ff8 <__cvt+0xa4>
 8009ff4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ff8:	2230      	movs	r2, #48	; 0x30
 8009ffa:	9b03      	ldr	r3, [sp, #12]
 8009ffc:	454b      	cmp	r3, r9
 8009ffe:	d307      	bcc.n	800a010 <__cvt+0xbc>
 800a000:	9b03      	ldr	r3, [sp, #12]
 800a002:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a004:	1bdb      	subs	r3, r3, r7
 800a006:	4638      	mov	r0, r7
 800a008:	6013      	str	r3, [r2, #0]
 800a00a:	b004      	add	sp, #16
 800a00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a010:	1c59      	adds	r1, r3, #1
 800a012:	9103      	str	r1, [sp, #12]
 800a014:	701a      	strb	r2, [r3, #0]
 800a016:	e7f0      	b.n	8009ffa <__cvt+0xa6>

0800a018 <__exponent>:
 800a018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a01a:	4603      	mov	r3, r0
 800a01c:	2900      	cmp	r1, #0
 800a01e:	bfb8      	it	lt
 800a020:	4249      	neglt	r1, r1
 800a022:	f803 2b02 	strb.w	r2, [r3], #2
 800a026:	bfb4      	ite	lt
 800a028:	222d      	movlt	r2, #45	; 0x2d
 800a02a:	222b      	movge	r2, #43	; 0x2b
 800a02c:	2909      	cmp	r1, #9
 800a02e:	7042      	strb	r2, [r0, #1]
 800a030:	dd2a      	ble.n	800a088 <__exponent+0x70>
 800a032:	f10d 0407 	add.w	r4, sp, #7
 800a036:	46a4      	mov	ip, r4
 800a038:	270a      	movs	r7, #10
 800a03a:	46a6      	mov	lr, r4
 800a03c:	460a      	mov	r2, r1
 800a03e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a042:	fb07 1516 	mls	r5, r7, r6, r1
 800a046:	3530      	adds	r5, #48	; 0x30
 800a048:	2a63      	cmp	r2, #99	; 0x63
 800a04a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a04e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a052:	4631      	mov	r1, r6
 800a054:	dcf1      	bgt.n	800a03a <__exponent+0x22>
 800a056:	3130      	adds	r1, #48	; 0x30
 800a058:	f1ae 0502 	sub.w	r5, lr, #2
 800a05c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a060:	1c44      	adds	r4, r0, #1
 800a062:	4629      	mov	r1, r5
 800a064:	4561      	cmp	r1, ip
 800a066:	d30a      	bcc.n	800a07e <__exponent+0x66>
 800a068:	f10d 0209 	add.w	r2, sp, #9
 800a06c:	eba2 020e 	sub.w	r2, r2, lr
 800a070:	4565      	cmp	r5, ip
 800a072:	bf88      	it	hi
 800a074:	2200      	movhi	r2, #0
 800a076:	4413      	add	r3, r2
 800a078:	1a18      	subs	r0, r3, r0
 800a07a:	b003      	add	sp, #12
 800a07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a07e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a082:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a086:	e7ed      	b.n	800a064 <__exponent+0x4c>
 800a088:	2330      	movs	r3, #48	; 0x30
 800a08a:	3130      	adds	r1, #48	; 0x30
 800a08c:	7083      	strb	r3, [r0, #2]
 800a08e:	70c1      	strb	r1, [r0, #3]
 800a090:	1d03      	adds	r3, r0, #4
 800a092:	e7f1      	b.n	800a078 <__exponent+0x60>

0800a094 <_printf_float>:
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	ed2d 8b02 	vpush	{d8}
 800a09c:	b08d      	sub	sp, #52	; 0x34
 800a09e:	460c      	mov	r4, r1
 800a0a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a0a4:	4616      	mov	r6, r2
 800a0a6:	461f      	mov	r7, r3
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	f002 ff21 	bl	800cef0 <_localeconv_r>
 800a0ae:	f8d0 a000 	ldr.w	sl, [r0]
 800a0b2:	4650      	mov	r0, sl
 800a0b4:	f7f6 f8be 	bl	8000234 <strlen>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	9305      	str	r3, [sp, #20]
 800a0c0:	f8d8 3000 	ldr.w	r3, [r8]
 800a0c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a0c8:	3307      	adds	r3, #7
 800a0ca:	f023 0307 	bic.w	r3, r3, #7
 800a0ce:	f103 0208 	add.w	r2, r3, #8
 800a0d2:	f8c8 2000 	str.w	r2, [r8]
 800a0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a0de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a0e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0e6:	9307      	str	r3, [sp, #28]
 800a0e8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0ec:	ee08 0a10 	vmov	s16, r0
 800a0f0:	4b9f      	ldr	r3, [pc, #636]	; (800a370 <_printf_float+0x2dc>)
 800a0f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0fa:	f7f6 fd4f 	bl	8000b9c <__aeabi_dcmpun>
 800a0fe:	bb88      	cbnz	r0, 800a164 <_printf_float+0xd0>
 800a100:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a104:	4b9a      	ldr	r3, [pc, #616]	; (800a370 <_printf_float+0x2dc>)
 800a106:	f04f 32ff 	mov.w	r2, #4294967295
 800a10a:	f7f6 fd29 	bl	8000b60 <__aeabi_dcmple>
 800a10e:	bb48      	cbnz	r0, 800a164 <_printf_float+0xd0>
 800a110:	2200      	movs	r2, #0
 800a112:	2300      	movs	r3, #0
 800a114:	4640      	mov	r0, r8
 800a116:	4649      	mov	r1, r9
 800a118:	f7f6 fd18 	bl	8000b4c <__aeabi_dcmplt>
 800a11c:	b110      	cbz	r0, 800a124 <_printf_float+0x90>
 800a11e:	232d      	movs	r3, #45	; 0x2d
 800a120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a124:	4b93      	ldr	r3, [pc, #588]	; (800a374 <_printf_float+0x2e0>)
 800a126:	4894      	ldr	r0, [pc, #592]	; (800a378 <_printf_float+0x2e4>)
 800a128:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a12c:	bf94      	ite	ls
 800a12e:	4698      	movls	r8, r3
 800a130:	4680      	movhi	r8, r0
 800a132:	2303      	movs	r3, #3
 800a134:	6123      	str	r3, [r4, #16]
 800a136:	9b05      	ldr	r3, [sp, #20]
 800a138:	f023 0204 	bic.w	r2, r3, #4
 800a13c:	6022      	str	r2, [r4, #0]
 800a13e:	f04f 0900 	mov.w	r9, #0
 800a142:	9700      	str	r7, [sp, #0]
 800a144:	4633      	mov	r3, r6
 800a146:	aa0b      	add	r2, sp, #44	; 0x2c
 800a148:	4621      	mov	r1, r4
 800a14a:	4628      	mov	r0, r5
 800a14c:	f000 f9d8 	bl	800a500 <_printf_common>
 800a150:	3001      	adds	r0, #1
 800a152:	f040 8090 	bne.w	800a276 <_printf_float+0x1e2>
 800a156:	f04f 30ff 	mov.w	r0, #4294967295
 800a15a:	b00d      	add	sp, #52	; 0x34
 800a15c:	ecbd 8b02 	vpop	{d8}
 800a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a164:	4642      	mov	r2, r8
 800a166:	464b      	mov	r3, r9
 800a168:	4640      	mov	r0, r8
 800a16a:	4649      	mov	r1, r9
 800a16c:	f7f6 fd16 	bl	8000b9c <__aeabi_dcmpun>
 800a170:	b140      	cbz	r0, 800a184 <_printf_float+0xf0>
 800a172:	464b      	mov	r3, r9
 800a174:	2b00      	cmp	r3, #0
 800a176:	bfbc      	itt	lt
 800a178:	232d      	movlt	r3, #45	; 0x2d
 800a17a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a17e:	487f      	ldr	r0, [pc, #508]	; (800a37c <_printf_float+0x2e8>)
 800a180:	4b7f      	ldr	r3, [pc, #508]	; (800a380 <_printf_float+0x2ec>)
 800a182:	e7d1      	b.n	800a128 <_printf_float+0x94>
 800a184:	6863      	ldr	r3, [r4, #4]
 800a186:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a18a:	9206      	str	r2, [sp, #24]
 800a18c:	1c5a      	adds	r2, r3, #1
 800a18e:	d13f      	bne.n	800a210 <_printf_float+0x17c>
 800a190:	2306      	movs	r3, #6
 800a192:	6063      	str	r3, [r4, #4]
 800a194:	9b05      	ldr	r3, [sp, #20]
 800a196:	6861      	ldr	r1, [r4, #4]
 800a198:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a19c:	2300      	movs	r3, #0
 800a19e:	9303      	str	r3, [sp, #12]
 800a1a0:	ab0a      	add	r3, sp, #40	; 0x28
 800a1a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a1a6:	ab09      	add	r3, sp, #36	; 0x24
 800a1a8:	ec49 8b10 	vmov	d0, r8, r9
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	6022      	str	r2, [r4, #0]
 800a1b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f7ff fecd 	bl	8009f54 <__cvt>
 800a1ba:	9b06      	ldr	r3, [sp, #24]
 800a1bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1be:	2b47      	cmp	r3, #71	; 0x47
 800a1c0:	4680      	mov	r8, r0
 800a1c2:	d108      	bne.n	800a1d6 <_printf_float+0x142>
 800a1c4:	1cc8      	adds	r0, r1, #3
 800a1c6:	db02      	blt.n	800a1ce <_printf_float+0x13a>
 800a1c8:	6863      	ldr	r3, [r4, #4]
 800a1ca:	4299      	cmp	r1, r3
 800a1cc:	dd41      	ble.n	800a252 <_printf_float+0x1be>
 800a1ce:	f1ab 0b02 	sub.w	fp, fp, #2
 800a1d2:	fa5f fb8b 	uxtb.w	fp, fp
 800a1d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1da:	d820      	bhi.n	800a21e <_printf_float+0x18a>
 800a1dc:	3901      	subs	r1, #1
 800a1de:	465a      	mov	r2, fp
 800a1e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a1e4:	9109      	str	r1, [sp, #36]	; 0x24
 800a1e6:	f7ff ff17 	bl	800a018 <__exponent>
 800a1ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1ec:	1813      	adds	r3, r2, r0
 800a1ee:	2a01      	cmp	r2, #1
 800a1f0:	4681      	mov	r9, r0
 800a1f2:	6123      	str	r3, [r4, #16]
 800a1f4:	dc02      	bgt.n	800a1fc <_printf_float+0x168>
 800a1f6:	6822      	ldr	r2, [r4, #0]
 800a1f8:	07d2      	lsls	r2, r2, #31
 800a1fa:	d501      	bpl.n	800a200 <_printf_float+0x16c>
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	6123      	str	r3, [r4, #16]
 800a200:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a204:	2b00      	cmp	r3, #0
 800a206:	d09c      	beq.n	800a142 <_printf_float+0xae>
 800a208:	232d      	movs	r3, #45	; 0x2d
 800a20a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a20e:	e798      	b.n	800a142 <_printf_float+0xae>
 800a210:	9a06      	ldr	r2, [sp, #24]
 800a212:	2a47      	cmp	r2, #71	; 0x47
 800a214:	d1be      	bne.n	800a194 <_printf_float+0x100>
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1bc      	bne.n	800a194 <_printf_float+0x100>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e7b9      	b.n	800a192 <_printf_float+0xfe>
 800a21e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a222:	d118      	bne.n	800a256 <_printf_float+0x1c2>
 800a224:	2900      	cmp	r1, #0
 800a226:	6863      	ldr	r3, [r4, #4]
 800a228:	dd0b      	ble.n	800a242 <_printf_float+0x1ae>
 800a22a:	6121      	str	r1, [r4, #16]
 800a22c:	b913      	cbnz	r3, 800a234 <_printf_float+0x1a0>
 800a22e:	6822      	ldr	r2, [r4, #0]
 800a230:	07d0      	lsls	r0, r2, #31
 800a232:	d502      	bpl.n	800a23a <_printf_float+0x1a6>
 800a234:	3301      	adds	r3, #1
 800a236:	440b      	add	r3, r1
 800a238:	6123      	str	r3, [r4, #16]
 800a23a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a23c:	f04f 0900 	mov.w	r9, #0
 800a240:	e7de      	b.n	800a200 <_printf_float+0x16c>
 800a242:	b913      	cbnz	r3, 800a24a <_printf_float+0x1b6>
 800a244:	6822      	ldr	r2, [r4, #0]
 800a246:	07d2      	lsls	r2, r2, #31
 800a248:	d501      	bpl.n	800a24e <_printf_float+0x1ba>
 800a24a:	3302      	adds	r3, #2
 800a24c:	e7f4      	b.n	800a238 <_printf_float+0x1a4>
 800a24e:	2301      	movs	r3, #1
 800a250:	e7f2      	b.n	800a238 <_printf_float+0x1a4>
 800a252:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a258:	4299      	cmp	r1, r3
 800a25a:	db05      	blt.n	800a268 <_printf_float+0x1d4>
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	6121      	str	r1, [r4, #16]
 800a260:	07d8      	lsls	r0, r3, #31
 800a262:	d5ea      	bpl.n	800a23a <_printf_float+0x1a6>
 800a264:	1c4b      	adds	r3, r1, #1
 800a266:	e7e7      	b.n	800a238 <_printf_float+0x1a4>
 800a268:	2900      	cmp	r1, #0
 800a26a:	bfd4      	ite	le
 800a26c:	f1c1 0202 	rsble	r2, r1, #2
 800a270:	2201      	movgt	r2, #1
 800a272:	4413      	add	r3, r2
 800a274:	e7e0      	b.n	800a238 <_printf_float+0x1a4>
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	055a      	lsls	r2, r3, #21
 800a27a:	d407      	bmi.n	800a28c <_printf_float+0x1f8>
 800a27c:	6923      	ldr	r3, [r4, #16]
 800a27e:	4642      	mov	r2, r8
 800a280:	4631      	mov	r1, r6
 800a282:	4628      	mov	r0, r5
 800a284:	47b8      	blx	r7
 800a286:	3001      	adds	r0, #1
 800a288:	d12c      	bne.n	800a2e4 <_printf_float+0x250>
 800a28a:	e764      	b.n	800a156 <_printf_float+0xc2>
 800a28c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a290:	f240 80e0 	bls.w	800a454 <_printf_float+0x3c0>
 800a294:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a298:	2200      	movs	r2, #0
 800a29a:	2300      	movs	r3, #0
 800a29c:	f7f6 fc4c 	bl	8000b38 <__aeabi_dcmpeq>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d034      	beq.n	800a30e <_printf_float+0x27a>
 800a2a4:	4a37      	ldr	r2, [pc, #220]	; (800a384 <_printf_float+0x2f0>)
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	47b8      	blx	r7
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	f43f af51 	beq.w	800a156 <_printf_float+0xc2>
 800a2b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	db02      	blt.n	800a2c2 <_printf_float+0x22e>
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	07d8      	lsls	r0, r3, #31
 800a2c0:	d510      	bpl.n	800a2e4 <_printf_float+0x250>
 800a2c2:	ee18 3a10 	vmov	r3, s16
 800a2c6:	4652      	mov	r2, sl
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	47b8      	blx	r7
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	f43f af41 	beq.w	800a156 <_printf_float+0xc2>
 800a2d4:	f04f 0800 	mov.w	r8, #0
 800a2d8:	f104 091a 	add.w	r9, r4, #26
 800a2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	4543      	cmp	r3, r8
 800a2e2:	dc09      	bgt.n	800a2f8 <_printf_float+0x264>
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	079b      	lsls	r3, r3, #30
 800a2e8:	f100 8105 	bmi.w	800a4f6 <_printf_float+0x462>
 800a2ec:	68e0      	ldr	r0, [r4, #12]
 800a2ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2f0:	4298      	cmp	r0, r3
 800a2f2:	bfb8      	it	lt
 800a2f4:	4618      	movlt	r0, r3
 800a2f6:	e730      	b.n	800a15a <_printf_float+0xc6>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	464a      	mov	r2, r9
 800a2fc:	4631      	mov	r1, r6
 800a2fe:	4628      	mov	r0, r5
 800a300:	47b8      	blx	r7
 800a302:	3001      	adds	r0, #1
 800a304:	f43f af27 	beq.w	800a156 <_printf_float+0xc2>
 800a308:	f108 0801 	add.w	r8, r8, #1
 800a30c:	e7e6      	b.n	800a2dc <_printf_float+0x248>
 800a30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a310:	2b00      	cmp	r3, #0
 800a312:	dc39      	bgt.n	800a388 <_printf_float+0x2f4>
 800a314:	4a1b      	ldr	r2, [pc, #108]	; (800a384 <_printf_float+0x2f0>)
 800a316:	2301      	movs	r3, #1
 800a318:	4631      	mov	r1, r6
 800a31a:	4628      	mov	r0, r5
 800a31c:	47b8      	blx	r7
 800a31e:	3001      	adds	r0, #1
 800a320:	f43f af19 	beq.w	800a156 <_printf_float+0xc2>
 800a324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a328:	4313      	orrs	r3, r2
 800a32a:	d102      	bne.n	800a332 <_printf_float+0x29e>
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	07d9      	lsls	r1, r3, #31
 800a330:	d5d8      	bpl.n	800a2e4 <_printf_float+0x250>
 800a332:	ee18 3a10 	vmov	r3, s16
 800a336:	4652      	mov	r2, sl
 800a338:	4631      	mov	r1, r6
 800a33a:	4628      	mov	r0, r5
 800a33c:	47b8      	blx	r7
 800a33e:	3001      	adds	r0, #1
 800a340:	f43f af09 	beq.w	800a156 <_printf_float+0xc2>
 800a344:	f04f 0900 	mov.w	r9, #0
 800a348:	f104 0a1a 	add.w	sl, r4, #26
 800a34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a34e:	425b      	negs	r3, r3
 800a350:	454b      	cmp	r3, r9
 800a352:	dc01      	bgt.n	800a358 <_printf_float+0x2c4>
 800a354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a356:	e792      	b.n	800a27e <_printf_float+0x1ea>
 800a358:	2301      	movs	r3, #1
 800a35a:	4652      	mov	r2, sl
 800a35c:	4631      	mov	r1, r6
 800a35e:	4628      	mov	r0, r5
 800a360:	47b8      	blx	r7
 800a362:	3001      	adds	r0, #1
 800a364:	f43f aef7 	beq.w	800a156 <_printf_float+0xc2>
 800a368:	f109 0901 	add.w	r9, r9, #1
 800a36c:	e7ee      	b.n	800a34c <_printf_float+0x2b8>
 800a36e:	bf00      	nop
 800a370:	7fefffff 	.word	0x7fefffff
 800a374:	0800ea14 	.word	0x0800ea14
 800a378:	0800ea18 	.word	0x0800ea18
 800a37c:	0800ea20 	.word	0x0800ea20
 800a380:	0800ea1c 	.word	0x0800ea1c
 800a384:	0800ea24 	.word	0x0800ea24
 800a388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a38a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a38c:	429a      	cmp	r2, r3
 800a38e:	bfa8      	it	ge
 800a390:	461a      	movge	r2, r3
 800a392:	2a00      	cmp	r2, #0
 800a394:	4691      	mov	r9, r2
 800a396:	dc37      	bgt.n	800a408 <_printf_float+0x374>
 800a398:	f04f 0b00 	mov.w	fp, #0
 800a39c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3a0:	f104 021a 	add.w	r2, r4, #26
 800a3a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3a6:	9305      	str	r3, [sp, #20]
 800a3a8:	eba3 0309 	sub.w	r3, r3, r9
 800a3ac:	455b      	cmp	r3, fp
 800a3ae:	dc33      	bgt.n	800a418 <_printf_float+0x384>
 800a3b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	db3b      	blt.n	800a430 <_printf_float+0x39c>
 800a3b8:	6823      	ldr	r3, [r4, #0]
 800a3ba:	07da      	lsls	r2, r3, #31
 800a3bc:	d438      	bmi.n	800a430 <_printf_float+0x39c>
 800a3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c0:	9a05      	ldr	r2, [sp, #20]
 800a3c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3c4:	1a9a      	subs	r2, r3, r2
 800a3c6:	eba3 0901 	sub.w	r9, r3, r1
 800a3ca:	4591      	cmp	r9, r2
 800a3cc:	bfa8      	it	ge
 800a3ce:	4691      	movge	r9, r2
 800a3d0:	f1b9 0f00 	cmp.w	r9, #0
 800a3d4:	dc35      	bgt.n	800a442 <_printf_float+0x3ae>
 800a3d6:	f04f 0800 	mov.w	r8, #0
 800a3da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3de:	f104 0a1a 	add.w	sl, r4, #26
 800a3e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3e6:	1a9b      	subs	r3, r3, r2
 800a3e8:	eba3 0309 	sub.w	r3, r3, r9
 800a3ec:	4543      	cmp	r3, r8
 800a3ee:	f77f af79 	ble.w	800a2e4 <_printf_float+0x250>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	4652      	mov	r2, sl
 800a3f6:	4631      	mov	r1, r6
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	47b8      	blx	r7
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	f43f aeaa 	beq.w	800a156 <_printf_float+0xc2>
 800a402:	f108 0801 	add.w	r8, r8, #1
 800a406:	e7ec      	b.n	800a3e2 <_printf_float+0x34e>
 800a408:	4613      	mov	r3, r2
 800a40a:	4631      	mov	r1, r6
 800a40c:	4642      	mov	r2, r8
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	d1c0      	bne.n	800a398 <_printf_float+0x304>
 800a416:	e69e      	b.n	800a156 <_printf_float+0xc2>
 800a418:	2301      	movs	r3, #1
 800a41a:	4631      	mov	r1, r6
 800a41c:	4628      	mov	r0, r5
 800a41e:	9205      	str	r2, [sp, #20]
 800a420:	47b8      	blx	r7
 800a422:	3001      	adds	r0, #1
 800a424:	f43f ae97 	beq.w	800a156 <_printf_float+0xc2>
 800a428:	9a05      	ldr	r2, [sp, #20]
 800a42a:	f10b 0b01 	add.w	fp, fp, #1
 800a42e:	e7b9      	b.n	800a3a4 <_printf_float+0x310>
 800a430:	ee18 3a10 	vmov	r3, s16
 800a434:	4652      	mov	r2, sl
 800a436:	4631      	mov	r1, r6
 800a438:	4628      	mov	r0, r5
 800a43a:	47b8      	blx	r7
 800a43c:	3001      	adds	r0, #1
 800a43e:	d1be      	bne.n	800a3be <_printf_float+0x32a>
 800a440:	e689      	b.n	800a156 <_printf_float+0xc2>
 800a442:	9a05      	ldr	r2, [sp, #20]
 800a444:	464b      	mov	r3, r9
 800a446:	4442      	add	r2, r8
 800a448:	4631      	mov	r1, r6
 800a44a:	4628      	mov	r0, r5
 800a44c:	47b8      	blx	r7
 800a44e:	3001      	adds	r0, #1
 800a450:	d1c1      	bne.n	800a3d6 <_printf_float+0x342>
 800a452:	e680      	b.n	800a156 <_printf_float+0xc2>
 800a454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a456:	2a01      	cmp	r2, #1
 800a458:	dc01      	bgt.n	800a45e <_printf_float+0x3ca>
 800a45a:	07db      	lsls	r3, r3, #31
 800a45c:	d538      	bpl.n	800a4d0 <_printf_float+0x43c>
 800a45e:	2301      	movs	r3, #1
 800a460:	4642      	mov	r2, r8
 800a462:	4631      	mov	r1, r6
 800a464:	4628      	mov	r0, r5
 800a466:	47b8      	blx	r7
 800a468:	3001      	adds	r0, #1
 800a46a:	f43f ae74 	beq.w	800a156 <_printf_float+0xc2>
 800a46e:	ee18 3a10 	vmov	r3, s16
 800a472:	4652      	mov	r2, sl
 800a474:	4631      	mov	r1, r6
 800a476:	4628      	mov	r0, r5
 800a478:	47b8      	blx	r7
 800a47a:	3001      	adds	r0, #1
 800a47c:	f43f ae6b 	beq.w	800a156 <_printf_float+0xc2>
 800a480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a484:	2200      	movs	r2, #0
 800a486:	2300      	movs	r3, #0
 800a488:	f7f6 fb56 	bl	8000b38 <__aeabi_dcmpeq>
 800a48c:	b9d8      	cbnz	r0, 800a4c6 <_printf_float+0x432>
 800a48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a490:	f108 0201 	add.w	r2, r8, #1
 800a494:	3b01      	subs	r3, #1
 800a496:	4631      	mov	r1, r6
 800a498:	4628      	mov	r0, r5
 800a49a:	47b8      	blx	r7
 800a49c:	3001      	adds	r0, #1
 800a49e:	d10e      	bne.n	800a4be <_printf_float+0x42a>
 800a4a0:	e659      	b.n	800a156 <_printf_float+0xc2>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	4652      	mov	r2, sl
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	47b8      	blx	r7
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	f43f ae52 	beq.w	800a156 <_printf_float+0xc2>
 800a4b2:	f108 0801 	add.w	r8, r8, #1
 800a4b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	4543      	cmp	r3, r8
 800a4bc:	dcf1      	bgt.n	800a4a2 <_printf_float+0x40e>
 800a4be:	464b      	mov	r3, r9
 800a4c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a4c4:	e6dc      	b.n	800a280 <_printf_float+0x1ec>
 800a4c6:	f04f 0800 	mov.w	r8, #0
 800a4ca:	f104 0a1a 	add.w	sl, r4, #26
 800a4ce:	e7f2      	b.n	800a4b6 <_printf_float+0x422>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	4642      	mov	r2, r8
 800a4d4:	e7df      	b.n	800a496 <_printf_float+0x402>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	464a      	mov	r2, r9
 800a4da:	4631      	mov	r1, r6
 800a4dc:	4628      	mov	r0, r5
 800a4de:	47b8      	blx	r7
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	f43f ae38 	beq.w	800a156 <_printf_float+0xc2>
 800a4e6:	f108 0801 	add.w	r8, r8, #1
 800a4ea:	68e3      	ldr	r3, [r4, #12]
 800a4ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4ee:	1a5b      	subs	r3, r3, r1
 800a4f0:	4543      	cmp	r3, r8
 800a4f2:	dcf0      	bgt.n	800a4d6 <_printf_float+0x442>
 800a4f4:	e6fa      	b.n	800a2ec <_printf_float+0x258>
 800a4f6:	f04f 0800 	mov.w	r8, #0
 800a4fa:	f104 0919 	add.w	r9, r4, #25
 800a4fe:	e7f4      	b.n	800a4ea <_printf_float+0x456>

0800a500 <_printf_common>:
 800a500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a504:	4616      	mov	r6, r2
 800a506:	4699      	mov	r9, r3
 800a508:	688a      	ldr	r2, [r1, #8]
 800a50a:	690b      	ldr	r3, [r1, #16]
 800a50c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a510:	4293      	cmp	r3, r2
 800a512:	bfb8      	it	lt
 800a514:	4613      	movlt	r3, r2
 800a516:	6033      	str	r3, [r6, #0]
 800a518:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a51c:	4607      	mov	r7, r0
 800a51e:	460c      	mov	r4, r1
 800a520:	b10a      	cbz	r2, 800a526 <_printf_common+0x26>
 800a522:	3301      	adds	r3, #1
 800a524:	6033      	str	r3, [r6, #0]
 800a526:	6823      	ldr	r3, [r4, #0]
 800a528:	0699      	lsls	r1, r3, #26
 800a52a:	bf42      	ittt	mi
 800a52c:	6833      	ldrmi	r3, [r6, #0]
 800a52e:	3302      	addmi	r3, #2
 800a530:	6033      	strmi	r3, [r6, #0]
 800a532:	6825      	ldr	r5, [r4, #0]
 800a534:	f015 0506 	ands.w	r5, r5, #6
 800a538:	d106      	bne.n	800a548 <_printf_common+0x48>
 800a53a:	f104 0a19 	add.w	sl, r4, #25
 800a53e:	68e3      	ldr	r3, [r4, #12]
 800a540:	6832      	ldr	r2, [r6, #0]
 800a542:	1a9b      	subs	r3, r3, r2
 800a544:	42ab      	cmp	r3, r5
 800a546:	dc26      	bgt.n	800a596 <_printf_common+0x96>
 800a548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a54c:	1e13      	subs	r3, r2, #0
 800a54e:	6822      	ldr	r2, [r4, #0]
 800a550:	bf18      	it	ne
 800a552:	2301      	movne	r3, #1
 800a554:	0692      	lsls	r2, r2, #26
 800a556:	d42b      	bmi.n	800a5b0 <_printf_common+0xb0>
 800a558:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a55c:	4649      	mov	r1, r9
 800a55e:	4638      	mov	r0, r7
 800a560:	47c0      	blx	r8
 800a562:	3001      	adds	r0, #1
 800a564:	d01e      	beq.n	800a5a4 <_printf_common+0xa4>
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	68e5      	ldr	r5, [r4, #12]
 800a56a:	6832      	ldr	r2, [r6, #0]
 800a56c:	f003 0306 	and.w	r3, r3, #6
 800a570:	2b04      	cmp	r3, #4
 800a572:	bf08      	it	eq
 800a574:	1aad      	subeq	r5, r5, r2
 800a576:	68a3      	ldr	r3, [r4, #8]
 800a578:	6922      	ldr	r2, [r4, #16]
 800a57a:	bf0c      	ite	eq
 800a57c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a580:	2500      	movne	r5, #0
 800a582:	4293      	cmp	r3, r2
 800a584:	bfc4      	itt	gt
 800a586:	1a9b      	subgt	r3, r3, r2
 800a588:	18ed      	addgt	r5, r5, r3
 800a58a:	2600      	movs	r6, #0
 800a58c:	341a      	adds	r4, #26
 800a58e:	42b5      	cmp	r5, r6
 800a590:	d11a      	bne.n	800a5c8 <_printf_common+0xc8>
 800a592:	2000      	movs	r0, #0
 800a594:	e008      	b.n	800a5a8 <_printf_common+0xa8>
 800a596:	2301      	movs	r3, #1
 800a598:	4652      	mov	r2, sl
 800a59a:	4649      	mov	r1, r9
 800a59c:	4638      	mov	r0, r7
 800a59e:	47c0      	blx	r8
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d103      	bne.n	800a5ac <_printf_common+0xac>
 800a5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ac:	3501      	adds	r5, #1
 800a5ae:	e7c6      	b.n	800a53e <_printf_common+0x3e>
 800a5b0:	18e1      	adds	r1, r4, r3
 800a5b2:	1c5a      	adds	r2, r3, #1
 800a5b4:	2030      	movs	r0, #48	; 0x30
 800a5b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5ba:	4422      	add	r2, r4
 800a5bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5c4:	3302      	adds	r3, #2
 800a5c6:	e7c7      	b.n	800a558 <_printf_common+0x58>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	4649      	mov	r1, r9
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	47c0      	blx	r8
 800a5d2:	3001      	adds	r0, #1
 800a5d4:	d0e6      	beq.n	800a5a4 <_printf_common+0xa4>
 800a5d6:	3601      	adds	r6, #1
 800a5d8:	e7d9      	b.n	800a58e <_printf_common+0x8e>
	...

0800a5dc <_printf_i>:
 800a5dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e0:	7e0f      	ldrb	r7, [r1, #24]
 800a5e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5e4:	2f78      	cmp	r7, #120	; 0x78
 800a5e6:	4691      	mov	r9, r2
 800a5e8:	4680      	mov	r8, r0
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	469a      	mov	sl, r3
 800a5ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5f2:	d807      	bhi.n	800a604 <_printf_i+0x28>
 800a5f4:	2f62      	cmp	r7, #98	; 0x62
 800a5f6:	d80a      	bhi.n	800a60e <_printf_i+0x32>
 800a5f8:	2f00      	cmp	r7, #0
 800a5fa:	f000 80d8 	beq.w	800a7ae <_printf_i+0x1d2>
 800a5fe:	2f58      	cmp	r7, #88	; 0x58
 800a600:	f000 80a3 	beq.w	800a74a <_printf_i+0x16e>
 800a604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a608:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a60c:	e03a      	b.n	800a684 <_printf_i+0xa8>
 800a60e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a612:	2b15      	cmp	r3, #21
 800a614:	d8f6      	bhi.n	800a604 <_printf_i+0x28>
 800a616:	a101      	add	r1, pc, #4	; (adr r1, 800a61c <_printf_i+0x40>)
 800a618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a61c:	0800a675 	.word	0x0800a675
 800a620:	0800a689 	.word	0x0800a689
 800a624:	0800a605 	.word	0x0800a605
 800a628:	0800a605 	.word	0x0800a605
 800a62c:	0800a605 	.word	0x0800a605
 800a630:	0800a605 	.word	0x0800a605
 800a634:	0800a689 	.word	0x0800a689
 800a638:	0800a605 	.word	0x0800a605
 800a63c:	0800a605 	.word	0x0800a605
 800a640:	0800a605 	.word	0x0800a605
 800a644:	0800a605 	.word	0x0800a605
 800a648:	0800a795 	.word	0x0800a795
 800a64c:	0800a6b9 	.word	0x0800a6b9
 800a650:	0800a777 	.word	0x0800a777
 800a654:	0800a605 	.word	0x0800a605
 800a658:	0800a605 	.word	0x0800a605
 800a65c:	0800a7b7 	.word	0x0800a7b7
 800a660:	0800a605 	.word	0x0800a605
 800a664:	0800a6b9 	.word	0x0800a6b9
 800a668:	0800a605 	.word	0x0800a605
 800a66c:	0800a605 	.word	0x0800a605
 800a670:	0800a77f 	.word	0x0800a77f
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	1d1a      	adds	r2, r3, #4
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	602a      	str	r2, [r5, #0]
 800a67c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a684:	2301      	movs	r3, #1
 800a686:	e0a3      	b.n	800a7d0 <_printf_i+0x1f4>
 800a688:	6820      	ldr	r0, [r4, #0]
 800a68a:	6829      	ldr	r1, [r5, #0]
 800a68c:	0606      	lsls	r6, r0, #24
 800a68e:	f101 0304 	add.w	r3, r1, #4
 800a692:	d50a      	bpl.n	800a6aa <_printf_i+0xce>
 800a694:	680e      	ldr	r6, [r1, #0]
 800a696:	602b      	str	r3, [r5, #0]
 800a698:	2e00      	cmp	r6, #0
 800a69a:	da03      	bge.n	800a6a4 <_printf_i+0xc8>
 800a69c:	232d      	movs	r3, #45	; 0x2d
 800a69e:	4276      	negs	r6, r6
 800a6a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6a4:	485e      	ldr	r0, [pc, #376]	; (800a820 <_printf_i+0x244>)
 800a6a6:	230a      	movs	r3, #10
 800a6a8:	e019      	b.n	800a6de <_printf_i+0x102>
 800a6aa:	680e      	ldr	r6, [r1, #0]
 800a6ac:	602b      	str	r3, [r5, #0]
 800a6ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6b2:	bf18      	it	ne
 800a6b4:	b236      	sxthne	r6, r6
 800a6b6:	e7ef      	b.n	800a698 <_printf_i+0xbc>
 800a6b8:	682b      	ldr	r3, [r5, #0]
 800a6ba:	6820      	ldr	r0, [r4, #0]
 800a6bc:	1d19      	adds	r1, r3, #4
 800a6be:	6029      	str	r1, [r5, #0]
 800a6c0:	0601      	lsls	r1, r0, #24
 800a6c2:	d501      	bpl.n	800a6c8 <_printf_i+0xec>
 800a6c4:	681e      	ldr	r6, [r3, #0]
 800a6c6:	e002      	b.n	800a6ce <_printf_i+0xf2>
 800a6c8:	0646      	lsls	r6, r0, #25
 800a6ca:	d5fb      	bpl.n	800a6c4 <_printf_i+0xe8>
 800a6cc:	881e      	ldrh	r6, [r3, #0]
 800a6ce:	4854      	ldr	r0, [pc, #336]	; (800a820 <_printf_i+0x244>)
 800a6d0:	2f6f      	cmp	r7, #111	; 0x6f
 800a6d2:	bf0c      	ite	eq
 800a6d4:	2308      	moveq	r3, #8
 800a6d6:	230a      	movne	r3, #10
 800a6d8:	2100      	movs	r1, #0
 800a6da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6de:	6865      	ldr	r5, [r4, #4]
 800a6e0:	60a5      	str	r5, [r4, #8]
 800a6e2:	2d00      	cmp	r5, #0
 800a6e4:	bfa2      	ittt	ge
 800a6e6:	6821      	ldrge	r1, [r4, #0]
 800a6e8:	f021 0104 	bicge.w	r1, r1, #4
 800a6ec:	6021      	strge	r1, [r4, #0]
 800a6ee:	b90e      	cbnz	r6, 800a6f4 <_printf_i+0x118>
 800a6f0:	2d00      	cmp	r5, #0
 800a6f2:	d04d      	beq.n	800a790 <_printf_i+0x1b4>
 800a6f4:	4615      	mov	r5, r2
 800a6f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6fa:	fb03 6711 	mls	r7, r3, r1, r6
 800a6fe:	5dc7      	ldrb	r7, [r0, r7]
 800a700:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a704:	4637      	mov	r7, r6
 800a706:	42bb      	cmp	r3, r7
 800a708:	460e      	mov	r6, r1
 800a70a:	d9f4      	bls.n	800a6f6 <_printf_i+0x11a>
 800a70c:	2b08      	cmp	r3, #8
 800a70e:	d10b      	bne.n	800a728 <_printf_i+0x14c>
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	07de      	lsls	r6, r3, #31
 800a714:	d508      	bpl.n	800a728 <_printf_i+0x14c>
 800a716:	6923      	ldr	r3, [r4, #16]
 800a718:	6861      	ldr	r1, [r4, #4]
 800a71a:	4299      	cmp	r1, r3
 800a71c:	bfde      	ittt	le
 800a71e:	2330      	movle	r3, #48	; 0x30
 800a720:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a724:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a728:	1b52      	subs	r2, r2, r5
 800a72a:	6122      	str	r2, [r4, #16]
 800a72c:	f8cd a000 	str.w	sl, [sp]
 800a730:	464b      	mov	r3, r9
 800a732:	aa03      	add	r2, sp, #12
 800a734:	4621      	mov	r1, r4
 800a736:	4640      	mov	r0, r8
 800a738:	f7ff fee2 	bl	800a500 <_printf_common>
 800a73c:	3001      	adds	r0, #1
 800a73e:	d14c      	bne.n	800a7da <_printf_i+0x1fe>
 800a740:	f04f 30ff 	mov.w	r0, #4294967295
 800a744:	b004      	add	sp, #16
 800a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74a:	4835      	ldr	r0, [pc, #212]	; (800a820 <_printf_i+0x244>)
 800a74c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a750:	6829      	ldr	r1, [r5, #0]
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	f851 6b04 	ldr.w	r6, [r1], #4
 800a758:	6029      	str	r1, [r5, #0]
 800a75a:	061d      	lsls	r5, r3, #24
 800a75c:	d514      	bpl.n	800a788 <_printf_i+0x1ac>
 800a75e:	07df      	lsls	r7, r3, #31
 800a760:	bf44      	itt	mi
 800a762:	f043 0320 	orrmi.w	r3, r3, #32
 800a766:	6023      	strmi	r3, [r4, #0]
 800a768:	b91e      	cbnz	r6, 800a772 <_printf_i+0x196>
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	f023 0320 	bic.w	r3, r3, #32
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	2310      	movs	r3, #16
 800a774:	e7b0      	b.n	800a6d8 <_printf_i+0xfc>
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	f043 0320 	orr.w	r3, r3, #32
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	2378      	movs	r3, #120	; 0x78
 800a780:	4828      	ldr	r0, [pc, #160]	; (800a824 <_printf_i+0x248>)
 800a782:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a786:	e7e3      	b.n	800a750 <_printf_i+0x174>
 800a788:	0659      	lsls	r1, r3, #25
 800a78a:	bf48      	it	mi
 800a78c:	b2b6      	uxthmi	r6, r6
 800a78e:	e7e6      	b.n	800a75e <_printf_i+0x182>
 800a790:	4615      	mov	r5, r2
 800a792:	e7bb      	b.n	800a70c <_printf_i+0x130>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	6826      	ldr	r6, [r4, #0]
 800a798:	6961      	ldr	r1, [r4, #20]
 800a79a:	1d18      	adds	r0, r3, #4
 800a79c:	6028      	str	r0, [r5, #0]
 800a79e:	0635      	lsls	r5, r6, #24
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	d501      	bpl.n	800a7a8 <_printf_i+0x1cc>
 800a7a4:	6019      	str	r1, [r3, #0]
 800a7a6:	e002      	b.n	800a7ae <_printf_i+0x1d2>
 800a7a8:	0670      	lsls	r0, r6, #25
 800a7aa:	d5fb      	bpl.n	800a7a4 <_printf_i+0x1c8>
 800a7ac:	8019      	strh	r1, [r3, #0]
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	6123      	str	r3, [r4, #16]
 800a7b2:	4615      	mov	r5, r2
 800a7b4:	e7ba      	b.n	800a72c <_printf_i+0x150>
 800a7b6:	682b      	ldr	r3, [r5, #0]
 800a7b8:	1d1a      	adds	r2, r3, #4
 800a7ba:	602a      	str	r2, [r5, #0]
 800a7bc:	681d      	ldr	r5, [r3, #0]
 800a7be:	6862      	ldr	r2, [r4, #4]
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f7f5 fd44 	bl	8000250 <memchr>
 800a7c8:	b108      	cbz	r0, 800a7ce <_printf_i+0x1f2>
 800a7ca:	1b40      	subs	r0, r0, r5
 800a7cc:	6060      	str	r0, [r4, #4]
 800a7ce:	6863      	ldr	r3, [r4, #4]
 800a7d0:	6123      	str	r3, [r4, #16]
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7d8:	e7a8      	b.n	800a72c <_printf_i+0x150>
 800a7da:	6923      	ldr	r3, [r4, #16]
 800a7dc:	462a      	mov	r2, r5
 800a7de:	4649      	mov	r1, r9
 800a7e0:	4640      	mov	r0, r8
 800a7e2:	47d0      	blx	sl
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	d0ab      	beq.n	800a740 <_printf_i+0x164>
 800a7e8:	6823      	ldr	r3, [r4, #0]
 800a7ea:	079b      	lsls	r3, r3, #30
 800a7ec:	d413      	bmi.n	800a816 <_printf_i+0x23a>
 800a7ee:	68e0      	ldr	r0, [r4, #12]
 800a7f0:	9b03      	ldr	r3, [sp, #12]
 800a7f2:	4298      	cmp	r0, r3
 800a7f4:	bfb8      	it	lt
 800a7f6:	4618      	movlt	r0, r3
 800a7f8:	e7a4      	b.n	800a744 <_printf_i+0x168>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	4632      	mov	r2, r6
 800a7fe:	4649      	mov	r1, r9
 800a800:	4640      	mov	r0, r8
 800a802:	47d0      	blx	sl
 800a804:	3001      	adds	r0, #1
 800a806:	d09b      	beq.n	800a740 <_printf_i+0x164>
 800a808:	3501      	adds	r5, #1
 800a80a:	68e3      	ldr	r3, [r4, #12]
 800a80c:	9903      	ldr	r1, [sp, #12]
 800a80e:	1a5b      	subs	r3, r3, r1
 800a810:	42ab      	cmp	r3, r5
 800a812:	dcf2      	bgt.n	800a7fa <_printf_i+0x21e>
 800a814:	e7eb      	b.n	800a7ee <_printf_i+0x212>
 800a816:	2500      	movs	r5, #0
 800a818:	f104 0619 	add.w	r6, r4, #25
 800a81c:	e7f5      	b.n	800a80a <_printf_i+0x22e>
 800a81e:	bf00      	nop
 800a820:	0800ea26 	.word	0x0800ea26
 800a824:	0800ea37 	.word	0x0800ea37

0800a828 <_scanf_float>:
 800a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82c:	b087      	sub	sp, #28
 800a82e:	4617      	mov	r7, r2
 800a830:	9303      	str	r3, [sp, #12]
 800a832:	688b      	ldr	r3, [r1, #8]
 800a834:	1e5a      	subs	r2, r3, #1
 800a836:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a83a:	bf83      	ittte	hi
 800a83c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a840:	195b      	addhi	r3, r3, r5
 800a842:	9302      	strhi	r3, [sp, #8]
 800a844:	2300      	movls	r3, #0
 800a846:	bf86      	itte	hi
 800a848:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a84c:	608b      	strhi	r3, [r1, #8]
 800a84e:	9302      	strls	r3, [sp, #8]
 800a850:	680b      	ldr	r3, [r1, #0]
 800a852:	468b      	mov	fp, r1
 800a854:	2500      	movs	r5, #0
 800a856:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a85a:	f84b 3b1c 	str.w	r3, [fp], #28
 800a85e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a862:	4680      	mov	r8, r0
 800a864:	460c      	mov	r4, r1
 800a866:	465e      	mov	r6, fp
 800a868:	46aa      	mov	sl, r5
 800a86a:	46a9      	mov	r9, r5
 800a86c:	9501      	str	r5, [sp, #4]
 800a86e:	68a2      	ldr	r2, [r4, #8]
 800a870:	b152      	cbz	r2, 800a888 <_scanf_float+0x60>
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	2b4e      	cmp	r3, #78	; 0x4e
 800a878:	d864      	bhi.n	800a944 <_scanf_float+0x11c>
 800a87a:	2b40      	cmp	r3, #64	; 0x40
 800a87c:	d83c      	bhi.n	800a8f8 <_scanf_float+0xd0>
 800a87e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a882:	b2c8      	uxtb	r0, r1
 800a884:	280e      	cmp	r0, #14
 800a886:	d93a      	bls.n	800a8fe <_scanf_float+0xd6>
 800a888:	f1b9 0f00 	cmp.w	r9, #0
 800a88c:	d003      	beq.n	800a896 <_scanf_float+0x6e>
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a894:	6023      	str	r3, [r4, #0]
 800a896:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a89a:	f1ba 0f01 	cmp.w	sl, #1
 800a89e:	f200 8113 	bhi.w	800aac8 <_scanf_float+0x2a0>
 800a8a2:	455e      	cmp	r6, fp
 800a8a4:	f200 8105 	bhi.w	800aab2 <_scanf_float+0x28a>
 800a8a8:	2501      	movs	r5, #1
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	b007      	add	sp, #28
 800a8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a8b6:	2a0d      	cmp	r2, #13
 800a8b8:	d8e6      	bhi.n	800a888 <_scanf_float+0x60>
 800a8ba:	a101      	add	r1, pc, #4	; (adr r1, 800a8c0 <_scanf_float+0x98>)
 800a8bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a8c0:	0800a9ff 	.word	0x0800a9ff
 800a8c4:	0800a889 	.word	0x0800a889
 800a8c8:	0800a889 	.word	0x0800a889
 800a8cc:	0800a889 	.word	0x0800a889
 800a8d0:	0800aa5f 	.word	0x0800aa5f
 800a8d4:	0800aa37 	.word	0x0800aa37
 800a8d8:	0800a889 	.word	0x0800a889
 800a8dc:	0800a889 	.word	0x0800a889
 800a8e0:	0800aa0d 	.word	0x0800aa0d
 800a8e4:	0800a889 	.word	0x0800a889
 800a8e8:	0800a889 	.word	0x0800a889
 800a8ec:	0800a889 	.word	0x0800a889
 800a8f0:	0800a889 	.word	0x0800a889
 800a8f4:	0800a9c5 	.word	0x0800a9c5
 800a8f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a8fc:	e7db      	b.n	800a8b6 <_scanf_float+0x8e>
 800a8fe:	290e      	cmp	r1, #14
 800a900:	d8c2      	bhi.n	800a888 <_scanf_float+0x60>
 800a902:	a001      	add	r0, pc, #4	; (adr r0, 800a908 <_scanf_float+0xe0>)
 800a904:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a908:	0800a9b7 	.word	0x0800a9b7
 800a90c:	0800a889 	.word	0x0800a889
 800a910:	0800a9b7 	.word	0x0800a9b7
 800a914:	0800aa4b 	.word	0x0800aa4b
 800a918:	0800a889 	.word	0x0800a889
 800a91c:	0800a965 	.word	0x0800a965
 800a920:	0800a9a1 	.word	0x0800a9a1
 800a924:	0800a9a1 	.word	0x0800a9a1
 800a928:	0800a9a1 	.word	0x0800a9a1
 800a92c:	0800a9a1 	.word	0x0800a9a1
 800a930:	0800a9a1 	.word	0x0800a9a1
 800a934:	0800a9a1 	.word	0x0800a9a1
 800a938:	0800a9a1 	.word	0x0800a9a1
 800a93c:	0800a9a1 	.word	0x0800a9a1
 800a940:	0800a9a1 	.word	0x0800a9a1
 800a944:	2b6e      	cmp	r3, #110	; 0x6e
 800a946:	d809      	bhi.n	800a95c <_scanf_float+0x134>
 800a948:	2b60      	cmp	r3, #96	; 0x60
 800a94a:	d8b2      	bhi.n	800a8b2 <_scanf_float+0x8a>
 800a94c:	2b54      	cmp	r3, #84	; 0x54
 800a94e:	d077      	beq.n	800aa40 <_scanf_float+0x218>
 800a950:	2b59      	cmp	r3, #89	; 0x59
 800a952:	d199      	bne.n	800a888 <_scanf_float+0x60>
 800a954:	2d07      	cmp	r5, #7
 800a956:	d197      	bne.n	800a888 <_scanf_float+0x60>
 800a958:	2508      	movs	r5, #8
 800a95a:	e029      	b.n	800a9b0 <_scanf_float+0x188>
 800a95c:	2b74      	cmp	r3, #116	; 0x74
 800a95e:	d06f      	beq.n	800aa40 <_scanf_float+0x218>
 800a960:	2b79      	cmp	r3, #121	; 0x79
 800a962:	e7f6      	b.n	800a952 <_scanf_float+0x12a>
 800a964:	6821      	ldr	r1, [r4, #0]
 800a966:	05c8      	lsls	r0, r1, #23
 800a968:	d51a      	bpl.n	800a9a0 <_scanf_float+0x178>
 800a96a:	9b02      	ldr	r3, [sp, #8]
 800a96c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a970:	6021      	str	r1, [r4, #0]
 800a972:	f109 0901 	add.w	r9, r9, #1
 800a976:	b11b      	cbz	r3, 800a980 <_scanf_float+0x158>
 800a978:	3b01      	subs	r3, #1
 800a97a:	3201      	adds	r2, #1
 800a97c:	9302      	str	r3, [sp, #8]
 800a97e:	60a2      	str	r2, [r4, #8]
 800a980:	68a3      	ldr	r3, [r4, #8]
 800a982:	3b01      	subs	r3, #1
 800a984:	60a3      	str	r3, [r4, #8]
 800a986:	6923      	ldr	r3, [r4, #16]
 800a988:	3301      	adds	r3, #1
 800a98a:	6123      	str	r3, [r4, #16]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3b01      	subs	r3, #1
 800a990:	2b00      	cmp	r3, #0
 800a992:	607b      	str	r3, [r7, #4]
 800a994:	f340 8084 	ble.w	800aaa0 <_scanf_float+0x278>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	3301      	adds	r3, #1
 800a99c:	603b      	str	r3, [r7, #0]
 800a99e:	e766      	b.n	800a86e <_scanf_float+0x46>
 800a9a0:	eb1a 0f05 	cmn.w	sl, r5
 800a9a4:	f47f af70 	bne.w	800a888 <_scanf_float+0x60>
 800a9a8:	6822      	ldr	r2, [r4, #0]
 800a9aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a9ae:	6022      	str	r2, [r4, #0]
 800a9b0:	f806 3b01 	strb.w	r3, [r6], #1
 800a9b4:	e7e4      	b.n	800a980 <_scanf_float+0x158>
 800a9b6:	6822      	ldr	r2, [r4, #0]
 800a9b8:	0610      	lsls	r0, r2, #24
 800a9ba:	f57f af65 	bpl.w	800a888 <_scanf_float+0x60>
 800a9be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9c2:	e7f4      	b.n	800a9ae <_scanf_float+0x186>
 800a9c4:	f1ba 0f00 	cmp.w	sl, #0
 800a9c8:	d10e      	bne.n	800a9e8 <_scanf_float+0x1c0>
 800a9ca:	f1b9 0f00 	cmp.w	r9, #0
 800a9ce:	d10e      	bne.n	800a9ee <_scanf_float+0x1c6>
 800a9d0:	6822      	ldr	r2, [r4, #0]
 800a9d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a9d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a9da:	d108      	bne.n	800a9ee <_scanf_float+0x1c6>
 800a9dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a9e0:	6022      	str	r2, [r4, #0]
 800a9e2:	f04f 0a01 	mov.w	sl, #1
 800a9e6:	e7e3      	b.n	800a9b0 <_scanf_float+0x188>
 800a9e8:	f1ba 0f02 	cmp.w	sl, #2
 800a9ec:	d055      	beq.n	800aa9a <_scanf_float+0x272>
 800a9ee:	2d01      	cmp	r5, #1
 800a9f0:	d002      	beq.n	800a9f8 <_scanf_float+0x1d0>
 800a9f2:	2d04      	cmp	r5, #4
 800a9f4:	f47f af48 	bne.w	800a888 <_scanf_float+0x60>
 800a9f8:	3501      	adds	r5, #1
 800a9fa:	b2ed      	uxtb	r5, r5
 800a9fc:	e7d8      	b.n	800a9b0 <_scanf_float+0x188>
 800a9fe:	f1ba 0f01 	cmp.w	sl, #1
 800aa02:	f47f af41 	bne.w	800a888 <_scanf_float+0x60>
 800aa06:	f04f 0a02 	mov.w	sl, #2
 800aa0a:	e7d1      	b.n	800a9b0 <_scanf_float+0x188>
 800aa0c:	b97d      	cbnz	r5, 800aa2e <_scanf_float+0x206>
 800aa0e:	f1b9 0f00 	cmp.w	r9, #0
 800aa12:	f47f af3c 	bne.w	800a88e <_scanf_float+0x66>
 800aa16:	6822      	ldr	r2, [r4, #0]
 800aa18:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aa1c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aa20:	f47f af39 	bne.w	800a896 <_scanf_float+0x6e>
 800aa24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aa28:	6022      	str	r2, [r4, #0]
 800aa2a:	2501      	movs	r5, #1
 800aa2c:	e7c0      	b.n	800a9b0 <_scanf_float+0x188>
 800aa2e:	2d03      	cmp	r5, #3
 800aa30:	d0e2      	beq.n	800a9f8 <_scanf_float+0x1d0>
 800aa32:	2d05      	cmp	r5, #5
 800aa34:	e7de      	b.n	800a9f4 <_scanf_float+0x1cc>
 800aa36:	2d02      	cmp	r5, #2
 800aa38:	f47f af26 	bne.w	800a888 <_scanf_float+0x60>
 800aa3c:	2503      	movs	r5, #3
 800aa3e:	e7b7      	b.n	800a9b0 <_scanf_float+0x188>
 800aa40:	2d06      	cmp	r5, #6
 800aa42:	f47f af21 	bne.w	800a888 <_scanf_float+0x60>
 800aa46:	2507      	movs	r5, #7
 800aa48:	e7b2      	b.n	800a9b0 <_scanf_float+0x188>
 800aa4a:	6822      	ldr	r2, [r4, #0]
 800aa4c:	0591      	lsls	r1, r2, #22
 800aa4e:	f57f af1b 	bpl.w	800a888 <_scanf_float+0x60>
 800aa52:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800aa56:	6022      	str	r2, [r4, #0]
 800aa58:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa5c:	e7a8      	b.n	800a9b0 <_scanf_float+0x188>
 800aa5e:	6822      	ldr	r2, [r4, #0]
 800aa60:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aa64:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aa68:	d006      	beq.n	800aa78 <_scanf_float+0x250>
 800aa6a:	0550      	lsls	r0, r2, #21
 800aa6c:	f57f af0c 	bpl.w	800a888 <_scanf_float+0x60>
 800aa70:	f1b9 0f00 	cmp.w	r9, #0
 800aa74:	f43f af0f 	beq.w	800a896 <_scanf_float+0x6e>
 800aa78:	0591      	lsls	r1, r2, #22
 800aa7a:	bf58      	it	pl
 800aa7c:	9901      	ldrpl	r1, [sp, #4]
 800aa7e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aa82:	bf58      	it	pl
 800aa84:	eba9 0101 	subpl.w	r1, r9, r1
 800aa88:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800aa8c:	bf58      	it	pl
 800aa8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa92:	6022      	str	r2, [r4, #0]
 800aa94:	f04f 0900 	mov.w	r9, #0
 800aa98:	e78a      	b.n	800a9b0 <_scanf_float+0x188>
 800aa9a:	f04f 0a03 	mov.w	sl, #3
 800aa9e:	e787      	b.n	800a9b0 <_scanf_float+0x188>
 800aaa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	4640      	mov	r0, r8
 800aaa8:	4798      	blx	r3
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	f43f aedf 	beq.w	800a86e <_scanf_float+0x46>
 800aab0:	e6ea      	b.n	800a888 <_scanf_float+0x60>
 800aab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aaba:	463a      	mov	r2, r7
 800aabc:	4640      	mov	r0, r8
 800aabe:	4798      	blx	r3
 800aac0:	6923      	ldr	r3, [r4, #16]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	6123      	str	r3, [r4, #16]
 800aac6:	e6ec      	b.n	800a8a2 <_scanf_float+0x7a>
 800aac8:	1e6b      	subs	r3, r5, #1
 800aaca:	2b06      	cmp	r3, #6
 800aacc:	d825      	bhi.n	800ab1a <_scanf_float+0x2f2>
 800aace:	2d02      	cmp	r5, #2
 800aad0:	d836      	bhi.n	800ab40 <_scanf_float+0x318>
 800aad2:	455e      	cmp	r6, fp
 800aad4:	f67f aee8 	bls.w	800a8a8 <_scanf_float+0x80>
 800aad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aadc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aae0:	463a      	mov	r2, r7
 800aae2:	4640      	mov	r0, r8
 800aae4:	4798      	blx	r3
 800aae6:	6923      	ldr	r3, [r4, #16]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	6123      	str	r3, [r4, #16]
 800aaec:	e7f1      	b.n	800aad2 <_scanf_float+0x2aa>
 800aaee:	9802      	ldr	r0, [sp, #8]
 800aaf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aaf4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aaf8:	9002      	str	r0, [sp, #8]
 800aafa:	463a      	mov	r2, r7
 800aafc:	4640      	mov	r0, r8
 800aafe:	4798      	blx	r3
 800ab00:	6923      	ldr	r3, [r4, #16]
 800ab02:	3b01      	subs	r3, #1
 800ab04:	6123      	str	r3, [r4, #16]
 800ab06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab0a:	fa5f fa8a 	uxtb.w	sl, sl
 800ab0e:	f1ba 0f02 	cmp.w	sl, #2
 800ab12:	d1ec      	bne.n	800aaee <_scanf_float+0x2c6>
 800ab14:	3d03      	subs	r5, #3
 800ab16:	b2ed      	uxtb	r5, r5
 800ab18:	1b76      	subs	r6, r6, r5
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	05da      	lsls	r2, r3, #23
 800ab1e:	d52f      	bpl.n	800ab80 <_scanf_float+0x358>
 800ab20:	055b      	lsls	r3, r3, #21
 800ab22:	d510      	bpl.n	800ab46 <_scanf_float+0x31e>
 800ab24:	455e      	cmp	r6, fp
 800ab26:	f67f aebf 	bls.w	800a8a8 <_scanf_float+0x80>
 800ab2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab32:	463a      	mov	r2, r7
 800ab34:	4640      	mov	r0, r8
 800ab36:	4798      	blx	r3
 800ab38:	6923      	ldr	r3, [r4, #16]
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	6123      	str	r3, [r4, #16]
 800ab3e:	e7f1      	b.n	800ab24 <_scanf_float+0x2fc>
 800ab40:	46aa      	mov	sl, r5
 800ab42:	9602      	str	r6, [sp, #8]
 800ab44:	e7df      	b.n	800ab06 <_scanf_float+0x2de>
 800ab46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ab4a:	6923      	ldr	r3, [r4, #16]
 800ab4c:	2965      	cmp	r1, #101	; 0x65
 800ab4e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab52:	f106 35ff 	add.w	r5, r6, #4294967295
 800ab56:	6123      	str	r3, [r4, #16]
 800ab58:	d00c      	beq.n	800ab74 <_scanf_float+0x34c>
 800ab5a:	2945      	cmp	r1, #69	; 0x45
 800ab5c:	d00a      	beq.n	800ab74 <_scanf_float+0x34c>
 800ab5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab62:	463a      	mov	r2, r7
 800ab64:	4640      	mov	r0, r8
 800ab66:	4798      	blx	r3
 800ab68:	6923      	ldr	r3, [r4, #16]
 800ab6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	1eb5      	subs	r5, r6, #2
 800ab72:	6123      	str	r3, [r4, #16]
 800ab74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab78:	463a      	mov	r2, r7
 800ab7a:	4640      	mov	r0, r8
 800ab7c:	4798      	blx	r3
 800ab7e:	462e      	mov	r6, r5
 800ab80:	6825      	ldr	r5, [r4, #0]
 800ab82:	f015 0510 	ands.w	r5, r5, #16
 800ab86:	d159      	bne.n	800ac3c <_scanf_float+0x414>
 800ab88:	7035      	strb	r5, [r6, #0]
 800ab8a:	6823      	ldr	r3, [r4, #0]
 800ab8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab94:	d11b      	bne.n	800abce <_scanf_float+0x3a6>
 800ab96:	9b01      	ldr	r3, [sp, #4]
 800ab98:	454b      	cmp	r3, r9
 800ab9a:	eba3 0209 	sub.w	r2, r3, r9
 800ab9e:	d123      	bne.n	800abe8 <_scanf_float+0x3c0>
 800aba0:	2200      	movs	r2, #0
 800aba2:	4659      	mov	r1, fp
 800aba4:	4640      	mov	r0, r8
 800aba6:	f000 fe99 	bl	800b8dc <_strtod_r>
 800abaa:	6822      	ldr	r2, [r4, #0]
 800abac:	9b03      	ldr	r3, [sp, #12]
 800abae:	f012 0f02 	tst.w	r2, #2
 800abb2:	ec57 6b10 	vmov	r6, r7, d0
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	d021      	beq.n	800abfe <_scanf_float+0x3d6>
 800abba:	9903      	ldr	r1, [sp, #12]
 800abbc:	1d1a      	adds	r2, r3, #4
 800abbe:	600a      	str	r2, [r1, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	e9c3 6700 	strd	r6, r7, [r3]
 800abc6:	68e3      	ldr	r3, [r4, #12]
 800abc8:	3301      	adds	r3, #1
 800abca:	60e3      	str	r3, [r4, #12]
 800abcc:	e66d      	b.n	800a8aa <_scanf_float+0x82>
 800abce:	9b04      	ldr	r3, [sp, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d0e5      	beq.n	800aba0 <_scanf_float+0x378>
 800abd4:	9905      	ldr	r1, [sp, #20]
 800abd6:	230a      	movs	r3, #10
 800abd8:	462a      	mov	r2, r5
 800abda:	3101      	adds	r1, #1
 800abdc:	4640      	mov	r0, r8
 800abde:	f000 ff61 	bl	800baa4 <_strtol_r>
 800abe2:	9b04      	ldr	r3, [sp, #16]
 800abe4:	9e05      	ldr	r6, [sp, #20]
 800abe6:	1ac2      	subs	r2, r0, r3
 800abe8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800abec:	429e      	cmp	r6, r3
 800abee:	bf28      	it	cs
 800abf0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800abf4:	4912      	ldr	r1, [pc, #72]	; (800ac40 <_scanf_float+0x418>)
 800abf6:	4630      	mov	r0, r6
 800abf8:	f000 f82c 	bl	800ac54 <siprintf>
 800abfc:	e7d0      	b.n	800aba0 <_scanf_float+0x378>
 800abfe:	9903      	ldr	r1, [sp, #12]
 800ac00:	f012 0f04 	tst.w	r2, #4
 800ac04:	f103 0204 	add.w	r2, r3, #4
 800ac08:	600a      	str	r2, [r1, #0]
 800ac0a:	d1d9      	bne.n	800abc0 <_scanf_float+0x398>
 800ac0c:	f8d3 8000 	ldr.w	r8, [r3]
 800ac10:	ee10 2a10 	vmov	r2, s0
 800ac14:	ee10 0a10 	vmov	r0, s0
 800ac18:	463b      	mov	r3, r7
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	f7f5 ffbe 	bl	8000b9c <__aeabi_dcmpun>
 800ac20:	b128      	cbz	r0, 800ac2e <_scanf_float+0x406>
 800ac22:	4808      	ldr	r0, [pc, #32]	; (800ac44 <_scanf_float+0x41c>)
 800ac24:	f000 f810 	bl	800ac48 <nanf>
 800ac28:	ed88 0a00 	vstr	s0, [r8]
 800ac2c:	e7cb      	b.n	800abc6 <_scanf_float+0x39e>
 800ac2e:	4630      	mov	r0, r6
 800ac30:	4639      	mov	r1, r7
 800ac32:	f7f6 f811 	bl	8000c58 <__aeabi_d2f>
 800ac36:	f8c8 0000 	str.w	r0, [r8]
 800ac3a:	e7c4      	b.n	800abc6 <_scanf_float+0x39e>
 800ac3c:	2500      	movs	r5, #0
 800ac3e:	e634      	b.n	800a8aa <_scanf_float+0x82>
 800ac40:	0800ea48 	.word	0x0800ea48
 800ac44:	0800eb4f 	.word	0x0800eb4f

0800ac48 <nanf>:
 800ac48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac50 <nanf+0x8>
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	7fc00000 	.word	0x7fc00000

0800ac54 <siprintf>:
 800ac54:	b40e      	push	{r1, r2, r3}
 800ac56:	b500      	push	{lr}
 800ac58:	b09c      	sub	sp, #112	; 0x70
 800ac5a:	ab1d      	add	r3, sp, #116	; 0x74
 800ac5c:	9002      	str	r0, [sp, #8]
 800ac5e:	9006      	str	r0, [sp, #24]
 800ac60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac64:	4809      	ldr	r0, [pc, #36]	; (800ac8c <siprintf+0x38>)
 800ac66:	9107      	str	r1, [sp, #28]
 800ac68:	9104      	str	r1, [sp, #16]
 800ac6a:	4909      	ldr	r1, [pc, #36]	; (800ac90 <siprintf+0x3c>)
 800ac6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac70:	9105      	str	r1, [sp, #20]
 800ac72:	6800      	ldr	r0, [r0, #0]
 800ac74:	9301      	str	r3, [sp, #4]
 800ac76:	a902      	add	r1, sp, #8
 800ac78:	f002 ff7a 	bl	800db70 <_svfiprintf_r>
 800ac7c:	9b02      	ldr	r3, [sp, #8]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	701a      	strb	r2, [r3, #0]
 800ac82:	b01c      	add	sp, #112	; 0x70
 800ac84:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac88:	b003      	add	sp, #12
 800ac8a:	4770      	bx	lr
 800ac8c:	2000020c 	.word	0x2000020c
 800ac90:	ffff0208 	.word	0xffff0208

0800ac94 <sulp>:
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	4604      	mov	r4, r0
 800ac98:	460d      	mov	r5, r1
 800ac9a:	ec45 4b10 	vmov	d0, r4, r5
 800ac9e:	4616      	mov	r6, r2
 800aca0:	f002 fcc4 	bl	800d62c <__ulp>
 800aca4:	ec51 0b10 	vmov	r0, r1, d0
 800aca8:	b17e      	cbz	r6, 800acca <sulp+0x36>
 800acaa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800acae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	dd09      	ble.n	800acca <sulp+0x36>
 800acb6:	051b      	lsls	r3, r3, #20
 800acb8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800acbc:	2400      	movs	r4, #0
 800acbe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800acc2:	4622      	mov	r2, r4
 800acc4:	462b      	mov	r3, r5
 800acc6:	f7f5 fccf 	bl	8000668 <__aeabi_dmul>
 800acca:	bd70      	pop	{r4, r5, r6, pc}
 800accc:	0000      	movs	r0, r0
	...

0800acd0 <_strtod_l>:
 800acd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd4:	ed2d 8b02 	vpush	{d8}
 800acd8:	b09d      	sub	sp, #116	; 0x74
 800acda:	461f      	mov	r7, r3
 800acdc:	2300      	movs	r3, #0
 800acde:	9318      	str	r3, [sp, #96]	; 0x60
 800ace0:	4ba2      	ldr	r3, [pc, #648]	; (800af6c <_strtod_l+0x29c>)
 800ace2:	9213      	str	r2, [sp, #76]	; 0x4c
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	9305      	str	r3, [sp, #20]
 800ace8:	4604      	mov	r4, r0
 800acea:	4618      	mov	r0, r3
 800acec:	4688      	mov	r8, r1
 800acee:	f7f5 faa1 	bl	8000234 <strlen>
 800acf2:	f04f 0a00 	mov.w	sl, #0
 800acf6:	4605      	mov	r5, r0
 800acf8:	f04f 0b00 	mov.w	fp, #0
 800acfc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ad00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad02:	781a      	ldrb	r2, [r3, #0]
 800ad04:	2a2b      	cmp	r2, #43	; 0x2b
 800ad06:	d04e      	beq.n	800ada6 <_strtod_l+0xd6>
 800ad08:	d83b      	bhi.n	800ad82 <_strtod_l+0xb2>
 800ad0a:	2a0d      	cmp	r2, #13
 800ad0c:	d834      	bhi.n	800ad78 <_strtod_l+0xa8>
 800ad0e:	2a08      	cmp	r2, #8
 800ad10:	d834      	bhi.n	800ad7c <_strtod_l+0xac>
 800ad12:	2a00      	cmp	r2, #0
 800ad14:	d03e      	beq.n	800ad94 <_strtod_l+0xc4>
 800ad16:	2300      	movs	r3, #0
 800ad18:	930a      	str	r3, [sp, #40]	; 0x28
 800ad1a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ad1c:	7833      	ldrb	r3, [r6, #0]
 800ad1e:	2b30      	cmp	r3, #48	; 0x30
 800ad20:	f040 80b0 	bne.w	800ae84 <_strtod_l+0x1b4>
 800ad24:	7873      	ldrb	r3, [r6, #1]
 800ad26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad2a:	2b58      	cmp	r3, #88	; 0x58
 800ad2c:	d168      	bne.n	800ae00 <_strtod_l+0x130>
 800ad2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad30:	9301      	str	r3, [sp, #4]
 800ad32:	ab18      	add	r3, sp, #96	; 0x60
 800ad34:	9702      	str	r7, [sp, #8]
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	4a8d      	ldr	r2, [pc, #564]	; (800af70 <_strtod_l+0x2a0>)
 800ad3a:	ab19      	add	r3, sp, #100	; 0x64
 800ad3c:	a917      	add	r1, sp, #92	; 0x5c
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f001 fdce 	bl	800c8e0 <__gethex>
 800ad44:	f010 0707 	ands.w	r7, r0, #7
 800ad48:	4605      	mov	r5, r0
 800ad4a:	d005      	beq.n	800ad58 <_strtod_l+0x88>
 800ad4c:	2f06      	cmp	r7, #6
 800ad4e:	d12c      	bne.n	800adaa <_strtod_l+0xda>
 800ad50:	3601      	adds	r6, #1
 800ad52:	2300      	movs	r3, #0
 800ad54:	9617      	str	r6, [sp, #92]	; 0x5c
 800ad56:	930a      	str	r3, [sp, #40]	; 0x28
 800ad58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f040 8590 	bne.w	800b880 <_strtod_l+0xbb0>
 800ad60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad62:	b1eb      	cbz	r3, 800ada0 <_strtod_l+0xd0>
 800ad64:	4652      	mov	r2, sl
 800ad66:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ad6a:	ec43 2b10 	vmov	d0, r2, r3
 800ad6e:	b01d      	add	sp, #116	; 0x74
 800ad70:	ecbd 8b02 	vpop	{d8}
 800ad74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad78:	2a20      	cmp	r2, #32
 800ad7a:	d1cc      	bne.n	800ad16 <_strtod_l+0x46>
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad80:	e7be      	b.n	800ad00 <_strtod_l+0x30>
 800ad82:	2a2d      	cmp	r2, #45	; 0x2d
 800ad84:	d1c7      	bne.n	800ad16 <_strtod_l+0x46>
 800ad86:	2201      	movs	r2, #1
 800ad88:	920a      	str	r2, [sp, #40]	; 0x28
 800ad8a:	1c5a      	adds	r2, r3, #1
 800ad8c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad8e:	785b      	ldrb	r3, [r3, #1]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1c2      	bne.n	800ad1a <_strtod_l+0x4a>
 800ad94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad96:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f040 856e 	bne.w	800b87c <_strtod_l+0xbac>
 800ada0:	4652      	mov	r2, sl
 800ada2:	465b      	mov	r3, fp
 800ada4:	e7e1      	b.n	800ad6a <_strtod_l+0x9a>
 800ada6:	2200      	movs	r2, #0
 800ada8:	e7ee      	b.n	800ad88 <_strtod_l+0xb8>
 800adaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800adac:	b13a      	cbz	r2, 800adbe <_strtod_l+0xee>
 800adae:	2135      	movs	r1, #53	; 0x35
 800adb0:	a81a      	add	r0, sp, #104	; 0x68
 800adb2:	f002 fd46 	bl	800d842 <__copybits>
 800adb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800adb8:	4620      	mov	r0, r4
 800adba:	f002 f905 	bl	800cfc8 <_Bfree>
 800adbe:	3f01      	subs	r7, #1
 800adc0:	2f04      	cmp	r7, #4
 800adc2:	d806      	bhi.n	800add2 <_strtod_l+0x102>
 800adc4:	e8df f007 	tbb	[pc, r7]
 800adc8:	1714030a 	.word	0x1714030a
 800adcc:	0a          	.byte	0x0a
 800adcd:	00          	.byte	0x00
 800adce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800add2:	0728      	lsls	r0, r5, #28
 800add4:	d5c0      	bpl.n	800ad58 <_strtod_l+0x88>
 800add6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800adda:	e7bd      	b.n	800ad58 <_strtod_l+0x88>
 800addc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ade0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ade2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ade6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800adea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800adee:	e7f0      	b.n	800add2 <_strtod_l+0x102>
 800adf0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800af74 <_strtod_l+0x2a4>
 800adf4:	e7ed      	b.n	800add2 <_strtod_l+0x102>
 800adf6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800adfa:	f04f 3aff 	mov.w	sl, #4294967295
 800adfe:	e7e8      	b.n	800add2 <_strtod_l+0x102>
 800ae00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae02:	1c5a      	adds	r2, r3, #1
 800ae04:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae06:	785b      	ldrb	r3, [r3, #1]
 800ae08:	2b30      	cmp	r3, #48	; 0x30
 800ae0a:	d0f9      	beq.n	800ae00 <_strtod_l+0x130>
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d0a3      	beq.n	800ad58 <_strtod_l+0x88>
 800ae10:	2301      	movs	r3, #1
 800ae12:	f04f 0900 	mov.w	r9, #0
 800ae16:	9304      	str	r3, [sp, #16]
 800ae18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae1a:	9308      	str	r3, [sp, #32]
 800ae1c:	f8cd 901c 	str.w	r9, [sp, #28]
 800ae20:	464f      	mov	r7, r9
 800ae22:	220a      	movs	r2, #10
 800ae24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ae26:	7806      	ldrb	r6, [r0, #0]
 800ae28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ae2c:	b2d9      	uxtb	r1, r3
 800ae2e:	2909      	cmp	r1, #9
 800ae30:	d92a      	bls.n	800ae88 <_strtod_l+0x1b8>
 800ae32:	9905      	ldr	r1, [sp, #20]
 800ae34:	462a      	mov	r2, r5
 800ae36:	f003 f90f 	bl	800e058 <strncmp>
 800ae3a:	b398      	cbz	r0, 800aea4 <_strtod_l+0x1d4>
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	4632      	mov	r2, r6
 800ae40:	463d      	mov	r5, r7
 800ae42:	9005      	str	r0, [sp, #20]
 800ae44:	4603      	mov	r3, r0
 800ae46:	2a65      	cmp	r2, #101	; 0x65
 800ae48:	d001      	beq.n	800ae4e <_strtod_l+0x17e>
 800ae4a:	2a45      	cmp	r2, #69	; 0x45
 800ae4c:	d118      	bne.n	800ae80 <_strtod_l+0x1b0>
 800ae4e:	b91d      	cbnz	r5, 800ae58 <_strtod_l+0x188>
 800ae50:	9a04      	ldr	r2, [sp, #16]
 800ae52:	4302      	orrs	r2, r0
 800ae54:	d09e      	beq.n	800ad94 <_strtod_l+0xc4>
 800ae56:	2500      	movs	r5, #0
 800ae58:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ae5c:	f108 0201 	add.w	r2, r8, #1
 800ae60:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae62:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ae66:	2a2b      	cmp	r2, #43	; 0x2b
 800ae68:	d075      	beq.n	800af56 <_strtod_l+0x286>
 800ae6a:	2a2d      	cmp	r2, #45	; 0x2d
 800ae6c:	d07b      	beq.n	800af66 <_strtod_l+0x296>
 800ae6e:	f04f 0c00 	mov.w	ip, #0
 800ae72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ae76:	2909      	cmp	r1, #9
 800ae78:	f240 8082 	bls.w	800af80 <_strtod_l+0x2b0>
 800ae7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ae80:	2600      	movs	r6, #0
 800ae82:	e09d      	b.n	800afc0 <_strtod_l+0x2f0>
 800ae84:	2300      	movs	r3, #0
 800ae86:	e7c4      	b.n	800ae12 <_strtod_l+0x142>
 800ae88:	2f08      	cmp	r7, #8
 800ae8a:	bfd8      	it	le
 800ae8c:	9907      	ldrle	r1, [sp, #28]
 800ae8e:	f100 0001 	add.w	r0, r0, #1
 800ae92:	bfda      	itte	le
 800ae94:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae98:	9307      	strle	r3, [sp, #28]
 800ae9a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ae9e:	3701      	adds	r7, #1
 800aea0:	9017      	str	r0, [sp, #92]	; 0x5c
 800aea2:	e7bf      	b.n	800ae24 <_strtod_l+0x154>
 800aea4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aea6:	195a      	adds	r2, r3, r5
 800aea8:	9217      	str	r2, [sp, #92]	; 0x5c
 800aeaa:	5d5a      	ldrb	r2, [r3, r5]
 800aeac:	2f00      	cmp	r7, #0
 800aeae:	d037      	beq.n	800af20 <_strtod_l+0x250>
 800aeb0:	9005      	str	r0, [sp, #20]
 800aeb2:	463d      	mov	r5, r7
 800aeb4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aeb8:	2b09      	cmp	r3, #9
 800aeba:	d912      	bls.n	800aee2 <_strtod_l+0x212>
 800aebc:	2301      	movs	r3, #1
 800aebe:	e7c2      	b.n	800ae46 <_strtod_l+0x176>
 800aec0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aec2:	1c5a      	adds	r2, r3, #1
 800aec4:	9217      	str	r2, [sp, #92]	; 0x5c
 800aec6:	785a      	ldrb	r2, [r3, #1]
 800aec8:	3001      	adds	r0, #1
 800aeca:	2a30      	cmp	r2, #48	; 0x30
 800aecc:	d0f8      	beq.n	800aec0 <_strtod_l+0x1f0>
 800aece:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aed2:	2b08      	cmp	r3, #8
 800aed4:	f200 84d9 	bhi.w	800b88a <_strtod_l+0xbba>
 800aed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aeda:	9005      	str	r0, [sp, #20]
 800aedc:	2000      	movs	r0, #0
 800aede:	9308      	str	r3, [sp, #32]
 800aee0:	4605      	mov	r5, r0
 800aee2:	3a30      	subs	r2, #48	; 0x30
 800aee4:	f100 0301 	add.w	r3, r0, #1
 800aee8:	d014      	beq.n	800af14 <_strtod_l+0x244>
 800aeea:	9905      	ldr	r1, [sp, #20]
 800aeec:	4419      	add	r1, r3
 800aeee:	9105      	str	r1, [sp, #20]
 800aef0:	462b      	mov	r3, r5
 800aef2:	eb00 0e05 	add.w	lr, r0, r5
 800aef6:	210a      	movs	r1, #10
 800aef8:	4573      	cmp	r3, lr
 800aefa:	d113      	bne.n	800af24 <_strtod_l+0x254>
 800aefc:	182b      	adds	r3, r5, r0
 800aefe:	2b08      	cmp	r3, #8
 800af00:	f105 0501 	add.w	r5, r5, #1
 800af04:	4405      	add	r5, r0
 800af06:	dc1c      	bgt.n	800af42 <_strtod_l+0x272>
 800af08:	9907      	ldr	r1, [sp, #28]
 800af0a:	230a      	movs	r3, #10
 800af0c:	fb03 2301 	mla	r3, r3, r1, r2
 800af10:	9307      	str	r3, [sp, #28]
 800af12:	2300      	movs	r3, #0
 800af14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af16:	1c51      	adds	r1, r2, #1
 800af18:	9117      	str	r1, [sp, #92]	; 0x5c
 800af1a:	7852      	ldrb	r2, [r2, #1]
 800af1c:	4618      	mov	r0, r3
 800af1e:	e7c9      	b.n	800aeb4 <_strtod_l+0x1e4>
 800af20:	4638      	mov	r0, r7
 800af22:	e7d2      	b.n	800aeca <_strtod_l+0x1fa>
 800af24:	2b08      	cmp	r3, #8
 800af26:	dc04      	bgt.n	800af32 <_strtod_l+0x262>
 800af28:	9e07      	ldr	r6, [sp, #28]
 800af2a:	434e      	muls	r6, r1
 800af2c:	9607      	str	r6, [sp, #28]
 800af2e:	3301      	adds	r3, #1
 800af30:	e7e2      	b.n	800aef8 <_strtod_l+0x228>
 800af32:	f103 0c01 	add.w	ip, r3, #1
 800af36:	f1bc 0f10 	cmp.w	ip, #16
 800af3a:	bfd8      	it	le
 800af3c:	fb01 f909 	mulle.w	r9, r1, r9
 800af40:	e7f5      	b.n	800af2e <_strtod_l+0x25e>
 800af42:	2d10      	cmp	r5, #16
 800af44:	bfdc      	itt	le
 800af46:	230a      	movle	r3, #10
 800af48:	fb03 2909 	mlale	r9, r3, r9, r2
 800af4c:	e7e1      	b.n	800af12 <_strtod_l+0x242>
 800af4e:	2300      	movs	r3, #0
 800af50:	9305      	str	r3, [sp, #20]
 800af52:	2301      	movs	r3, #1
 800af54:	e77c      	b.n	800ae50 <_strtod_l+0x180>
 800af56:	f04f 0c00 	mov.w	ip, #0
 800af5a:	f108 0202 	add.w	r2, r8, #2
 800af5e:	9217      	str	r2, [sp, #92]	; 0x5c
 800af60:	f898 2002 	ldrb.w	r2, [r8, #2]
 800af64:	e785      	b.n	800ae72 <_strtod_l+0x1a2>
 800af66:	f04f 0c01 	mov.w	ip, #1
 800af6a:	e7f6      	b.n	800af5a <_strtod_l+0x28a>
 800af6c:	0800ed30 	.word	0x0800ed30
 800af70:	0800ea50 	.word	0x0800ea50
 800af74:	7ff00000 	.word	0x7ff00000
 800af78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af7a:	1c51      	adds	r1, r2, #1
 800af7c:	9117      	str	r1, [sp, #92]	; 0x5c
 800af7e:	7852      	ldrb	r2, [r2, #1]
 800af80:	2a30      	cmp	r2, #48	; 0x30
 800af82:	d0f9      	beq.n	800af78 <_strtod_l+0x2a8>
 800af84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800af88:	2908      	cmp	r1, #8
 800af8a:	f63f af79 	bhi.w	800ae80 <_strtod_l+0x1b0>
 800af8e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800af92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af94:	9206      	str	r2, [sp, #24]
 800af96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af98:	1c51      	adds	r1, r2, #1
 800af9a:	9117      	str	r1, [sp, #92]	; 0x5c
 800af9c:	7852      	ldrb	r2, [r2, #1]
 800af9e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800afa2:	2e09      	cmp	r6, #9
 800afa4:	d937      	bls.n	800b016 <_strtod_l+0x346>
 800afa6:	9e06      	ldr	r6, [sp, #24]
 800afa8:	1b89      	subs	r1, r1, r6
 800afaa:	2908      	cmp	r1, #8
 800afac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800afb0:	dc02      	bgt.n	800afb8 <_strtod_l+0x2e8>
 800afb2:	4576      	cmp	r6, lr
 800afb4:	bfa8      	it	ge
 800afb6:	4676      	movge	r6, lr
 800afb8:	f1bc 0f00 	cmp.w	ip, #0
 800afbc:	d000      	beq.n	800afc0 <_strtod_l+0x2f0>
 800afbe:	4276      	negs	r6, r6
 800afc0:	2d00      	cmp	r5, #0
 800afc2:	d14d      	bne.n	800b060 <_strtod_l+0x390>
 800afc4:	9904      	ldr	r1, [sp, #16]
 800afc6:	4301      	orrs	r1, r0
 800afc8:	f47f aec6 	bne.w	800ad58 <_strtod_l+0x88>
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f47f aee1 	bne.w	800ad94 <_strtod_l+0xc4>
 800afd2:	2a69      	cmp	r2, #105	; 0x69
 800afd4:	d027      	beq.n	800b026 <_strtod_l+0x356>
 800afd6:	dc24      	bgt.n	800b022 <_strtod_l+0x352>
 800afd8:	2a49      	cmp	r2, #73	; 0x49
 800afda:	d024      	beq.n	800b026 <_strtod_l+0x356>
 800afdc:	2a4e      	cmp	r2, #78	; 0x4e
 800afde:	f47f aed9 	bne.w	800ad94 <_strtod_l+0xc4>
 800afe2:	499f      	ldr	r1, [pc, #636]	; (800b260 <_strtod_l+0x590>)
 800afe4:	a817      	add	r0, sp, #92	; 0x5c
 800afe6:	f001 fed3 	bl	800cd90 <__match>
 800afea:	2800      	cmp	r0, #0
 800afec:	f43f aed2 	beq.w	800ad94 <_strtod_l+0xc4>
 800aff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	2b28      	cmp	r3, #40	; 0x28
 800aff6:	d12d      	bne.n	800b054 <_strtod_l+0x384>
 800aff8:	499a      	ldr	r1, [pc, #616]	; (800b264 <_strtod_l+0x594>)
 800affa:	aa1a      	add	r2, sp, #104	; 0x68
 800affc:	a817      	add	r0, sp, #92	; 0x5c
 800affe:	f001 fedb 	bl	800cdb8 <__hexnan>
 800b002:	2805      	cmp	r0, #5
 800b004:	d126      	bne.n	800b054 <_strtod_l+0x384>
 800b006:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b008:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b00c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b010:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b014:	e6a0      	b.n	800ad58 <_strtod_l+0x88>
 800b016:	210a      	movs	r1, #10
 800b018:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b01c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b020:	e7b9      	b.n	800af96 <_strtod_l+0x2c6>
 800b022:	2a6e      	cmp	r2, #110	; 0x6e
 800b024:	e7db      	b.n	800afde <_strtod_l+0x30e>
 800b026:	4990      	ldr	r1, [pc, #576]	; (800b268 <_strtod_l+0x598>)
 800b028:	a817      	add	r0, sp, #92	; 0x5c
 800b02a:	f001 feb1 	bl	800cd90 <__match>
 800b02e:	2800      	cmp	r0, #0
 800b030:	f43f aeb0 	beq.w	800ad94 <_strtod_l+0xc4>
 800b034:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b036:	498d      	ldr	r1, [pc, #564]	; (800b26c <_strtod_l+0x59c>)
 800b038:	3b01      	subs	r3, #1
 800b03a:	a817      	add	r0, sp, #92	; 0x5c
 800b03c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b03e:	f001 fea7 	bl	800cd90 <__match>
 800b042:	b910      	cbnz	r0, 800b04a <_strtod_l+0x37a>
 800b044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b046:	3301      	adds	r3, #1
 800b048:	9317      	str	r3, [sp, #92]	; 0x5c
 800b04a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b27c <_strtod_l+0x5ac>
 800b04e:	f04f 0a00 	mov.w	sl, #0
 800b052:	e681      	b.n	800ad58 <_strtod_l+0x88>
 800b054:	4886      	ldr	r0, [pc, #536]	; (800b270 <_strtod_l+0x5a0>)
 800b056:	f002 ffe7 	bl	800e028 <nan>
 800b05a:	ec5b ab10 	vmov	sl, fp, d0
 800b05e:	e67b      	b.n	800ad58 <_strtod_l+0x88>
 800b060:	9b05      	ldr	r3, [sp, #20]
 800b062:	9807      	ldr	r0, [sp, #28]
 800b064:	1af3      	subs	r3, r6, r3
 800b066:	2f00      	cmp	r7, #0
 800b068:	bf08      	it	eq
 800b06a:	462f      	moveq	r7, r5
 800b06c:	2d10      	cmp	r5, #16
 800b06e:	9306      	str	r3, [sp, #24]
 800b070:	46a8      	mov	r8, r5
 800b072:	bfa8      	it	ge
 800b074:	f04f 0810 	movge.w	r8, #16
 800b078:	f7f5 fa7c 	bl	8000574 <__aeabi_ui2d>
 800b07c:	2d09      	cmp	r5, #9
 800b07e:	4682      	mov	sl, r0
 800b080:	468b      	mov	fp, r1
 800b082:	dd13      	ble.n	800b0ac <_strtod_l+0x3dc>
 800b084:	4b7b      	ldr	r3, [pc, #492]	; (800b274 <_strtod_l+0x5a4>)
 800b086:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b08a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b08e:	f7f5 faeb 	bl	8000668 <__aeabi_dmul>
 800b092:	4682      	mov	sl, r0
 800b094:	4648      	mov	r0, r9
 800b096:	468b      	mov	fp, r1
 800b098:	f7f5 fa6c 	bl	8000574 <__aeabi_ui2d>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4650      	mov	r0, sl
 800b0a2:	4659      	mov	r1, fp
 800b0a4:	f7f5 f92a 	bl	80002fc <__adddf3>
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	468b      	mov	fp, r1
 800b0ac:	2d0f      	cmp	r5, #15
 800b0ae:	dc38      	bgt.n	800b122 <_strtod_l+0x452>
 800b0b0:	9b06      	ldr	r3, [sp, #24]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f43f ae50 	beq.w	800ad58 <_strtod_l+0x88>
 800b0b8:	dd24      	ble.n	800b104 <_strtod_l+0x434>
 800b0ba:	2b16      	cmp	r3, #22
 800b0bc:	dc0b      	bgt.n	800b0d6 <_strtod_l+0x406>
 800b0be:	496d      	ldr	r1, [pc, #436]	; (800b274 <_strtod_l+0x5a4>)
 800b0c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0c8:	4652      	mov	r2, sl
 800b0ca:	465b      	mov	r3, fp
 800b0cc:	f7f5 facc 	bl	8000668 <__aeabi_dmul>
 800b0d0:	4682      	mov	sl, r0
 800b0d2:	468b      	mov	fp, r1
 800b0d4:	e640      	b.n	800ad58 <_strtod_l+0x88>
 800b0d6:	9a06      	ldr	r2, [sp, #24]
 800b0d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	db20      	blt.n	800b122 <_strtod_l+0x452>
 800b0e0:	4c64      	ldr	r4, [pc, #400]	; (800b274 <_strtod_l+0x5a4>)
 800b0e2:	f1c5 050f 	rsb	r5, r5, #15
 800b0e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b0ea:	4652      	mov	r2, sl
 800b0ec:	465b      	mov	r3, fp
 800b0ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0f2:	f7f5 fab9 	bl	8000668 <__aeabi_dmul>
 800b0f6:	9b06      	ldr	r3, [sp, #24]
 800b0f8:	1b5d      	subs	r5, r3, r5
 800b0fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b0fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b102:	e7e3      	b.n	800b0cc <_strtod_l+0x3fc>
 800b104:	9b06      	ldr	r3, [sp, #24]
 800b106:	3316      	adds	r3, #22
 800b108:	db0b      	blt.n	800b122 <_strtod_l+0x452>
 800b10a:	9b05      	ldr	r3, [sp, #20]
 800b10c:	1b9e      	subs	r6, r3, r6
 800b10e:	4b59      	ldr	r3, [pc, #356]	; (800b274 <_strtod_l+0x5a4>)
 800b110:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b114:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b118:	4650      	mov	r0, sl
 800b11a:	4659      	mov	r1, fp
 800b11c:	f7f5 fbce 	bl	80008bc <__aeabi_ddiv>
 800b120:	e7d6      	b.n	800b0d0 <_strtod_l+0x400>
 800b122:	9b06      	ldr	r3, [sp, #24]
 800b124:	eba5 0808 	sub.w	r8, r5, r8
 800b128:	4498      	add	r8, r3
 800b12a:	f1b8 0f00 	cmp.w	r8, #0
 800b12e:	dd74      	ble.n	800b21a <_strtod_l+0x54a>
 800b130:	f018 030f 	ands.w	r3, r8, #15
 800b134:	d00a      	beq.n	800b14c <_strtod_l+0x47c>
 800b136:	494f      	ldr	r1, [pc, #316]	; (800b274 <_strtod_l+0x5a4>)
 800b138:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b13c:	4652      	mov	r2, sl
 800b13e:	465b      	mov	r3, fp
 800b140:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b144:	f7f5 fa90 	bl	8000668 <__aeabi_dmul>
 800b148:	4682      	mov	sl, r0
 800b14a:	468b      	mov	fp, r1
 800b14c:	f038 080f 	bics.w	r8, r8, #15
 800b150:	d04f      	beq.n	800b1f2 <_strtod_l+0x522>
 800b152:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b156:	dd22      	ble.n	800b19e <_strtod_l+0x4ce>
 800b158:	2500      	movs	r5, #0
 800b15a:	462e      	mov	r6, r5
 800b15c:	9507      	str	r5, [sp, #28]
 800b15e:	9505      	str	r5, [sp, #20]
 800b160:	2322      	movs	r3, #34	; 0x22
 800b162:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b27c <_strtod_l+0x5ac>
 800b166:	6023      	str	r3, [r4, #0]
 800b168:	f04f 0a00 	mov.w	sl, #0
 800b16c:	9b07      	ldr	r3, [sp, #28]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f43f adf2 	beq.w	800ad58 <_strtod_l+0x88>
 800b174:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b176:	4620      	mov	r0, r4
 800b178:	f001 ff26 	bl	800cfc8 <_Bfree>
 800b17c:	9905      	ldr	r1, [sp, #20]
 800b17e:	4620      	mov	r0, r4
 800b180:	f001 ff22 	bl	800cfc8 <_Bfree>
 800b184:	4631      	mov	r1, r6
 800b186:	4620      	mov	r0, r4
 800b188:	f001 ff1e 	bl	800cfc8 <_Bfree>
 800b18c:	9907      	ldr	r1, [sp, #28]
 800b18e:	4620      	mov	r0, r4
 800b190:	f001 ff1a 	bl	800cfc8 <_Bfree>
 800b194:	4629      	mov	r1, r5
 800b196:	4620      	mov	r0, r4
 800b198:	f001 ff16 	bl	800cfc8 <_Bfree>
 800b19c:	e5dc      	b.n	800ad58 <_strtod_l+0x88>
 800b19e:	4b36      	ldr	r3, [pc, #216]	; (800b278 <_strtod_l+0x5a8>)
 800b1a0:	9304      	str	r3, [sp, #16]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b1a8:	4650      	mov	r0, sl
 800b1aa:	4659      	mov	r1, fp
 800b1ac:	4699      	mov	r9, r3
 800b1ae:	f1b8 0f01 	cmp.w	r8, #1
 800b1b2:	dc21      	bgt.n	800b1f8 <_strtod_l+0x528>
 800b1b4:	b10b      	cbz	r3, 800b1ba <_strtod_l+0x4ea>
 800b1b6:	4682      	mov	sl, r0
 800b1b8:	468b      	mov	fp, r1
 800b1ba:	4b2f      	ldr	r3, [pc, #188]	; (800b278 <_strtod_l+0x5a8>)
 800b1bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b1c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b1c4:	4652      	mov	r2, sl
 800b1c6:	465b      	mov	r3, fp
 800b1c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b1cc:	f7f5 fa4c 	bl	8000668 <__aeabi_dmul>
 800b1d0:	4b2a      	ldr	r3, [pc, #168]	; (800b27c <_strtod_l+0x5ac>)
 800b1d2:	460a      	mov	r2, r1
 800b1d4:	400b      	ands	r3, r1
 800b1d6:	492a      	ldr	r1, [pc, #168]	; (800b280 <_strtod_l+0x5b0>)
 800b1d8:	428b      	cmp	r3, r1
 800b1da:	4682      	mov	sl, r0
 800b1dc:	d8bc      	bhi.n	800b158 <_strtod_l+0x488>
 800b1de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b1e2:	428b      	cmp	r3, r1
 800b1e4:	bf86      	itte	hi
 800b1e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b284 <_strtod_l+0x5b4>
 800b1ea:	f04f 3aff 	movhi.w	sl, #4294967295
 800b1ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	9304      	str	r3, [sp, #16]
 800b1f6:	e084      	b.n	800b302 <_strtod_l+0x632>
 800b1f8:	f018 0f01 	tst.w	r8, #1
 800b1fc:	d005      	beq.n	800b20a <_strtod_l+0x53a>
 800b1fe:	9b04      	ldr	r3, [sp, #16]
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	f7f5 fa30 	bl	8000668 <__aeabi_dmul>
 800b208:	2301      	movs	r3, #1
 800b20a:	9a04      	ldr	r2, [sp, #16]
 800b20c:	3208      	adds	r2, #8
 800b20e:	f109 0901 	add.w	r9, r9, #1
 800b212:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b216:	9204      	str	r2, [sp, #16]
 800b218:	e7c9      	b.n	800b1ae <_strtod_l+0x4de>
 800b21a:	d0ea      	beq.n	800b1f2 <_strtod_l+0x522>
 800b21c:	f1c8 0800 	rsb	r8, r8, #0
 800b220:	f018 020f 	ands.w	r2, r8, #15
 800b224:	d00a      	beq.n	800b23c <_strtod_l+0x56c>
 800b226:	4b13      	ldr	r3, [pc, #76]	; (800b274 <_strtod_l+0x5a4>)
 800b228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b22c:	4650      	mov	r0, sl
 800b22e:	4659      	mov	r1, fp
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	f7f5 fb42 	bl	80008bc <__aeabi_ddiv>
 800b238:	4682      	mov	sl, r0
 800b23a:	468b      	mov	fp, r1
 800b23c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b240:	d0d7      	beq.n	800b1f2 <_strtod_l+0x522>
 800b242:	f1b8 0f1f 	cmp.w	r8, #31
 800b246:	dd1f      	ble.n	800b288 <_strtod_l+0x5b8>
 800b248:	2500      	movs	r5, #0
 800b24a:	462e      	mov	r6, r5
 800b24c:	9507      	str	r5, [sp, #28]
 800b24e:	9505      	str	r5, [sp, #20]
 800b250:	2322      	movs	r3, #34	; 0x22
 800b252:	f04f 0a00 	mov.w	sl, #0
 800b256:	f04f 0b00 	mov.w	fp, #0
 800b25a:	6023      	str	r3, [r4, #0]
 800b25c:	e786      	b.n	800b16c <_strtod_l+0x49c>
 800b25e:	bf00      	nop
 800b260:	0800ea21 	.word	0x0800ea21
 800b264:	0800ea64 	.word	0x0800ea64
 800b268:	0800ea19 	.word	0x0800ea19
 800b26c:	0800ec54 	.word	0x0800ec54
 800b270:	0800eb4f 	.word	0x0800eb4f
 800b274:	0800edc8 	.word	0x0800edc8
 800b278:	0800eda0 	.word	0x0800eda0
 800b27c:	7ff00000 	.word	0x7ff00000
 800b280:	7ca00000 	.word	0x7ca00000
 800b284:	7fefffff 	.word	0x7fefffff
 800b288:	f018 0310 	ands.w	r3, r8, #16
 800b28c:	bf18      	it	ne
 800b28e:	236a      	movne	r3, #106	; 0x6a
 800b290:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b640 <_strtod_l+0x970>
 800b294:	9304      	str	r3, [sp, #16]
 800b296:	4650      	mov	r0, sl
 800b298:	4659      	mov	r1, fp
 800b29a:	2300      	movs	r3, #0
 800b29c:	f018 0f01 	tst.w	r8, #1
 800b2a0:	d004      	beq.n	800b2ac <_strtod_l+0x5dc>
 800b2a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b2a6:	f7f5 f9df 	bl	8000668 <__aeabi_dmul>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b2b0:	f109 0908 	add.w	r9, r9, #8
 800b2b4:	d1f2      	bne.n	800b29c <_strtod_l+0x5cc>
 800b2b6:	b10b      	cbz	r3, 800b2bc <_strtod_l+0x5ec>
 800b2b8:	4682      	mov	sl, r0
 800b2ba:	468b      	mov	fp, r1
 800b2bc:	9b04      	ldr	r3, [sp, #16]
 800b2be:	b1c3      	cbz	r3, 800b2f2 <_strtod_l+0x622>
 800b2c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b2c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	4659      	mov	r1, fp
 800b2cc:	dd11      	ble.n	800b2f2 <_strtod_l+0x622>
 800b2ce:	2b1f      	cmp	r3, #31
 800b2d0:	f340 8124 	ble.w	800b51c <_strtod_l+0x84c>
 800b2d4:	2b34      	cmp	r3, #52	; 0x34
 800b2d6:	bfde      	ittt	le
 800b2d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b2dc:	f04f 33ff 	movle.w	r3, #4294967295
 800b2e0:	fa03 f202 	lslle.w	r2, r3, r2
 800b2e4:	f04f 0a00 	mov.w	sl, #0
 800b2e8:	bfcc      	ite	gt
 800b2ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b2ee:	ea02 0b01 	andle.w	fp, r2, r1
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	4650      	mov	r0, sl
 800b2f8:	4659      	mov	r1, fp
 800b2fa:	f7f5 fc1d 	bl	8000b38 <__aeabi_dcmpeq>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d1a2      	bne.n	800b248 <_strtod_l+0x578>
 800b302:	9b07      	ldr	r3, [sp, #28]
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	9908      	ldr	r1, [sp, #32]
 800b308:	462b      	mov	r3, r5
 800b30a:	463a      	mov	r2, r7
 800b30c:	4620      	mov	r0, r4
 800b30e:	f001 fec3 	bl	800d098 <__s2b>
 800b312:	9007      	str	r0, [sp, #28]
 800b314:	2800      	cmp	r0, #0
 800b316:	f43f af1f 	beq.w	800b158 <_strtod_l+0x488>
 800b31a:	9b05      	ldr	r3, [sp, #20]
 800b31c:	1b9e      	subs	r6, r3, r6
 800b31e:	9b06      	ldr	r3, [sp, #24]
 800b320:	2b00      	cmp	r3, #0
 800b322:	bfb4      	ite	lt
 800b324:	4633      	movlt	r3, r6
 800b326:	2300      	movge	r3, #0
 800b328:	930c      	str	r3, [sp, #48]	; 0x30
 800b32a:	9b06      	ldr	r3, [sp, #24]
 800b32c:	2500      	movs	r5, #0
 800b32e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b332:	9312      	str	r3, [sp, #72]	; 0x48
 800b334:	462e      	mov	r6, r5
 800b336:	9b07      	ldr	r3, [sp, #28]
 800b338:	4620      	mov	r0, r4
 800b33a:	6859      	ldr	r1, [r3, #4]
 800b33c:	f001 fe04 	bl	800cf48 <_Balloc>
 800b340:	9005      	str	r0, [sp, #20]
 800b342:	2800      	cmp	r0, #0
 800b344:	f43f af0c 	beq.w	800b160 <_strtod_l+0x490>
 800b348:	9b07      	ldr	r3, [sp, #28]
 800b34a:	691a      	ldr	r2, [r3, #16]
 800b34c:	3202      	adds	r2, #2
 800b34e:	f103 010c 	add.w	r1, r3, #12
 800b352:	0092      	lsls	r2, r2, #2
 800b354:	300c      	adds	r0, #12
 800b356:	f001 fde9 	bl	800cf2c <memcpy>
 800b35a:	ec4b ab10 	vmov	d0, sl, fp
 800b35e:	aa1a      	add	r2, sp, #104	; 0x68
 800b360:	a919      	add	r1, sp, #100	; 0x64
 800b362:	4620      	mov	r0, r4
 800b364:	f002 f9de 	bl	800d724 <__d2b>
 800b368:	ec4b ab18 	vmov	d8, sl, fp
 800b36c:	9018      	str	r0, [sp, #96]	; 0x60
 800b36e:	2800      	cmp	r0, #0
 800b370:	f43f aef6 	beq.w	800b160 <_strtod_l+0x490>
 800b374:	2101      	movs	r1, #1
 800b376:	4620      	mov	r0, r4
 800b378:	f001 ff28 	bl	800d1cc <__i2b>
 800b37c:	4606      	mov	r6, r0
 800b37e:	2800      	cmp	r0, #0
 800b380:	f43f aeee 	beq.w	800b160 <_strtod_l+0x490>
 800b384:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b386:	9904      	ldr	r1, [sp, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	bfab      	itete	ge
 800b38c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b38e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b390:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b392:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b396:	bfac      	ite	ge
 800b398:	eb03 0902 	addge.w	r9, r3, r2
 800b39c:	1ad7      	sublt	r7, r2, r3
 800b39e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b3a0:	eba3 0801 	sub.w	r8, r3, r1
 800b3a4:	4490      	add	r8, r2
 800b3a6:	4ba1      	ldr	r3, [pc, #644]	; (800b62c <_strtod_l+0x95c>)
 800b3a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3ac:	4598      	cmp	r8, r3
 800b3ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b3b2:	f280 80c7 	bge.w	800b544 <_strtod_l+0x874>
 800b3b6:	eba3 0308 	sub.w	r3, r3, r8
 800b3ba:	2b1f      	cmp	r3, #31
 800b3bc:	eba2 0203 	sub.w	r2, r2, r3
 800b3c0:	f04f 0101 	mov.w	r1, #1
 800b3c4:	f300 80b1 	bgt.w	800b52a <_strtod_l+0x85a>
 800b3c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b3cc:	930d      	str	r3, [sp, #52]	; 0x34
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	9308      	str	r3, [sp, #32]
 800b3d2:	eb09 0802 	add.w	r8, r9, r2
 800b3d6:	9b04      	ldr	r3, [sp, #16]
 800b3d8:	45c1      	cmp	r9, r8
 800b3da:	4417      	add	r7, r2
 800b3dc:	441f      	add	r7, r3
 800b3de:	464b      	mov	r3, r9
 800b3e0:	bfa8      	it	ge
 800b3e2:	4643      	movge	r3, r8
 800b3e4:	42bb      	cmp	r3, r7
 800b3e6:	bfa8      	it	ge
 800b3e8:	463b      	movge	r3, r7
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	bfc2      	ittt	gt
 800b3ee:	eba8 0803 	subgt.w	r8, r8, r3
 800b3f2:	1aff      	subgt	r7, r7, r3
 800b3f4:	eba9 0903 	subgt.w	r9, r9, r3
 800b3f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	dd17      	ble.n	800b42e <_strtod_l+0x75e>
 800b3fe:	4631      	mov	r1, r6
 800b400:	461a      	mov	r2, r3
 800b402:	4620      	mov	r0, r4
 800b404:	f001 ffa2 	bl	800d34c <__pow5mult>
 800b408:	4606      	mov	r6, r0
 800b40a:	2800      	cmp	r0, #0
 800b40c:	f43f aea8 	beq.w	800b160 <_strtod_l+0x490>
 800b410:	4601      	mov	r1, r0
 800b412:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b414:	4620      	mov	r0, r4
 800b416:	f001 feef 	bl	800d1f8 <__multiply>
 800b41a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b41c:	2800      	cmp	r0, #0
 800b41e:	f43f ae9f 	beq.w	800b160 <_strtod_l+0x490>
 800b422:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b424:	4620      	mov	r0, r4
 800b426:	f001 fdcf 	bl	800cfc8 <_Bfree>
 800b42a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b42c:	9318      	str	r3, [sp, #96]	; 0x60
 800b42e:	f1b8 0f00 	cmp.w	r8, #0
 800b432:	f300 808c 	bgt.w	800b54e <_strtod_l+0x87e>
 800b436:	9b06      	ldr	r3, [sp, #24]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	dd08      	ble.n	800b44e <_strtod_l+0x77e>
 800b43c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b43e:	9905      	ldr	r1, [sp, #20]
 800b440:	4620      	mov	r0, r4
 800b442:	f001 ff83 	bl	800d34c <__pow5mult>
 800b446:	9005      	str	r0, [sp, #20]
 800b448:	2800      	cmp	r0, #0
 800b44a:	f43f ae89 	beq.w	800b160 <_strtod_l+0x490>
 800b44e:	2f00      	cmp	r7, #0
 800b450:	dd08      	ble.n	800b464 <_strtod_l+0x794>
 800b452:	9905      	ldr	r1, [sp, #20]
 800b454:	463a      	mov	r2, r7
 800b456:	4620      	mov	r0, r4
 800b458:	f001 ffd2 	bl	800d400 <__lshift>
 800b45c:	9005      	str	r0, [sp, #20]
 800b45e:	2800      	cmp	r0, #0
 800b460:	f43f ae7e 	beq.w	800b160 <_strtod_l+0x490>
 800b464:	f1b9 0f00 	cmp.w	r9, #0
 800b468:	dd08      	ble.n	800b47c <_strtod_l+0x7ac>
 800b46a:	4631      	mov	r1, r6
 800b46c:	464a      	mov	r2, r9
 800b46e:	4620      	mov	r0, r4
 800b470:	f001 ffc6 	bl	800d400 <__lshift>
 800b474:	4606      	mov	r6, r0
 800b476:	2800      	cmp	r0, #0
 800b478:	f43f ae72 	beq.w	800b160 <_strtod_l+0x490>
 800b47c:	9a05      	ldr	r2, [sp, #20]
 800b47e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b480:	4620      	mov	r0, r4
 800b482:	f002 f849 	bl	800d518 <__mdiff>
 800b486:	4605      	mov	r5, r0
 800b488:	2800      	cmp	r0, #0
 800b48a:	f43f ae69 	beq.w	800b160 <_strtod_l+0x490>
 800b48e:	68c3      	ldr	r3, [r0, #12]
 800b490:	930b      	str	r3, [sp, #44]	; 0x2c
 800b492:	2300      	movs	r3, #0
 800b494:	60c3      	str	r3, [r0, #12]
 800b496:	4631      	mov	r1, r6
 800b498:	f002 f822 	bl	800d4e0 <__mcmp>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	da60      	bge.n	800b562 <_strtod_l+0x892>
 800b4a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4a2:	ea53 030a 	orrs.w	r3, r3, sl
 800b4a6:	f040 8082 	bne.w	800b5ae <_strtod_l+0x8de>
 800b4aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d17d      	bne.n	800b5ae <_strtod_l+0x8de>
 800b4b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b4b6:	0d1b      	lsrs	r3, r3, #20
 800b4b8:	051b      	lsls	r3, r3, #20
 800b4ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b4be:	d976      	bls.n	800b5ae <_strtod_l+0x8de>
 800b4c0:	696b      	ldr	r3, [r5, #20]
 800b4c2:	b913      	cbnz	r3, 800b4ca <_strtod_l+0x7fa>
 800b4c4:	692b      	ldr	r3, [r5, #16]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	dd71      	ble.n	800b5ae <_strtod_l+0x8de>
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f001 ff96 	bl	800d400 <__lshift>
 800b4d4:	4631      	mov	r1, r6
 800b4d6:	4605      	mov	r5, r0
 800b4d8:	f002 f802 	bl	800d4e0 <__mcmp>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	dd66      	ble.n	800b5ae <_strtod_l+0x8de>
 800b4e0:	9904      	ldr	r1, [sp, #16]
 800b4e2:	4a53      	ldr	r2, [pc, #332]	; (800b630 <_strtod_l+0x960>)
 800b4e4:	465b      	mov	r3, fp
 800b4e6:	2900      	cmp	r1, #0
 800b4e8:	f000 8081 	beq.w	800b5ee <_strtod_l+0x91e>
 800b4ec:	ea02 010b 	and.w	r1, r2, fp
 800b4f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b4f4:	dc7b      	bgt.n	800b5ee <_strtod_l+0x91e>
 800b4f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b4fa:	f77f aea9 	ble.w	800b250 <_strtod_l+0x580>
 800b4fe:	4b4d      	ldr	r3, [pc, #308]	; (800b634 <_strtod_l+0x964>)
 800b500:	4650      	mov	r0, sl
 800b502:	4659      	mov	r1, fp
 800b504:	2200      	movs	r2, #0
 800b506:	f7f5 f8af 	bl	8000668 <__aeabi_dmul>
 800b50a:	460b      	mov	r3, r1
 800b50c:	4303      	orrs	r3, r0
 800b50e:	bf08      	it	eq
 800b510:	2322      	moveq	r3, #34	; 0x22
 800b512:	4682      	mov	sl, r0
 800b514:	468b      	mov	fp, r1
 800b516:	bf08      	it	eq
 800b518:	6023      	streq	r3, [r4, #0]
 800b51a:	e62b      	b.n	800b174 <_strtod_l+0x4a4>
 800b51c:	f04f 32ff 	mov.w	r2, #4294967295
 800b520:	fa02 f303 	lsl.w	r3, r2, r3
 800b524:	ea03 0a0a 	and.w	sl, r3, sl
 800b528:	e6e3      	b.n	800b2f2 <_strtod_l+0x622>
 800b52a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b52e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b532:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b536:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b53a:	fa01 f308 	lsl.w	r3, r1, r8
 800b53e:	9308      	str	r3, [sp, #32]
 800b540:	910d      	str	r1, [sp, #52]	; 0x34
 800b542:	e746      	b.n	800b3d2 <_strtod_l+0x702>
 800b544:	2300      	movs	r3, #0
 800b546:	9308      	str	r3, [sp, #32]
 800b548:	2301      	movs	r3, #1
 800b54a:	930d      	str	r3, [sp, #52]	; 0x34
 800b54c:	e741      	b.n	800b3d2 <_strtod_l+0x702>
 800b54e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b550:	4642      	mov	r2, r8
 800b552:	4620      	mov	r0, r4
 800b554:	f001 ff54 	bl	800d400 <__lshift>
 800b558:	9018      	str	r0, [sp, #96]	; 0x60
 800b55a:	2800      	cmp	r0, #0
 800b55c:	f47f af6b 	bne.w	800b436 <_strtod_l+0x766>
 800b560:	e5fe      	b.n	800b160 <_strtod_l+0x490>
 800b562:	465f      	mov	r7, fp
 800b564:	d16e      	bne.n	800b644 <_strtod_l+0x974>
 800b566:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b56c:	b342      	cbz	r2, 800b5c0 <_strtod_l+0x8f0>
 800b56e:	4a32      	ldr	r2, [pc, #200]	; (800b638 <_strtod_l+0x968>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d128      	bne.n	800b5c6 <_strtod_l+0x8f6>
 800b574:	9b04      	ldr	r3, [sp, #16]
 800b576:	4651      	mov	r1, sl
 800b578:	b1eb      	cbz	r3, 800b5b6 <_strtod_l+0x8e6>
 800b57a:	4b2d      	ldr	r3, [pc, #180]	; (800b630 <_strtod_l+0x960>)
 800b57c:	403b      	ands	r3, r7
 800b57e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b582:	f04f 32ff 	mov.w	r2, #4294967295
 800b586:	d819      	bhi.n	800b5bc <_strtod_l+0x8ec>
 800b588:	0d1b      	lsrs	r3, r3, #20
 800b58a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b58e:	fa02 f303 	lsl.w	r3, r2, r3
 800b592:	4299      	cmp	r1, r3
 800b594:	d117      	bne.n	800b5c6 <_strtod_l+0x8f6>
 800b596:	4b29      	ldr	r3, [pc, #164]	; (800b63c <_strtod_l+0x96c>)
 800b598:	429f      	cmp	r7, r3
 800b59a:	d102      	bne.n	800b5a2 <_strtod_l+0x8d2>
 800b59c:	3101      	adds	r1, #1
 800b59e:	f43f addf 	beq.w	800b160 <_strtod_l+0x490>
 800b5a2:	4b23      	ldr	r3, [pc, #140]	; (800b630 <_strtod_l+0x960>)
 800b5a4:	403b      	ands	r3, r7
 800b5a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b5aa:	f04f 0a00 	mov.w	sl, #0
 800b5ae:	9b04      	ldr	r3, [sp, #16]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1a4      	bne.n	800b4fe <_strtod_l+0x82e>
 800b5b4:	e5de      	b.n	800b174 <_strtod_l+0x4a4>
 800b5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ba:	e7ea      	b.n	800b592 <_strtod_l+0x8c2>
 800b5bc:	4613      	mov	r3, r2
 800b5be:	e7e8      	b.n	800b592 <_strtod_l+0x8c2>
 800b5c0:	ea53 030a 	orrs.w	r3, r3, sl
 800b5c4:	d08c      	beq.n	800b4e0 <_strtod_l+0x810>
 800b5c6:	9b08      	ldr	r3, [sp, #32]
 800b5c8:	b1db      	cbz	r3, 800b602 <_strtod_l+0x932>
 800b5ca:	423b      	tst	r3, r7
 800b5cc:	d0ef      	beq.n	800b5ae <_strtod_l+0x8de>
 800b5ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5d0:	9a04      	ldr	r2, [sp, #16]
 800b5d2:	4650      	mov	r0, sl
 800b5d4:	4659      	mov	r1, fp
 800b5d6:	b1c3      	cbz	r3, 800b60a <_strtod_l+0x93a>
 800b5d8:	f7ff fb5c 	bl	800ac94 <sulp>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	ec51 0b18 	vmov	r0, r1, d8
 800b5e4:	f7f4 fe8a 	bl	80002fc <__adddf3>
 800b5e8:	4682      	mov	sl, r0
 800b5ea:	468b      	mov	fp, r1
 800b5ec:	e7df      	b.n	800b5ae <_strtod_l+0x8de>
 800b5ee:	4013      	ands	r3, r2
 800b5f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b5f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b5f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b5fc:	f04f 3aff 	mov.w	sl, #4294967295
 800b600:	e7d5      	b.n	800b5ae <_strtod_l+0x8de>
 800b602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b604:	ea13 0f0a 	tst.w	r3, sl
 800b608:	e7e0      	b.n	800b5cc <_strtod_l+0x8fc>
 800b60a:	f7ff fb43 	bl	800ac94 <sulp>
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	ec51 0b18 	vmov	r0, r1, d8
 800b616:	f7f4 fe6f 	bl	80002f8 <__aeabi_dsub>
 800b61a:	2200      	movs	r2, #0
 800b61c:	2300      	movs	r3, #0
 800b61e:	4682      	mov	sl, r0
 800b620:	468b      	mov	fp, r1
 800b622:	f7f5 fa89 	bl	8000b38 <__aeabi_dcmpeq>
 800b626:	2800      	cmp	r0, #0
 800b628:	d0c1      	beq.n	800b5ae <_strtod_l+0x8de>
 800b62a:	e611      	b.n	800b250 <_strtod_l+0x580>
 800b62c:	fffffc02 	.word	0xfffffc02
 800b630:	7ff00000 	.word	0x7ff00000
 800b634:	39500000 	.word	0x39500000
 800b638:	000fffff 	.word	0x000fffff
 800b63c:	7fefffff 	.word	0x7fefffff
 800b640:	0800ea78 	.word	0x0800ea78
 800b644:	4631      	mov	r1, r6
 800b646:	4628      	mov	r0, r5
 800b648:	f002 f8c8 	bl	800d7dc <__ratio>
 800b64c:	ec59 8b10 	vmov	r8, r9, d0
 800b650:	ee10 0a10 	vmov	r0, s0
 800b654:	2200      	movs	r2, #0
 800b656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b65a:	4649      	mov	r1, r9
 800b65c:	f7f5 fa80 	bl	8000b60 <__aeabi_dcmple>
 800b660:	2800      	cmp	r0, #0
 800b662:	d07a      	beq.n	800b75a <_strtod_l+0xa8a>
 800b664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b666:	2b00      	cmp	r3, #0
 800b668:	d04a      	beq.n	800b700 <_strtod_l+0xa30>
 800b66a:	4b95      	ldr	r3, [pc, #596]	; (800b8c0 <_strtod_l+0xbf0>)
 800b66c:	2200      	movs	r2, #0
 800b66e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b672:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b8c0 <_strtod_l+0xbf0>
 800b676:	f04f 0800 	mov.w	r8, #0
 800b67a:	4b92      	ldr	r3, [pc, #584]	; (800b8c4 <_strtod_l+0xbf4>)
 800b67c:	403b      	ands	r3, r7
 800b67e:	930d      	str	r3, [sp, #52]	; 0x34
 800b680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b682:	4b91      	ldr	r3, [pc, #580]	; (800b8c8 <_strtod_l+0xbf8>)
 800b684:	429a      	cmp	r2, r3
 800b686:	f040 80b0 	bne.w	800b7ea <_strtod_l+0xb1a>
 800b68a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b68e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b692:	ec4b ab10 	vmov	d0, sl, fp
 800b696:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b69a:	f001 ffc7 	bl	800d62c <__ulp>
 800b69e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6a2:	ec53 2b10 	vmov	r2, r3, d0
 800b6a6:	f7f4 ffdf 	bl	8000668 <__aeabi_dmul>
 800b6aa:	4652      	mov	r2, sl
 800b6ac:	465b      	mov	r3, fp
 800b6ae:	f7f4 fe25 	bl	80002fc <__adddf3>
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4983      	ldr	r1, [pc, #524]	; (800b8c4 <_strtod_l+0xbf4>)
 800b6b6:	4a85      	ldr	r2, [pc, #532]	; (800b8cc <_strtod_l+0xbfc>)
 800b6b8:	4019      	ands	r1, r3
 800b6ba:	4291      	cmp	r1, r2
 800b6bc:	4682      	mov	sl, r0
 800b6be:	d960      	bls.n	800b782 <_strtod_l+0xab2>
 800b6c0:	ee18 3a90 	vmov	r3, s17
 800b6c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d104      	bne.n	800b6d6 <_strtod_l+0xa06>
 800b6cc:	ee18 3a10 	vmov	r3, s16
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	f43f ad45 	beq.w	800b160 <_strtod_l+0x490>
 800b6d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b8d8 <_strtod_l+0xc08>
 800b6da:	f04f 3aff 	mov.w	sl, #4294967295
 800b6de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f001 fc71 	bl	800cfc8 <_Bfree>
 800b6e6:	9905      	ldr	r1, [sp, #20]
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	f001 fc6d 	bl	800cfc8 <_Bfree>
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f001 fc69 	bl	800cfc8 <_Bfree>
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f001 fc65 	bl	800cfc8 <_Bfree>
 800b6fe:	e61a      	b.n	800b336 <_strtod_l+0x666>
 800b700:	f1ba 0f00 	cmp.w	sl, #0
 800b704:	d11b      	bne.n	800b73e <_strtod_l+0xa6e>
 800b706:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b70a:	b9f3      	cbnz	r3, 800b74a <_strtod_l+0xa7a>
 800b70c:	4b6c      	ldr	r3, [pc, #432]	; (800b8c0 <_strtod_l+0xbf0>)
 800b70e:	2200      	movs	r2, #0
 800b710:	4640      	mov	r0, r8
 800b712:	4649      	mov	r1, r9
 800b714:	f7f5 fa1a 	bl	8000b4c <__aeabi_dcmplt>
 800b718:	b9d0      	cbnz	r0, 800b750 <_strtod_l+0xa80>
 800b71a:	4640      	mov	r0, r8
 800b71c:	4649      	mov	r1, r9
 800b71e:	4b6c      	ldr	r3, [pc, #432]	; (800b8d0 <_strtod_l+0xc00>)
 800b720:	2200      	movs	r2, #0
 800b722:	f7f4 ffa1 	bl	8000668 <__aeabi_dmul>
 800b726:	4680      	mov	r8, r0
 800b728:	4689      	mov	r9, r1
 800b72a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b72e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b732:	9315      	str	r3, [sp, #84]	; 0x54
 800b734:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b738:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b73c:	e79d      	b.n	800b67a <_strtod_l+0x9aa>
 800b73e:	f1ba 0f01 	cmp.w	sl, #1
 800b742:	d102      	bne.n	800b74a <_strtod_l+0xa7a>
 800b744:	2f00      	cmp	r7, #0
 800b746:	f43f ad83 	beq.w	800b250 <_strtod_l+0x580>
 800b74a:	4b62      	ldr	r3, [pc, #392]	; (800b8d4 <_strtod_l+0xc04>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	e78e      	b.n	800b66e <_strtod_l+0x99e>
 800b750:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b8d0 <_strtod_l+0xc00>
 800b754:	f04f 0800 	mov.w	r8, #0
 800b758:	e7e7      	b.n	800b72a <_strtod_l+0xa5a>
 800b75a:	4b5d      	ldr	r3, [pc, #372]	; (800b8d0 <_strtod_l+0xc00>)
 800b75c:	4640      	mov	r0, r8
 800b75e:	4649      	mov	r1, r9
 800b760:	2200      	movs	r2, #0
 800b762:	f7f4 ff81 	bl	8000668 <__aeabi_dmul>
 800b766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b768:	4680      	mov	r8, r0
 800b76a:	4689      	mov	r9, r1
 800b76c:	b933      	cbnz	r3, 800b77c <_strtod_l+0xaac>
 800b76e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b772:	900e      	str	r0, [sp, #56]	; 0x38
 800b774:	930f      	str	r3, [sp, #60]	; 0x3c
 800b776:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b77a:	e7dd      	b.n	800b738 <_strtod_l+0xa68>
 800b77c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b780:	e7f9      	b.n	800b776 <_strtod_l+0xaa6>
 800b782:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b786:	9b04      	ldr	r3, [sp, #16]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1a8      	bne.n	800b6de <_strtod_l+0xa0e>
 800b78c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b790:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b792:	0d1b      	lsrs	r3, r3, #20
 800b794:	051b      	lsls	r3, r3, #20
 800b796:	429a      	cmp	r2, r3
 800b798:	d1a1      	bne.n	800b6de <_strtod_l+0xa0e>
 800b79a:	4640      	mov	r0, r8
 800b79c:	4649      	mov	r1, r9
 800b79e:	f7f5 fac3 	bl	8000d28 <__aeabi_d2lz>
 800b7a2:	f7f4 ff33 	bl	800060c <__aeabi_l2d>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	4640      	mov	r0, r8
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	f7f4 fda3 	bl	80002f8 <__aeabi_dsub>
 800b7b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7b8:	ea43 030a 	orr.w	r3, r3, sl
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	4680      	mov	r8, r0
 800b7c0:	4689      	mov	r9, r1
 800b7c2:	d055      	beq.n	800b870 <_strtod_l+0xba0>
 800b7c4:	a336      	add	r3, pc, #216	; (adr r3, 800b8a0 <_strtod_l+0xbd0>)
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	f7f5 f9bf 	bl	8000b4c <__aeabi_dcmplt>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	f47f acd0 	bne.w	800b174 <_strtod_l+0x4a4>
 800b7d4:	a334      	add	r3, pc, #208	; (adr r3, 800b8a8 <_strtod_l+0xbd8>)
 800b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7da:	4640      	mov	r0, r8
 800b7dc:	4649      	mov	r1, r9
 800b7de:	f7f5 f9d3 	bl	8000b88 <__aeabi_dcmpgt>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	f43f af7b 	beq.w	800b6de <_strtod_l+0xa0e>
 800b7e8:	e4c4      	b.n	800b174 <_strtod_l+0x4a4>
 800b7ea:	9b04      	ldr	r3, [sp, #16]
 800b7ec:	b333      	cbz	r3, 800b83c <_strtod_l+0xb6c>
 800b7ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b7f4:	d822      	bhi.n	800b83c <_strtod_l+0xb6c>
 800b7f6:	a32e      	add	r3, pc, #184	; (adr r3, 800b8b0 <_strtod_l+0xbe0>)
 800b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	4649      	mov	r1, r9
 800b800:	f7f5 f9ae 	bl	8000b60 <__aeabi_dcmple>
 800b804:	b1a0      	cbz	r0, 800b830 <_strtod_l+0xb60>
 800b806:	4649      	mov	r1, r9
 800b808:	4640      	mov	r0, r8
 800b80a:	f7f5 fa05 	bl	8000c18 <__aeabi_d2uiz>
 800b80e:	2801      	cmp	r0, #1
 800b810:	bf38      	it	cc
 800b812:	2001      	movcc	r0, #1
 800b814:	f7f4 feae 	bl	8000574 <__aeabi_ui2d>
 800b818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b81a:	4680      	mov	r8, r0
 800b81c:	4689      	mov	r9, r1
 800b81e:	bb23      	cbnz	r3, 800b86a <_strtod_l+0xb9a>
 800b820:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b824:	9010      	str	r0, [sp, #64]	; 0x40
 800b826:	9311      	str	r3, [sp, #68]	; 0x44
 800b828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b82c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b832:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b834:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b838:	1a9b      	subs	r3, r3, r2
 800b83a:	9309      	str	r3, [sp, #36]	; 0x24
 800b83c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b840:	eeb0 0a48 	vmov.f32	s0, s16
 800b844:	eef0 0a68 	vmov.f32	s1, s17
 800b848:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b84c:	f001 feee 	bl	800d62c <__ulp>
 800b850:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b854:	ec53 2b10 	vmov	r2, r3, d0
 800b858:	f7f4 ff06 	bl	8000668 <__aeabi_dmul>
 800b85c:	ec53 2b18 	vmov	r2, r3, d8
 800b860:	f7f4 fd4c 	bl	80002fc <__adddf3>
 800b864:	4682      	mov	sl, r0
 800b866:	468b      	mov	fp, r1
 800b868:	e78d      	b.n	800b786 <_strtod_l+0xab6>
 800b86a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b86e:	e7db      	b.n	800b828 <_strtod_l+0xb58>
 800b870:	a311      	add	r3, pc, #68	; (adr r3, 800b8b8 <_strtod_l+0xbe8>)
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	f7f5 f969 	bl	8000b4c <__aeabi_dcmplt>
 800b87a:	e7b2      	b.n	800b7e2 <_strtod_l+0xb12>
 800b87c:	2300      	movs	r3, #0
 800b87e:	930a      	str	r3, [sp, #40]	; 0x28
 800b880:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b882:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b884:	6013      	str	r3, [r2, #0]
 800b886:	f7ff ba6b 	b.w	800ad60 <_strtod_l+0x90>
 800b88a:	2a65      	cmp	r2, #101	; 0x65
 800b88c:	f43f ab5f 	beq.w	800af4e <_strtod_l+0x27e>
 800b890:	2a45      	cmp	r2, #69	; 0x45
 800b892:	f43f ab5c 	beq.w	800af4e <_strtod_l+0x27e>
 800b896:	2301      	movs	r3, #1
 800b898:	f7ff bb94 	b.w	800afc4 <_strtod_l+0x2f4>
 800b89c:	f3af 8000 	nop.w
 800b8a0:	94a03595 	.word	0x94a03595
 800b8a4:	3fdfffff 	.word	0x3fdfffff
 800b8a8:	35afe535 	.word	0x35afe535
 800b8ac:	3fe00000 	.word	0x3fe00000
 800b8b0:	ffc00000 	.word	0xffc00000
 800b8b4:	41dfffff 	.word	0x41dfffff
 800b8b8:	94a03595 	.word	0x94a03595
 800b8bc:	3fcfffff 	.word	0x3fcfffff
 800b8c0:	3ff00000 	.word	0x3ff00000
 800b8c4:	7ff00000 	.word	0x7ff00000
 800b8c8:	7fe00000 	.word	0x7fe00000
 800b8cc:	7c9fffff 	.word	0x7c9fffff
 800b8d0:	3fe00000 	.word	0x3fe00000
 800b8d4:	bff00000 	.word	0xbff00000
 800b8d8:	7fefffff 	.word	0x7fefffff

0800b8dc <_strtod_r>:
 800b8dc:	4b01      	ldr	r3, [pc, #4]	; (800b8e4 <_strtod_r+0x8>)
 800b8de:	f7ff b9f7 	b.w	800acd0 <_strtod_l>
 800b8e2:	bf00      	nop
 800b8e4:	20000274 	.word	0x20000274

0800b8e8 <strtok>:
 800b8e8:	4b16      	ldr	r3, [pc, #88]	; (800b944 <strtok+0x5c>)
 800b8ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8ec:	681e      	ldr	r6, [r3, #0]
 800b8ee:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	b9fc      	cbnz	r4, 800b934 <strtok+0x4c>
 800b8f4:	2050      	movs	r0, #80	; 0x50
 800b8f6:	9101      	str	r1, [sp, #4]
 800b8f8:	f001 fafe 	bl	800cef8 <malloc>
 800b8fc:	9901      	ldr	r1, [sp, #4]
 800b8fe:	65b0      	str	r0, [r6, #88]	; 0x58
 800b900:	4602      	mov	r2, r0
 800b902:	b920      	cbnz	r0, 800b90e <strtok+0x26>
 800b904:	4b10      	ldr	r3, [pc, #64]	; (800b948 <strtok+0x60>)
 800b906:	4811      	ldr	r0, [pc, #68]	; (800b94c <strtok+0x64>)
 800b908:	2157      	movs	r1, #87	; 0x57
 800b90a:	f000 f8d7 	bl	800babc <__assert_func>
 800b90e:	e9c0 4400 	strd	r4, r4, [r0]
 800b912:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b916:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b91a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b91e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b922:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b926:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b92a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b92e:	6184      	str	r4, [r0, #24]
 800b930:	7704      	strb	r4, [r0, #28]
 800b932:	6244      	str	r4, [r0, #36]	; 0x24
 800b934:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b936:	2301      	movs	r3, #1
 800b938:	4628      	mov	r0, r5
 800b93a:	b002      	add	sp, #8
 800b93c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b940:	f000 b806 	b.w	800b950 <__strtok_r>
 800b944:	2000020c 	.word	0x2000020c
 800b948:	0800eaa0 	.word	0x0800eaa0
 800b94c:	0800eab7 	.word	0x0800eab7

0800b950 <__strtok_r>:
 800b950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b952:	b908      	cbnz	r0, 800b958 <__strtok_r+0x8>
 800b954:	6810      	ldr	r0, [r2, #0]
 800b956:	b188      	cbz	r0, 800b97c <__strtok_r+0x2c>
 800b958:	4604      	mov	r4, r0
 800b95a:	4620      	mov	r0, r4
 800b95c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b960:	460f      	mov	r7, r1
 800b962:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b966:	b91e      	cbnz	r6, 800b970 <__strtok_r+0x20>
 800b968:	b965      	cbnz	r5, 800b984 <__strtok_r+0x34>
 800b96a:	6015      	str	r5, [r2, #0]
 800b96c:	4628      	mov	r0, r5
 800b96e:	e005      	b.n	800b97c <__strtok_r+0x2c>
 800b970:	42b5      	cmp	r5, r6
 800b972:	d1f6      	bne.n	800b962 <__strtok_r+0x12>
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1f0      	bne.n	800b95a <__strtok_r+0xa>
 800b978:	6014      	str	r4, [r2, #0]
 800b97a:	7003      	strb	r3, [r0, #0]
 800b97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b97e:	461c      	mov	r4, r3
 800b980:	e00c      	b.n	800b99c <__strtok_r+0x4c>
 800b982:	b915      	cbnz	r5, 800b98a <__strtok_r+0x3a>
 800b984:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b988:	460e      	mov	r6, r1
 800b98a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b98e:	42ab      	cmp	r3, r5
 800b990:	d1f7      	bne.n	800b982 <__strtok_r+0x32>
 800b992:	2b00      	cmp	r3, #0
 800b994:	d0f3      	beq.n	800b97e <__strtok_r+0x2e>
 800b996:	2300      	movs	r3, #0
 800b998:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b99c:	6014      	str	r4, [r2, #0]
 800b99e:	e7ed      	b.n	800b97c <__strtok_r+0x2c>

0800b9a0 <_strtol_l.constprop.0>:
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a6:	d001      	beq.n	800b9ac <_strtol_l.constprop.0+0xc>
 800b9a8:	2b24      	cmp	r3, #36	; 0x24
 800b9aa:	d906      	bls.n	800b9ba <_strtol_l.constprop.0+0x1a>
 800b9ac:	f7fe faa0 	bl	8009ef0 <__errno>
 800b9b0:	2316      	movs	r3, #22
 800b9b2:	6003      	str	r3, [r0, #0]
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800baa0 <_strtol_l.constprop.0+0x100>
 800b9be:	460d      	mov	r5, r1
 800b9c0:	462e      	mov	r6, r5
 800b9c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b9ca:	f017 0708 	ands.w	r7, r7, #8
 800b9ce:	d1f7      	bne.n	800b9c0 <_strtol_l.constprop.0+0x20>
 800b9d0:	2c2d      	cmp	r4, #45	; 0x2d
 800b9d2:	d132      	bne.n	800ba3a <_strtol_l.constprop.0+0x9a>
 800b9d4:	782c      	ldrb	r4, [r5, #0]
 800b9d6:	2701      	movs	r7, #1
 800b9d8:	1cb5      	adds	r5, r6, #2
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d05b      	beq.n	800ba96 <_strtol_l.constprop.0+0xf6>
 800b9de:	2b10      	cmp	r3, #16
 800b9e0:	d109      	bne.n	800b9f6 <_strtol_l.constprop.0+0x56>
 800b9e2:	2c30      	cmp	r4, #48	; 0x30
 800b9e4:	d107      	bne.n	800b9f6 <_strtol_l.constprop.0+0x56>
 800b9e6:	782c      	ldrb	r4, [r5, #0]
 800b9e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b9ec:	2c58      	cmp	r4, #88	; 0x58
 800b9ee:	d14d      	bne.n	800ba8c <_strtol_l.constprop.0+0xec>
 800b9f0:	786c      	ldrb	r4, [r5, #1]
 800b9f2:	2310      	movs	r3, #16
 800b9f4:	3502      	adds	r5, #2
 800b9f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b9fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9fe:	f04f 0c00 	mov.w	ip, #0
 800ba02:	fbb8 f9f3 	udiv	r9, r8, r3
 800ba06:	4666      	mov	r6, ip
 800ba08:	fb03 8a19 	mls	sl, r3, r9, r8
 800ba0c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ba10:	f1be 0f09 	cmp.w	lr, #9
 800ba14:	d816      	bhi.n	800ba44 <_strtol_l.constprop.0+0xa4>
 800ba16:	4674      	mov	r4, lr
 800ba18:	42a3      	cmp	r3, r4
 800ba1a:	dd24      	ble.n	800ba66 <_strtol_l.constprop.0+0xc6>
 800ba1c:	f1bc 0f00 	cmp.w	ip, #0
 800ba20:	db1e      	blt.n	800ba60 <_strtol_l.constprop.0+0xc0>
 800ba22:	45b1      	cmp	r9, r6
 800ba24:	d31c      	bcc.n	800ba60 <_strtol_l.constprop.0+0xc0>
 800ba26:	d101      	bne.n	800ba2c <_strtol_l.constprop.0+0x8c>
 800ba28:	45a2      	cmp	sl, r4
 800ba2a:	db19      	blt.n	800ba60 <_strtol_l.constprop.0+0xc0>
 800ba2c:	fb06 4603 	mla	r6, r6, r3, r4
 800ba30:	f04f 0c01 	mov.w	ip, #1
 800ba34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba38:	e7e8      	b.n	800ba0c <_strtol_l.constprop.0+0x6c>
 800ba3a:	2c2b      	cmp	r4, #43	; 0x2b
 800ba3c:	bf04      	itt	eq
 800ba3e:	782c      	ldrbeq	r4, [r5, #0]
 800ba40:	1cb5      	addeq	r5, r6, #2
 800ba42:	e7ca      	b.n	800b9da <_strtol_l.constprop.0+0x3a>
 800ba44:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ba48:	f1be 0f19 	cmp.w	lr, #25
 800ba4c:	d801      	bhi.n	800ba52 <_strtol_l.constprop.0+0xb2>
 800ba4e:	3c37      	subs	r4, #55	; 0x37
 800ba50:	e7e2      	b.n	800ba18 <_strtol_l.constprop.0+0x78>
 800ba52:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ba56:	f1be 0f19 	cmp.w	lr, #25
 800ba5a:	d804      	bhi.n	800ba66 <_strtol_l.constprop.0+0xc6>
 800ba5c:	3c57      	subs	r4, #87	; 0x57
 800ba5e:	e7db      	b.n	800ba18 <_strtol_l.constprop.0+0x78>
 800ba60:	f04f 3cff 	mov.w	ip, #4294967295
 800ba64:	e7e6      	b.n	800ba34 <_strtol_l.constprop.0+0x94>
 800ba66:	f1bc 0f00 	cmp.w	ip, #0
 800ba6a:	da05      	bge.n	800ba78 <_strtol_l.constprop.0+0xd8>
 800ba6c:	2322      	movs	r3, #34	; 0x22
 800ba6e:	6003      	str	r3, [r0, #0]
 800ba70:	4646      	mov	r6, r8
 800ba72:	b942      	cbnz	r2, 800ba86 <_strtol_l.constprop.0+0xe6>
 800ba74:	4630      	mov	r0, r6
 800ba76:	e79e      	b.n	800b9b6 <_strtol_l.constprop.0+0x16>
 800ba78:	b107      	cbz	r7, 800ba7c <_strtol_l.constprop.0+0xdc>
 800ba7a:	4276      	negs	r6, r6
 800ba7c:	2a00      	cmp	r2, #0
 800ba7e:	d0f9      	beq.n	800ba74 <_strtol_l.constprop.0+0xd4>
 800ba80:	f1bc 0f00 	cmp.w	ip, #0
 800ba84:	d000      	beq.n	800ba88 <_strtol_l.constprop.0+0xe8>
 800ba86:	1e69      	subs	r1, r5, #1
 800ba88:	6011      	str	r1, [r2, #0]
 800ba8a:	e7f3      	b.n	800ba74 <_strtol_l.constprop.0+0xd4>
 800ba8c:	2430      	movs	r4, #48	; 0x30
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1b1      	bne.n	800b9f6 <_strtol_l.constprop.0+0x56>
 800ba92:	2308      	movs	r3, #8
 800ba94:	e7af      	b.n	800b9f6 <_strtol_l.constprop.0+0x56>
 800ba96:	2c30      	cmp	r4, #48	; 0x30
 800ba98:	d0a5      	beq.n	800b9e6 <_strtol_l.constprop.0+0x46>
 800ba9a:	230a      	movs	r3, #10
 800ba9c:	e7ab      	b.n	800b9f6 <_strtol_l.constprop.0+0x56>
 800ba9e:	bf00      	nop
 800baa0:	0800eb51 	.word	0x0800eb51

0800baa4 <_strtol_r>:
 800baa4:	f7ff bf7c 	b.w	800b9a0 <_strtol_l.constprop.0>

0800baa8 <strtol>:
 800baa8:	4613      	mov	r3, r2
 800baaa:	460a      	mov	r2, r1
 800baac:	4601      	mov	r1, r0
 800baae:	4802      	ldr	r0, [pc, #8]	; (800bab8 <strtol+0x10>)
 800bab0:	6800      	ldr	r0, [r0, #0]
 800bab2:	f7ff bf75 	b.w	800b9a0 <_strtol_l.constprop.0>
 800bab6:	bf00      	nop
 800bab8:	2000020c 	.word	0x2000020c

0800babc <__assert_func>:
 800babc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800babe:	4614      	mov	r4, r2
 800bac0:	461a      	mov	r2, r3
 800bac2:	4b09      	ldr	r3, [pc, #36]	; (800bae8 <__assert_func+0x2c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4605      	mov	r5, r0
 800bac8:	68d8      	ldr	r0, [r3, #12]
 800baca:	b14c      	cbz	r4, 800bae0 <__assert_func+0x24>
 800bacc:	4b07      	ldr	r3, [pc, #28]	; (800baec <__assert_func+0x30>)
 800bace:	9100      	str	r1, [sp, #0]
 800bad0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bad4:	4906      	ldr	r1, [pc, #24]	; (800baf0 <__assert_func+0x34>)
 800bad6:	462b      	mov	r3, r5
 800bad8:	f000 fe88 	bl	800c7ec <fiprintf>
 800badc:	f002 fb9e 	bl	800e21c <abort>
 800bae0:	4b04      	ldr	r3, [pc, #16]	; (800baf4 <__assert_func+0x38>)
 800bae2:	461c      	mov	r4, r3
 800bae4:	e7f3      	b.n	800bace <__assert_func+0x12>
 800bae6:	bf00      	nop
 800bae8:	2000020c 	.word	0x2000020c
 800baec:	0800eb14 	.word	0x0800eb14
 800baf0:	0800eb21 	.word	0x0800eb21
 800baf4:	0800eb4f 	.word	0x0800eb4f

0800baf8 <quorem>:
 800baf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafc:	6903      	ldr	r3, [r0, #16]
 800bafe:	690c      	ldr	r4, [r1, #16]
 800bb00:	42a3      	cmp	r3, r4
 800bb02:	4607      	mov	r7, r0
 800bb04:	f2c0 8081 	blt.w	800bc0a <quorem+0x112>
 800bb08:	3c01      	subs	r4, #1
 800bb0a:	f101 0814 	add.w	r8, r1, #20
 800bb0e:	f100 0514 	add.w	r5, r0, #20
 800bb12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb16:	9301      	str	r3, [sp, #4]
 800bb18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb20:	3301      	adds	r3, #1
 800bb22:	429a      	cmp	r2, r3
 800bb24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb2c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb30:	d331      	bcc.n	800bb96 <quorem+0x9e>
 800bb32:	f04f 0e00 	mov.w	lr, #0
 800bb36:	4640      	mov	r0, r8
 800bb38:	46ac      	mov	ip, r5
 800bb3a:	46f2      	mov	sl, lr
 800bb3c:	f850 2b04 	ldr.w	r2, [r0], #4
 800bb40:	b293      	uxth	r3, r2
 800bb42:	fb06 e303 	mla	r3, r6, r3, lr
 800bb46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	ebaa 0303 	sub.w	r3, sl, r3
 800bb50:	f8dc a000 	ldr.w	sl, [ip]
 800bb54:	0c12      	lsrs	r2, r2, #16
 800bb56:	fa13 f38a 	uxtah	r3, r3, sl
 800bb5a:	fb06 e202 	mla	r2, r6, r2, lr
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	9b00      	ldr	r3, [sp, #0]
 800bb62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb66:	b292      	uxth	r2, r2
 800bb68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bb6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb70:	f8bd 3000 	ldrh.w	r3, [sp]
 800bb74:	4581      	cmp	r9, r0
 800bb76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb7a:	f84c 3b04 	str.w	r3, [ip], #4
 800bb7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bb82:	d2db      	bcs.n	800bb3c <quorem+0x44>
 800bb84:	f855 300b 	ldr.w	r3, [r5, fp]
 800bb88:	b92b      	cbnz	r3, 800bb96 <quorem+0x9e>
 800bb8a:	9b01      	ldr	r3, [sp, #4]
 800bb8c:	3b04      	subs	r3, #4
 800bb8e:	429d      	cmp	r5, r3
 800bb90:	461a      	mov	r2, r3
 800bb92:	d32e      	bcc.n	800bbf2 <quorem+0xfa>
 800bb94:	613c      	str	r4, [r7, #16]
 800bb96:	4638      	mov	r0, r7
 800bb98:	f001 fca2 	bl	800d4e0 <__mcmp>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	db24      	blt.n	800bbea <quorem+0xf2>
 800bba0:	3601      	adds	r6, #1
 800bba2:	4628      	mov	r0, r5
 800bba4:	f04f 0c00 	mov.w	ip, #0
 800bba8:	f858 2b04 	ldr.w	r2, [r8], #4
 800bbac:	f8d0 e000 	ldr.w	lr, [r0]
 800bbb0:	b293      	uxth	r3, r2
 800bbb2:	ebac 0303 	sub.w	r3, ip, r3
 800bbb6:	0c12      	lsrs	r2, r2, #16
 800bbb8:	fa13 f38e 	uxtah	r3, r3, lr
 800bbbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bbc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbca:	45c1      	cmp	r9, r8
 800bbcc:	f840 3b04 	str.w	r3, [r0], #4
 800bbd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bbd4:	d2e8      	bcs.n	800bba8 <quorem+0xb0>
 800bbd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbde:	b922      	cbnz	r2, 800bbea <quorem+0xf2>
 800bbe0:	3b04      	subs	r3, #4
 800bbe2:	429d      	cmp	r5, r3
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	d30a      	bcc.n	800bbfe <quorem+0x106>
 800bbe8:	613c      	str	r4, [r7, #16]
 800bbea:	4630      	mov	r0, r6
 800bbec:	b003      	add	sp, #12
 800bbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf2:	6812      	ldr	r2, [r2, #0]
 800bbf4:	3b04      	subs	r3, #4
 800bbf6:	2a00      	cmp	r2, #0
 800bbf8:	d1cc      	bne.n	800bb94 <quorem+0x9c>
 800bbfa:	3c01      	subs	r4, #1
 800bbfc:	e7c7      	b.n	800bb8e <quorem+0x96>
 800bbfe:	6812      	ldr	r2, [r2, #0]
 800bc00:	3b04      	subs	r3, #4
 800bc02:	2a00      	cmp	r2, #0
 800bc04:	d1f0      	bne.n	800bbe8 <quorem+0xf0>
 800bc06:	3c01      	subs	r4, #1
 800bc08:	e7eb      	b.n	800bbe2 <quorem+0xea>
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	e7ee      	b.n	800bbec <quorem+0xf4>
	...

0800bc10 <_dtoa_r>:
 800bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	ed2d 8b04 	vpush	{d8-d9}
 800bc18:	ec57 6b10 	vmov	r6, r7, d0
 800bc1c:	b093      	sub	sp, #76	; 0x4c
 800bc1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bc20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bc24:	9106      	str	r1, [sp, #24]
 800bc26:	ee10 aa10 	vmov	sl, s0
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	9209      	str	r2, [sp, #36]	; 0x24
 800bc2e:	930c      	str	r3, [sp, #48]	; 0x30
 800bc30:	46bb      	mov	fp, r7
 800bc32:	b975      	cbnz	r5, 800bc52 <_dtoa_r+0x42>
 800bc34:	2010      	movs	r0, #16
 800bc36:	f001 f95f 	bl	800cef8 <malloc>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	6260      	str	r0, [r4, #36]	; 0x24
 800bc3e:	b920      	cbnz	r0, 800bc4a <_dtoa_r+0x3a>
 800bc40:	4ba7      	ldr	r3, [pc, #668]	; (800bee0 <_dtoa_r+0x2d0>)
 800bc42:	21ea      	movs	r1, #234	; 0xea
 800bc44:	48a7      	ldr	r0, [pc, #668]	; (800bee4 <_dtoa_r+0x2d4>)
 800bc46:	f7ff ff39 	bl	800babc <__assert_func>
 800bc4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bc4e:	6005      	str	r5, [r0, #0]
 800bc50:	60c5      	str	r5, [r0, #12]
 800bc52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc54:	6819      	ldr	r1, [r3, #0]
 800bc56:	b151      	cbz	r1, 800bc6e <_dtoa_r+0x5e>
 800bc58:	685a      	ldr	r2, [r3, #4]
 800bc5a:	604a      	str	r2, [r1, #4]
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	4093      	lsls	r3, r2
 800bc60:	608b      	str	r3, [r1, #8]
 800bc62:	4620      	mov	r0, r4
 800bc64:	f001 f9b0 	bl	800cfc8 <_Bfree>
 800bc68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	601a      	str	r2, [r3, #0]
 800bc6e:	1e3b      	subs	r3, r7, #0
 800bc70:	bfaa      	itet	ge
 800bc72:	2300      	movge	r3, #0
 800bc74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bc78:	f8c8 3000 	strge.w	r3, [r8]
 800bc7c:	4b9a      	ldr	r3, [pc, #616]	; (800bee8 <_dtoa_r+0x2d8>)
 800bc7e:	bfbc      	itt	lt
 800bc80:	2201      	movlt	r2, #1
 800bc82:	f8c8 2000 	strlt.w	r2, [r8]
 800bc86:	ea33 030b 	bics.w	r3, r3, fp
 800bc8a:	d11b      	bne.n	800bcc4 <_dtoa_r+0xb4>
 800bc8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc8e:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc92:	6013      	str	r3, [r2, #0]
 800bc94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc98:	4333      	orrs	r3, r6
 800bc9a:	f000 8592 	beq.w	800c7c2 <_dtoa_r+0xbb2>
 800bc9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bca0:	b963      	cbnz	r3, 800bcbc <_dtoa_r+0xac>
 800bca2:	4b92      	ldr	r3, [pc, #584]	; (800beec <_dtoa_r+0x2dc>)
 800bca4:	e022      	b.n	800bcec <_dtoa_r+0xdc>
 800bca6:	4b92      	ldr	r3, [pc, #584]	; (800bef0 <_dtoa_r+0x2e0>)
 800bca8:	9301      	str	r3, [sp, #4]
 800bcaa:	3308      	adds	r3, #8
 800bcac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	9801      	ldr	r0, [sp, #4]
 800bcb2:	b013      	add	sp, #76	; 0x4c
 800bcb4:	ecbd 8b04 	vpop	{d8-d9}
 800bcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcbc:	4b8b      	ldr	r3, [pc, #556]	; (800beec <_dtoa_r+0x2dc>)
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	3303      	adds	r3, #3
 800bcc2:	e7f3      	b.n	800bcac <_dtoa_r+0x9c>
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	4650      	mov	r0, sl
 800bcca:	4659      	mov	r1, fp
 800bccc:	f7f4 ff34 	bl	8000b38 <__aeabi_dcmpeq>
 800bcd0:	ec4b ab19 	vmov	d9, sl, fp
 800bcd4:	4680      	mov	r8, r0
 800bcd6:	b158      	cbz	r0, 800bcf0 <_dtoa_r+0xe0>
 800bcd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcda:	2301      	movs	r3, #1
 800bcdc:	6013      	str	r3, [r2, #0]
 800bcde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 856b 	beq.w	800c7bc <_dtoa_r+0xbac>
 800bce6:	4883      	ldr	r0, [pc, #524]	; (800bef4 <_dtoa_r+0x2e4>)
 800bce8:	6018      	str	r0, [r3, #0]
 800bcea:	1e43      	subs	r3, r0, #1
 800bcec:	9301      	str	r3, [sp, #4]
 800bcee:	e7df      	b.n	800bcb0 <_dtoa_r+0xa0>
 800bcf0:	ec4b ab10 	vmov	d0, sl, fp
 800bcf4:	aa10      	add	r2, sp, #64	; 0x40
 800bcf6:	a911      	add	r1, sp, #68	; 0x44
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f001 fd13 	bl	800d724 <__d2b>
 800bcfe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bd02:	ee08 0a10 	vmov	s16, r0
 800bd06:	2d00      	cmp	r5, #0
 800bd08:	f000 8084 	beq.w	800be14 <_dtoa_r+0x204>
 800bd0c:	ee19 3a90 	vmov	r3, s19
 800bd10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bd18:	4656      	mov	r6, sl
 800bd1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bd1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bd22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bd26:	4b74      	ldr	r3, [pc, #464]	; (800bef8 <_dtoa_r+0x2e8>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	f7f4 fae3 	bl	80002f8 <__aeabi_dsub>
 800bd32:	a365      	add	r3, pc, #404	; (adr r3, 800bec8 <_dtoa_r+0x2b8>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f7f4 fc96 	bl	8000668 <__aeabi_dmul>
 800bd3c:	a364      	add	r3, pc, #400	; (adr r3, 800bed0 <_dtoa_r+0x2c0>)
 800bd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd42:	f7f4 fadb 	bl	80002fc <__adddf3>
 800bd46:	4606      	mov	r6, r0
 800bd48:	4628      	mov	r0, r5
 800bd4a:	460f      	mov	r7, r1
 800bd4c:	f7f4 fc22 	bl	8000594 <__aeabi_i2d>
 800bd50:	a361      	add	r3, pc, #388	; (adr r3, 800bed8 <_dtoa_r+0x2c8>)
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	f7f4 fc87 	bl	8000668 <__aeabi_dmul>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	4630      	mov	r0, r6
 800bd60:	4639      	mov	r1, r7
 800bd62:	f7f4 facb 	bl	80002fc <__adddf3>
 800bd66:	4606      	mov	r6, r0
 800bd68:	460f      	mov	r7, r1
 800bd6a:	f7f4 ff2d 	bl	8000bc8 <__aeabi_d2iz>
 800bd6e:	2200      	movs	r2, #0
 800bd70:	9000      	str	r0, [sp, #0]
 800bd72:	2300      	movs	r3, #0
 800bd74:	4630      	mov	r0, r6
 800bd76:	4639      	mov	r1, r7
 800bd78:	f7f4 fee8 	bl	8000b4c <__aeabi_dcmplt>
 800bd7c:	b150      	cbz	r0, 800bd94 <_dtoa_r+0x184>
 800bd7e:	9800      	ldr	r0, [sp, #0]
 800bd80:	f7f4 fc08 	bl	8000594 <__aeabi_i2d>
 800bd84:	4632      	mov	r2, r6
 800bd86:	463b      	mov	r3, r7
 800bd88:	f7f4 fed6 	bl	8000b38 <__aeabi_dcmpeq>
 800bd8c:	b910      	cbnz	r0, 800bd94 <_dtoa_r+0x184>
 800bd8e:	9b00      	ldr	r3, [sp, #0]
 800bd90:	3b01      	subs	r3, #1
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	9b00      	ldr	r3, [sp, #0]
 800bd96:	2b16      	cmp	r3, #22
 800bd98:	d85a      	bhi.n	800be50 <_dtoa_r+0x240>
 800bd9a:	9a00      	ldr	r2, [sp, #0]
 800bd9c:	4b57      	ldr	r3, [pc, #348]	; (800befc <_dtoa_r+0x2ec>)
 800bd9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	ec51 0b19 	vmov	r0, r1, d9
 800bdaa:	f7f4 fecf 	bl	8000b4c <__aeabi_dcmplt>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	d050      	beq.n	800be54 <_dtoa_r+0x244>
 800bdb2:	9b00      	ldr	r3, [sp, #0]
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	2300      	movs	r3, #0
 800bdba:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdbe:	1b5d      	subs	r5, r3, r5
 800bdc0:	1e6b      	subs	r3, r5, #1
 800bdc2:	9305      	str	r3, [sp, #20]
 800bdc4:	bf45      	ittet	mi
 800bdc6:	f1c5 0301 	rsbmi	r3, r5, #1
 800bdca:	9304      	strmi	r3, [sp, #16]
 800bdcc:	2300      	movpl	r3, #0
 800bdce:	2300      	movmi	r3, #0
 800bdd0:	bf4c      	ite	mi
 800bdd2:	9305      	strmi	r3, [sp, #20]
 800bdd4:	9304      	strpl	r3, [sp, #16]
 800bdd6:	9b00      	ldr	r3, [sp, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	db3d      	blt.n	800be58 <_dtoa_r+0x248>
 800bddc:	9b05      	ldr	r3, [sp, #20]
 800bdde:	9a00      	ldr	r2, [sp, #0]
 800bde0:	920a      	str	r2, [sp, #40]	; 0x28
 800bde2:	4413      	add	r3, r2
 800bde4:	9305      	str	r3, [sp, #20]
 800bde6:	2300      	movs	r3, #0
 800bde8:	9307      	str	r3, [sp, #28]
 800bdea:	9b06      	ldr	r3, [sp, #24]
 800bdec:	2b09      	cmp	r3, #9
 800bdee:	f200 8089 	bhi.w	800bf04 <_dtoa_r+0x2f4>
 800bdf2:	2b05      	cmp	r3, #5
 800bdf4:	bfc4      	itt	gt
 800bdf6:	3b04      	subgt	r3, #4
 800bdf8:	9306      	strgt	r3, [sp, #24]
 800bdfa:	9b06      	ldr	r3, [sp, #24]
 800bdfc:	f1a3 0302 	sub.w	r3, r3, #2
 800be00:	bfcc      	ite	gt
 800be02:	2500      	movgt	r5, #0
 800be04:	2501      	movle	r5, #1
 800be06:	2b03      	cmp	r3, #3
 800be08:	f200 8087 	bhi.w	800bf1a <_dtoa_r+0x30a>
 800be0c:	e8df f003 	tbb	[pc, r3]
 800be10:	59383a2d 	.word	0x59383a2d
 800be14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800be18:	441d      	add	r5, r3
 800be1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800be1e:	2b20      	cmp	r3, #32
 800be20:	bfc1      	itttt	gt
 800be22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800be2a:	fa0b f303 	lslgt.w	r3, fp, r3
 800be2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800be32:	bfda      	itte	le
 800be34:	f1c3 0320 	rsble	r3, r3, #32
 800be38:	fa06 f003 	lslle.w	r0, r6, r3
 800be3c:	4318      	orrgt	r0, r3
 800be3e:	f7f4 fb99 	bl	8000574 <__aeabi_ui2d>
 800be42:	2301      	movs	r3, #1
 800be44:	4606      	mov	r6, r0
 800be46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800be4a:	3d01      	subs	r5, #1
 800be4c:	930e      	str	r3, [sp, #56]	; 0x38
 800be4e:	e76a      	b.n	800bd26 <_dtoa_r+0x116>
 800be50:	2301      	movs	r3, #1
 800be52:	e7b2      	b.n	800bdba <_dtoa_r+0x1aa>
 800be54:	900b      	str	r0, [sp, #44]	; 0x2c
 800be56:	e7b1      	b.n	800bdbc <_dtoa_r+0x1ac>
 800be58:	9b04      	ldr	r3, [sp, #16]
 800be5a:	9a00      	ldr	r2, [sp, #0]
 800be5c:	1a9b      	subs	r3, r3, r2
 800be5e:	9304      	str	r3, [sp, #16]
 800be60:	4253      	negs	r3, r2
 800be62:	9307      	str	r3, [sp, #28]
 800be64:	2300      	movs	r3, #0
 800be66:	930a      	str	r3, [sp, #40]	; 0x28
 800be68:	e7bf      	b.n	800bdea <_dtoa_r+0x1da>
 800be6a:	2300      	movs	r3, #0
 800be6c:	9308      	str	r3, [sp, #32]
 800be6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be70:	2b00      	cmp	r3, #0
 800be72:	dc55      	bgt.n	800bf20 <_dtoa_r+0x310>
 800be74:	2301      	movs	r3, #1
 800be76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800be7a:	461a      	mov	r2, r3
 800be7c:	9209      	str	r2, [sp, #36]	; 0x24
 800be7e:	e00c      	b.n	800be9a <_dtoa_r+0x28a>
 800be80:	2301      	movs	r3, #1
 800be82:	e7f3      	b.n	800be6c <_dtoa_r+0x25c>
 800be84:	2300      	movs	r3, #0
 800be86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be88:	9308      	str	r3, [sp, #32]
 800be8a:	9b00      	ldr	r3, [sp, #0]
 800be8c:	4413      	add	r3, r2
 800be8e:	9302      	str	r3, [sp, #8]
 800be90:	3301      	adds	r3, #1
 800be92:	2b01      	cmp	r3, #1
 800be94:	9303      	str	r3, [sp, #12]
 800be96:	bfb8      	it	lt
 800be98:	2301      	movlt	r3, #1
 800be9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800be9c:	2200      	movs	r2, #0
 800be9e:	6042      	str	r2, [r0, #4]
 800bea0:	2204      	movs	r2, #4
 800bea2:	f102 0614 	add.w	r6, r2, #20
 800bea6:	429e      	cmp	r6, r3
 800bea8:	6841      	ldr	r1, [r0, #4]
 800beaa:	d93d      	bls.n	800bf28 <_dtoa_r+0x318>
 800beac:	4620      	mov	r0, r4
 800beae:	f001 f84b 	bl	800cf48 <_Balloc>
 800beb2:	9001      	str	r0, [sp, #4]
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d13b      	bne.n	800bf30 <_dtoa_r+0x320>
 800beb8:	4b11      	ldr	r3, [pc, #68]	; (800bf00 <_dtoa_r+0x2f0>)
 800beba:	4602      	mov	r2, r0
 800bebc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bec0:	e6c0      	b.n	800bc44 <_dtoa_r+0x34>
 800bec2:	2301      	movs	r3, #1
 800bec4:	e7df      	b.n	800be86 <_dtoa_r+0x276>
 800bec6:	bf00      	nop
 800bec8:	636f4361 	.word	0x636f4361
 800becc:	3fd287a7 	.word	0x3fd287a7
 800bed0:	8b60c8b3 	.word	0x8b60c8b3
 800bed4:	3fc68a28 	.word	0x3fc68a28
 800bed8:	509f79fb 	.word	0x509f79fb
 800bedc:	3fd34413 	.word	0x3fd34413
 800bee0:	0800eaa0 	.word	0x0800eaa0
 800bee4:	0800ec5e 	.word	0x0800ec5e
 800bee8:	7ff00000 	.word	0x7ff00000
 800beec:	0800ec5a 	.word	0x0800ec5a
 800bef0:	0800ec51 	.word	0x0800ec51
 800bef4:	0800ea25 	.word	0x0800ea25
 800bef8:	3ff80000 	.word	0x3ff80000
 800befc:	0800edc8 	.word	0x0800edc8
 800bf00:	0800ecb9 	.word	0x0800ecb9
 800bf04:	2501      	movs	r5, #1
 800bf06:	2300      	movs	r3, #0
 800bf08:	9306      	str	r3, [sp, #24]
 800bf0a:	9508      	str	r5, [sp, #32]
 800bf0c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf14:	2200      	movs	r2, #0
 800bf16:	2312      	movs	r3, #18
 800bf18:	e7b0      	b.n	800be7c <_dtoa_r+0x26c>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	9308      	str	r3, [sp, #32]
 800bf1e:	e7f5      	b.n	800bf0c <_dtoa_r+0x2fc>
 800bf20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf26:	e7b8      	b.n	800be9a <_dtoa_r+0x28a>
 800bf28:	3101      	adds	r1, #1
 800bf2a:	6041      	str	r1, [r0, #4]
 800bf2c:	0052      	lsls	r2, r2, #1
 800bf2e:	e7b8      	b.n	800bea2 <_dtoa_r+0x292>
 800bf30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf32:	9a01      	ldr	r2, [sp, #4]
 800bf34:	601a      	str	r2, [r3, #0]
 800bf36:	9b03      	ldr	r3, [sp, #12]
 800bf38:	2b0e      	cmp	r3, #14
 800bf3a:	f200 809d 	bhi.w	800c078 <_dtoa_r+0x468>
 800bf3e:	2d00      	cmp	r5, #0
 800bf40:	f000 809a 	beq.w	800c078 <_dtoa_r+0x468>
 800bf44:	9b00      	ldr	r3, [sp, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	dd32      	ble.n	800bfb0 <_dtoa_r+0x3a0>
 800bf4a:	4ab7      	ldr	r2, [pc, #732]	; (800c228 <_dtoa_r+0x618>)
 800bf4c:	f003 030f 	and.w	r3, r3, #15
 800bf50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bf54:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf58:	9b00      	ldr	r3, [sp, #0]
 800bf5a:	05d8      	lsls	r0, r3, #23
 800bf5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bf60:	d516      	bpl.n	800bf90 <_dtoa_r+0x380>
 800bf62:	4bb2      	ldr	r3, [pc, #712]	; (800c22c <_dtoa_r+0x61c>)
 800bf64:	ec51 0b19 	vmov	r0, r1, d9
 800bf68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf6c:	f7f4 fca6 	bl	80008bc <__aeabi_ddiv>
 800bf70:	f007 070f 	and.w	r7, r7, #15
 800bf74:	4682      	mov	sl, r0
 800bf76:	468b      	mov	fp, r1
 800bf78:	2503      	movs	r5, #3
 800bf7a:	4eac      	ldr	r6, [pc, #688]	; (800c22c <_dtoa_r+0x61c>)
 800bf7c:	b957      	cbnz	r7, 800bf94 <_dtoa_r+0x384>
 800bf7e:	4642      	mov	r2, r8
 800bf80:	464b      	mov	r3, r9
 800bf82:	4650      	mov	r0, sl
 800bf84:	4659      	mov	r1, fp
 800bf86:	f7f4 fc99 	bl	80008bc <__aeabi_ddiv>
 800bf8a:	4682      	mov	sl, r0
 800bf8c:	468b      	mov	fp, r1
 800bf8e:	e028      	b.n	800bfe2 <_dtoa_r+0x3d2>
 800bf90:	2502      	movs	r5, #2
 800bf92:	e7f2      	b.n	800bf7a <_dtoa_r+0x36a>
 800bf94:	07f9      	lsls	r1, r7, #31
 800bf96:	d508      	bpl.n	800bfaa <_dtoa_r+0x39a>
 800bf98:	4640      	mov	r0, r8
 800bf9a:	4649      	mov	r1, r9
 800bf9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bfa0:	f7f4 fb62 	bl	8000668 <__aeabi_dmul>
 800bfa4:	3501      	adds	r5, #1
 800bfa6:	4680      	mov	r8, r0
 800bfa8:	4689      	mov	r9, r1
 800bfaa:	107f      	asrs	r7, r7, #1
 800bfac:	3608      	adds	r6, #8
 800bfae:	e7e5      	b.n	800bf7c <_dtoa_r+0x36c>
 800bfb0:	f000 809b 	beq.w	800c0ea <_dtoa_r+0x4da>
 800bfb4:	9b00      	ldr	r3, [sp, #0]
 800bfb6:	4f9d      	ldr	r7, [pc, #628]	; (800c22c <_dtoa_r+0x61c>)
 800bfb8:	425e      	negs	r6, r3
 800bfba:	4b9b      	ldr	r3, [pc, #620]	; (800c228 <_dtoa_r+0x618>)
 800bfbc:	f006 020f 	and.w	r2, r6, #15
 800bfc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc8:	ec51 0b19 	vmov	r0, r1, d9
 800bfcc:	f7f4 fb4c 	bl	8000668 <__aeabi_dmul>
 800bfd0:	1136      	asrs	r6, r6, #4
 800bfd2:	4682      	mov	sl, r0
 800bfd4:	468b      	mov	fp, r1
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	2502      	movs	r5, #2
 800bfda:	2e00      	cmp	r6, #0
 800bfdc:	d17a      	bne.n	800c0d4 <_dtoa_r+0x4c4>
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d1d3      	bne.n	800bf8a <_dtoa_r+0x37a>
 800bfe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f000 8082 	beq.w	800c0ee <_dtoa_r+0x4de>
 800bfea:	4b91      	ldr	r3, [pc, #580]	; (800c230 <_dtoa_r+0x620>)
 800bfec:	2200      	movs	r2, #0
 800bfee:	4650      	mov	r0, sl
 800bff0:	4659      	mov	r1, fp
 800bff2:	f7f4 fdab 	bl	8000b4c <__aeabi_dcmplt>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d079      	beq.n	800c0ee <_dtoa_r+0x4de>
 800bffa:	9b03      	ldr	r3, [sp, #12]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d076      	beq.n	800c0ee <_dtoa_r+0x4de>
 800c000:	9b02      	ldr	r3, [sp, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	dd36      	ble.n	800c074 <_dtoa_r+0x464>
 800c006:	9b00      	ldr	r3, [sp, #0]
 800c008:	4650      	mov	r0, sl
 800c00a:	4659      	mov	r1, fp
 800c00c:	1e5f      	subs	r7, r3, #1
 800c00e:	2200      	movs	r2, #0
 800c010:	4b88      	ldr	r3, [pc, #544]	; (800c234 <_dtoa_r+0x624>)
 800c012:	f7f4 fb29 	bl	8000668 <__aeabi_dmul>
 800c016:	9e02      	ldr	r6, [sp, #8]
 800c018:	4682      	mov	sl, r0
 800c01a:	468b      	mov	fp, r1
 800c01c:	3501      	adds	r5, #1
 800c01e:	4628      	mov	r0, r5
 800c020:	f7f4 fab8 	bl	8000594 <__aeabi_i2d>
 800c024:	4652      	mov	r2, sl
 800c026:	465b      	mov	r3, fp
 800c028:	f7f4 fb1e 	bl	8000668 <__aeabi_dmul>
 800c02c:	4b82      	ldr	r3, [pc, #520]	; (800c238 <_dtoa_r+0x628>)
 800c02e:	2200      	movs	r2, #0
 800c030:	f7f4 f964 	bl	80002fc <__adddf3>
 800c034:	46d0      	mov	r8, sl
 800c036:	46d9      	mov	r9, fp
 800c038:	4682      	mov	sl, r0
 800c03a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c03e:	2e00      	cmp	r6, #0
 800c040:	d158      	bne.n	800c0f4 <_dtoa_r+0x4e4>
 800c042:	4b7e      	ldr	r3, [pc, #504]	; (800c23c <_dtoa_r+0x62c>)
 800c044:	2200      	movs	r2, #0
 800c046:	4640      	mov	r0, r8
 800c048:	4649      	mov	r1, r9
 800c04a:	f7f4 f955 	bl	80002f8 <__aeabi_dsub>
 800c04e:	4652      	mov	r2, sl
 800c050:	465b      	mov	r3, fp
 800c052:	4680      	mov	r8, r0
 800c054:	4689      	mov	r9, r1
 800c056:	f7f4 fd97 	bl	8000b88 <__aeabi_dcmpgt>
 800c05a:	2800      	cmp	r0, #0
 800c05c:	f040 8295 	bne.w	800c58a <_dtoa_r+0x97a>
 800c060:	4652      	mov	r2, sl
 800c062:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c066:	4640      	mov	r0, r8
 800c068:	4649      	mov	r1, r9
 800c06a:	f7f4 fd6f 	bl	8000b4c <__aeabi_dcmplt>
 800c06e:	2800      	cmp	r0, #0
 800c070:	f040 8289 	bne.w	800c586 <_dtoa_r+0x976>
 800c074:	ec5b ab19 	vmov	sl, fp, d9
 800c078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f2c0 8148 	blt.w	800c310 <_dtoa_r+0x700>
 800c080:	9a00      	ldr	r2, [sp, #0]
 800c082:	2a0e      	cmp	r2, #14
 800c084:	f300 8144 	bgt.w	800c310 <_dtoa_r+0x700>
 800c088:	4b67      	ldr	r3, [pc, #412]	; (800c228 <_dtoa_r+0x618>)
 800c08a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c08e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c094:	2b00      	cmp	r3, #0
 800c096:	f280 80d5 	bge.w	800c244 <_dtoa_r+0x634>
 800c09a:	9b03      	ldr	r3, [sp, #12]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f300 80d1 	bgt.w	800c244 <_dtoa_r+0x634>
 800c0a2:	f040 826f 	bne.w	800c584 <_dtoa_r+0x974>
 800c0a6:	4b65      	ldr	r3, [pc, #404]	; (800c23c <_dtoa_r+0x62c>)
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	f7f4 fadb 	bl	8000668 <__aeabi_dmul>
 800c0b2:	4652      	mov	r2, sl
 800c0b4:	465b      	mov	r3, fp
 800c0b6:	f7f4 fd5d 	bl	8000b74 <__aeabi_dcmpge>
 800c0ba:	9e03      	ldr	r6, [sp, #12]
 800c0bc:	4637      	mov	r7, r6
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f040 8245 	bne.w	800c54e <_dtoa_r+0x93e>
 800c0c4:	9d01      	ldr	r5, [sp, #4]
 800c0c6:	2331      	movs	r3, #49	; 0x31
 800c0c8:	f805 3b01 	strb.w	r3, [r5], #1
 800c0cc:	9b00      	ldr	r3, [sp, #0]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	9300      	str	r3, [sp, #0]
 800c0d2:	e240      	b.n	800c556 <_dtoa_r+0x946>
 800c0d4:	07f2      	lsls	r2, r6, #31
 800c0d6:	d505      	bpl.n	800c0e4 <_dtoa_r+0x4d4>
 800c0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0dc:	f7f4 fac4 	bl	8000668 <__aeabi_dmul>
 800c0e0:	3501      	adds	r5, #1
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	1076      	asrs	r6, r6, #1
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	e777      	b.n	800bfda <_dtoa_r+0x3ca>
 800c0ea:	2502      	movs	r5, #2
 800c0ec:	e779      	b.n	800bfe2 <_dtoa_r+0x3d2>
 800c0ee:	9f00      	ldr	r7, [sp, #0]
 800c0f0:	9e03      	ldr	r6, [sp, #12]
 800c0f2:	e794      	b.n	800c01e <_dtoa_r+0x40e>
 800c0f4:	9901      	ldr	r1, [sp, #4]
 800c0f6:	4b4c      	ldr	r3, [pc, #304]	; (800c228 <_dtoa_r+0x618>)
 800c0f8:	4431      	add	r1, r6
 800c0fa:	910d      	str	r1, [sp, #52]	; 0x34
 800c0fc:	9908      	ldr	r1, [sp, #32]
 800c0fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c102:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c106:	2900      	cmp	r1, #0
 800c108:	d043      	beq.n	800c192 <_dtoa_r+0x582>
 800c10a:	494d      	ldr	r1, [pc, #308]	; (800c240 <_dtoa_r+0x630>)
 800c10c:	2000      	movs	r0, #0
 800c10e:	f7f4 fbd5 	bl	80008bc <__aeabi_ddiv>
 800c112:	4652      	mov	r2, sl
 800c114:	465b      	mov	r3, fp
 800c116:	f7f4 f8ef 	bl	80002f8 <__aeabi_dsub>
 800c11a:	9d01      	ldr	r5, [sp, #4]
 800c11c:	4682      	mov	sl, r0
 800c11e:	468b      	mov	fp, r1
 800c120:	4649      	mov	r1, r9
 800c122:	4640      	mov	r0, r8
 800c124:	f7f4 fd50 	bl	8000bc8 <__aeabi_d2iz>
 800c128:	4606      	mov	r6, r0
 800c12a:	f7f4 fa33 	bl	8000594 <__aeabi_i2d>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	4640      	mov	r0, r8
 800c134:	4649      	mov	r1, r9
 800c136:	f7f4 f8df 	bl	80002f8 <__aeabi_dsub>
 800c13a:	3630      	adds	r6, #48	; 0x30
 800c13c:	f805 6b01 	strb.w	r6, [r5], #1
 800c140:	4652      	mov	r2, sl
 800c142:	465b      	mov	r3, fp
 800c144:	4680      	mov	r8, r0
 800c146:	4689      	mov	r9, r1
 800c148:	f7f4 fd00 	bl	8000b4c <__aeabi_dcmplt>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	d163      	bne.n	800c218 <_dtoa_r+0x608>
 800c150:	4642      	mov	r2, r8
 800c152:	464b      	mov	r3, r9
 800c154:	4936      	ldr	r1, [pc, #216]	; (800c230 <_dtoa_r+0x620>)
 800c156:	2000      	movs	r0, #0
 800c158:	f7f4 f8ce 	bl	80002f8 <__aeabi_dsub>
 800c15c:	4652      	mov	r2, sl
 800c15e:	465b      	mov	r3, fp
 800c160:	f7f4 fcf4 	bl	8000b4c <__aeabi_dcmplt>
 800c164:	2800      	cmp	r0, #0
 800c166:	f040 80b5 	bne.w	800c2d4 <_dtoa_r+0x6c4>
 800c16a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c16c:	429d      	cmp	r5, r3
 800c16e:	d081      	beq.n	800c074 <_dtoa_r+0x464>
 800c170:	4b30      	ldr	r3, [pc, #192]	; (800c234 <_dtoa_r+0x624>)
 800c172:	2200      	movs	r2, #0
 800c174:	4650      	mov	r0, sl
 800c176:	4659      	mov	r1, fp
 800c178:	f7f4 fa76 	bl	8000668 <__aeabi_dmul>
 800c17c:	4b2d      	ldr	r3, [pc, #180]	; (800c234 <_dtoa_r+0x624>)
 800c17e:	4682      	mov	sl, r0
 800c180:	468b      	mov	fp, r1
 800c182:	4640      	mov	r0, r8
 800c184:	4649      	mov	r1, r9
 800c186:	2200      	movs	r2, #0
 800c188:	f7f4 fa6e 	bl	8000668 <__aeabi_dmul>
 800c18c:	4680      	mov	r8, r0
 800c18e:	4689      	mov	r9, r1
 800c190:	e7c6      	b.n	800c120 <_dtoa_r+0x510>
 800c192:	4650      	mov	r0, sl
 800c194:	4659      	mov	r1, fp
 800c196:	f7f4 fa67 	bl	8000668 <__aeabi_dmul>
 800c19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c19c:	9d01      	ldr	r5, [sp, #4]
 800c19e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1a0:	4682      	mov	sl, r0
 800c1a2:	468b      	mov	fp, r1
 800c1a4:	4649      	mov	r1, r9
 800c1a6:	4640      	mov	r0, r8
 800c1a8:	f7f4 fd0e 	bl	8000bc8 <__aeabi_d2iz>
 800c1ac:	4606      	mov	r6, r0
 800c1ae:	f7f4 f9f1 	bl	8000594 <__aeabi_i2d>
 800c1b2:	3630      	adds	r6, #48	; 0x30
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	4640      	mov	r0, r8
 800c1ba:	4649      	mov	r1, r9
 800c1bc:	f7f4 f89c 	bl	80002f8 <__aeabi_dsub>
 800c1c0:	f805 6b01 	strb.w	r6, [r5], #1
 800c1c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1c6:	429d      	cmp	r5, r3
 800c1c8:	4680      	mov	r8, r0
 800c1ca:	4689      	mov	r9, r1
 800c1cc:	f04f 0200 	mov.w	r2, #0
 800c1d0:	d124      	bne.n	800c21c <_dtoa_r+0x60c>
 800c1d2:	4b1b      	ldr	r3, [pc, #108]	; (800c240 <_dtoa_r+0x630>)
 800c1d4:	4650      	mov	r0, sl
 800c1d6:	4659      	mov	r1, fp
 800c1d8:	f7f4 f890 	bl	80002fc <__adddf3>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	f7f4 fcd0 	bl	8000b88 <__aeabi_dcmpgt>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d173      	bne.n	800c2d4 <_dtoa_r+0x6c4>
 800c1ec:	4652      	mov	r2, sl
 800c1ee:	465b      	mov	r3, fp
 800c1f0:	4913      	ldr	r1, [pc, #76]	; (800c240 <_dtoa_r+0x630>)
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	f7f4 f880 	bl	80002f8 <__aeabi_dsub>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	4640      	mov	r0, r8
 800c1fe:	4649      	mov	r1, r9
 800c200:	f7f4 fca4 	bl	8000b4c <__aeabi_dcmplt>
 800c204:	2800      	cmp	r0, #0
 800c206:	f43f af35 	beq.w	800c074 <_dtoa_r+0x464>
 800c20a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c20c:	1e6b      	subs	r3, r5, #1
 800c20e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c210:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c214:	2b30      	cmp	r3, #48	; 0x30
 800c216:	d0f8      	beq.n	800c20a <_dtoa_r+0x5fa>
 800c218:	9700      	str	r7, [sp, #0]
 800c21a:	e049      	b.n	800c2b0 <_dtoa_r+0x6a0>
 800c21c:	4b05      	ldr	r3, [pc, #20]	; (800c234 <_dtoa_r+0x624>)
 800c21e:	f7f4 fa23 	bl	8000668 <__aeabi_dmul>
 800c222:	4680      	mov	r8, r0
 800c224:	4689      	mov	r9, r1
 800c226:	e7bd      	b.n	800c1a4 <_dtoa_r+0x594>
 800c228:	0800edc8 	.word	0x0800edc8
 800c22c:	0800eda0 	.word	0x0800eda0
 800c230:	3ff00000 	.word	0x3ff00000
 800c234:	40240000 	.word	0x40240000
 800c238:	401c0000 	.word	0x401c0000
 800c23c:	40140000 	.word	0x40140000
 800c240:	3fe00000 	.word	0x3fe00000
 800c244:	9d01      	ldr	r5, [sp, #4]
 800c246:	4656      	mov	r6, sl
 800c248:	465f      	mov	r7, fp
 800c24a:	4642      	mov	r2, r8
 800c24c:	464b      	mov	r3, r9
 800c24e:	4630      	mov	r0, r6
 800c250:	4639      	mov	r1, r7
 800c252:	f7f4 fb33 	bl	80008bc <__aeabi_ddiv>
 800c256:	f7f4 fcb7 	bl	8000bc8 <__aeabi_d2iz>
 800c25a:	4682      	mov	sl, r0
 800c25c:	f7f4 f99a 	bl	8000594 <__aeabi_i2d>
 800c260:	4642      	mov	r2, r8
 800c262:	464b      	mov	r3, r9
 800c264:	f7f4 fa00 	bl	8000668 <__aeabi_dmul>
 800c268:	4602      	mov	r2, r0
 800c26a:	460b      	mov	r3, r1
 800c26c:	4630      	mov	r0, r6
 800c26e:	4639      	mov	r1, r7
 800c270:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c274:	f7f4 f840 	bl	80002f8 <__aeabi_dsub>
 800c278:	f805 6b01 	strb.w	r6, [r5], #1
 800c27c:	9e01      	ldr	r6, [sp, #4]
 800c27e:	9f03      	ldr	r7, [sp, #12]
 800c280:	1bae      	subs	r6, r5, r6
 800c282:	42b7      	cmp	r7, r6
 800c284:	4602      	mov	r2, r0
 800c286:	460b      	mov	r3, r1
 800c288:	d135      	bne.n	800c2f6 <_dtoa_r+0x6e6>
 800c28a:	f7f4 f837 	bl	80002fc <__adddf3>
 800c28e:	4642      	mov	r2, r8
 800c290:	464b      	mov	r3, r9
 800c292:	4606      	mov	r6, r0
 800c294:	460f      	mov	r7, r1
 800c296:	f7f4 fc77 	bl	8000b88 <__aeabi_dcmpgt>
 800c29a:	b9d0      	cbnz	r0, 800c2d2 <_dtoa_r+0x6c2>
 800c29c:	4642      	mov	r2, r8
 800c29e:	464b      	mov	r3, r9
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	4639      	mov	r1, r7
 800c2a4:	f7f4 fc48 	bl	8000b38 <__aeabi_dcmpeq>
 800c2a8:	b110      	cbz	r0, 800c2b0 <_dtoa_r+0x6a0>
 800c2aa:	f01a 0f01 	tst.w	sl, #1
 800c2ae:	d110      	bne.n	800c2d2 <_dtoa_r+0x6c2>
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	ee18 1a10 	vmov	r1, s16
 800c2b6:	f000 fe87 	bl	800cfc8 <_Bfree>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	9800      	ldr	r0, [sp, #0]
 800c2be:	702b      	strb	r3, [r5, #0]
 800c2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2c2:	3001      	adds	r0, #1
 800c2c4:	6018      	str	r0, [r3, #0]
 800c2c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f43f acf1 	beq.w	800bcb0 <_dtoa_r+0xa0>
 800c2ce:	601d      	str	r5, [r3, #0]
 800c2d0:	e4ee      	b.n	800bcb0 <_dtoa_r+0xa0>
 800c2d2:	9f00      	ldr	r7, [sp, #0]
 800c2d4:	462b      	mov	r3, r5
 800c2d6:	461d      	mov	r5, r3
 800c2d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2dc:	2a39      	cmp	r2, #57	; 0x39
 800c2de:	d106      	bne.n	800c2ee <_dtoa_r+0x6de>
 800c2e0:	9a01      	ldr	r2, [sp, #4]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d1f7      	bne.n	800c2d6 <_dtoa_r+0x6c6>
 800c2e6:	9901      	ldr	r1, [sp, #4]
 800c2e8:	2230      	movs	r2, #48	; 0x30
 800c2ea:	3701      	adds	r7, #1
 800c2ec:	700a      	strb	r2, [r1, #0]
 800c2ee:	781a      	ldrb	r2, [r3, #0]
 800c2f0:	3201      	adds	r2, #1
 800c2f2:	701a      	strb	r2, [r3, #0]
 800c2f4:	e790      	b.n	800c218 <_dtoa_r+0x608>
 800c2f6:	4ba6      	ldr	r3, [pc, #664]	; (800c590 <_dtoa_r+0x980>)
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f7f4 f9b5 	bl	8000668 <__aeabi_dmul>
 800c2fe:	2200      	movs	r2, #0
 800c300:	2300      	movs	r3, #0
 800c302:	4606      	mov	r6, r0
 800c304:	460f      	mov	r7, r1
 800c306:	f7f4 fc17 	bl	8000b38 <__aeabi_dcmpeq>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d09d      	beq.n	800c24a <_dtoa_r+0x63a>
 800c30e:	e7cf      	b.n	800c2b0 <_dtoa_r+0x6a0>
 800c310:	9a08      	ldr	r2, [sp, #32]
 800c312:	2a00      	cmp	r2, #0
 800c314:	f000 80d7 	beq.w	800c4c6 <_dtoa_r+0x8b6>
 800c318:	9a06      	ldr	r2, [sp, #24]
 800c31a:	2a01      	cmp	r2, #1
 800c31c:	f300 80ba 	bgt.w	800c494 <_dtoa_r+0x884>
 800c320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c322:	2a00      	cmp	r2, #0
 800c324:	f000 80b2 	beq.w	800c48c <_dtoa_r+0x87c>
 800c328:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c32c:	9e07      	ldr	r6, [sp, #28]
 800c32e:	9d04      	ldr	r5, [sp, #16]
 800c330:	9a04      	ldr	r2, [sp, #16]
 800c332:	441a      	add	r2, r3
 800c334:	9204      	str	r2, [sp, #16]
 800c336:	9a05      	ldr	r2, [sp, #20]
 800c338:	2101      	movs	r1, #1
 800c33a:	441a      	add	r2, r3
 800c33c:	4620      	mov	r0, r4
 800c33e:	9205      	str	r2, [sp, #20]
 800c340:	f000 ff44 	bl	800d1cc <__i2b>
 800c344:	4607      	mov	r7, r0
 800c346:	2d00      	cmp	r5, #0
 800c348:	dd0c      	ble.n	800c364 <_dtoa_r+0x754>
 800c34a:	9b05      	ldr	r3, [sp, #20]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	dd09      	ble.n	800c364 <_dtoa_r+0x754>
 800c350:	42ab      	cmp	r3, r5
 800c352:	9a04      	ldr	r2, [sp, #16]
 800c354:	bfa8      	it	ge
 800c356:	462b      	movge	r3, r5
 800c358:	1ad2      	subs	r2, r2, r3
 800c35a:	9204      	str	r2, [sp, #16]
 800c35c:	9a05      	ldr	r2, [sp, #20]
 800c35e:	1aed      	subs	r5, r5, r3
 800c360:	1ad3      	subs	r3, r2, r3
 800c362:	9305      	str	r3, [sp, #20]
 800c364:	9b07      	ldr	r3, [sp, #28]
 800c366:	b31b      	cbz	r3, 800c3b0 <_dtoa_r+0x7a0>
 800c368:	9b08      	ldr	r3, [sp, #32]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 80af 	beq.w	800c4ce <_dtoa_r+0x8be>
 800c370:	2e00      	cmp	r6, #0
 800c372:	dd13      	ble.n	800c39c <_dtoa_r+0x78c>
 800c374:	4639      	mov	r1, r7
 800c376:	4632      	mov	r2, r6
 800c378:	4620      	mov	r0, r4
 800c37a:	f000 ffe7 	bl	800d34c <__pow5mult>
 800c37e:	ee18 2a10 	vmov	r2, s16
 800c382:	4601      	mov	r1, r0
 800c384:	4607      	mov	r7, r0
 800c386:	4620      	mov	r0, r4
 800c388:	f000 ff36 	bl	800d1f8 <__multiply>
 800c38c:	ee18 1a10 	vmov	r1, s16
 800c390:	4680      	mov	r8, r0
 800c392:	4620      	mov	r0, r4
 800c394:	f000 fe18 	bl	800cfc8 <_Bfree>
 800c398:	ee08 8a10 	vmov	s16, r8
 800c39c:	9b07      	ldr	r3, [sp, #28]
 800c39e:	1b9a      	subs	r2, r3, r6
 800c3a0:	d006      	beq.n	800c3b0 <_dtoa_r+0x7a0>
 800c3a2:	ee18 1a10 	vmov	r1, s16
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f000 ffd0 	bl	800d34c <__pow5mult>
 800c3ac:	ee08 0a10 	vmov	s16, r0
 800c3b0:	2101      	movs	r1, #1
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f000 ff0a 	bl	800d1cc <__i2b>
 800c3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	4606      	mov	r6, r0
 800c3be:	f340 8088 	ble.w	800c4d2 <_dtoa_r+0x8c2>
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	4601      	mov	r1, r0
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f000 ffc0 	bl	800d34c <__pow5mult>
 800c3cc:	9b06      	ldr	r3, [sp, #24]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	4606      	mov	r6, r0
 800c3d2:	f340 8081 	ble.w	800c4d8 <_dtoa_r+0x8c8>
 800c3d6:	f04f 0800 	mov.w	r8, #0
 800c3da:	6933      	ldr	r3, [r6, #16]
 800c3dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c3e0:	6918      	ldr	r0, [r3, #16]
 800c3e2:	f000 fea3 	bl	800d12c <__hi0bits>
 800c3e6:	f1c0 0020 	rsb	r0, r0, #32
 800c3ea:	9b05      	ldr	r3, [sp, #20]
 800c3ec:	4418      	add	r0, r3
 800c3ee:	f010 001f 	ands.w	r0, r0, #31
 800c3f2:	f000 8092 	beq.w	800c51a <_dtoa_r+0x90a>
 800c3f6:	f1c0 0320 	rsb	r3, r0, #32
 800c3fa:	2b04      	cmp	r3, #4
 800c3fc:	f340 808a 	ble.w	800c514 <_dtoa_r+0x904>
 800c400:	f1c0 001c 	rsb	r0, r0, #28
 800c404:	9b04      	ldr	r3, [sp, #16]
 800c406:	4403      	add	r3, r0
 800c408:	9304      	str	r3, [sp, #16]
 800c40a:	9b05      	ldr	r3, [sp, #20]
 800c40c:	4403      	add	r3, r0
 800c40e:	4405      	add	r5, r0
 800c410:	9305      	str	r3, [sp, #20]
 800c412:	9b04      	ldr	r3, [sp, #16]
 800c414:	2b00      	cmp	r3, #0
 800c416:	dd07      	ble.n	800c428 <_dtoa_r+0x818>
 800c418:	ee18 1a10 	vmov	r1, s16
 800c41c:	461a      	mov	r2, r3
 800c41e:	4620      	mov	r0, r4
 800c420:	f000 ffee 	bl	800d400 <__lshift>
 800c424:	ee08 0a10 	vmov	s16, r0
 800c428:	9b05      	ldr	r3, [sp, #20]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	dd05      	ble.n	800c43a <_dtoa_r+0x82a>
 800c42e:	4631      	mov	r1, r6
 800c430:	461a      	mov	r2, r3
 800c432:	4620      	mov	r0, r4
 800c434:	f000 ffe4 	bl	800d400 <__lshift>
 800c438:	4606      	mov	r6, r0
 800c43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d06e      	beq.n	800c51e <_dtoa_r+0x90e>
 800c440:	ee18 0a10 	vmov	r0, s16
 800c444:	4631      	mov	r1, r6
 800c446:	f001 f84b 	bl	800d4e0 <__mcmp>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	da67      	bge.n	800c51e <_dtoa_r+0x90e>
 800c44e:	9b00      	ldr	r3, [sp, #0]
 800c450:	3b01      	subs	r3, #1
 800c452:	ee18 1a10 	vmov	r1, s16
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	220a      	movs	r2, #10
 800c45a:	2300      	movs	r3, #0
 800c45c:	4620      	mov	r0, r4
 800c45e:	f000 fdd5 	bl	800d00c <__multadd>
 800c462:	9b08      	ldr	r3, [sp, #32]
 800c464:	ee08 0a10 	vmov	s16, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f000 81b1 	beq.w	800c7d0 <_dtoa_r+0xbc0>
 800c46e:	2300      	movs	r3, #0
 800c470:	4639      	mov	r1, r7
 800c472:	220a      	movs	r2, #10
 800c474:	4620      	mov	r0, r4
 800c476:	f000 fdc9 	bl	800d00c <__multadd>
 800c47a:	9b02      	ldr	r3, [sp, #8]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	4607      	mov	r7, r0
 800c480:	f300 808e 	bgt.w	800c5a0 <_dtoa_r+0x990>
 800c484:	9b06      	ldr	r3, [sp, #24]
 800c486:	2b02      	cmp	r3, #2
 800c488:	dc51      	bgt.n	800c52e <_dtoa_r+0x91e>
 800c48a:	e089      	b.n	800c5a0 <_dtoa_r+0x990>
 800c48c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c48e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c492:	e74b      	b.n	800c32c <_dtoa_r+0x71c>
 800c494:	9b03      	ldr	r3, [sp, #12]
 800c496:	1e5e      	subs	r6, r3, #1
 800c498:	9b07      	ldr	r3, [sp, #28]
 800c49a:	42b3      	cmp	r3, r6
 800c49c:	bfbf      	itttt	lt
 800c49e:	9b07      	ldrlt	r3, [sp, #28]
 800c4a0:	9607      	strlt	r6, [sp, #28]
 800c4a2:	1af2      	sublt	r2, r6, r3
 800c4a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c4a6:	bfb6      	itet	lt
 800c4a8:	189b      	addlt	r3, r3, r2
 800c4aa:	1b9e      	subge	r6, r3, r6
 800c4ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c4ae:	9b03      	ldr	r3, [sp, #12]
 800c4b0:	bfb8      	it	lt
 800c4b2:	2600      	movlt	r6, #0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	bfb7      	itett	lt
 800c4b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c4bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c4c0:	1a9d      	sublt	r5, r3, r2
 800c4c2:	2300      	movlt	r3, #0
 800c4c4:	e734      	b.n	800c330 <_dtoa_r+0x720>
 800c4c6:	9e07      	ldr	r6, [sp, #28]
 800c4c8:	9d04      	ldr	r5, [sp, #16]
 800c4ca:	9f08      	ldr	r7, [sp, #32]
 800c4cc:	e73b      	b.n	800c346 <_dtoa_r+0x736>
 800c4ce:	9a07      	ldr	r2, [sp, #28]
 800c4d0:	e767      	b.n	800c3a2 <_dtoa_r+0x792>
 800c4d2:	9b06      	ldr	r3, [sp, #24]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	dc18      	bgt.n	800c50a <_dtoa_r+0x8fa>
 800c4d8:	f1ba 0f00 	cmp.w	sl, #0
 800c4dc:	d115      	bne.n	800c50a <_dtoa_r+0x8fa>
 800c4de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4e2:	b993      	cbnz	r3, 800c50a <_dtoa_r+0x8fa>
 800c4e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c4e8:	0d1b      	lsrs	r3, r3, #20
 800c4ea:	051b      	lsls	r3, r3, #20
 800c4ec:	b183      	cbz	r3, 800c510 <_dtoa_r+0x900>
 800c4ee:	9b04      	ldr	r3, [sp, #16]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	9304      	str	r3, [sp, #16]
 800c4f4:	9b05      	ldr	r3, [sp, #20]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	9305      	str	r3, [sp, #20]
 800c4fa:	f04f 0801 	mov.w	r8, #1
 800c4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c500:	2b00      	cmp	r3, #0
 800c502:	f47f af6a 	bne.w	800c3da <_dtoa_r+0x7ca>
 800c506:	2001      	movs	r0, #1
 800c508:	e76f      	b.n	800c3ea <_dtoa_r+0x7da>
 800c50a:	f04f 0800 	mov.w	r8, #0
 800c50e:	e7f6      	b.n	800c4fe <_dtoa_r+0x8ee>
 800c510:	4698      	mov	r8, r3
 800c512:	e7f4      	b.n	800c4fe <_dtoa_r+0x8ee>
 800c514:	f43f af7d 	beq.w	800c412 <_dtoa_r+0x802>
 800c518:	4618      	mov	r0, r3
 800c51a:	301c      	adds	r0, #28
 800c51c:	e772      	b.n	800c404 <_dtoa_r+0x7f4>
 800c51e:	9b03      	ldr	r3, [sp, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	dc37      	bgt.n	800c594 <_dtoa_r+0x984>
 800c524:	9b06      	ldr	r3, [sp, #24]
 800c526:	2b02      	cmp	r3, #2
 800c528:	dd34      	ble.n	800c594 <_dtoa_r+0x984>
 800c52a:	9b03      	ldr	r3, [sp, #12]
 800c52c:	9302      	str	r3, [sp, #8]
 800c52e:	9b02      	ldr	r3, [sp, #8]
 800c530:	b96b      	cbnz	r3, 800c54e <_dtoa_r+0x93e>
 800c532:	4631      	mov	r1, r6
 800c534:	2205      	movs	r2, #5
 800c536:	4620      	mov	r0, r4
 800c538:	f000 fd68 	bl	800d00c <__multadd>
 800c53c:	4601      	mov	r1, r0
 800c53e:	4606      	mov	r6, r0
 800c540:	ee18 0a10 	vmov	r0, s16
 800c544:	f000 ffcc 	bl	800d4e0 <__mcmp>
 800c548:	2800      	cmp	r0, #0
 800c54a:	f73f adbb 	bgt.w	800c0c4 <_dtoa_r+0x4b4>
 800c54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c550:	9d01      	ldr	r5, [sp, #4]
 800c552:	43db      	mvns	r3, r3
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	f04f 0800 	mov.w	r8, #0
 800c55a:	4631      	mov	r1, r6
 800c55c:	4620      	mov	r0, r4
 800c55e:	f000 fd33 	bl	800cfc8 <_Bfree>
 800c562:	2f00      	cmp	r7, #0
 800c564:	f43f aea4 	beq.w	800c2b0 <_dtoa_r+0x6a0>
 800c568:	f1b8 0f00 	cmp.w	r8, #0
 800c56c:	d005      	beq.n	800c57a <_dtoa_r+0x96a>
 800c56e:	45b8      	cmp	r8, r7
 800c570:	d003      	beq.n	800c57a <_dtoa_r+0x96a>
 800c572:	4641      	mov	r1, r8
 800c574:	4620      	mov	r0, r4
 800c576:	f000 fd27 	bl	800cfc8 <_Bfree>
 800c57a:	4639      	mov	r1, r7
 800c57c:	4620      	mov	r0, r4
 800c57e:	f000 fd23 	bl	800cfc8 <_Bfree>
 800c582:	e695      	b.n	800c2b0 <_dtoa_r+0x6a0>
 800c584:	2600      	movs	r6, #0
 800c586:	4637      	mov	r7, r6
 800c588:	e7e1      	b.n	800c54e <_dtoa_r+0x93e>
 800c58a:	9700      	str	r7, [sp, #0]
 800c58c:	4637      	mov	r7, r6
 800c58e:	e599      	b.n	800c0c4 <_dtoa_r+0x4b4>
 800c590:	40240000 	.word	0x40240000
 800c594:	9b08      	ldr	r3, [sp, #32]
 800c596:	2b00      	cmp	r3, #0
 800c598:	f000 80ca 	beq.w	800c730 <_dtoa_r+0xb20>
 800c59c:	9b03      	ldr	r3, [sp, #12]
 800c59e:	9302      	str	r3, [sp, #8]
 800c5a0:	2d00      	cmp	r5, #0
 800c5a2:	dd05      	ble.n	800c5b0 <_dtoa_r+0x9a0>
 800c5a4:	4639      	mov	r1, r7
 800c5a6:	462a      	mov	r2, r5
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f000 ff29 	bl	800d400 <__lshift>
 800c5ae:	4607      	mov	r7, r0
 800c5b0:	f1b8 0f00 	cmp.w	r8, #0
 800c5b4:	d05b      	beq.n	800c66e <_dtoa_r+0xa5e>
 800c5b6:	6879      	ldr	r1, [r7, #4]
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f000 fcc5 	bl	800cf48 <_Balloc>
 800c5be:	4605      	mov	r5, r0
 800c5c0:	b928      	cbnz	r0, 800c5ce <_dtoa_r+0x9be>
 800c5c2:	4b87      	ldr	r3, [pc, #540]	; (800c7e0 <_dtoa_r+0xbd0>)
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c5ca:	f7ff bb3b 	b.w	800bc44 <_dtoa_r+0x34>
 800c5ce:	693a      	ldr	r2, [r7, #16]
 800c5d0:	3202      	adds	r2, #2
 800c5d2:	0092      	lsls	r2, r2, #2
 800c5d4:	f107 010c 	add.w	r1, r7, #12
 800c5d8:	300c      	adds	r0, #12
 800c5da:	f000 fca7 	bl	800cf2c <memcpy>
 800c5de:	2201      	movs	r2, #1
 800c5e0:	4629      	mov	r1, r5
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 ff0c 	bl	800d400 <__lshift>
 800c5e8:	9b01      	ldr	r3, [sp, #4]
 800c5ea:	f103 0901 	add.w	r9, r3, #1
 800c5ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	9305      	str	r3, [sp, #20]
 800c5f6:	f00a 0301 	and.w	r3, sl, #1
 800c5fa:	46b8      	mov	r8, r7
 800c5fc:	9304      	str	r3, [sp, #16]
 800c5fe:	4607      	mov	r7, r0
 800c600:	4631      	mov	r1, r6
 800c602:	ee18 0a10 	vmov	r0, s16
 800c606:	f7ff fa77 	bl	800baf8 <quorem>
 800c60a:	4641      	mov	r1, r8
 800c60c:	9002      	str	r0, [sp, #8]
 800c60e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c612:	ee18 0a10 	vmov	r0, s16
 800c616:	f000 ff63 	bl	800d4e0 <__mcmp>
 800c61a:	463a      	mov	r2, r7
 800c61c:	9003      	str	r0, [sp, #12]
 800c61e:	4631      	mov	r1, r6
 800c620:	4620      	mov	r0, r4
 800c622:	f000 ff79 	bl	800d518 <__mdiff>
 800c626:	68c2      	ldr	r2, [r0, #12]
 800c628:	f109 3bff 	add.w	fp, r9, #4294967295
 800c62c:	4605      	mov	r5, r0
 800c62e:	bb02      	cbnz	r2, 800c672 <_dtoa_r+0xa62>
 800c630:	4601      	mov	r1, r0
 800c632:	ee18 0a10 	vmov	r0, s16
 800c636:	f000 ff53 	bl	800d4e0 <__mcmp>
 800c63a:	4602      	mov	r2, r0
 800c63c:	4629      	mov	r1, r5
 800c63e:	4620      	mov	r0, r4
 800c640:	9207      	str	r2, [sp, #28]
 800c642:	f000 fcc1 	bl	800cfc8 <_Bfree>
 800c646:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c64a:	ea43 0102 	orr.w	r1, r3, r2
 800c64e:	9b04      	ldr	r3, [sp, #16]
 800c650:	430b      	orrs	r3, r1
 800c652:	464d      	mov	r5, r9
 800c654:	d10f      	bne.n	800c676 <_dtoa_r+0xa66>
 800c656:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c65a:	d02a      	beq.n	800c6b2 <_dtoa_r+0xaa2>
 800c65c:	9b03      	ldr	r3, [sp, #12]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	dd02      	ble.n	800c668 <_dtoa_r+0xa58>
 800c662:	9b02      	ldr	r3, [sp, #8]
 800c664:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c668:	f88b a000 	strb.w	sl, [fp]
 800c66c:	e775      	b.n	800c55a <_dtoa_r+0x94a>
 800c66e:	4638      	mov	r0, r7
 800c670:	e7ba      	b.n	800c5e8 <_dtoa_r+0x9d8>
 800c672:	2201      	movs	r2, #1
 800c674:	e7e2      	b.n	800c63c <_dtoa_r+0xa2c>
 800c676:	9b03      	ldr	r3, [sp, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	db04      	blt.n	800c686 <_dtoa_r+0xa76>
 800c67c:	9906      	ldr	r1, [sp, #24]
 800c67e:	430b      	orrs	r3, r1
 800c680:	9904      	ldr	r1, [sp, #16]
 800c682:	430b      	orrs	r3, r1
 800c684:	d122      	bne.n	800c6cc <_dtoa_r+0xabc>
 800c686:	2a00      	cmp	r2, #0
 800c688:	ddee      	ble.n	800c668 <_dtoa_r+0xa58>
 800c68a:	ee18 1a10 	vmov	r1, s16
 800c68e:	2201      	movs	r2, #1
 800c690:	4620      	mov	r0, r4
 800c692:	f000 feb5 	bl	800d400 <__lshift>
 800c696:	4631      	mov	r1, r6
 800c698:	ee08 0a10 	vmov	s16, r0
 800c69c:	f000 ff20 	bl	800d4e0 <__mcmp>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	dc03      	bgt.n	800c6ac <_dtoa_r+0xa9c>
 800c6a4:	d1e0      	bne.n	800c668 <_dtoa_r+0xa58>
 800c6a6:	f01a 0f01 	tst.w	sl, #1
 800c6aa:	d0dd      	beq.n	800c668 <_dtoa_r+0xa58>
 800c6ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c6b0:	d1d7      	bne.n	800c662 <_dtoa_r+0xa52>
 800c6b2:	2339      	movs	r3, #57	; 0x39
 800c6b4:	f88b 3000 	strb.w	r3, [fp]
 800c6b8:	462b      	mov	r3, r5
 800c6ba:	461d      	mov	r5, r3
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c6c2:	2a39      	cmp	r2, #57	; 0x39
 800c6c4:	d071      	beq.n	800c7aa <_dtoa_r+0xb9a>
 800c6c6:	3201      	adds	r2, #1
 800c6c8:	701a      	strb	r2, [r3, #0]
 800c6ca:	e746      	b.n	800c55a <_dtoa_r+0x94a>
 800c6cc:	2a00      	cmp	r2, #0
 800c6ce:	dd07      	ble.n	800c6e0 <_dtoa_r+0xad0>
 800c6d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c6d4:	d0ed      	beq.n	800c6b2 <_dtoa_r+0xaa2>
 800c6d6:	f10a 0301 	add.w	r3, sl, #1
 800c6da:	f88b 3000 	strb.w	r3, [fp]
 800c6de:	e73c      	b.n	800c55a <_dtoa_r+0x94a>
 800c6e0:	9b05      	ldr	r3, [sp, #20]
 800c6e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c6e6:	4599      	cmp	r9, r3
 800c6e8:	d047      	beq.n	800c77a <_dtoa_r+0xb6a>
 800c6ea:	ee18 1a10 	vmov	r1, s16
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	220a      	movs	r2, #10
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f000 fc8a 	bl	800d00c <__multadd>
 800c6f8:	45b8      	cmp	r8, r7
 800c6fa:	ee08 0a10 	vmov	s16, r0
 800c6fe:	f04f 0300 	mov.w	r3, #0
 800c702:	f04f 020a 	mov.w	r2, #10
 800c706:	4641      	mov	r1, r8
 800c708:	4620      	mov	r0, r4
 800c70a:	d106      	bne.n	800c71a <_dtoa_r+0xb0a>
 800c70c:	f000 fc7e 	bl	800d00c <__multadd>
 800c710:	4680      	mov	r8, r0
 800c712:	4607      	mov	r7, r0
 800c714:	f109 0901 	add.w	r9, r9, #1
 800c718:	e772      	b.n	800c600 <_dtoa_r+0x9f0>
 800c71a:	f000 fc77 	bl	800d00c <__multadd>
 800c71e:	4639      	mov	r1, r7
 800c720:	4680      	mov	r8, r0
 800c722:	2300      	movs	r3, #0
 800c724:	220a      	movs	r2, #10
 800c726:	4620      	mov	r0, r4
 800c728:	f000 fc70 	bl	800d00c <__multadd>
 800c72c:	4607      	mov	r7, r0
 800c72e:	e7f1      	b.n	800c714 <_dtoa_r+0xb04>
 800c730:	9b03      	ldr	r3, [sp, #12]
 800c732:	9302      	str	r3, [sp, #8]
 800c734:	9d01      	ldr	r5, [sp, #4]
 800c736:	ee18 0a10 	vmov	r0, s16
 800c73a:	4631      	mov	r1, r6
 800c73c:	f7ff f9dc 	bl	800baf8 <quorem>
 800c740:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c744:	9b01      	ldr	r3, [sp, #4]
 800c746:	f805 ab01 	strb.w	sl, [r5], #1
 800c74a:	1aea      	subs	r2, r5, r3
 800c74c:	9b02      	ldr	r3, [sp, #8]
 800c74e:	4293      	cmp	r3, r2
 800c750:	dd09      	ble.n	800c766 <_dtoa_r+0xb56>
 800c752:	ee18 1a10 	vmov	r1, s16
 800c756:	2300      	movs	r3, #0
 800c758:	220a      	movs	r2, #10
 800c75a:	4620      	mov	r0, r4
 800c75c:	f000 fc56 	bl	800d00c <__multadd>
 800c760:	ee08 0a10 	vmov	s16, r0
 800c764:	e7e7      	b.n	800c736 <_dtoa_r+0xb26>
 800c766:	9b02      	ldr	r3, [sp, #8]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	bfc8      	it	gt
 800c76c:	461d      	movgt	r5, r3
 800c76e:	9b01      	ldr	r3, [sp, #4]
 800c770:	bfd8      	it	le
 800c772:	2501      	movle	r5, #1
 800c774:	441d      	add	r5, r3
 800c776:	f04f 0800 	mov.w	r8, #0
 800c77a:	ee18 1a10 	vmov	r1, s16
 800c77e:	2201      	movs	r2, #1
 800c780:	4620      	mov	r0, r4
 800c782:	f000 fe3d 	bl	800d400 <__lshift>
 800c786:	4631      	mov	r1, r6
 800c788:	ee08 0a10 	vmov	s16, r0
 800c78c:	f000 fea8 	bl	800d4e0 <__mcmp>
 800c790:	2800      	cmp	r0, #0
 800c792:	dc91      	bgt.n	800c6b8 <_dtoa_r+0xaa8>
 800c794:	d102      	bne.n	800c79c <_dtoa_r+0xb8c>
 800c796:	f01a 0f01 	tst.w	sl, #1
 800c79a:	d18d      	bne.n	800c6b8 <_dtoa_r+0xaa8>
 800c79c:	462b      	mov	r3, r5
 800c79e:	461d      	mov	r5, r3
 800c7a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7a4:	2a30      	cmp	r2, #48	; 0x30
 800c7a6:	d0fa      	beq.n	800c79e <_dtoa_r+0xb8e>
 800c7a8:	e6d7      	b.n	800c55a <_dtoa_r+0x94a>
 800c7aa:	9a01      	ldr	r2, [sp, #4]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d184      	bne.n	800c6ba <_dtoa_r+0xaaa>
 800c7b0:	9b00      	ldr	r3, [sp, #0]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	2331      	movs	r3, #49	; 0x31
 800c7b8:	7013      	strb	r3, [r2, #0]
 800c7ba:	e6ce      	b.n	800c55a <_dtoa_r+0x94a>
 800c7bc:	4b09      	ldr	r3, [pc, #36]	; (800c7e4 <_dtoa_r+0xbd4>)
 800c7be:	f7ff ba95 	b.w	800bcec <_dtoa_r+0xdc>
 800c7c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f47f aa6e 	bne.w	800bca6 <_dtoa_r+0x96>
 800c7ca:	4b07      	ldr	r3, [pc, #28]	; (800c7e8 <_dtoa_r+0xbd8>)
 800c7cc:	f7ff ba8e 	b.w	800bcec <_dtoa_r+0xdc>
 800c7d0:	9b02      	ldr	r3, [sp, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	dcae      	bgt.n	800c734 <_dtoa_r+0xb24>
 800c7d6:	9b06      	ldr	r3, [sp, #24]
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	f73f aea8 	bgt.w	800c52e <_dtoa_r+0x91e>
 800c7de:	e7a9      	b.n	800c734 <_dtoa_r+0xb24>
 800c7e0:	0800ecb9 	.word	0x0800ecb9
 800c7e4:	0800ea24 	.word	0x0800ea24
 800c7e8:	0800ec51 	.word	0x0800ec51

0800c7ec <fiprintf>:
 800c7ec:	b40e      	push	{r1, r2, r3}
 800c7ee:	b503      	push	{r0, r1, lr}
 800c7f0:	4601      	mov	r1, r0
 800c7f2:	ab03      	add	r3, sp, #12
 800c7f4:	4805      	ldr	r0, [pc, #20]	; (800c80c <fiprintf+0x20>)
 800c7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7fa:	6800      	ldr	r0, [r0, #0]
 800c7fc:	9301      	str	r3, [sp, #4]
 800c7fe:	f001 fae1 	bl	800ddc4 <_vfiprintf_r>
 800c802:	b002      	add	sp, #8
 800c804:	f85d eb04 	ldr.w	lr, [sp], #4
 800c808:	b003      	add	sp, #12
 800c80a:	4770      	bx	lr
 800c80c:	2000020c 	.word	0x2000020c

0800c810 <rshift>:
 800c810:	6903      	ldr	r3, [r0, #16]
 800c812:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c816:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c81a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c81e:	f100 0414 	add.w	r4, r0, #20
 800c822:	dd45      	ble.n	800c8b0 <rshift+0xa0>
 800c824:	f011 011f 	ands.w	r1, r1, #31
 800c828:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c82c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c830:	d10c      	bne.n	800c84c <rshift+0x3c>
 800c832:	f100 0710 	add.w	r7, r0, #16
 800c836:	4629      	mov	r1, r5
 800c838:	42b1      	cmp	r1, r6
 800c83a:	d334      	bcc.n	800c8a6 <rshift+0x96>
 800c83c:	1a9b      	subs	r3, r3, r2
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	1eea      	subs	r2, r5, #3
 800c842:	4296      	cmp	r6, r2
 800c844:	bf38      	it	cc
 800c846:	2300      	movcc	r3, #0
 800c848:	4423      	add	r3, r4
 800c84a:	e015      	b.n	800c878 <rshift+0x68>
 800c84c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c850:	f1c1 0820 	rsb	r8, r1, #32
 800c854:	40cf      	lsrs	r7, r1
 800c856:	f105 0e04 	add.w	lr, r5, #4
 800c85a:	46a1      	mov	r9, r4
 800c85c:	4576      	cmp	r6, lr
 800c85e:	46f4      	mov	ip, lr
 800c860:	d815      	bhi.n	800c88e <rshift+0x7e>
 800c862:	1a9a      	subs	r2, r3, r2
 800c864:	0092      	lsls	r2, r2, #2
 800c866:	3a04      	subs	r2, #4
 800c868:	3501      	adds	r5, #1
 800c86a:	42ae      	cmp	r6, r5
 800c86c:	bf38      	it	cc
 800c86e:	2200      	movcc	r2, #0
 800c870:	18a3      	adds	r3, r4, r2
 800c872:	50a7      	str	r7, [r4, r2]
 800c874:	b107      	cbz	r7, 800c878 <rshift+0x68>
 800c876:	3304      	adds	r3, #4
 800c878:	1b1a      	subs	r2, r3, r4
 800c87a:	42a3      	cmp	r3, r4
 800c87c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c880:	bf08      	it	eq
 800c882:	2300      	moveq	r3, #0
 800c884:	6102      	str	r2, [r0, #16]
 800c886:	bf08      	it	eq
 800c888:	6143      	streq	r3, [r0, #20]
 800c88a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c88e:	f8dc c000 	ldr.w	ip, [ip]
 800c892:	fa0c fc08 	lsl.w	ip, ip, r8
 800c896:	ea4c 0707 	orr.w	r7, ip, r7
 800c89a:	f849 7b04 	str.w	r7, [r9], #4
 800c89e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8a2:	40cf      	lsrs	r7, r1
 800c8a4:	e7da      	b.n	800c85c <rshift+0x4c>
 800c8a6:	f851 cb04 	ldr.w	ip, [r1], #4
 800c8aa:	f847 cf04 	str.w	ip, [r7, #4]!
 800c8ae:	e7c3      	b.n	800c838 <rshift+0x28>
 800c8b0:	4623      	mov	r3, r4
 800c8b2:	e7e1      	b.n	800c878 <rshift+0x68>

0800c8b4 <__hexdig_fun>:
 800c8b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c8b8:	2b09      	cmp	r3, #9
 800c8ba:	d802      	bhi.n	800c8c2 <__hexdig_fun+0xe>
 800c8bc:	3820      	subs	r0, #32
 800c8be:	b2c0      	uxtb	r0, r0
 800c8c0:	4770      	bx	lr
 800c8c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c8c6:	2b05      	cmp	r3, #5
 800c8c8:	d801      	bhi.n	800c8ce <__hexdig_fun+0x1a>
 800c8ca:	3847      	subs	r0, #71	; 0x47
 800c8cc:	e7f7      	b.n	800c8be <__hexdig_fun+0xa>
 800c8ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c8d2:	2b05      	cmp	r3, #5
 800c8d4:	d801      	bhi.n	800c8da <__hexdig_fun+0x26>
 800c8d6:	3827      	subs	r0, #39	; 0x27
 800c8d8:	e7f1      	b.n	800c8be <__hexdig_fun+0xa>
 800c8da:	2000      	movs	r0, #0
 800c8dc:	4770      	bx	lr
	...

0800c8e0 <__gethex>:
 800c8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	ed2d 8b02 	vpush	{d8}
 800c8e8:	b089      	sub	sp, #36	; 0x24
 800c8ea:	ee08 0a10 	vmov	s16, r0
 800c8ee:	9304      	str	r3, [sp, #16]
 800c8f0:	4bb4      	ldr	r3, [pc, #720]	; (800cbc4 <__gethex+0x2e4>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	9301      	str	r3, [sp, #4]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	468b      	mov	fp, r1
 800c8fa:	4690      	mov	r8, r2
 800c8fc:	f7f3 fc9a 	bl	8000234 <strlen>
 800c900:	9b01      	ldr	r3, [sp, #4]
 800c902:	f8db 2000 	ldr.w	r2, [fp]
 800c906:	4403      	add	r3, r0
 800c908:	4682      	mov	sl, r0
 800c90a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c90e:	9305      	str	r3, [sp, #20]
 800c910:	1c93      	adds	r3, r2, #2
 800c912:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c916:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c91a:	32fe      	adds	r2, #254	; 0xfe
 800c91c:	18d1      	adds	r1, r2, r3
 800c91e:	461f      	mov	r7, r3
 800c920:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c924:	9100      	str	r1, [sp, #0]
 800c926:	2830      	cmp	r0, #48	; 0x30
 800c928:	d0f8      	beq.n	800c91c <__gethex+0x3c>
 800c92a:	f7ff ffc3 	bl	800c8b4 <__hexdig_fun>
 800c92e:	4604      	mov	r4, r0
 800c930:	2800      	cmp	r0, #0
 800c932:	d13a      	bne.n	800c9aa <__gethex+0xca>
 800c934:	9901      	ldr	r1, [sp, #4]
 800c936:	4652      	mov	r2, sl
 800c938:	4638      	mov	r0, r7
 800c93a:	f001 fb8d 	bl	800e058 <strncmp>
 800c93e:	4605      	mov	r5, r0
 800c940:	2800      	cmp	r0, #0
 800c942:	d168      	bne.n	800ca16 <__gethex+0x136>
 800c944:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c948:	eb07 060a 	add.w	r6, r7, sl
 800c94c:	f7ff ffb2 	bl	800c8b4 <__hexdig_fun>
 800c950:	2800      	cmp	r0, #0
 800c952:	d062      	beq.n	800ca1a <__gethex+0x13a>
 800c954:	4633      	mov	r3, r6
 800c956:	7818      	ldrb	r0, [r3, #0]
 800c958:	2830      	cmp	r0, #48	; 0x30
 800c95a:	461f      	mov	r7, r3
 800c95c:	f103 0301 	add.w	r3, r3, #1
 800c960:	d0f9      	beq.n	800c956 <__gethex+0x76>
 800c962:	f7ff ffa7 	bl	800c8b4 <__hexdig_fun>
 800c966:	2301      	movs	r3, #1
 800c968:	fab0 f480 	clz	r4, r0
 800c96c:	0964      	lsrs	r4, r4, #5
 800c96e:	4635      	mov	r5, r6
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	463a      	mov	r2, r7
 800c974:	4616      	mov	r6, r2
 800c976:	3201      	adds	r2, #1
 800c978:	7830      	ldrb	r0, [r6, #0]
 800c97a:	f7ff ff9b 	bl	800c8b4 <__hexdig_fun>
 800c97e:	2800      	cmp	r0, #0
 800c980:	d1f8      	bne.n	800c974 <__gethex+0x94>
 800c982:	9901      	ldr	r1, [sp, #4]
 800c984:	4652      	mov	r2, sl
 800c986:	4630      	mov	r0, r6
 800c988:	f001 fb66 	bl	800e058 <strncmp>
 800c98c:	b980      	cbnz	r0, 800c9b0 <__gethex+0xd0>
 800c98e:	b94d      	cbnz	r5, 800c9a4 <__gethex+0xc4>
 800c990:	eb06 050a 	add.w	r5, r6, sl
 800c994:	462a      	mov	r2, r5
 800c996:	4616      	mov	r6, r2
 800c998:	3201      	adds	r2, #1
 800c99a:	7830      	ldrb	r0, [r6, #0]
 800c99c:	f7ff ff8a 	bl	800c8b4 <__hexdig_fun>
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	d1f8      	bne.n	800c996 <__gethex+0xb6>
 800c9a4:	1bad      	subs	r5, r5, r6
 800c9a6:	00ad      	lsls	r5, r5, #2
 800c9a8:	e004      	b.n	800c9b4 <__gethex+0xd4>
 800c9aa:	2400      	movs	r4, #0
 800c9ac:	4625      	mov	r5, r4
 800c9ae:	e7e0      	b.n	800c972 <__gethex+0x92>
 800c9b0:	2d00      	cmp	r5, #0
 800c9b2:	d1f7      	bne.n	800c9a4 <__gethex+0xc4>
 800c9b4:	7833      	ldrb	r3, [r6, #0]
 800c9b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c9ba:	2b50      	cmp	r3, #80	; 0x50
 800c9bc:	d13b      	bne.n	800ca36 <__gethex+0x156>
 800c9be:	7873      	ldrb	r3, [r6, #1]
 800c9c0:	2b2b      	cmp	r3, #43	; 0x2b
 800c9c2:	d02c      	beq.n	800ca1e <__gethex+0x13e>
 800c9c4:	2b2d      	cmp	r3, #45	; 0x2d
 800c9c6:	d02e      	beq.n	800ca26 <__gethex+0x146>
 800c9c8:	1c71      	adds	r1, r6, #1
 800c9ca:	f04f 0900 	mov.w	r9, #0
 800c9ce:	7808      	ldrb	r0, [r1, #0]
 800c9d0:	f7ff ff70 	bl	800c8b4 <__hexdig_fun>
 800c9d4:	1e43      	subs	r3, r0, #1
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	2b18      	cmp	r3, #24
 800c9da:	d82c      	bhi.n	800ca36 <__gethex+0x156>
 800c9dc:	f1a0 0210 	sub.w	r2, r0, #16
 800c9e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c9e4:	f7ff ff66 	bl	800c8b4 <__hexdig_fun>
 800c9e8:	1e43      	subs	r3, r0, #1
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	2b18      	cmp	r3, #24
 800c9ee:	d91d      	bls.n	800ca2c <__gethex+0x14c>
 800c9f0:	f1b9 0f00 	cmp.w	r9, #0
 800c9f4:	d000      	beq.n	800c9f8 <__gethex+0x118>
 800c9f6:	4252      	negs	r2, r2
 800c9f8:	4415      	add	r5, r2
 800c9fa:	f8cb 1000 	str.w	r1, [fp]
 800c9fe:	b1e4      	cbz	r4, 800ca3a <__gethex+0x15a>
 800ca00:	9b00      	ldr	r3, [sp, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	bf14      	ite	ne
 800ca06:	2700      	movne	r7, #0
 800ca08:	2706      	moveq	r7, #6
 800ca0a:	4638      	mov	r0, r7
 800ca0c:	b009      	add	sp, #36	; 0x24
 800ca0e:	ecbd 8b02 	vpop	{d8}
 800ca12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca16:	463e      	mov	r6, r7
 800ca18:	4625      	mov	r5, r4
 800ca1a:	2401      	movs	r4, #1
 800ca1c:	e7ca      	b.n	800c9b4 <__gethex+0xd4>
 800ca1e:	f04f 0900 	mov.w	r9, #0
 800ca22:	1cb1      	adds	r1, r6, #2
 800ca24:	e7d3      	b.n	800c9ce <__gethex+0xee>
 800ca26:	f04f 0901 	mov.w	r9, #1
 800ca2a:	e7fa      	b.n	800ca22 <__gethex+0x142>
 800ca2c:	230a      	movs	r3, #10
 800ca2e:	fb03 0202 	mla	r2, r3, r2, r0
 800ca32:	3a10      	subs	r2, #16
 800ca34:	e7d4      	b.n	800c9e0 <__gethex+0x100>
 800ca36:	4631      	mov	r1, r6
 800ca38:	e7df      	b.n	800c9fa <__gethex+0x11a>
 800ca3a:	1bf3      	subs	r3, r6, r7
 800ca3c:	3b01      	subs	r3, #1
 800ca3e:	4621      	mov	r1, r4
 800ca40:	2b07      	cmp	r3, #7
 800ca42:	dc0b      	bgt.n	800ca5c <__gethex+0x17c>
 800ca44:	ee18 0a10 	vmov	r0, s16
 800ca48:	f000 fa7e 	bl	800cf48 <_Balloc>
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	b940      	cbnz	r0, 800ca62 <__gethex+0x182>
 800ca50:	4b5d      	ldr	r3, [pc, #372]	; (800cbc8 <__gethex+0x2e8>)
 800ca52:	4602      	mov	r2, r0
 800ca54:	21de      	movs	r1, #222	; 0xde
 800ca56:	485d      	ldr	r0, [pc, #372]	; (800cbcc <__gethex+0x2ec>)
 800ca58:	f7ff f830 	bl	800babc <__assert_func>
 800ca5c:	3101      	adds	r1, #1
 800ca5e:	105b      	asrs	r3, r3, #1
 800ca60:	e7ee      	b.n	800ca40 <__gethex+0x160>
 800ca62:	f100 0914 	add.w	r9, r0, #20
 800ca66:	f04f 0b00 	mov.w	fp, #0
 800ca6a:	f1ca 0301 	rsb	r3, sl, #1
 800ca6e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca72:	f8cd b000 	str.w	fp, [sp]
 800ca76:	9306      	str	r3, [sp, #24]
 800ca78:	42b7      	cmp	r7, r6
 800ca7a:	d340      	bcc.n	800cafe <__gethex+0x21e>
 800ca7c:	9802      	ldr	r0, [sp, #8]
 800ca7e:	9b00      	ldr	r3, [sp, #0]
 800ca80:	f840 3b04 	str.w	r3, [r0], #4
 800ca84:	eba0 0009 	sub.w	r0, r0, r9
 800ca88:	1080      	asrs	r0, r0, #2
 800ca8a:	0146      	lsls	r6, r0, #5
 800ca8c:	6120      	str	r0, [r4, #16]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f000 fb4c 	bl	800d12c <__hi0bits>
 800ca94:	1a30      	subs	r0, r6, r0
 800ca96:	f8d8 6000 	ldr.w	r6, [r8]
 800ca9a:	42b0      	cmp	r0, r6
 800ca9c:	dd63      	ble.n	800cb66 <__gethex+0x286>
 800ca9e:	1b87      	subs	r7, r0, r6
 800caa0:	4639      	mov	r1, r7
 800caa2:	4620      	mov	r0, r4
 800caa4:	f000 fef0 	bl	800d888 <__any_on>
 800caa8:	4682      	mov	sl, r0
 800caaa:	b1a8      	cbz	r0, 800cad8 <__gethex+0x1f8>
 800caac:	1e7b      	subs	r3, r7, #1
 800caae:	1159      	asrs	r1, r3, #5
 800cab0:	f003 021f 	and.w	r2, r3, #31
 800cab4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cab8:	f04f 0a01 	mov.w	sl, #1
 800cabc:	fa0a f202 	lsl.w	r2, sl, r2
 800cac0:	420a      	tst	r2, r1
 800cac2:	d009      	beq.n	800cad8 <__gethex+0x1f8>
 800cac4:	4553      	cmp	r3, sl
 800cac6:	dd05      	ble.n	800cad4 <__gethex+0x1f4>
 800cac8:	1eb9      	subs	r1, r7, #2
 800caca:	4620      	mov	r0, r4
 800cacc:	f000 fedc 	bl	800d888 <__any_on>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d145      	bne.n	800cb60 <__gethex+0x280>
 800cad4:	f04f 0a02 	mov.w	sl, #2
 800cad8:	4639      	mov	r1, r7
 800cada:	4620      	mov	r0, r4
 800cadc:	f7ff fe98 	bl	800c810 <rshift>
 800cae0:	443d      	add	r5, r7
 800cae2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cae6:	42ab      	cmp	r3, r5
 800cae8:	da4c      	bge.n	800cb84 <__gethex+0x2a4>
 800caea:	ee18 0a10 	vmov	r0, s16
 800caee:	4621      	mov	r1, r4
 800caf0:	f000 fa6a 	bl	800cfc8 <_Bfree>
 800caf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800caf6:	2300      	movs	r3, #0
 800caf8:	6013      	str	r3, [r2, #0]
 800cafa:	27a3      	movs	r7, #163	; 0xa3
 800cafc:	e785      	b.n	800ca0a <__gethex+0x12a>
 800cafe:	1e73      	subs	r3, r6, #1
 800cb00:	9a05      	ldr	r2, [sp, #20]
 800cb02:	9303      	str	r3, [sp, #12]
 800cb04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d019      	beq.n	800cb40 <__gethex+0x260>
 800cb0c:	f1bb 0f20 	cmp.w	fp, #32
 800cb10:	d107      	bne.n	800cb22 <__gethex+0x242>
 800cb12:	9b02      	ldr	r3, [sp, #8]
 800cb14:	9a00      	ldr	r2, [sp, #0]
 800cb16:	f843 2b04 	str.w	r2, [r3], #4
 800cb1a:	9302      	str	r3, [sp, #8]
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	469b      	mov	fp, r3
 800cb22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cb26:	f7ff fec5 	bl	800c8b4 <__hexdig_fun>
 800cb2a:	9b00      	ldr	r3, [sp, #0]
 800cb2c:	f000 000f 	and.w	r0, r0, #15
 800cb30:	fa00 f00b 	lsl.w	r0, r0, fp
 800cb34:	4303      	orrs	r3, r0
 800cb36:	9300      	str	r3, [sp, #0]
 800cb38:	f10b 0b04 	add.w	fp, fp, #4
 800cb3c:	9b03      	ldr	r3, [sp, #12]
 800cb3e:	e00d      	b.n	800cb5c <__gethex+0x27c>
 800cb40:	9b03      	ldr	r3, [sp, #12]
 800cb42:	9a06      	ldr	r2, [sp, #24]
 800cb44:	4413      	add	r3, r2
 800cb46:	42bb      	cmp	r3, r7
 800cb48:	d3e0      	bcc.n	800cb0c <__gethex+0x22c>
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	9901      	ldr	r1, [sp, #4]
 800cb4e:	9307      	str	r3, [sp, #28]
 800cb50:	4652      	mov	r2, sl
 800cb52:	f001 fa81 	bl	800e058 <strncmp>
 800cb56:	9b07      	ldr	r3, [sp, #28]
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	d1d7      	bne.n	800cb0c <__gethex+0x22c>
 800cb5c:	461e      	mov	r6, r3
 800cb5e:	e78b      	b.n	800ca78 <__gethex+0x198>
 800cb60:	f04f 0a03 	mov.w	sl, #3
 800cb64:	e7b8      	b.n	800cad8 <__gethex+0x1f8>
 800cb66:	da0a      	bge.n	800cb7e <__gethex+0x29e>
 800cb68:	1a37      	subs	r7, r6, r0
 800cb6a:	4621      	mov	r1, r4
 800cb6c:	ee18 0a10 	vmov	r0, s16
 800cb70:	463a      	mov	r2, r7
 800cb72:	f000 fc45 	bl	800d400 <__lshift>
 800cb76:	1bed      	subs	r5, r5, r7
 800cb78:	4604      	mov	r4, r0
 800cb7a:	f100 0914 	add.w	r9, r0, #20
 800cb7e:	f04f 0a00 	mov.w	sl, #0
 800cb82:	e7ae      	b.n	800cae2 <__gethex+0x202>
 800cb84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cb88:	42a8      	cmp	r0, r5
 800cb8a:	dd72      	ble.n	800cc72 <__gethex+0x392>
 800cb8c:	1b45      	subs	r5, r0, r5
 800cb8e:	42ae      	cmp	r6, r5
 800cb90:	dc36      	bgt.n	800cc00 <__gethex+0x320>
 800cb92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d02a      	beq.n	800cbf0 <__gethex+0x310>
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	d02c      	beq.n	800cbf8 <__gethex+0x318>
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d11c      	bne.n	800cbdc <__gethex+0x2fc>
 800cba2:	42ae      	cmp	r6, r5
 800cba4:	d11a      	bne.n	800cbdc <__gethex+0x2fc>
 800cba6:	2e01      	cmp	r6, #1
 800cba8:	d112      	bne.n	800cbd0 <__gethex+0x2f0>
 800cbaa:	9a04      	ldr	r2, [sp, #16]
 800cbac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cbb0:	6013      	str	r3, [r2, #0]
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	6123      	str	r3, [r4, #16]
 800cbb6:	f8c9 3000 	str.w	r3, [r9]
 800cbba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbbc:	2762      	movs	r7, #98	; 0x62
 800cbbe:	601c      	str	r4, [r3, #0]
 800cbc0:	e723      	b.n	800ca0a <__gethex+0x12a>
 800cbc2:	bf00      	nop
 800cbc4:	0800ed30 	.word	0x0800ed30
 800cbc8:	0800ecb9 	.word	0x0800ecb9
 800cbcc:	0800ecca 	.word	0x0800ecca
 800cbd0:	1e71      	subs	r1, r6, #1
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f000 fe58 	bl	800d888 <__any_on>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d1e6      	bne.n	800cbaa <__gethex+0x2ca>
 800cbdc:	ee18 0a10 	vmov	r0, s16
 800cbe0:	4621      	mov	r1, r4
 800cbe2:	f000 f9f1 	bl	800cfc8 <_Bfree>
 800cbe6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cbe8:	2300      	movs	r3, #0
 800cbea:	6013      	str	r3, [r2, #0]
 800cbec:	2750      	movs	r7, #80	; 0x50
 800cbee:	e70c      	b.n	800ca0a <__gethex+0x12a>
 800cbf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d1f2      	bne.n	800cbdc <__gethex+0x2fc>
 800cbf6:	e7d8      	b.n	800cbaa <__gethex+0x2ca>
 800cbf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1d5      	bne.n	800cbaa <__gethex+0x2ca>
 800cbfe:	e7ed      	b.n	800cbdc <__gethex+0x2fc>
 800cc00:	1e6f      	subs	r7, r5, #1
 800cc02:	f1ba 0f00 	cmp.w	sl, #0
 800cc06:	d131      	bne.n	800cc6c <__gethex+0x38c>
 800cc08:	b127      	cbz	r7, 800cc14 <__gethex+0x334>
 800cc0a:	4639      	mov	r1, r7
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	f000 fe3b 	bl	800d888 <__any_on>
 800cc12:	4682      	mov	sl, r0
 800cc14:	117b      	asrs	r3, r7, #5
 800cc16:	2101      	movs	r1, #1
 800cc18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cc1c:	f007 071f 	and.w	r7, r7, #31
 800cc20:	fa01 f707 	lsl.w	r7, r1, r7
 800cc24:	421f      	tst	r7, r3
 800cc26:	4629      	mov	r1, r5
 800cc28:	4620      	mov	r0, r4
 800cc2a:	bf18      	it	ne
 800cc2c:	f04a 0a02 	orrne.w	sl, sl, #2
 800cc30:	1b76      	subs	r6, r6, r5
 800cc32:	f7ff fded 	bl	800c810 <rshift>
 800cc36:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cc3a:	2702      	movs	r7, #2
 800cc3c:	f1ba 0f00 	cmp.w	sl, #0
 800cc40:	d048      	beq.n	800ccd4 <__gethex+0x3f4>
 800cc42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d015      	beq.n	800cc76 <__gethex+0x396>
 800cc4a:	2b03      	cmp	r3, #3
 800cc4c:	d017      	beq.n	800cc7e <__gethex+0x39e>
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d109      	bne.n	800cc66 <__gethex+0x386>
 800cc52:	f01a 0f02 	tst.w	sl, #2
 800cc56:	d006      	beq.n	800cc66 <__gethex+0x386>
 800cc58:	f8d9 0000 	ldr.w	r0, [r9]
 800cc5c:	ea4a 0a00 	orr.w	sl, sl, r0
 800cc60:	f01a 0f01 	tst.w	sl, #1
 800cc64:	d10e      	bne.n	800cc84 <__gethex+0x3a4>
 800cc66:	f047 0710 	orr.w	r7, r7, #16
 800cc6a:	e033      	b.n	800ccd4 <__gethex+0x3f4>
 800cc6c:	f04f 0a01 	mov.w	sl, #1
 800cc70:	e7d0      	b.n	800cc14 <__gethex+0x334>
 800cc72:	2701      	movs	r7, #1
 800cc74:	e7e2      	b.n	800cc3c <__gethex+0x35c>
 800cc76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc78:	f1c3 0301 	rsb	r3, r3, #1
 800cc7c:	9315      	str	r3, [sp, #84]	; 0x54
 800cc7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d0f0      	beq.n	800cc66 <__gethex+0x386>
 800cc84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc88:	f104 0314 	add.w	r3, r4, #20
 800cc8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cc90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cc94:	f04f 0c00 	mov.w	ip, #0
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc9e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cca2:	d01c      	beq.n	800ccde <__gethex+0x3fe>
 800cca4:	3201      	adds	r2, #1
 800cca6:	6002      	str	r2, [r0, #0]
 800cca8:	2f02      	cmp	r7, #2
 800ccaa:	f104 0314 	add.w	r3, r4, #20
 800ccae:	d13f      	bne.n	800cd30 <__gethex+0x450>
 800ccb0:	f8d8 2000 	ldr.w	r2, [r8]
 800ccb4:	3a01      	subs	r2, #1
 800ccb6:	42b2      	cmp	r2, r6
 800ccb8:	d10a      	bne.n	800ccd0 <__gethex+0x3f0>
 800ccba:	1171      	asrs	r1, r6, #5
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccc2:	f006 061f 	and.w	r6, r6, #31
 800ccc6:	fa02 f606 	lsl.w	r6, r2, r6
 800ccca:	421e      	tst	r6, r3
 800cccc:	bf18      	it	ne
 800ccce:	4617      	movne	r7, r2
 800ccd0:	f047 0720 	orr.w	r7, r7, #32
 800ccd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccd6:	601c      	str	r4, [r3, #0]
 800ccd8:	9b04      	ldr	r3, [sp, #16]
 800ccda:	601d      	str	r5, [r3, #0]
 800ccdc:	e695      	b.n	800ca0a <__gethex+0x12a>
 800ccde:	4299      	cmp	r1, r3
 800cce0:	f843 cc04 	str.w	ip, [r3, #-4]
 800cce4:	d8d8      	bhi.n	800cc98 <__gethex+0x3b8>
 800cce6:	68a3      	ldr	r3, [r4, #8]
 800cce8:	459b      	cmp	fp, r3
 800ccea:	db19      	blt.n	800cd20 <__gethex+0x440>
 800ccec:	6861      	ldr	r1, [r4, #4]
 800ccee:	ee18 0a10 	vmov	r0, s16
 800ccf2:	3101      	adds	r1, #1
 800ccf4:	f000 f928 	bl	800cf48 <_Balloc>
 800ccf8:	4681      	mov	r9, r0
 800ccfa:	b918      	cbnz	r0, 800cd04 <__gethex+0x424>
 800ccfc:	4b1a      	ldr	r3, [pc, #104]	; (800cd68 <__gethex+0x488>)
 800ccfe:	4602      	mov	r2, r0
 800cd00:	2184      	movs	r1, #132	; 0x84
 800cd02:	e6a8      	b.n	800ca56 <__gethex+0x176>
 800cd04:	6922      	ldr	r2, [r4, #16]
 800cd06:	3202      	adds	r2, #2
 800cd08:	f104 010c 	add.w	r1, r4, #12
 800cd0c:	0092      	lsls	r2, r2, #2
 800cd0e:	300c      	adds	r0, #12
 800cd10:	f000 f90c 	bl	800cf2c <memcpy>
 800cd14:	4621      	mov	r1, r4
 800cd16:	ee18 0a10 	vmov	r0, s16
 800cd1a:	f000 f955 	bl	800cfc8 <_Bfree>
 800cd1e:	464c      	mov	r4, r9
 800cd20:	6923      	ldr	r3, [r4, #16]
 800cd22:	1c5a      	adds	r2, r3, #1
 800cd24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd28:	6122      	str	r2, [r4, #16]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	615a      	str	r2, [r3, #20]
 800cd2e:	e7bb      	b.n	800cca8 <__gethex+0x3c8>
 800cd30:	6922      	ldr	r2, [r4, #16]
 800cd32:	455a      	cmp	r2, fp
 800cd34:	dd0b      	ble.n	800cd4e <__gethex+0x46e>
 800cd36:	2101      	movs	r1, #1
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f7ff fd69 	bl	800c810 <rshift>
 800cd3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd42:	3501      	adds	r5, #1
 800cd44:	42ab      	cmp	r3, r5
 800cd46:	f6ff aed0 	blt.w	800caea <__gethex+0x20a>
 800cd4a:	2701      	movs	r7, #1
 800cd4c:	e7c0      	b.n	800ccd0 <__gethex+0x3f0>
 800cd4e:	f016 061f 	ands.w	r6, r6, #31
 800cd52:	d0fa      	beq.n	800cd4a <__gethex+0x46a>
 800cd54:	4453      	add	r3, sl
 800cd56:	f1c6 0620 	rsb	r6, r6, #32
 800cd5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cd5e:	f000 f9e5 	bl	800d12c <__hi0bits>
 800cd62:	42b0      	cmp	r0, r6
 800cd64:	dbe7      	blt.n	800cd36 <__gethex+0x456>
 800cd66:	e7f0      	b.n	800cd4a <__gethex+0x46a>
 800cd68:	0800ecb9 	.word	0x0800ecb9

0800cd6c <L_shift>:
 800cd6c:	f1c2 0208 	rsb	r2, r2, #8
 800cd70:	0092      	lsls	r2, r2, #2
 800cd72:	b570      	push	{r4, r5, r6, lr}
 800cd74:	f1c2 0620 	rsb	r6, r2, #32
 800cd78:	6843      	ldr	r3, [r0, #4]
 800cd7a:	6804      	ldr	r4, [r0, #0]
 800cd7c:	fa03 f506 	lsl.w	r5, r3, r6
 800cd80:	432c      	orrs	r4, r5
 800cd82:	40d3      	lsrs	r3, r2
 800cd84:	6004      	str	r4, [r0, #0]
 800cd86:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd8a:	4288      	cmp	r0, r1
 800cd8c:	d3f4      	bcc.n	800cd78 <L_shift+0xc>
 800cd8e:	bd70      	pop	{r4, r5, r6, pc}

0800cd90 <__match>:
 800cd90:	b530      	push	{r4, r5, lr}
 800cd92:	6803      	ldr	r3, [r0, #0]
 800cd94:	3301      	adds	r3, #1
 800cd96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd9a:	b914      	cbnz	r4, 800cda2 <__match+0x12>
 800cd9c:	6003      	str	r3, [r0, #0]
 800cd9e:	2001      	movs	r0, #1
 800cda0:	bd30      	pop	{r4, r5, pc}
 800cda2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cda6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cdaa:	2d19      	cmp	r5, #25
 800cdac:	bf98      	it	ls
 800cdae:	3220      	addls	r2, #32
 800cdb0:	42a2      	cmp	r2, r4
 800cdb2:	d0f0      	beq.n	800cd96 <__match+0x6>
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	e7f3      	b.n	800cda0 <__match+0x10>

0800cdb8 <__hexnan>:
 800cdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdbc:	680b      	ldr	r3, [r1, #0]
 800cdbe:	115e      	asrs	r6, r3, #5
 800cdc0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cdc4:	f013 031f 	ands.w	r3, r3, #31
 800cdc8:	b087      	sub	sp, #28
 800cdca:	bf18      	it	ne
 800cdcc:	3604      	addne	r6, #4
 800cdce:	2500      	movs	r5, #0
 800cdd0:	1f37      	subs	r7, r6, #4
 800cdd2:	4690      	mov	r8, r2
 800cdd4:	6802      	ldr	r2, [r0, #0]
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	4682      	mov	sl, r0
 800cdda:	f846 5c04 	str.w	r5, [r6, #-4]
 800cdde:	46b9      	mov	r9, r7
 800cde0:	463c      	mov	r4, r7
 800cde2:	9502      	str	r5, [sp, #8]
 800cde4:	46ab      	mov	fp, r5
 800cde6:	7851      	ldrb	r1, [r2, #1]
 800cde8:	1c53      	adds	r3, r2, #1
 800cdea:	9303      	str	r3, [sp, #12]
 800cdec:	b341      	cbz	r1, 800ce40 <__hexnan+0x88>
 800cdee:	4608      	mov	r0, r1
 800cdf0:	9205      	str	r2, [sp, #20]
 800cdf2:	9104      	str	r1, [sp, #16]
 800cdf4:	f7ff fd5e 	bl	800c8b4 <__hexdig_fun>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d14f      	bne.n	800ce9c <__hexnan+0xe4>
 800cdfc:	9904      	ldr	r1, [sp, #16]
 800cdfe:	9a05      	ldr	r2, [sp, #20]
 800ce00:	2920      	cmp	r1, #32
 800ce02:	d818      	bhi.n	800ce36 <__hexnan+0x7e>
 800ce04:	9b02      	ldr	r3, [sp, #8]
 800ce06:	459b      	cmp	fp, r3
 800ce08:	dd13      	ble.n	800ce32 <__hexnan+0x7a>
 800ce0a:	454c      	cmp	r4, r9
 800ce0c:	d206      	bcs.n	800ce1c <__hexnan+0x64>
 800ce0e:	2d07      	cmp	r5, #7
 800ce10:	dc04      	bgt.n	800ce1c <__hexnan+0x64>
 800ce12:	462a      	mov	r2, r5
 800ce14:	4649      	mov	r1, r9
 800ce16:	4620      	mov	r0, r4
 800ce18:	f7ff ffa8 	bl	800cd6c <L_shift>
 800ce1c:	4544      	cmp	r4, r8
 800ce1e:	d950      	bls.n	800cec2 <__hexnan+0x10a>
 800ce20:	2300      	movs	r3, #0
 800ce22:	f1a4 0904 	sub.w	r9, r4, #4
 800ce26:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce2a:	f8cd b008 	str.w	fp, [sp, #8]
 800ce2e:	464c      	mov	r4, r9
 800ce30:	461d      	mov	r5, r3
 800ce32:	9a03      	ldr	r2, [sp, #12]
 800ce34:	e7d7      	b.n	800cde6 <__hexnan+0x2e>
 800ce36:	2929      	cmp	r1, #41	; 0x29
 800ce38:	d156      	bne.n	800cee8 <__hexnan+0x130>
 800ce3a:	3202      	adds	r2, #2
 800ce3c:	f8ca 2000 	str.w	r2, [sl]
 800ce40:	f1bb 0f00 	cmp.w	fp, #0
 800ce44:	d050      	beq.n	800cee8 <__hexnan+0x130>
 800ce46:	454c      	cmp	r4, r9
 800ce48:	d206      	bcs.n	800ce58 <__hexnan+0xa0>
 800ce4a:	2d07      	cmp	r5, #7
 800ce4c:	dc04      	bgt.n	800ce58 <__hexnan+0xa0>
 800ce4e:	462a      	mov	r2, r5
 800ce50:	4649      	mov	r1, r9
 800ce52:	4620      	mov	r0, r4
 800ce54:	f7ff ff8a 	bl	800cd6c <L_shift>
 800ce58:	4544      	cmp	r4, r8
 800ce5a:	d934      	bls.n	800cec6 <__hexnan+0x10e>
 800ce5c:	f1a8 0204 	sub.w	r2, r8, #4
 800ce60:	4623      	mov	r3, r4
 800ce62:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce66:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce6a:	429f      	cmp	r7, r3
 800ce6c:	d2f9      	bcs.n	800ce62 <__hexnan+0xaa>
 800ce6e:	1b3b      	subs	r3, r7, r4
 800ce70:	f023 0303 	bic.w	r3, r3, #3
 800ce74:	3304      	adds	r3, #4
 800ce76:	3401      	adds	r4, #1
 800ce78:	3e03      	subs	r6, #3
 800ce7a:	42b4      	cmp	r4, r6
 800ce7c:	bf88      	it	hi
 800ce7e:	2304      	movhi	r3, #4
 800ce80:	4443      	add	r3, r8
 800ce82:	2200      	movs	r2, #0
 800ce84:	f843 2b04 	str.w	r2, [r3], #4
 800ce88:	429f      	cmp	r7, r3
 800ce8a:	d2fb      	bcs.n	800ce84 <__hexnan+0xcc>
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	b91b      	cbnz	r3, 800ce98 <__hexnan+0xe0>
 800ce90:	4547      	cmp	r7, r8
 800ce92:	d127      	bne.n	800cee4 <__hexnan+0x12c>
 800ce94:	2301      	movs	r3, #1
 800ce96:	603b      	str	r3, [r7, #0]
 800ce98:	2005      	movs	r0, #5
 800ce9a:	e026      	b.n	800ceea <__hexnan+0x132>
 800ce9c:	3501      	adds	r5, #1
 800ce9e:	2d08      	cmp	r5, #8
 800cea0:	f10b 0b01 	add.w	fp, fp, #1
 800cea4:	dd06      	ble.n	800ceb4 <__hexnan+0xfc>
 800cea6:	4544      	cmp	r4, r8
 800cea8:	d9c3      	bls.n	800ce32 <__hexnan+0x7a>
 800ceaa:	2300      	movs	r3, #0
 800ceac:	f844 3c04 	str.w	r3, [r4, #-4]
 800ceb0:	2501      	movs	r5, #1
 800ceb2:	3c04      	subs	r4, #4
 800ceb4:	6822      	ldr	r2, [r4, #0]
 800ceb6:	f000 000f 	and.w	r0, r0, #15
 800ceba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cebe:	6022      	str	r2, [r4, #0]
 800cec0:	e7b7      	b.n	800ce32 <__hexnan+0x7a>
 800cec2:	2508      	movs	r5, #8
 800cec4:	e7b5      	b.n	800ce32 <__hexnan+0x7a>
 800cec6:	9b01      	ldr	r3, [sp, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d0df      	beq.n	800ce8c <__hexnan+0xd4>
 800cecc:	f04f 32ff 	mov.w	r2, #4294967295
 800ced0:	f1c3 0320 	rsb	r3, r3, #32
 800ced4:	fa22 f303 	lsr.w	r3, r2, r3
 800ced8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cedc:	401a      	ands	r2, r3
 800cede:	f846 2c04 	str.w	r2, [r6, #-4]
 800cee2:	e7d3      	b.n	800ce8c <__hexnan+0xd4>
 800cee4:	3f04      	subs	r7, #4
 800cee6:	e7d1      	b.n	800ce8c <__hexnan+0xd4>
 800cee8:	2004      	movs	r0, #4
 800ceea:	b007      	add	sp, #28
 800ceec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cef0 <_localeconv_r>:
 800cef0:	4800      	ldr	r0, [pc, #0]	; (800cef4 <_localeconv_r+0x4>)
 800cef2:	4770      	bx	lr
 800cef4:	20000364 	.word	0x20000364

0800cef8 <malloc>:
 800cef8:	4b02      	ldr	r3, [pc, #8]	; (800cf04 <malloc+0xc>)
 800cefa:	4601      	mov	r1, r0
 800cefc:	6818      	ldr	r0, [r3, #0]
 800cefe:	f000 bd67 	b.w	800d9d0 <_malloc_r>
 800cf02:	bf00      	nop
 800cf04:	2000020c 	.word	0x2000020c

0800cf08 <__ascii_mbtowc>:
 800cf08:	b082      	sub	sp, #8
 800cf0a:	b901      	cbnz	r1, 800cf0e <__ascii_mbtowc+0x6>
 800cf0c:	a901      	add	r1, sp, #4
 800cf0e:	b142      	cbz	r2, 800cf22 <__ascii_mbtowc+0x1a>
 800cf10:	b14b      	cbz	r3, 800cf26 <__ascii_mbtowc+0x1e>
 800cf12:	7813      	ldrb	r3, [r2, #0]
 800cf14:	600b      	str	r3, [r1, #0]
 800cf16:	7812      	ldrb	r2, [r2, #0]
 800cf18:	1e10      	subs	r0, r2, #0
 800cf1a:	bf18      	it	ne
 800cf1c:	2001      	movne	r0, #1
 800cf1e:	b002      	add	sp, #8
 800cf20:	4770      	bx	lr
 800cf22:	4610      	mov	r0, r2
 800cf24:	e7fb      	b.n	800cf1e <__ascii_mbtowc+0x16>
 800cf26:	f06f 0001 	mvn.w	r0, #1
 800cf2a:	e7f8      	b.n	800cf1e <__ascii_mbtowc+0x16>

0800cf2c <memcpy>:
 800cf2c:	440a      	add	r2, r1
 800cf2e:	4291      	cmp	r1, r2
 800cf30:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf34:	d100      	bne.n	800cf38 <memcpy+0xc>
 800cf36:	4770      	bx	lr
 800cf38:	b510      	push	{r4, lr}
 800cf3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf42:	4291      	cmp	r1, r2
 800cf44:	d1f9      	bne.n	800cf3a <memcpy+0xe>
 800cf46:	bd10      	pop	{r4, pc}

0800cf48 <_Balloc>:
 800cf48:	b570      	push	{r4, r5, r6, lr}
 800cf4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	460d      	mov	r5, r1
 800cf50:	b976      	cbnz	r6, 800cf70 <_Balloc+0x28>
 800cf52:	2010      	movs	r0, #16
 800cf54:	f7ff ffd0 	bl	800cef8 <malloc>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	6260      	str	r0, [r4, #36]	; 0x24
 800cf5c:	b920      	cbnz	r0, 800cf68 <_Balloc+0x20>
 800cf5e:	4b18      	ldr	r3, [pc, #96]	; (800cfc0 <_Balloc+0x78>)
 800cf60:	4818      	ldr	r0, [pc, #96]	; (800cfc4 <_Balloc+0x7c>)
 800cf62:	2166      	movs	r1, #102	; 0x66
 800cf64:	f7fe fdaa 	bl	800babc <__assert_func>
 800cf68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf6c:	6006      	str	r6, [r0, #0]
 800cf6e:	60c6      	str	r6, [r0, #12]
 800cf70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf72:	68f3      	ldr	r3, [r6, #12]
 800cf74:	b183      	cbz	r3, 800cf98 <_Balloc+0x50>
 800cf76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf7e:	b9b8      	cbnz	r0, 800cfb0 <_Balloc+0x68>
 800cf80:	2101      	movs	r1, #1
 800cf82:	fa01 f605 	lsl.w	r6, r1, r5
 800cf86:	1d72      	adds	r2, r6, #5
 800cf88:	0092      	lsls	r2, r2, #2
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f000 fc9d 	bl	800d8ca <_calloc_r>
 800cf90:	b160      	cbz	r0, 800cfac <_Balloc+0x64>
 800cf92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf96:	e00e      	b.n	800cfb6 <_Balloc+0x6e>
 800cf98:	2221      	movs	r2, #33	; 0x21
 800cf9a:	2104      	movs	r1, #4
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f000 fc94 	bl	800d8ca <_calloc_r>
 800cfa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfa4:	60f0      	str	r0, [r6, #12]
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1e4      	bne.n	800cf76 <_Balloc+0x2e>
 800cfac:	2000      	movs	r0, #0
 800cfae:	bd70      	pop	{r4, r5, r6, pc}
 800cfb0:	6802      	ldr	r2, [r0, #0]
 800cfb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cfbc:	e7f7      	b.n	800cfae <_Balloc+0x66>
 800cfbe:	bf00      	nop
 800cfc0:	0800eaa0 	.word	0x0800eaa0
 800cfc4:	0800ed44 	.word	0x0800ed44

0800cfc8 <_Bfree>:
 800cfc8:	b570      	push	{r4, r5, r6, lr}
 800cfca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cfcc:	4605      	mov	r5, r0
 800cfce:	460c      	mov	r4, r1
 800cfd0:	b976      	cbnz	r6, 800cff0 <_Bfree+0x28>
 800cfd2:	2010      	movs	r0, #16
 800cfd4:	f7ff ff90 	bl	800cef8 <malloc>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	6268      	str	r0, [r5, #36]	; 0x24
 800cfdc:	b920      	cbnz	r0, 800cfe8 <_Bfree+0x20>
 800cfde:	4b09      	ldr	r3, [pc, #36]	; (800d004 <_Bfree+0x3c>)
 800cfe0:	4809      	ldr	r0, [pc, #36]	; (800d008 <_Bfree+0x40>)
 800cfe2:	218a      	movs	r1, #138	; 0x8a
 800cfe4:	f7fe fd6a 	bl	800babc <__assert_func>
 800cfe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfec:	6006      	str	r6, [r0, #0]
 800cfee:	60c6      	str	r6, [r0, #12]
 800cff0:	b13c      	cbz	r4, 800d002 <_Bfree+0x3a>
 800cff2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cff4:	6862      	ldr	r2, [r4, #4]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cffc:	6021      	str	r1, [r4, #0]
 800cffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d002:	bd70      	pop	{r4, r5, r6, pc}
 800d004:	0800eaa0 	.word	0x0800eaa0
 800d008:	0800ed44 	.word	0x0800ed44

0800d00c <__multadd>:
 800d00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d010:	690d      	ldr	r5, [r1, #16]
 800d012:	4607      	mov	r7, r0
 800d014:	460c      	mov	r4, r1
 800d016:	461e      	mov	r6, r3
 800d018:	f101 0c14 	add.w	ip, r1, #20
 800d01c:	2000      	movs	r0, #0
 800d01e:	f8dc 3000 	ldr.w	r3, [ip]
 800d022:	b299      	uxth	r1, r3
 800d024:	fb02 6101 	mla	r1, r2, r1, r6
 800d028:	0c1e      	lsrs	r6, r3, #16
 800d02a:	0c0b      	lsrs	r3, r1, #16
 800d02c:	fb02 3306 	mla	r3, r2, r6, r3
 800d030:	b289      	uxth	r1, r1
 800d032:	3001      	adds	r0, #1
 800d034:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d038:	4285      	cmp	r5, r0
 800d03a:	f84c 1b04 	str.w	r1, [ip], #4
 800d03e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d042:	dcec      	bgt.n	800d01e <__multadd+0x12>
 800d044:	b30e      	cbz	r6, 800d08a <__multadd+0x7e>
 800d046:	68a3      	ldr	r3, [r4, #8]
 800d048:	42ab      	cmp	r3, r5
 800d04a:	dc19      	bgt.n	800d080 <__multadd+0x74>
 800d04c:	6861      	ldr	r1, [r4, #4]
 800d04e:	4638      	mov	r0, r7
 800d050:	3101      	adds	r1, #1
 800d052:	f7ff ff79 	bl	800cf48 <_Balloc>
 800d056:	4680      	mov	r8, r0
 800d058:	b928      	cbnz	r0, 800d066 <__multadd+0x5a>
 800d05a:	4602      	mov	r2, r0
 800d05c:	4b0c      	ldr	r3, [pc, #48]	; (800d090 <__multadd+0x84>)
 800d05e:	480d      	ldr	r0, [pc, #52]	; (800d094 <__multadd+0x88>)
 800d060:	21b5      	movs	r1, #181	; 0xb5
 800d062:	f7fe fd2b 	bl	800babc <__assert_func>
 800d066:	6922      	ldr	r2, [r4, #16]
 800d068:	3202      	adds	r2, #2
 800d06a:	f104 010c 	add.w	r1, r4, #12
 800d06e:	0092      	lsls	r2, r2, #2
 800d070:	300c      	adds	r0, #12
 800d072:	f7ff ff5b 	bl	800cf2c <memcpy>
 800d076:	4621      	mov	r1, r4
 800d078:	4638      	mov	r0, r7
 800d07a:	f7ff ffa5 	bl	800cfc8 <_Bfree>
 800d07e:	4644      	mov	r4, r8
 800d080:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d084:	3501      	adds	r5, #1
 800d086:	615e      	str	r6, [r3, #20]
 800d088:	6125      	str	r5, [r4, #16]
 800d08a:	4620      	mov	r0, r4
 800d08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d090:	0800ecb9 	.word	0x0800ecb9
 800d094:	0800ed44 	.word	0x0800ed44

0800d098 <__s2b>:
 800d098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d09c:	460c      	mov	r4, r1
 800d09e:	4615      	mov	r5, r2
 800d0a0:	461f      	mov	r7, r3
 800d0a2:	2209      	movs	r2, #9
 800d0a4:	3308      	adds	r3, #8
 800d0a6:	4606      	mov	r6, r0
 800d0a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	db09      	blt.n	800d0c8 <__s2b+0x30>
 800d0b4:	4630      	mov	r0, r6
 800d0b6:	f7ff ff47 	bl	800cf48 <_Balloc>
 800d0ba:	b940      	cbnz	r0, 800d0ce <__s2b+0x36>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	4b19      	ldr	r3, [pc, #100]	; (800d124 <__s2b+0x8c>)
 800d0c0:	4819      	ldr	r0, [pc, #100]	; (800d128 <__s2b+0x90>)
 800d0c2:	21ce      	movs	r1, #206	; 0xce
 800d0c4:	f7fe fcfa 	bl	800babc <__assert_func>
 800d0c8:	0052      	lsls	r2, r2, #1
 800d0ca:	3101      	adds	r1, #1
 800d0cc:	e7f0      	b.n	800d0b0 <__s2b+0x18>
 800d0ce:	9b08      	ldr	r3, [sp, #32]
 800d0d0:	6143      	str	r3, [r0, #20]
 800d0d2:	2d09      	cmp	r5, #9
 800d0d4:	f04f 0301 	mov.w	r3, #1
 800d0d8:	6103      	str	r3, [r0, #16]
 800d0da:	dd16      	ble.n	800d10a <__s2b+0x72>
 800d0dc:	f104 0909 	add.w	r9, r4, #9
 800d0e0:	46c8      	mov	r8, r9
 800d0e2:	442c      	add	r4, r5
 800d0e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d0e8:	4601      	mov	r1, r0
 800d0ea:	3b30      	subs	r3, #48	; 0x30
 800d0ec:	220a      	movs	r2, #10
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	f7ff ff8c 	bl	800d00c <__multadd>
 800d0f4:	45a0      	cmp	r8, r4
 800d0f6:	d1f5      	bne.n	800d0e4 <__s2b+0x4c>
 800d0f8:	f1a5 0408 	sub.w	r4, r5, #8
 800d0fc:	444c      	add	r4, r9
 800d0fe:	1b2d      	subs	r5, r5, r4
 800d100:	1963      	adds	r3, r4, r5
 800d102:	42bb      	cmp	r3, r7
 800d104:	db04      	blt.n	800d110 <__s2b+0x78>
 800d106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d10a:	340a      	adds	r4, #10
 800d10c:	2509      	movs	r5, #9
 800d10e:	e7f6      	b.n	800d0fe <__s2b+0x66>
 800d110:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d114:	4601      	mov	r1, r0
 800d116:	3b30      	subs	r3, #48	; 0x30
 800d118:	220a      	movs	r2, #10
 800d11a:	4630      	mov	r0, r6
 800d11c:	f7ff ff76 	bl	800d00c <__multadd>
 800d120:	e7ee      	b.n	800d100 <__s2b+0x68>
 800d122:	bf00      	nop
 800d124:	0800ecb9 	.word	0x0800ecb9
 800d128:	0800ed44 	.word	0x0800ed44

0800d12c <__hi0bits>:
 800d12c:	0c03      	lsrs	r3, r0, #16
 800d12e:	041b      	lsls	r3, r3, #16
 800d130:	b9d3      	cbnz	r3, 800d168 <__hi0bits+0x3c>
 800d132:	0400      	lsls	r0, r0, #16
 800d134:	2310      	movs	r3, #16
 800d136:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d13a:	bf04      	itt	eq
 800d13c:	0200      	lsleq	r0, r0, #8
 800d13e:	3308      	addeq	r3, #8
 800d140:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d144:	bf04      	itt	eq
 800d146:	0100      	lsleq	r0, r0, #4
 800d148:	3304      	addeq	r3, #4
 800d14a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d14e:	bf04      	itt	eq
 800d150:	0080      	lsleq	r0, r0, #2
 800d152:	3302      	addeq	r3, #2
 800d154:	2800      	cmp	r0, #0
 800d156:	db05      	blt.n	800d164 <__hi0bits+0x38>
 800d158:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d15c:	f103 0301 	add.w	r3, r3, #1
 800d160:	bf08      	it	eq
 800d162:	2320      	moveq	r3, #32
 800d164:	4618      	mov	r0, r3
 800d166:	4770      	bx	lr
 800d168:	2300      	movs	r3, #0
 800d16a:	e7e4      	b.n	800d136 <__hi0bits+0xa>

0800d16c <__lo0bits>:
 800d16c:	6803      	ldr	r3, [r0, #0]
 800d16e:	f013 0207 	ands.w	r2, r3, #7
 800d172:	4601      	mov	r1, r0
 800d174:	d00b      	beq.n	800d18e <__lo0bits+0x22>
 800d176:	07da      	lsls	r2, r3, #31
 800d178:	d423      	bmi.n	800d1c2 <__lo0bits+0x56>
 800d17a:	0798      	lsls	r0, r3, #30
 800d17c:	bf49      	itett	mi
 800d17e:	085b      	lsrmi	r3, r3, #1
 800d180:	089b      	lsrpl	r3, r3, #2
 800d182:	2001      	movmi	r0, #1
 800d184:	600b      	strmi	r3, [r1, #0]
 800d186:	bf5c      	itt	pl
 800d188:	600b      	strpl	r3, [r1, #0]
 800d18a:	2002      	movpl	r0, #2
 800d18c:	4770      	bx	lr
 800d18e:	b298      	uxth	r0, r3
 800d190:	b9a8      	cbnz	r0, 800d1be <__lo0bits+0x52>
 800d192:	0c1b      	lsrs	r3, r3, #16
 800d194:	2010      	movs	r0, #16
 800d196:	b2da      	uxtb	r2, r3
 800d198:	b90a      	cbnz	r2, 800d19e <__lo0bits+0x32>
 800d19a:	3008      	adds	r0, #8
 800d19c:	0a1b      	lsrs	r3, r3, #8
 800d19e:	071a      	lsls	r2, r3, #28
 800d1a0:	bf04      	itt	eq
 800d1a2:	091b      	lsreq	r3, r3, #4
 800d1a4:	3004      	addeq	r0, #4
 800d1a6:	079a      	lsls	r2, r3, #30
 800d1a8:	bf04      	itt	eq
 800d1aa:	089b      	lsreq	r3, r3, #2
 800d1ac:	3002      	addeq	r0, #2
 800d1ae:	07da      	lsls	r2, r3, #31
 800d1b0:	d403      	bmi.n	800d1ba <__lo0bits+0x4e>
 800d1b2:	085b      	lsrs	r3, r3, #1
 800d1b4:	f100 0001 	add.w	r0, r0, #1
 800d1b8:	d005      	beq.n	800d1c6 <__lo0bits+0x5a>
 800d1ba:	600b      	str	r3, [r1, #0]
 800d1bc:	4770      	bx	lr
 800d1be:	4610      	mov	r0, r2
 800d1c0:	e7e9      	b.n	800d196 <__lo0bits+0x2a>
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	4770      	bx	lr
 800d1c6:	2020      	movs	r0, #32
 800d1c8:	4770      	bx	lr
	...

0800d1cc <__i2b>:
 800d1cc:	b510      	push	{r4, lr}
 800d1ce:	460c      	mov	r4, r1
 800d1d0:	2101      	movs	r1, #1
 800d1d2:	f7ff feb9 	bl	800cf48 <_Balloc>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	b928      	cbnz	r0, 800d1e6 <__i2b+0x1a>
 800d1da:	4b05      	ldr	r3, [pc, #20]	; (800d1f0 <__i2b+0x24>)
 800d1dc:	4805      	ldr	r0, [pc, #20]	; (800d1f4 <__i2b+0x28>)
 800d1de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d1e2:	f7fe fc6b 	bl	800babc <__assert_func>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	6144      	str	r4, [r0, #20]
 800d1ea:	6103      	str	r3, [r0, #16]
 800d1ec:	bd10      	pop	{r4, pc}
 800d1ee:	bf00      	nop
 800d1f0:	0800ecb9 	.word	0x0800ecb9
 800d1f4:	0800ed44 	.word	0x0800ed44

0800d1f8 <__multiply>:
 800d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fc:	4691      	mov	r9, r2
 800d1fe:	690a      	ldr	r2, [r1, #16]
 800d200:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d204:	429a      	cmp	r2, r3
 800d206:	bfb8      	it	lt
 800d208:	460b      	movlt	r3, r1
 800d20a:	460c      	mov	r4, r1
 800d20c:	bfbc      	itt	lt
 800d20e:	464c      	movlt	r4, r9
 800d210:	4699      	movlt	r9, r3
 800d212:	6927      	ldr	r7, [r4, #16]
 800d214:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d218:	68a3      	ldr	r3, [r4, #8]
 800d21a:	6861      	ldr	r1, [r4, #4]
 800d21c:	eb07 060a 	add.w	r6, r7, sl
 800d220:	42b3      	cmp	r3, r6
 800d222:	b085      	sub	sp, #20
 800d224:	bfb8      	it	lt
 800d226:	3101      	addlt	r1, #1
 800d228:	f7ff fe8e 	bl	800cf48 <_Balloc>
 800d22c:	b930      	cbnz	r0, 800d23c <__multiply+0x44>
 800d22e:	4602      	mov	r2, r0
 800d230:	4b44      	ldr	r3, [pc, #272]	; (800d344 <__multiply+0x14c>)
 800d232:	4845      	ldr	r0, [pc, #276]	; (800d348 <__multiply+0x150>)
 800d234:	f240 115d 	movw	r1, #349	; 0x15d
 800d238:	f7fe fc40 	bl	800babc <__assert_func>
 800d23c:	f100 0514 	add.w	r5, r0, #20
 800d240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d244:	462b      	mov	r3, r5
 800d246:	2200      	movs	r2, #0
 800d248:	4543      	cmp	r3, r8
 800d24a:	d321      	bcc.n	800d290 <__multiply+0x98>
 800d24c:	f104 0314 	add.w	r3, r4, #20
 800d250:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d254:	f109 0314 	add.w	r3, r9, #20
 800d258:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d25c:	9202      	str	r2, [sp, #8]
 800d25e:	1b3a      	subs	r2, r7, r4
 800d260:	3a15      	subs	r2, #21
 800d262:	f022 0203 	bic.w	r2, r2, #3
 800d266:	3204      	adds	r2, #4
 800d268:	f104 0115 	add.w	r1, r4, #21
 800d26c:	428f      	cmp	r7, r1
 800d26e:	bf38      	it	cc
 800d270:	2204      	movcc	r2, #4
 800d272:	9201      	str	r2, [sp, #4]
 800d274:	9a02      	ldr	r2, [sp, #8]
 800d276:	9303      	str	r3, [sp, #12]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d80c      	bhi.n	800d296 <__multiply+0x9e>
 800d27c:	2e00      	cmp	r6, #0
 800d27e:	dd03      	ble.n	800d288 <__multiply+0x90>
 800d280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d284:	2b00      	cmp	r3, #0
 800d286:	d05a      	beq.n	800d33e <__multiply+0x146>
 800d288:	6106      	str	r6, [r0, #16]
 800d28a:	b005      	add	sp, #20
 800d28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d290:	f843 2b04 	str.w	r2, [r3], #4
 800d294:	e7d8      	b.n	800d248 <__multiply+0x50>
 800d296:	f8b3 a000 	ldrh.w	sl, [r3]
 800d29a:	f1ba 0f00 	cmp.w	sl, #0
 800d29e:	d024      	beq.n	800d2ea <__multiply+0xf2>
 800d2a0:	f104 0e14 	add.w	lr, r4, #20
 800d2a4:	46a9      	mov	r9, r5
 800d2a6:	f04f 0c00 	mov.w	ip, #0
 800d2aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d2ae:	f8d9 1000 	ldr.w	r1, [r9]
 800d2b2:	fa1f fb82 	uxth.w	fp, r2
 800d2b6:	b289      	uxth	r1, r1
 800d2b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d2bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d2c0:	f8d9 2000 	ldr.w	r2, [r9]
 800d2c4:	4461      	add	r1, ip
 800d2c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d2ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800d2ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d2d2:	b289      	uxth	r1, r1
 800d2d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d2d8:	4577      	cmp	r7, lr
 800d2da:	f849 1b04 	str.w	r1, [r9], #4
 800d2de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d2e2:	d8e2      	bhi.n	800d2aa <__multiply+0xb2>
 800d2e4:	9a01      	ldr	r2, [sp, #4]
 800d2e6:	f845 c002 	str.w	ip, [r5, r2]
 800d2ea:	9a03      	ldr	r2, [sp, #12]
 800d2ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d2f0:	3304      	adds	r3, #4
 800d2f2:	f1b9 0f00 	cmp.w	r9, #0
 800d2f6:	d020      	beq.n	800d33a <__multiply+0x142>
 800d2f8:	6829      	ldr	r1, [r5, #0]
 800d2fa:	f104 0c14 	add.w	ip, r4, #20
 800d2fe:	46ae      	mov	lr, r5
 800d300:	f04f 0a00 	mov.w	sl, #0
 800d304:	f8bc b000 	ldrh.w	fp, [ip]
 800d308:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d30c:	fb09 220b 	mla	r2, r9, fp, r2
 800d310:	4492      	add	sl, r2
 800d312:	b289      	uxth	r1, r1
 800d314:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d318:	f84e 1b04 	str.w	r1, [lr], #4
 800d31c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d320:	f8be 1000 	ldrh.w	r1, [lr]
 800d324:	0c12      	lsrs	r2, r2, #16
 800d326:	fb09 1102 	mla	r1, r9, r2, r1
 800d32a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d32e:	4567      	cmp	r7, ip
 800d330:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d334:	d8e6      	bhi.n	800d304 <__multiply+0x10c>
 800d336:	9a01      	ldr	r2, [sp, #4]
 800d338:	50a9      	str	r1, [r5, r2]
 800d33a:	3504      	adds	r5, #4
 800d33c:	e79a      	b.n	800d274 <__multiply+0x7c>
 800d33e:	3e01      	subs	r6, #1
 800d340:	e79c      	b.n	800d27c <__multiply+0x84>
 800d342:	bf00      	nop
 800d344:	0800ecb9 	.word	0x0800ecb9
 800d348:	0800ed44 	.word	0x0800ed44

0800d34c <__pow5mult>:
 800d34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d350:	4615      	mov	r5, r2
 800d352:	f012 0203 	ands.w	r2, r2, #3
 800d356:	4606      	mov	r6, r0
 800d358:	460f      	mov	r7, r1
 800d35a:	d007      	beq.n	800d36c <__pow5mult+0x20>
 800d35c:	4c25      	ldr	r4, [pc, #148]	; (800d3f4 <__pow5mult+0xa8>)
 800d35e:	3a01      	subs	r2, #1
 800d360:	2300      	movs	r3, #0
 800d362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d366:	f7ff fe51 	bl	800d00c <__multadd>
 800d36a:	4607      	mov	r7, r0
 800d36c:	10ad      	asrs	r5, r5, #2
 800d36e:	d03d      	beq.n	800d3ec <__pow5mult+0xa0>
 800d370:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d372:	b97c      	cbnz	r4, 800d394 <__pow5mult+0x48>
 800d374:	2010      	movs	r0, #16
 800d376:	f7ff fdbf 	bl	800cef8 <malloc>
 800d37a:	4602      	mov	r2, r0
 800d37c:	6270      	str	r0, [r6, #36]	; 0x24
 800d37e:	b928      	cbnz	r0, 800d38c <__pow5mult+0x40>
 800d380:	4b1d      	ldr	r3, [pc, #116]	; (800d3f8 <__pow5mult+0xac>)
 800d382:	481e      	ldr	r0, [pc, #120]	; (800d3fc <__pow5mult+0xb0>)
 800d384:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d388:	f7fe fb98 	bl	800babc <__assert_func>
 800d38c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d390:	6004      	str	r4, [r0, #0]
 800d392:	60c4      	str	r4, [r0, #12]
 800d394:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d39c:	b94c      	cbnz	r4, 800d3b2 <__pow5mult+0x66>
 800d39e:	f240 2171 	movw	r1, #625	; 0x271
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	f7ff ff12 	bl	800d1cc <__i2b>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	6003      	str	r3, [r0, #0]
 800d3b2:	f04f 0900 	mov.w	r9, #0
 800d3b6:	07eb      	lsls	r3, r5, #31
 800d3b8:	d50a      	bpl.n	800d3d0 <__pow5mult+0x84>
 800d3ba:	4639      	mov	r1, r7
 800d3bc:	4622      	mov	r2, r4
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f7ff ff1a 	bl	800d1f8 <__multiply>
 800d3c4:	4639      	mov	r1, r7
 800d3c6:	4680      	mov	r8, r0
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	f7ff fdfd 	bl	800cfc8 <_Bfree>
 800d3ce:	4647      	mov	r7, r8
 800d3d0:	106d      	asrs	r5, r5, #1
 800d3d2:	d00b      	beq.n	800d3ec <__pow5mult+0xa0>
 800d3d4:	6820      	ldr	r0, [r4, #0]
 800d3d6:	b938      	cbnz	r0, 800d3e8 <__pow5mult+0x9c>
 800d3d8:	4622      	mov	r2, r4
 800d3da:	4621      	mov	r1, r4
 800d3dc:	4630      	mov	r0, r6
 800d3de:	f7ff ff0b 	bl	800d1f8 <__multiply>
 800d3e2:	6020      	str	r0, [r4, #0]
 800d3e4:	f8c0 9000 	str.w	r9, [r0]
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	e7e4      	b.n	800d3b6 <__pow5mult+0x6a>
 800d3ec:	4638      	mov	r0, r7
 800d3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3f2:	bf00      	nop
 800d3f4:	0800ee90 	.word	0x0800ee90
 800d3f8:	0800eaa0 	.word	0x0800eaa0
 800d3fc:	0800ed44 	.word	0x0800ed44

0800d400 <__lshift>:
 800d400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d404:	460c      	mov	r4, r1
 800d406:	6849      	ldr	r1, [r1, #4]
 800d408:	6923      	ldr	r3, [r4, #16]
 800d40a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d40e:	68a3      	ldr	r3, [r4, #8]
 800d410:	4607      	mov	r7, r0
 800d412:	4691      	mov	r9, r2
 800d414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d418:	f108 0601 	add.w	r6, r8, #1
 800d41c:	42b3      	cmp	r3, r6
 800d41e:	db0b      	blt.n	800d438 <__lshift+0x38>
 800d420:	4638      	mov	r0, r7
 800d422:	f7ff fd91 	bl	800cf48 <_Balloc>
 800d426:	4605      	mov	r5, r0
 800d428:	b948      	cbnz	r0, 800d43e <__lshift+0x3e>
 800d42a:	4602      	mov	r2, r0
 800d42c:	4b2a      	ldr	r3, [pc, #168]	; (800d4d8 <__lshift+0xd8>)
 800d42e:	482b      	ldr	r0, [pc, #172]	; (800d4dc <__lshift+0xdc>)
 800d430:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d434:	f7fe fb42 	bl	800babc <__assert_func>
 800d438:	3101      	adds	r1, #1
 800d43a:	005b      	lsls	r3, r3, #1
 800d43c:	e7ee      	b.n	800d41c <__lshift+0x1c>
 800d43e:	2300      	movs	r3, #0
 800d440:	f100 0114 	add.w	r1, r0, #20
 800d444:	f100 0210 	add.w	r2, r0, #16
 800d448:	4618      	mov	r0, r3
 800d44a:	4553      	cmp	r3, sl
 800d44c:	db37      	blt.n	800d4be <__lshift+0xbe>
 800d44e:	6920      	ldr	r0, [r4, #16]
 800d450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d454:	f104 0314 	add.w	r3, r4, #20
 800d458:	f019 091f 	ands.w	r9, r9, #31
 800d45c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d460:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d464:	d02f      	beq.n	800d4c6 <__lshift+0xc6>
 800d466:	f1c9 0e20 	rsb	lr, r9, #32
 800d46a:	468a      	mov	sl, r1
 800d46c:	f04f 0c00 	mov.w	ip, #0
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	fa02 f209 	lsl.w	r2, r2, r9
 800d476:	ea42 020c 	orr.w	r2, r2, ip
 800d47a:	f84a 2b04 	str.w	r2, [sl], #4
 800d47e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d482:	4298      	cmp	r0, r3
 800d484:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d488:	d8f2      	bhi.n	800d470 <__lshift+0x70>
 800d48a:	1b03      	subs	r3, r0, r4
 800d48c:	3b15      	subs	r3, #21
 800d48e:	f023 0303 	bic.w	r3, r3, #3
 800d492:	3304      	adds	r3, #4
 800d494:	f104 0215 	add.w	r2, r4, #21
 800d498:	4290      	cmp	r0, r2
 800d49a:	bf38      	it	cc
 800d49c:	2304      	movcc	r3, #4
 800d49e:	f841 c003 	str.w	ip, [r1, r3]
 800d4a2:	f1bc 0f00 	cmp.w	ip, #0
 800d4a6:	d001      	beq.n	800d4ac <__lshift+0xac>
 800d4a8:	f108 0602 	add.w	r6, r8, #2
 800d4ac:	3e01      	subs	r6, #1
 800d4ae:	4638      	mov	r0, r7
 800d4b0:	612e      	str	r6, [r5, #16]
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	f7ff fd88 	bl	800cfc8 <_Bfree>
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4be:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	e7c1      	b.n	800d44a <__lshift+0x4a>
 800d4c6:	3904      	subs	r1, #4
 800d4c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4d0:	4298      	cmp	r0, r3
 800d4d2:	d8f9      	bhi.n	800d4c8 <__lshift+0xc8>
 800d4d4:	e7ea      	b.n	800d4ac <__lshift+0xac>
 800d4d6:	bf00      	nop
 800d4d8:	0800ecb9 	.word	0x0800ecb9
 800d4dc:	0800ed44 	.word	0x0800ed44

0800d4e0 <__mcmp>:
 800d4e0:	b530      	push	{r4, r5, lr}
 800d4e2:	6902      	ldr	r2, [r0, #16]
 800d4e4:	690c      	ldr	r4, [r1, #16]
 800d4e6:	1b12      	subs	r2, r2, r4
 800d4e8:	d10e      	bne.n	800d508 <__mcmp+0x28>
 800d4ea:	f100 0314 	add.w	r3, r0, #20
 800d4ee:	3114      	adds	r1, #20
 800d4f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d4f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d4f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d4fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d500:	42a5      	cmp	r5, r4
 800d502:	d003      	beq.n	800d50c <__mcmp+0x2c>
 800d504:	d305      	bcc.n	800d512 <__mcmp+0x32>
 800d506:	2201      	movs	r2, #1
 800d508:	4610      	mov	r0, r2
 800d50a:	bd30      	pop	{r4, r5, pc}
 800d50c:	4283      	cmp	r3, r0
 800d50e:	d3f3      	bcc.n	800d4f8 <__mcmp+0x18>
 800d510:	e7fa      	b.n	800d508 <__mcmp+0x28>
 800d512:	f04f 32ff 	mov.w	r2, #4294967295
 800d516:	e7f7      	b.n	800d508 <__mcmp+0x28>

0800d518 <__mdiff>:
 800d518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51c:	460c      	mov	r4, r1
 800d51e:	4606      	mov	r6, r0
 800d520:	4611      	mov	r1, r2
 800d522:	4620      	mov	r0, r4
 800d524:	4690      	mov	r8, r2
 800d526:	f7ff ffdb 	bl	800d4e0 <__mcmp>
 800d52a:	1e05      	subs	r5, r0, #0
 800d52c:	d110      	bne.n	800d550 <__mdiff+0x38>
 800d52e:	4629      	mov	r1, r5
 800d530:	4630      	mov	r0, r6
 800d532:	f7ff fd09 	bl	800cf48 <_Balloc>
 800d536:	b930      	cbnz	r0, 800d546 <__mdiff+0x2e>
 800d538:	4b3a      	ldr	r3, [pc, #232]	; (800d624 <__mdiff+0x10c>)
 800d53a:	4602      	mov	r2, r0
 800d53c:	f240 2132 	movw	r1, #562	; 0x232
 800d540:	4839      	ldr	r0, [pc, #228]	; (800d628 <__mdiff+0x110>)
 800d542:	f7fe fabb 	bl	800babc <__assert_func>
 800d546:	2301      	movs	r3, #1
 800d548:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d54c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d550:	bfa4      	itt	ge
 800d552:	4643      	movge	r3, r8
 800d554:	46a0      	movge	r8, r4
 800d556:	4630      	mov	r0, r6
 800d558:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d55c:	bfa6      	itte	ge
 800d55e:	461c      	movge	r4, r3
 800d560:	2500      	movge	r5, #0
 800d562:	2501      	movlt	r5, #1
 800d564:	f7ff fcf0 	bl	800cf48 <_Balloc>
 800d568:	b920      	cbnz	r0, 800d574 <__mdiff+0x5c>
 800d56a:	4b2e      	ldr	r3, [pc, #184]	; (800d624 <__mdiff+0x10c>)
 800d56c:	4602      	mov	r2, r0
 800d56e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d572:	e7e5      	b.n	800d540 <__mdiff+0x28>
 800d574:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d578:	6926      	ldr	r6, [r4, #16]
 800d57a:	60c5      	str	r5, [r0, #12]
 800d57c:	f104 0914 	add.w	r9, r4, #20
 800d580:	f108 0514 	add.w	r5, r8, #20
 800d584:	f100 0e14 	add.w	lr, r0, #20
 800d588:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d58c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d590:	f108 0210 	add.w	r2, r8, #16
 800d594:	46f2      	mov	sl, lr
 800d596:	2100      	movs	r1, #0
 800d598:	f859 3b04 	ldr.w	r3, [r9], #4
 800d59c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d5a0:	fa1f f883 	uxth.w	r8, r3
 800d5a4:	fa11 f18b 	uxtah	r1, r1, fp
 800d5a8:	0c1b      	lsrs	r3, r3, #16
 800d5aa:	eba1 0808 	sub.w	r8, r1, r8
 800d5ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d5b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d5b6:	fa1f f888 	uxth.w	r8, r8
 800d5ba:	1419      	asrs	r1, r3, #16
 800d5bc:	454e      	cmp	r6, r9
 800d5be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d5c2:	f84a 3b04 	str.w	r3, [sl], #4
 800d5c6:	d8e7      	bhi.n	800d598 <__mdiff+0x80>
 800d5c8:	1b33      	subs	r3, r6, r4
 800d5ca:	3b15      	subs	r3, #21
 800d5cc:	f023 0303 	bic.w	r3, r3, #3
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	3415      	adds	r4, #21
 800d5d4:	42a6      	cmp	r6, r4
 800d5d6:	bf38      	it	cc
 800d5d8:	2304      	movcc	r3, #4
 800d5da:	441d      	add	r5, r3
 800d5dc:	4473      	add	r3, lr
 800d5de:	469e      	mov	lr, r3
 800d5e0:	462e      	mov	r6, r5
 800d5e2:	4566      	cmp	r6, ip
 800d5e4:	d30e      	bcc.n	800d604 <__mdiff+0xec>
 800d5e6:	f10c 0203 	add.w	r2, ip, #3
 800d5ea:	1b52      	subs	r2, r2, r5
 800d5ec:	f022 0203 	bic.w	r2, r2, #3
 800d5f0:	3d03      	subs	r5, #3
 800d5f2:	45ac      	cmp	ip, r5
 800d5f4:	bf38      	it	cc
 800d5f6:	2200      	movcc	r2, #0
 800d5f8:	441a      	add	r2, r3
 800d5fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d5fe:	b17b      	cbz	r3, 800d620 <__mdiff+0x108>
 800d600:	6107      	str	r7, [r0, #16]
 800d602:	e7a3      	b.n	800d54c <__mdiff+0x34>
 800d604:	f856 8b04 	ldr.w	r8, [r6], #4
 800d608:	fa11 f288 	uxtah	r2, r1, r8
 800d60c:	1414      	asrs	r4, r2, #16
 800d60e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d612:	b292      	uxth	r2, r2
 800d614:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d618:	f84e 2b04 	str.w	r2, [lr], #4
 800d61c:	1421      	asrs	r1, r4, #16
 800d61e:	e7e0      	b.n	800d5e2 <__mdiff+0xca>
 800d620:	3f01      	subs	r7, #1
 800d622:	e7ea      	b.n	800d5fa <__mdiff+0xe2>
 800d624:	0800ecb9 	.word	0x0800ecb9
 800d628:	0800ed44 	.word	0x0800ed44

0800d62c <__ulp>:
 800d62c:	b082      	sub	sp, #8
 800d62e:	ed8d 0b00 	vstr	d0, [sp]
 800d632:	9b01      	ldr	r3, [sp, #4]
 800d634:	4912      	ldr	r1, [pc, #72]	; (800d680 <__ulp+0x54>)
 800d636:	4019      	ands	r1, r3
 800d638:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d63c:	2900      	cmp	r1, #0
 800d63e:	dd05      	ble.n	800d64c <__ulp+0x20>
 800d640:	2200      	movs	r2, #0
 800d642:	460b      	mov	r3, r1
 800d644:	ec43 2b10 	vmov	d0, r2, r3
 800d648:	b002      	add	sp, #8
 800d64a:	4770      	bx	lr
 800d64c:	4249      	negs	r1, r1
 800d64e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d652:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d656:	f04f 0200 	mov.w	r2, #0
 800d65a:	f04f 0300 	mov.w	r3, #0
 800d65e:	da04      	bge.n	800d66a <__ulp+0x3e>
 800d660:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d664:	fa41 f300 	asr.w	r3, r1, r0
 800d668:	e7ec      	b.n	800d644 <__ulp+0x18>
 800d66a:	f1a0 0114 	sub.w	r1, r0, #20
 800d66e:	291e      	cmp	r1, #30
 800d670:	bfda      	itte	le
 800d672:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d676:	fa20 f101 	lsrle.w	r1, r0, r1
 800d67a:	2101      	movgt	r1, #1
 800d67c:	460a      	mov	r2, r1
 800d67e:	e7e1      	b.n	800d644 <__ulp+0x18>
 800d680:	7ff00000 	.word	0x7ff00000

0800d684 <__b2d>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	6905      	ldr	r5, [r0, #16]
 800d688:	f100 0714 	add.w	r7, r0, #20
 800d68c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d690:	1f2e      	subs	r6, r5, #4
 800d692:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d696:	4620      	mov	r0, r4
 800d698:	f7ff fd48 	bl	800d12c <__hi0bits>
 800d69c:	f1c0 0320 	rsb	r3, r0, #32
 800d6a0:	280a      	cmp	r0, #10
 800d6a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d720 <__b2d+0x9c>
 800d6a6:	600b      	str	r3, [r1, #0]
 800d6a8:	dc14      	bgt.n	800d6d4 <__b2d+0x50>
 800d6aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800d6ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800d6b2:	42b7      	cmp	r7, r6
 800d6b4:	ea41 030c 	orr.w	r3, r1, ip
 800d6b8:	bf34      	ite	cc
 800d6ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d6be:	2100      	movcs	r1, #0
 800d6c0:	3015      	adds	r0, #21
 800d6c2:	fa04 f000 	lsl.w	r0, r4, r0
 800d6c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800d6ca:	ea40 0201 	orr.w	r2, r0, r1
 800d6ce:	ec43 2b10 	vmov	d0, r2, r3
 800d6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6d4:	42b7      	cmp	r7, r6
 800d6d6:	bf3a      	itte	cc
 800d6d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d6dc:	f1a5 0608 	subcc.w	r6, r5, #8
 800d6e0:	2100      	movcs	r1, #0
 800d6e2:	380b      	subs	r0, #11
 800d6e4:	d017      	beq.n	800d716 <__b2d+0x92>
 800d6e6:	f1c0 0c20 	rsb	ip, r0, #32
 800d6ea:	fa04 f500 	lsl.w	r5, r4, r0
 800d6ee:	42be      	cmp	r6, r7
 800d6f0:	fa21 f40c 	lsr.w	r4, r1, ip
 800d6f4:	ea45 0504 	orr.w	r5, r5, r4
 800d6f8:	bf8c      	ite	hi
 800d6fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d6fe:	2400      	movls	r4, #0
 800d700:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d704:	fa01 f000 	lsl.w	r0, r1, r0
 800d708:	fa24 f40c 	lsr.w	r4, r4, ip
 800d70c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d710:	ea40 0204 	orr.w	r2, r0, r4
 800d714:	e7db      	b.n	800d6ce <__b2d+0x4a>
 800d716:	ea44 030c 	orr.w	r3, r4, ip
 800d71a:	460a      	mov	r2, r1
 800d71c:	e7d7      	b.n	800d6ce <__b2d+0x4a>
 800d71e:	bf00      	nop
 800d720:	3ff00000 	.word	0x3ff00000

0800d724 <__d2b>:
 800d724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d728:	4689      	mov	r9, r1
 800d72a:	2101      	movs	r1, #1
 800d72c:	ec57 6b10 	vmov	r6, r7, d0
 800d730:	4690      	mov	r8, r2
 800d732:	f7ff fc09 	bl	800cf48 <_Balloc>
 800d736:	4604      	mov	r4, r0
 800d738:	b930      	cbnz	r0, 800d748 <__d2b+0x24>
 800d73a:	4602      	mov	r2, r0
 800d73c:	4b25      	ldr	r3, [pc, #148]	; (800d7d4 <__d2b+0xb0>)
 800d73e:	4826      	ldr	r0, [pc, #152]	; (800d7d8 <__d2b+0xb4>)
 800d740:	f240 310a 	movw	r1, #778	; 0x30a
 800d744:	f7fe f9ba 	bl	800babc <__assert_func>
 800d748:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d74c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d750:	bb35      	cbnz	r5, 800d7a0 <__d2b+0x7c>
 800d752:	2e00      	cmp	r6, #0
 800d754:	9301      	str	r3, [sp, #4]
 800d756:	d028      	beq.n	800d7aa <__d2b+0x86>
 800d758:	4668      	mov	r0, sp
 800d75a:	9600      	str	r6, [sp, #0]
 800d75c:	f7ff fd06 	bl	800d16c <__lo0bits>
 800d760:	9900      	ldr	r1, [sp, #0]
 800d762:	b300      	cbz	r0, 800d7a6 <__d2b+0x82>
 800d764:	9a01      	ldr	r2, [sp, #4]
 800d766:	f1c0 0320 	rsb	r3, r0, #32
 800d76a:	fa02 f303 	lsl.w	r3, r2, r3
 800d76e:	430b      	orrs	r3, r1
 800d770:	40c2      	lsrs	r2, r0
 800d772:	6163      	str	r3, [r4, #20]
 800d774:	9201      	str	r2, [sp, #4]
 800d776:	9b01      	ldr	r3, [sp, #4]
 800d778:	61a3      	str	r3, [r4, #24]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	bf14      	ite	ne
 800d77e:	2202      	movne	r2, #2
 800d780:	2201      	moveq	r2, #1
 800d782:	6122      	str	r2, [r4, #16]
 800d784:	b1d5      	cbz	r5, 800d7bc <__d2b+0x98>
 800d786:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d78a:	4405      	add	r5, r0
 800d78c:	f8c9 5000 	str.w	r5, [r9]
 800d790:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d794:	f8c8 0000 	str.w	r0, [r8]
 800d798:	4620      	mov	r0, r4
 800d79a:	b003      	add	sp, #12
 800d79c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7a4:	e7d5      	b.n	800d752 <__d2b+0x2e>
 800d7a6:	6161      	str	r1, [r4, #20]
 800d7a8:	e7e5      	b.n	800d776 <__d2b+0x52>
 800d7aa:	a801      	add	r0, sp, #4
 800d7ac:	f7ff fcde 	bl	800d16c <__lo0bits>
 800d7b0:	9b01      	ldr	r3, [sp, #4]
 800d7b2:	6163      	str	r3, [r4, #20]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	6122      	str	r2, [r4, #16]
 800d7b8:	3020      	adds	r0, #32
 800d7ba:	e7e3      	b.n	800d784 <__d2b+0x60>
 800d7bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d7c4:	f8c9 0000 	str.w	r0, [r9]
 800d7c8:	6918      	ldr	r0, [r3, #16]
 800d7ca:	f7ff fcaf 	bl	800d12c <__hi0bits>
 800d7ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7d2:	e7df      	b.n	800d794 <__d2b+0x70>
 800d7d4:	0800ecb9 	.word	0x0800ecb9
 800d7d8:	0800ed44 	.word	0x0800ed44

0800d7dc <__ratio>:
 800d7dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e0:	4688      	mov	r8, r1
 800d7e2:	4669      	mov	r1, sp
 800d7e4:	4681      	mov	r9, r0
 800d7e6:	f7ff ff4d 	bl	800d684 <__b2d>
 800d7ea:	a901      	add	r1, sp, #4
 800d7ec:	4640      	mov	r0, r8
 800d7ee:	ec55 4b10 	vmov	r4, r5, d0
 800d7f2:	f7ff ff47 	bl	800d684 <__b2d>
 800d7f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d7fe:	eba3 0c02 	sub.w	ip, r3, r2
 800d802:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d806:	1a9b      	subs	r3, r3, r2
 800d808:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d80c:	ec51 0b10 	vmov	r0, r1, d0
 800d810:	2b00      	cmp	r3, #0
 800d812:	bfd6      	itet	le
 800d814:	460a      	movle	r2, r1
 800d816:	462a      	movgt	r2, r5
 800d818:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d81c:	468b      	mov	fp, r1
 800d81e:	462f      	mov	r7, r5
 800d820:	bfd4      	ite	le
 800d822:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d826:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d82a:	4620      	mov	r0, r4
 800d82c:	ee10 2a10 	vmov	r2, s0
 800d830:	465b      	mov	r3, fp
 800d832:	4639      	mov	r1, r7
 800d834:	f7f3 f842 	bl	80008bc <__aeabi_ddiv>
 800d838:	ec41 0b10 	vmov	d0, r0, r1
 800d83c:	b003      	add	sp, #12
 800d83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d842 <__copybits>:
 800d842:	3901      	subs	r1, #1
 800d844:	b570      	push	{r4, r5, r6, lr}
 800d846:	1149      	asrs	r1, r1, #5
 800d848:	6914      	ldr	r4, [r2, #16]
 800d84a:	3101      	adds	r1, #1
 800d84c:	f102 0314 	add.w	r3, r2, #20
 800d850:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d854:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d858:	1f05      	subs	r5, r0, #4
 800d85a:	42a3      	cmp	r3, r4
 800d85c:	d30c      	bcc.n	800d878 <__copybits+0x36>
 800d85e:	1aa3      	subs	r3, r4, r2
 800d860:	3b11      	subs	r3, #17
 800d862:	f023 0303 	bic.w	r3, r3, #3
 800d866:	3211      	adds	r2, #17
 800d868:	42a2      	cmp	r2, r4
 800d86a:	bf88      	it	hi
 800d86c:	2300      	movhi	r3, #0
 800d86e:	4418      	add	r0, r3
 800d870:	2300      	movs	r3, #0
 800d872:	4288      	cmp	r0, r1
 800d874:	d305      	bcc.n	800d882 <__copybits+0x40>
 800d876:	bd70      	pop	{r4, r5, r6, pc}
 800d878:	f853 6b04 	ldr.w	r6, [r3], #4
 800d87c:	f845 6f04 	str.w	r6, [r5, #4]!
 800d880:	e7eb      	b.n	800d85a <__copybits+0x18>
 800d882:	f840 3b04 	str.w	r3, [r0], #4
 800d886:	e7f4      	b.n	800d872 <__copybits+0x30>

0800d888 <__any_on>:
 800d888:	f100 0214 	add.w	r2, r0, #20
 800d88c:	6900      	ldr	r0, [r0, #16]
 800d88e:	114b      	asrs	r3, r1, #5
 800d890:	4298      	cmp	r0, r3
 800d892:	b510      	push	{r4, lr}
 800d894:	db11      	blt.n	800d8ba <__any_on+0x32>
 800d896:	dd0a      	ble.n	800d8ae <__any_on+0x26>
 800d898:	f011 011f 	ands.w	r1, r1, #31
 800d89c:	d007      	beq.n	800d8ae <__any_on+0x26>
 800d89e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8a2:	fa24 f001 	lsr.w	r0, r4, r1
 800d8a6:	fa00 f101 	lsl.w	r1, r0, r1
 800d8aa:	428c      	cmp	r4, r1
 800d8ac:	d10b      	bne.n	800d8c6 <__any_on+0x3e>
 800d8ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d803      	bhi.n	800d8be <__any_on+0x36>
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	bd10      	pop	{r4, pc}
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	e7f7      	b.n	800d8ae <__any_on+0x26>
 800d8be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d8c2:	2900      	cmp	r1, #0
 800d8c4:	d0f5      	beq.n	800d8b2 <__any_on+0x2a>
 800d8c6:	2001      	movs	r0, #1
 800d8c8:	e7f6      	b.n	800d8b8 <__any_on+0x30>

0800d8ca <_calloc_r>:
 800d8ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8cc:	fba1 2402 	umull	r2, r4, r1, r2
 800d8d0:	b94c      	cbnz	r4, 800d8e6 <_calloc_r+0x1c>
 800d8d2:	4611      	mov	r1, r2
 800d8d4:	9201      	str	r2, [sp, #4]
 800d8d6:	f000 f87b 	bl	800d9d0 <_malloc_r>
 800d8da:	9a01      	ldr	r2, [sp, #4]
 800d8dc:	4605      	mov	r5, r0
 800d8de:	b930      	cbnz	r0, 800d8ee <_calloc_r+0x24>
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	b003      	add	sp, #12
 800d8e4:	bd30      	pop	{r4, r5, pc}
 800d8e6:	220c      	movs	r2, #12
 800d8e8:	6002      	str	r2, [r0, #0]
 800d8ea:	2500      	movs	r5, #0
 800d8ec:	e7f8      	b.n	800d8e0 <_calloc_r+0x16>
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	f7fc fb28 	bl	8009f44 <memset>
 800d8f4:	e7f4      	b.n	800d8e0 <_calloc_r+0x16>
	...

0800d8f8 <_free_r>:
 800d8f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8fa:	2900      	cmp	r1, #0
 800d8fc:	d044      	beq.n	800d988 <_free_r+0x90>
 800d8fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d902:	9001      	str	r0, [sp, #4]
 800d904:	2b00      	cmp	r3, #0
 800d906:	f1a1 0404 	sub.w	r4, r1, #4
 800d90a:	bfb8      	it	lt
 800d90c:	18e4      	addlt	r4, r4, r3
 800d90e:	f000 fec7 	bl	800e6a0 <__malloc_lock>
 800d912:	4a1e      	ldr	r2, [pc, #120]	; (800d98c <_free_r+0x94>)
 800d914:	9801      	ldr	r0, [sp, #4]
 800d916:	6813      	ldr	r3, [r2, #0]
 800d918:	b933      	cbnz	r3, 800d928 <_free_r+0x30>
 800d91a:	6063      	str	r3, [r4, #4]
 800d91c:	6014      	str	r4, [r2, #0]
 800d91e:	b003      	add	sp, #12
 800d920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d924:	f000 bec2 	b.w	800e6ac <__malloc_unlock>
 800d928:	42a3      	cmp	r3, r4
 800d92a:	d908      	bls.n	800d93e <_free_r+0x46>
 800d92c:	6825      	ldr	r5, [r4, #0]
 800d92e:	1961      	adds	r1, r4, r5
 800d930:	428b      	cmp	r3, r1
 800d932:	bf01      	itttt	eq
 800d934:	6819      	ldreq	r1, [r3, #0]
 800d936:	685b      	ldreq	r3, [r3, #4]
 800d938:	1949      	addeq	r1, r1, r5
 800d93a:	6021      	streq	r1, [r4, #0]
 800d93c:	e7ed      	b.n	800d91a <_free_r+0x22>
 800d93e:	461a      	mov	r2, r3
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	b10b      	cbz	r3, 800d948 <_free_r+0x50>
 800d944:	42a3      	cmp	r3, r4
 800d946:	d9fa      	bls.n	800d93e <_free_r+0x46>
 800d948:	6811      	ldr	r1, [r2, #0]
 800d94a:	1855      	adds	r5, r2, r1
 800d94c:	42a5      	cmp	r5, r4
 800d94e:	d10b      	bne.n	800d968 <_free_r+0x70>
 800d950:	6824      	ldr	r4, [r4, #0]
 800d952:	4421      	add	r1, r4
 800d954:	1854      	adds	r4, r2, r1
 800d956:	42a3      	cmp	r3, r4
 800d958:	6011      	str	r1, [r2, #0]
 800d95a:	d1e0      	bne.n	800d91e <_free_r+0x26>
 800d95c:	681c      	ldr	r4, [r3, #0]
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	6053      	str	r3, [r2, #4]
 800d962:	4421      	add	r1, r4
 800d964:	6011      	str	r1, [r2, #0]
 800d966:	e7da      	b.n	800d91e <_free_r+0x26>
 800d968:	d902      	bls.n	800d970 <_free_r+0x78>
 800d96a:	230c      	movs	r3, #12
 800d96c:	6003      	str	r3, [r0, #0]
 800d96e:	e7d6      	b.n	800d91e <_free_r+0x26>
 800d970:	6825      	ldr	r5, [r4, #0]
 800d972:	1961      	adds	r1, r4, r5
 800d974:	428b      	cmp	r3, r1
 800d976:	bf04      	itt	eq
 800d978:	6819      	ldreq	r1, [r3, #0]
 800d97a:	685b      	ldreq	r3, [r3, #4]
 800d97c:	6063      	str	r3, [r4, #4]
 800d97e:	bf04      	itt	eq
 800d980:	1949      	addeq	r1, r1, r5
 800d982:	6021      	streq	r1, [r4, #0]
 800d984:	6054      	str	r4, [r2, #4]
 800d986:	e7ca      	b.n	800d91e <_free_r+0x26>
 800d988:	b003      	add	sp, #12
 800d98a:	bd30      	pop	{r4, r5, pc}
 800d98c:	20000810 	.word	0x20000810

0800d990 <sbrk_aligned>:
 800d990:	b570      	push	{r4, r5, r6, lr}
 800d992:	4e0e      	ldr	r6, [pc, #56]	; (800d9cc <sbrk_aligned+0x3c>)
 800d994:	460c      	mov	r4, r1
 800d996:	6831      	ldr	r1, [r6, #0]
 800d998:	4605      	mov	r5, r0
 800d99a:	b911      	cbnz	r1, 800d9a2 <sbrk_aligned+0x12>
 800d99c:	f000 fb4c 	bl	800e038 <_sbrk_r>
 800d9a0:	6030      	str	r0, [r6, #0]
 800d9a2:	4621      	mov	r1, r4
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	f000 fb47 	bl	800e038 <_sbrk_r>
 800d9aa:	1c43      	adds	r3, r0, #1
 800d9ac:	d00a      	beq.n	800d9c4 <sbrk_aligned+0x34>
 800d9ae:	1cc4      	adds	r4, r0, #3
 800d9b0:	f024 0403 	bic.w	r4, r4, #3
 800d9b4:	42a0      	cmp	r0, r4
 800d9b6:	d007      	beq.n	800d9c8 <sbrk_aligned+0x38>
 800d9b8:	1a21      	subs	r1, r4, r0
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	f000 fb3c 	bl	800e038 <_sbrk_r>
 800d9c0:	3001      	adds	r0, #1
 800d9c2:	d101      	bne.n	800d9c8 <sbrk_aligned+0x38>
 800d9c4:	f04f 34ff 	mov.w	r4, #4294967295
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	bd70      	pop	{r4, r5, r6, pc}
 800d9cc:	20000814 	.word	0x20000814

0800d9d0 <_malloc_r>:
 800d9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d4:	1ccd      	adds	r5, r1, #3
 800d9d6:	f025 0503 	bic.w	r5, r5, #3
 800d9da:	3508      	adds	r5, #8
 800d9dc:	2d0c      	cmp	r5, #12
 800d9de:	bf38      	it	cc
 800d9e0:	250c      	movcc	r5, #12
 800d9e2:	2d00      	cmp	r5, #0
 800d9e4:	4607      	mov	r7, r0
 800d9e6:	db01      	blt.n	800d9ec <_malloc_r+0x1c>
 800d9e8:	42a9      	cmp	r1, r5
 800d9ea:	d905      	bls.n	800d9f8 <_malloc_r+0x28>
 800d9ec:	230c      	movs	r3, #12
 800d9ee:	603b      	str	r3, [r7, #0]
 800d9f0:	2600      	movs	r6, #0
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9f8:	4e2e      	ldr	r6, [pc, #184]	; (800dab4 <_malloc_r+0xe4>)
 800d9fa:	f000 fe51 	bl	800e6a0 <__malloc_lock>
 800d9fe:	6833      	ldr	r3, [r6, #0]
 800da00:	461c      	mov	r4, r3
 800da02:	bb34      	cbnz	r4, 800da52 <_malloc_r+0x82>
 800da04:	4629      	mov	r1, r5
 800da06:	4638      	mov	r0, r7
 800da08:	f7ff ffc2 	bl	800d990 <sbrk_aligned>
 800da0c:	1c43      	adds	r3, r0, #1
 800da0e:	4604      	mov	r4, r0
 800da10:	d14d      	bne.n	800daae <_malloc_r+0xde>
 800da12:	6834      	ldr	r4, [r6, #0]
 800da14:	4626      	mov	r6, r4
 800da16:	2e00      	cmp	r6, #0
 800da18:	d140      	bne.n	800da9c <_malloc_r+0xcc>
 800da1a:	6823      	ldr	r3, [r4, #0]
 800da1c:	4631      	mov	r1, r6
 800da1e:	4638      	mov	r0, r7
 800da20:	eb04 0803 	add.w	r8, r4, r3
 800da24:	f000 fb08 	bl	800e038 <_sbrk_r>
 800da28:	4580      	cmp	r8, r0
 800da2a:	d13a      	bne.n	800daa2 <_malloc_r+0xd2>
 800da2c:	6821      	ldr	r1, [r4, #0]
 800da2e:	3503      	adds	r5, #3
 800da30:	1a6d      	subs	r5, r5, r1
 800da32:	f025 0503 	bic.w	r5, r5, #3
 800da36:	3508      	adds	r5, #8
 800da38:	2d0c      	cmp	r5, #12
 800da3a:	bf38      	it	cc
 800da3c:	250c      	movcc	r5, #12
 800da3e:	4629      	mov	r1, r5
 800da40:	4638      	mov	r0, r7
 800da42:	f7ff ffa5 	bl	800d990 <sbrk_aligned>
 800da46:	3001      	adds	r0, #1
 800da48:	d02b      	beq.n	800daa2 <_malloc_r+0xd2>
 800da4a:	6823      	ldr	r3, [r4, #0]
 800da4c:	442b      	add	r3, r5
 800da4e:	6023      	str	r3, [r4, #0]
 800da50:	e00e      	b.n	800da70 <_malloc_r+0xa0>
 800da52:	6822      	ldr	r2, [r4, #0]
 800da54:	1b52      	subs	r2, r2, r5
 800da56:	d41e      	bmi.n	800da96 <_malloc_r+0xc6>
 800da58:	2a0b      	cmp	r2, #11
 800da5a:	d916      	bls.n	800da8a <_malloc_r+0xba>
 800da5c:	1961      	adds	r1, r4, r5
 800da5e:	42a3      	cmp	r3, r4
 800da60:	6025      	str	r5, [r4, #0]
 800da62:	bf18      	it	ne
 800da64:	6059      	strne	r1, [r3, #4]
 800da66:	6863      	ldr	r3, [r4, #4]
 800da68:	bf08      	it	eq
 800da6a:	6031      	streq	r1, [r6, #0]
 800da6c:	5162      	str	r2, [r4, r5]
 800da6e:	604b      	str	r3, [r1, #4]
 800da70:	4638      	mov	r0, r7
 800da72:	f104 060b 	add.w	r6, r4, #11
 800da76:	f000 fe19 	bl	800e6ac <__malloc_unlock>
 800da7a:	f026 0607 	bic.w	r6, r6, #7
 800da7e:	1d23      	adds	r3, r4, #4
 800da80:	1af2      	subs	r2, r6, r3
 800da82:	d0b6      	beq.n	800d9f2 <_malloc_r+0x22>
 800da84:	1b9b      	subs	r3, r3, r6
 800da86:	50a3      	str	r3, [r4, r2]
 800da88:	e7b3      	b.n	800d9f2 <_malloc_r+0x22>
 800da8a:	6862      	ldr	r2, [r4, #4]
 800da8c:	42a3      	cmp	r3, r4
 800da8e:	bf0c      	ite	eq
 800da90:	6032      	streq	r2, [r6, #0]
 800da92:	605a      	strne	r2, [r3, #4]
 800da94:	e7ec      	b.n	800da70 <_malloc_r+0xa0>
 800da96:	4623      	mov	r3, r4
 800da98:	6864      	ldr	r4, [r4, #4]
 800da9a:	e7b2      	b.n	800da02 <_malloc_r+0x32>
 800da9c:	4634      	mov	r4, r6
 800da9e:	6876      	ldr	r6, [r6, #4]
 800daa0:	e7b9      	b.n	800da16 <_malloc_r+0x46>
 800daa2:	230c      	movs	r3, #12
 800daa4:	603b      	str	r3, [r7, #0]
 800daa6:	4638      	mov	r0, r7
 800daa8:	f000 fe00 	bl	800e6ac <__malloc_unlock>
 800daac:	e7a1      	b.n	800d9f2 <_malloc_r+0x22>
 800daae:	6025      	str	r5, [r4, #0]
 800dab0:	e7de      	b.n	800da70 <_malloc_r+0xa0>
 800dab2:	bf00      	nop
 800dab4:	20000810 	.word	0x20000810

0800dab8 <__ssputs_r>:
 800dab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dabc:	688e      	ldr	r6, [r1, #8]
 800dabe:	429e      	cmp	r6, r3
 800dac0:	4682      	mov	sl, r0
 800dac2:	460c      	mov	r4, r1
 800dac4:	4690      	mov	r8, r2
 800dac6:	461f      	mov	r7, r3
 800dac8:	d838      	bhi.n	800db3c <__ssputs_r+0x84>
 800daca:	898a      	ldrh	r2, [r1, #12]
 800dacc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dad0:	d032      	beq.n	800db38 <__ssputs_r+0x80>
 800dad2:	6825      	ldr	r5, [r4, #0]
 800dad4:	6909      	ldr	r1, [r1, #16]
 800dad6:	eba5 0901 	sub.w	r9, r5, r1
 800dada:	6965      	ldr	r5, [r4, #20]
 800dadc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dae4:	3301      	adds	r3, #1
 800dae6:	444b      	add	r3, r9
 800dae8:	106d      	asrs	r5, r5, #1
 800daea:	429d      	cmp	r5, r3
 800daec:	bf38      	it	cc
 800daee:	461d      	movcc	r5, r3
 800daf0:	0553      	lsls	r3, r2, #21
 800daf2:	d531      	bpl.n	800db58 <__ssputs_r+0xa0>
 800daf4:	4629      	mov	r1, r5
 800daf6:	f7ff ff6b 	bl	800d9d0 <_malloc_r>
 800dafa:	4606      	mov	r6, r0
 800dafc:	b950      	cbnz	r0, 800db14 <__ssputs_r+0x5c>
 800dafe:	230c      	movs	r3, #12
 800db00:	f8ca 3000 	str.w	r3, [sl]
 800db04:	89a3      	ldrh	r3, [r4, #12]
 800db06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db0a:	81a3      	strh	r3, [r4, #12]
 800db0c:	f04f 30ff 	mov.w	r0, #4294967295
 800db10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db14:	6921      	ldr	r1, [r4, #16]
 800db16:	464a      	mov	r2, r9
 800db18:	f7ff fa08 	bl	800cf2c <memcpy>
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db26:	81a3      	strh	r3, [r4, #12]
 800db28:	6126      	str	r6, [r4, #16]
 800db2a:	6165      	str	r5, [r4, #20]
 800db2c:	444e      	add	r6, r9
 800db2e:	eba5 0509 	sub.w	r5, r5, r9
 800db32:	6026      	str	r6, [r4, #0]
 800db34:	60a5      	str	r5, [r4, #8]
 800db36:	463e      	mov	r6, r7
 800db38:	42be      	cmp	r6, r7
 800db3a:	d900      	bls.n	800db3e <__ssputs_r+0x86>
 800db3c:	463e      	mov	r6, r7
 800db3e:	6820      	ldr	r0, [r4, #0]
 800db40:	4632      	mov	r2, r6
 800db42:	4641      	mov	r1, r8
 800db44:	f000 fd92 	bl	800e66c <memmove>
 800db48:	68a3      	ldr	r3, [r4, #8]
 800db4a:	1b9b      	subs	r3, r3, r6
 800db4c:	60a3      	str	r3, [r4, #8]
 800db4e:	6823      	ldr	r3, [r4, #0]
 800db50:	4433      	add	r3, r6
 800db52:	6023      	str	r3, [r4, #0]
 800db54:	2000      	movs	r0, #0
 800db56:	e7db      	b.n	800db10 <__ssputs_r+0x58>
 800db58:	462a      	mov	r2, r5
 800db5a:	f000 fdad 	bl	800e6b8 <_realloc_r>
 800db5e:	4606      	mov	r6, r0
 800db60:	2800      	cmp	r0, #0
 800db62:	d1e1      	bne.n	800db28 <__ssputs_r+0x70>
 800db64:	6921      	ldr	r1, [r4, #16]
 800db66:	4650      	mov	r0, sl
 800db68:	f7ff fec6 	bl	800d8f8 <_free_r>
 800db6c:	e7c7      	b.n	800dafe <__ssputs_r+0x46>
	...

0800db70 <_svfiprintf_r>:
 800db70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db74:	4698      	mov	r8, r3
 800db76:	898b      	ldrh	r3, [r1, #12]
 800db78:	061b      	lsls	r3, r3, #24
 800db7a:	b09d      	sub	sp, #116	; 0x74
 800db7c:	4607      	mov	r7, r0
 800db7e:	460d      	mov	r5, r1
 800db80:	4614      	mov	r4, r2
 800db82:	d50e      	bpl.n	800dba2 <_svfiprintf_r+0x32>
 800db84:	690b      	ldr	r3, [r1, #16]
 800db86:	b963      	cbnz	r3, 800dba2 <_svfiprintf_r+0x32>
 800db88:	2140      	movs	r1, #64	; 0x40
 800db8a:	f7ff ff21 	bl	800d9d0 <_malloc_r>
 800db8e:	6028      	str	r0, [r5, #0]
 800db90:	6128      	str	r0, [r5, #16]
 800db92:	b920      	cbnz	r0, 800db9e <_svfiprintf_r+0x2e>
 800db94:	230c      	movs	r3, #12
 800db96:	603b      	str	r3, [r7, #0]
 800db98:	f04f 30ff 	mov.w	r0, #4294967295
 800db9c:	e0d1      	b.n	800dd42 <_svfiprintf_r+0x1d2>
 800db9e:	2340      	movs	r3, #64	; 0x40
 800dba0:	616b      	str	r3, [r5, #20]
 800dba2:	2300      	movs	r3, #0
 800dba4:	9309      	str	r3, [sp, #36]	; 0x24
 800dba6:	2320      	movs	r3, #32
 800dba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbac:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbb0:	2330      	movs	r3, #48	; 0x30
 800dbb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd5c <_svfiprintf_r+0x1ec>
 800dbb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbba:	f04f 0901 	mov.w	r9, #1
 800dbbe:	4623      	mov	r3, r4
 800dbc0:	469a      	mov	sl, r3
 800dbc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbc6:	b10a      	cbz	r2, 800dbcc <_svfiprintf_r+0x5c>
 800dbc8:	2a25      	cmp	r2, #37	; 0x25
 800dbca:	d1f9      	bne.n	800dbc0 <_svfiprintf_r+0x50>
 800dbcc:	ebba 0b04 	subs.w	fp, sl, r4
 800dbd0:	d00b      	beq.n	800dbea <_svfiprintf_r+0x7a>
 800dbd2:	465b      	mov	r3, fp
 800dbd4:	4622      	mov	r2, r4
 800dbd6:	4629      	mov	r1, r5
 800dbd8:	4638      	mov	r0, r7
 800dbda:	f7ff ff6d 	bl	800dab8 <__ssputs_r>
 800dbde:	3001      	adds	r0, #1
 800dbe0:	f000 80aa 	beq.w	800dd38 <_svfiprintf_r+0x1c8>
 800dbe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbe6:	445a      	add	r2, fp
 800dbe8:	9209      	str	r2, [sp, #36]	; 0x24
 800dbea:	f89a 3000 	ldrb.w	r3, [sl]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	f000 80a2 	beq.w	800dd38 <_svfiprintf_r+0x1c8>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbfe:	f10a 0a01 	add.w	sl, sl, #1
 800dc02:	9304      	str	r3, [sp, #16]
 800dc04:	9307      	str	r3, [sp, #28]
 800dc06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc0a:	931a      	str	r3, [sp, #104]	; 0x68
 800dc0c:	4654      	mov	r4, sl
 800dc0e:	2205      	movs	r2, #5
 800dc10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc14:	4851      	ldr	r0, [pc, #324]	; (800dd5c <_svfiprintf_r+0x1ec>)
 800dc16:	f7f2 fb1b 	bl	8000250 <memchr>
 800dc1a:	9a04      	ldr	r2, [sp, #16]
 800dc1c:	b9d8      	cbnz	r0, 800dc56 <_svfiprintf_r+0xe6>
 800dc1e:	06d0      	lsls	r0, r2, #27
 800dc20:	bf44      	itt	mi
 800dc22:	2320      	movmi	r3, #32
 800dc24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc28:	0711      	lsls	r1, r2, #28
 800dc2a:	bf44      	itt	mi
 800dc2c:	232b      	movmi	r3, #43	; 0x2b
 800dc2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc32:	f89a 3000 	ldrb.w	r3, [sl]
 800dc36:	2b2a      	cmp	r3, #42	; 0x2a
 800dc38:	d015      	beq.n	800dc66 <_svfiprintf_r+0xf6>
 800dc3a:	9a07      	ldr	r2, [sp, #28]
 800dc3c:	4654      	mov	r4, sl
 800dc3e:	2000      	movs	r0, #0
 800dc40:	f04f 0c0a 	mov.w	ip, #10
 800dc44:	4621      	mov	r1, r4
 800dc46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc4a:	3b30      	subs	r3, #48	; 0x30
 800dc4c:	2b09      	cmp	r3, #9
 800dc4e:	d94e      	bls.n	800dcee <_svfiprintf_r+0x17e>
 800dc50:	b1b0      	cbz	r0, 800dc80 <_svfiprintf_r+0x110>
 800dc52:	9207      	str	r2, [sp, #28]
 800dc54:	e014      	b.n	800dc80 <_svfiprintf_r+0x110>
 800dc56:	eba0 0308 	sub.w	r3, r0, r8
 800dc5a:	fa09 f303 	lsl.w	r3, r9, r3
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	9304      	str	r3, [sp, #16]
 800dc62:	46a2      	mov	sl, r4
 800dc64:	e7d2      	b.n	800dc0c <_svfiprintf_r+0x9c>
 800dc66:	9b03      	ldr	r3, [sp, #12]
 800dc68:	1d19      	adds	r1, r3, #4
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	9103      	str	r1, [sp, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	bfbb      	ittet	lt
 800dc72:	425b      	neglt	r3, r3
 800dc74:	f042 0202 	orrlt.w	r2, r2, #2
 800dc78:	9307      	strge	r3, [sp, #28]
 800dc7a:	9307      	strlt	r3, [sp, #28]
 800dc7c:	bfb8      	it	lt
 800dc7e:	9204      	strlt	r2, [sp, #16]
 800dc80:	7823      	ldrb	r3, [r4, #0]
 800dc82:	2b2e      	cmp	r3, #46	; 0x2e
 800dc84:	d10c      	bne.n	800dca0 <_svfiprintf_r+0x130>
 800dc86:	7863      	ldrb	r3, [r4, #1]
 800dc88:	2b2a      	cmp	r3, #42	; 0x2a
 800dc8a:	d135      	bne.n	800dcf8 <_svfiprintf_r+0x188>
 800dc8c:	9b03      	ldr	r3, [sp, #12]
 800dc8e:	1d1a      	adds	r2, r3, #4
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	9203      	str	r2, [sp, #12]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	bfb8      	it	lt
 800dc98:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc9c:	3402      	adds	r4, #2
 800dc9e:	9305      	str	r3, [sp, #20]
 800dca0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd6c <_svfiprintf_r+0x1fc>
 800dca4:	7821      	ldrb	r1, [r4, #0]
 800dca6:	2203      	movs	r2, #3
 800dca8:	4650      	mov	r0, sl
 800dcaa:	f7f2 fad1 	bl	8000250 <memchr>
 800dcae:	b140      	cbz	r0, 800dcc2 <_svfiprintf_r+0x152>
 800dcb0:	2340      	movs	r3, #64	; 0x40
 800dcb2:	eba0 000a 	sub.w	r0, r0, sl
 800dcb6:	fa03 f000 	lsl.w	r0, r3, r0
 800dcba:	9b04      	ldr	r3, [sp, #16]
 800dcbc:	4303      	orrs	r3, r0
 800dcbe:	3401      	adds	r4, #1
 800dcc0:	9304      	str	r3, [sp, #16]
 800dcc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcc6:	4826      	ldr	r0, [pc, #152]	; (800dd60 <_svfiprintf_r+0x1f0>)
 800dcc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dccc:	2206      	movs	r2, #6
 800dcce:	f7f2 fabf 	bl	8000250 <memchr>
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	d038      	beq.n	800dd48 <_svfiprintf_r+0x1d8>
 800dcd6:	4b23      	ldr	r3, [pc, #140]	; (800dd64 <_svfiprintf_r+0x1f4>)
 800dcd8:	bb1b      	cbnz	r3, 800dd22 <_svfiprintf_r+0x1b2>
 800dcda:	9b03      	ldr	r3, [sp, #12]
 800dcdc:	3307      	adds	r3, #7
 800dcde:	f023 0307 	bic.w	r3, r3, #7
 800dce2:	3308      	adds	r3, #8
 800dce4:	9303      	str	r3, [sp, #12]
 800dce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce8:	4433      	add	r3, r6
 800dcea:	9309      	str	r3, [sp, #36]	; 0x24
 800dcec:	e767      	b.n	800dbbe <_svfiprintf_r+0x4e>
 800dcee:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcf2:	460c      	mov	r4, r1
 800dcf4:	2001      	movs	r0, #1
 800dcf6:	e7a5      	b.n	800dc44 <_svfiprintf_r+0xd4>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	3401      	adds	r4, #1
 800dcfc:	9305      	str	r3, [sp, #20]
 800dcfe:	4619      	mov	r1, r3
 800dd00:	f04f 0c0a 	mov.w	ip, #10
 800dd04:	4620      	mov	r0, r4
 800dd06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd0a:	3a30      	subs	r2, #48	; 0x30
 800dd0c:	2a09      	cmp	r2, #9
 800dd0e:	d903      	bls.n	800dd18 <_svfiprintf_r+0x1a8>
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d0c5      	beq.n	800dca0 <_svfiprintf_r+0x130>
 800dd14:	9105      	str	r1, [sp, #20]
 800dd16:	e7c3      	b.n	800dca0 <_svfiprintf_r+0x130>
 800dd18:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	2301      	movs	r3, #1
 800dd20:	e7f0      	b.n	800dd04 <_svfiprintf_r+0x194>
 800dd22:	ab03      	add	r3, sp, #12
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	462a      	mov	r2, r5
 800dd28:	4b0f      	ldr	r3, [pc, #60]	; (800dd68 <_svfiprintf_r+0x1f8>)
 800dd2a:	a904      	add	r1, sp, #16
 800dd2c:	4638      	mov	r0, r7
 800dd2e:	f7fc f9b1 	bl	800a094 <_printf_float>
 800dd32:	1c42      	adds	r2, r0, #1
 800dd34:	4606      	mov	r6, r0
 800dd36:	d1d6      	bne.n	800dce6 <_svfiprintf_r+0x176>
 800dd38:	89ab      	ldrh	r3, [r5, #12]
 800dd3a:	065b      	lsls	r3, r3, #25
 800dd3c:	f53f af2c 	bmi.w	800db98 <_svfiprintf_r+0x28>
 800dd40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd42:	b01d      	add	sp, #116	; 0x74
 800dd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd48:	ab03      	add	r3, sp, #12
 800dd4a:	9300      	str	r3, [sp, #0]
 800dd4c:	462a      	mov	r2, r5
 800dd4e:	4b06      	ldr	r3, [pc, #24]	; (800dd68 <_svfiprintf_r+0x1f8>)
 800dd50:	a904      	add	r1, sp, #16
 800dd52:	4638      	mov	r0, r7
 800dd54:	f7fc fc42 	bl	800a5dc <_printf_i>
 800dd58:	e7eb      	b.n	800dd32 <_svfiprintf_r+0x1c2>
 800dd5a:	bf00      	nop
 800dd5c:	0800ee9c 	.word	0x0800ee9c
 800dd60:	0800eea6 	.word	0x0800eea6
 800dd64:	0800a095 	.word	0x0800a095
 800dd68:	0800dab9 	.word	0x0800dab9
 800dd6c:	0800eea2 	.word	0x0800eea2

0800dd70 <__sfputc_r>:
 800dd70:	6893      	ldr	r3, [r2, #8]
 800dd72:	3b01      	subs	r3, #1
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	b410      	push	{r4}
 800dd78:	6093      	str	r3, [r2, #8]
 800dd7a:	da08      	bge.n	800dd8e <__sfputc_r+0x1e>
 800dd7c:	6994      	ldr	r4, [r2, #24]
 800dd7e:	42a3      	cmp	r3, r4
 800dd80:	db01      	blt.n	800dd86 <__sfputc_r+0x16>
 800dd82:	290a      	cmp	r1, #10
 800dd84:	d103      	bne.n	800dd8e <__sfputc_r+0x1e>
 800dd86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd8a:	f000 b979 	b.w	800e080 <__swbuf_r>
 800dd8e:	6813      	ldr	r3, [r2, #0]
 800dd90:	1c58      	adds	r0, r3, #1
 800dd92:	6010      	str	r0, [r2, #0]
 800dd94:	7019      	strb	r1, [r3, #0]
 800dd96:	4608      	mov	r0, r1
 800dd98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd9c:	4770      	bx	lr

0800dd9e <__sfputs_r>:
 800dd9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dda0:	4606      	mov	r6, r0
 800dda2:	460f      	mov	r7, r1
 800dda4:	4614      	mov	r4, r2
 800dda6:	18d5      	adds	r5, r2, r3
 800dda8:	42ac      	cmp	r4, r5
 800ddaa:	d101      	bne.n	800ddb0 <__sfputs_r+0x12>
 800ddac:	2000      	movs	r0, #0
 800ddae:	e007      	b.n	800ddc0 <__sfputs_r+0x22>
 800ddb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddb4:	463a      	mov	r2, r7
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f7ff ffda 	bl	800dd70 <__sfputc_r>
 800ddbc:	1c43      	adds	r3, r0, #1
 800ddbe:	d1f3      	bne.n	800dda8 <__sfputs_r+0xa>
 800ddc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddc4 <_vfiprintf_r>:
 800ddc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc8:	460d      	mov	r5, r1
 800ddca:	b09d      	sub	sp, #116	; 0x74
 800ddcc:	4614      	mov	r4, r2
 800ddce:	4698      	mov	r8, r3
 800ddd0:	4606      	mov	r6, r0
 800ddd2:	b118      	cbz	r0, 800dddc <_vfiprintf_r+0x18>
 800ddd4:	6983      	ldr	r3, [r0, #24]
 800ddd6:	b90b      	cbnz	r3, 800dddc <_vfiprintf_r+0x18>
 800ddd8:	f000 fb42 	bl	800e460 <__sinit>
 800dddc:	4b89      	ldr	r3, [pc, #548]	; (800e004 <_vfiprintf_r+0x240>)
 800ddde:	429d      	cmp	r5, r3
 800dde0:	d11b      	bne.n	800de1a <_vfiprintf_r+0x56>
 800dde2:	6875      	ldr	r5, [r6, #4]
 800dde4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dde6:	07d9      	lsls	r1, r3, #31
 800dde8:	d405      	bmi.n	800ddf6 <_vfiprintf_r+0x32>
 800ddea:	89ab      	ldrh	r3, [r5, #12]
 800ddec:	059a      	lsls	r2, r3, #22
 800ddee:	d402      	bmi.n	800ddf6 <_vfiprintf_r+0x32>
 800ddf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddf2:	f000 fbd3 	bl	800e59c <__retarget_lock_acquire_recursive>
 800ddf6:	89ab      	ldrh	r3, [r5, #12]
 800ddf8:	071b      	lsls	r3, r3, #28
 800ddfa:	d501      	bpl.n	800de00 <_vfiprintf_r+0x3c>
 800ddfc:	692b      	ldr	r3, [r5, #16]
 800ddfe:	b9eb      	cbnz	r3, 800de3c <_vfiprintf_r+0x78>
 800de00:	4629      	mov	r1, r5
 800de02:	4630      	mov	r0, r6
 800de04:	f000 f99c 	bl	800e140 <__swsetup_r>
 800de08:	b1c0      	cbz	r0, 800de3c <_vfiprintf_r+0x78>
 800de0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de0c:	07dc      	lsls	r4, r3, #31
 800de0e:	d50e      	bpl.n	800de2e <_vfiprintf_r+0x6a>
 800de10:	f04f 30ff 	mov.w	r0, #4294967295
 800de14:	b01d      	add	sp, #116	; 0x74
 800de16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de1a:	4b7b      	ldr	r3, [pc, #492]	; (800e008 <_vfiprintf_r+0x244>)
 800de1c:	429d      	cmp	r5, r3
 800de1e:	d101      	bne.n	800de24 <_vfiprintf_r+0x60>
 800de20:	68b5      	ldr	r5, [r6, #8]
 800de22:	e7df      	b.n	800dde4 <_vfiprintf_r+0x20>
 800de24:	4b79      	ldr	r3, [pc, #484]	; (800e00c <_vfiprintf_r+0x248>)
 800de26:	429d      	cmp	r5, r3
 800de28:	bf08      	it	eq
 800de2a:	68f5      	ldreq	r5, [r6, #12]
 800de2c:	e7da      	b.n	800dde4 <_vfiprintf_r+0x20>
 800de2e:	89ab      	ldrh	r3, [r5, #12]
 800de30:	0598      	lsls	r0, r3, #22
 800de32:	d4ed      	bmi.n	800de10 <_vfiprintf_r+0x4c>
 800de34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de36:	f000 fbb2 	bl	800e59e <__retarget_lock_release_recursive>
 800de3a:	e7e9      	b.n	800de10 <_vfiprintf_r+0x4c>
 800de3c:	2300      	movs	r3, #0
 800de3e:	9309      	str	r3, [sp, #36]	; 0x24
 800de40:	2320      	movs	r3, #32
 800de42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de46:	f8cd 800c 	str.w	r8, [sp, #12]
 800de4a:	2330      	movs	r3, #48	; 0x30
 800de4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e010 <_vfiprintf_r+0x24c>
 800de50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de54:	f04f 0901 	mov.w	r9, #1
 800de58:	4623      	mov	r3, r4
 800de5a:	469a      	mov	sl, r3
 800de5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de60:	b10a      	cbz	r2, 800de66 <_vfiprintf_r+0xa2>
 800de62:	2a25      	cmp	r2, #37	; 0x25
 800de64:	d1f9      	bne.n	800de5a <_vfiprintf_r+0x96>
 800de66:	ebba 0b04 	subs.w	fp, sl, r4
 800de6a:	d00b      	beq.n	800de84 <_vfiprintf_r+0xc0>
 800de6c:	465b      	mov	r3, fp
 800de6e:	4622      	mov	r2, r4
 800de70:	4629      	mov	r1, r5
 800de72:	4630      	mov	r0, r6
 800de74:	f7ff ff93 	bl	800dd9e <__sfputs_r>
 800de78:	3001      	adds	r0, #1
 800de7a:	f000 80aa 	beq.w	800dfd2 <_vfiprintf_r+0x20e>
 800de7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de80:	445a      	add	r2, fp
 800de82:	9209      	str	r2, [sp, #36]	; 0x24
 800de84:	f89a 3000 	ldrb.w	r3, [sl]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f000 80a2 	beq.w	800dfd2 <_vfiprintf_r+0x20e>
 800de8e:	2300      	movs	r3, #0
 800de90:	f04f 32ff 	mov.w	r2, #4294967295
 800de94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de98:	f10a 0a01 	add.w	sl, sl, #1
 800de9c:	9304      	str	r3, [sp, #16]
 800de9e:	9307      	str	r3, [sp, #28]
 800dea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dea4:	931a      	str	r3, [sp, #104]	; 0x68
 800dea6:	4654      	mov	r4, sl
 800dea8:	2205      	movs	r2, #5
 800deaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deae:	4858      	ldr	r0, [pc, #352]	; (800e010 <_vfiprintf_r+0x24c>)
 800deb0:	f7f2 f9ce 	bl	8000250 <memchr>
 800deb4:	9a04      	ldr	r2, [sp, #16]
 800deb6:	b9d8      	cbnz	r0, 800def0 <_vfiprintf_r+0x12c>
 800deb8:	06d1      	lsls	r1, r2, #27
 800deba:	bf44      	itt	mi
 800debc:	2320      	movmi	r3, #32
 800debe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dec2:	0713      	lsls	r3, r2, #28
 800dec4:	bf44      	itt	mi
 800dec6:	232b      	movmi	r3, #43	; 0x2b
 800dec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800decc:	f89a 3000 	ldrb.w	r3, [sl]
 800ded0:	2b2a      	cmp	r3, #42	; 0x2a
 800ded2:	d015      	beq.n	800df00 <_vfiprintf_r+0x13c>
 800ded4:	9a07      	ldr	r2, [sp, #28]
 800ded6:	4654      	mov	r4, sl
 800ded8:	2000      	movs	r0, #0
 800deda:	f04f 0c0a 	mov.w	ip, #10
 800dede:	4621      	mov	r1, r4
 800dee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dee4:	3b30      	subs	r3, #48	; 0x30
 800dee6:	2b09      	cmp	r3, #9
 800dee8:	d94e      	bls.n	800df88 <_vfiprintf_r+0x1c4>
 800deea:	b1b0      	cbz	r0, 800df1a <_vfiprintf_r+0x156>
 800deec:	9207      	str	r2, [sp, #28]
 800deee:	e014      	b.n	800df1a <_vfiprintf_r+0x156>
 800def0:	eba0 0308 	sub.w	r3, r0, r8
 800def4:	fa09 f303 	lsl.w	r3, r9, r3
 800def8:	4313      	orrs	r3, r2
 800defa:	9304      	str	r3, [sp, #16]
 800defc:	46a2      	mov	sl, r4
 800defe:	e7d2      	b.n	800dea6 <_vfiprintf_r+0xe2>
 800df00:	9b03      	ldr	r3, [sp, #12]
 800df02:	1d19      	adds	r1, r3, #4
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	9103      	str	r1, [sp, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	bfbb      	ittet	lt
 800df0c:	425b      	neglt	r3, r3
 800df0e:	f042 0202 	orrlt.w	r2, r2, #2
 800df12:	9307      	strge	r3, [sp, #28]
 800df14:	9307      	strlt	r3, [sp, #28]
 800df16:	bfb8      	it	lt
 800df18:	9204      	strlt	r2, [sp, #16]
 800df1a:	7823      	ldrb	r3, [r4, #0]
 800df1c:	2b2e      	cmp	r3, #46	; 0x2e
 800df1e:	d10c      	bne.n	800df3a <_vfiprintf_r+0x176>
 800df20:	7863      	ldrb	r3, [r4, #1]
 800df22:	2b2a      	cmp	r3, #42	; 0x2a
 800df24:	d135      	bne.n	800df92 <_vfiprintf_r+0x1ce>
 800df26:	9b03      	ldr	r3, [sp, #12]
 800df28:	1d1a      	adds	r2, r3, #4
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	9203      	str	r2, [sp, #12]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	bfb8      	it	lt
 800df32:	f04f 33ff 	movlt.w	r3, #4294967295
 800df36:	3402      	adds	r4, #2
 800df38:	9305      	str	r3, [sp, #20]
 800df3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e020 <_vfiprintf_r+0x25c>
 800df3e:	7821      	ldrb	r1, [r4, #0]
 800df40:	2203      	movs	r2, #3
 800df42:	4650      	mov	r0, sl
 800df44:	f7f2 f984 	bl	8000250 <memchr>
 800df48:	b140      	cbz	r0, 800df5c <_vfiprintf_r+0x198>
 800df4a:	2340      	movs	r3, #64	; 0x40
 800df4c:	eba0 000a 	sub.w	r0, r0, sl
 800df50:	fa03 f000 	lsl.w	r0, r3, r0
 800df54:	9b04      	ldr	r3, [sp, #16]
 800df56:	4303      	orrs	r3, r0
 800df58:	3401      	adds	r4, #1
 800df5a:	9304      	str	r3, [sp, #16]
 800df5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df60:	482c      	ldr	r0, [pc, #176]	; (800e014 <_vfiprintf_r+0x250>)
 800df62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df66:	2206      	movs	r2, #6
 800df68:	f7f2 f972 	bl	8000250 <memchr>
 800df6c:	2800      	cmp	r0, #0
 800df6e:	d03f      	beq.n	800dff0 <_vfiprintf_r+0x22c>
 800df70:	4b29      	ldr	r3, [pc, #164]	; (800e018 <_vfiprintf_r+0x254>)
 800df72:	bb1b      	cbnz	r3, 800dfbc <_vfiprintf_r+0x1f8>
 800df74:	9b03      	ldr	r3, [sp, #12]
 800df76:	3307      	adds	r3, #7
 800df78:	f023 0307 	bic.w	r3, r3, #7
 800df7c:	3308      	adds	r3, #8
 800df7e:	9303      	str	r3, [sp, #12]
 800df80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df82:	443b      	add	r3, r7
 800df84:	9309      	str	r3, [sp, #36]	; 0x24
 800df86:	e767      	b.n	800de58 <_vfiprintf_r+0x94>
 800df88:	fb0c 3202 	mla	r2, ip, r2, r3
 800df8c:	460c      	mov	r4, r1
 800df8e:	2001      	movs	r0, #1
 800df90:	e7a5      	b.n	800dede <_vfiprintf_r+0x11a>
 800df92:	2300      	movs	r3, #0
 800df94:	3401      	adds	r4, #1
 800df96:	9305      	str	r3, [sp, #20]
 800df98:	4619      	mov	r1, r3
 800df9a:	f04f 0c0a 	mov.w	ip, #10
 800df9e:	4620      	mov	r0, r4
 800dfa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfa4:	3a30      	subs	r2, #48	; 0x30
 800dfa6:	2a09      	cmp	r2, #9
 800dfa8:	d903      	bls.n	800dfb2 <_vfiprintf_r+0x1ee>
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d0c5      	beq.n	800df3a <_vfiprintf_r+0x176>
 800dfae:	9105      	str	r1, [sp, #20]
 800dfb0:	e7c3      	b.n	800df3a <_vfiprintf_r+0x176>
 800dfb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e7f0      	b.n	800df9e <_vfiprintf_r+0x1da>
 800dfbc:	ab03      	add	r3, sp, #12
 800dfbe:	9300      	str	r3, [sp, #0]
 800dfc0:	462a      	mov	r2, r5
 800dfc2:	4b16      	ldr	r3, [pc, #88]	; (800e01c <_vfiprintf_r+0x258>)
 800dfc4:	a904      	add	r1, sp, #16
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	f7fc f864 	bl	800a094 <_printf_float>
 800dfcc:	4607      	mov	r7, r0
 800dfce:	1c78      	adds	r0, r7, #1
 800dfd0:	d1d6      	bne.n	800df80 <_vfiprintf_r+0x1bc>
 800dfd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfd4:	07d9      	lsls	r1, r3, #31
 800dfd6:	d405      	bmi.n	800dfe4 <_vfiprintf_r+0x220>
 800dfd8:	89ab      	ldrh	r3, [r5, #12]
 800dfda:	059a      	lsls	r2, r3, #22
 800dfdc:	d402      	bmi.n	800dfe4 <_vfiprintf_r+0x220>
 800dfde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfe0:	f000 fadd 	bl	800e59e <__retarget_lock_release_recursive>
 800dfe4:	89ab      	ldrh	r3, [r5, #12]
 800dfe6:	065b      	lsls	r3, r3, #25
 800dfe8:	f53f af12 	bmi.w	800de10 <_vfiprintf_r+0x4c>
 800dfec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfee:	e711      	b.n	800de14 <_vfiprintf_r+0x50>
 800dff0:	ab03      	add	r3, sp, #12
 800dff2:	9300      	str	r3, [sp, #0]
 800dff4:	462a      	mov	r2, r5
 800dff6:	4b09      	ldr	r3, [pc, #36]	; (800e01c <_vfiprintf_r+0x258>)
 800dff8:	a904      	add	r1, sp, #16
 800dffa:	4630      	mov	r0, r6
 800dffc:	f7fc faee 	bl	800a5dc <_printf_i>
 800e000:	e7e4      	b.n	800dfcc <_vfiprintf_r+0x208>
 800e002:	bf00      	nop
 800e004:	0800eed0 	.word	0x0800eed0
 800e008:	0800eef0 	.word	0x0800eef0
 800e00c:	0800eeb0 	.word	0x0800eeb0
 800e010:	0800ee9c 	.word	0x0800ee9c
 800e014:	0800eea6 	.word	0x0800eea6
 800e018:	0800a095 	.word	0x0800a095
 800e01c:	0800dd9f 	.word	0x0800dd9f
 800e020:	0800eea2 	.word	0x0800eea2
 800e024:	00000000 	.word	0x00000000

0800e028 <nan>:
 800e028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e030 <nan+0x8>
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	00000000 	.word	0x00000000
 800e034:	7ff80000 	.word	0x7ff80000

0800e038 <_sbrk_r>:
 800e038:	b538      	push	{r3, r4, r5, lr}
 800e03a:	4d06      	ldr	r5, [pc, #24]	; (800e054 <_sbrk_r+0x1c>)
 800e03c:	2300      	movs	r3, #0
 800e03e:	4604      	mov	r4, r0
 800e040:	4608      	mov	r0, r1
 800e042:	602b      	str	r3, [r5, #0]
 800e044:	f7f4 fbdc 	bl	8002800 <_sbrk>
 800e048:	1c43      	adds	r3, r0, #1
 800e04a:	d102      	bne.n	800e052 <_sbrk_r+0x1a>
 800e04c:	682b      	ldr	r3, [r5, #0]
 800e04e:	b103      	cbz	r3, 800e052 <_sbrk_r+0x1a>
 800e050:	6023      	str	r3, [r4, #0]
 800e052:	bd38      	pop	{r3, r4, r5, pc}
 800e054:	2000081c 	.word	0x2000081c

0800e058 <strncmp>:
 800e058:	b510      	push	{r4, lr}
 800e05a:	b17a      	cbz	r2, 800e07c <strncmp+0x24>
 800e05c:	4603      	mov	r3, r0
 800e05e:	3901      	subs	r1, #1
 800e060:	1884      	adds	r4, r0, r2
 800e062:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e066:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e06a:	4290      	cmp	r0, r2
 800e06c:	d101      	bne.n	800e072 <strncmp+0x1a>
 800e06e:	42a3      	cmp	r3, r4
 800e070:	d101      	bne.n	800e076 <strncmp+0x1e>
 800e072:	1a80      	subs	r0, r0, r2
 800e074:	bd10      	pop	{r4, pc}
 800e076:	2800      	cmp	r0, #0
 800e078:	d1f3      	bne.n	800e062 <strncmp+0xa>
 800e07a:	e7fa      	b.n	800e072 <strncmp+0x1a>
 800e07c:	4610      	mov	r0, r2
 800e07e:	e7f9      	b.n	800e074 <strncmp+0x1c>

0800e080 <__swbuf_r>:
 800e080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e082:	460e      	mov	r6, r1
 800e084:	4614      	mov	r4, r2
 800e086:	4605      	mov	r5, r0
 800e088:	b118      	cbz	r0, 800e092 <__swbuf_r+0x12>
 800e08a:	6983      	ldr	r3, [r0, #24]
 800e08c:	b90b      	cbnz	r3, 800e092 <__swbuf_r+0x12>
 800e08e:	f000 f9e7 	bl	800e460 <__sinit>
 800e092:	4b21      	ldr	r3, [pc, #132]	; (800e118 <__swbuf_r+0x98>)
 800e094:	429c      	cmp	r4, r3
 800e096:	d12b      	bne.n	800e0f0 <__swbuf_r+0x70>
 800e098:	686c      	ldr	r4, [r5, #4]
 800e09a:	69a3      	ldr	r3, [r4, #24]
 800e09c:	60a3      	str	r3, [r4, #8]
 800e09e:	89a3      	ldrh	r3, [r4, #12]
 800e0a0:	071a      	lsls	r2, r3, #28
 800e0a2:	d52f      	bpl.n	800e104 <__swbuf_r+0x84>
 800e0a4:	6923      	ldr	r3, [r4, #16]
 800e0a6:	b36b      	cbz	r3, 800e104 <__swbuf_r+0x84>
 800e0a8:	6923      	ldr	r3, [r4, #16]
 800e0aa:	6820      	ldr	r0, [r4, #0]
 800e0ac:	1ac0      	subs	r0, r0, r3
 800e0ae:	6963      	ldr	r3, [r4, #20]
 800e0b0:	b2f6      	uxtb	r6, r6
 800e0b2:	4283      	cmp	r3, r0
 800e0b4:	4637      	mov	r7, r6
 800e0b6:	dc04      	bgt.n	800e0c2 <__swbuf_r+0x42>
 800e0b8:	4621      	mov	r1, r4
 800e0ba:	4628      	mov	r0, r5
 800e0bc:	f000 f93c 	bl	800e338 <_fflush_r>
 800e0c0:	bb30      	cbnz	r0, 800e110 <__swbuf_r+0x90>
 800e0c2:	68a3      	ldr	r3, [r4, #8]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	60a3      	str	r3, [r4, #8]
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	1c5a      	adds	r2, r3, #1
 800e0cc:	6022      	str	r2, [r4, #0]
 800e0ce:	701e      	strb	r6, [r3, #0]
 800e0d0:	6963      	ldr	r3, [r4, #20]
 800e0d2:	3001      	adds	r0, #1
 800e0d4:	4283      	cmp	r3, r0
 800e0d6:	d004      	beq.n	800e0e2 <__swbuf_r+0x62>
 800e0d8:	89a3      	ldrh	r3, [r4, #12]
 800e0da:	07db      	lsls	r3, r3, #31
 800e0dc:	d506      	bpl.n	800e0ec <__swbuf_r+0x6c>
 800e0de:	2e0a      	cmp	r6, #10
 800e0e0:	d104      	bne.n	800e0ec <__swbuf_r+0x6c>
 800e0e2:	4621      	mov	r1, r4
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	f000 f927 	bl	800e338 <_fflush_r>
 800e0ea:	b988      	cbnz	r0, 800e110 <__swbuf_r+0x90>
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0f0:	4b0a      	ldr	r3, [pc, #40]	; (800e11c <__swbuf_r+0x9c>)
 800e0f2:	429c      	cmp	r4, r3
 800e0f4:	d101      	bne.n	800e0fa <__swbuf_r+0x7a>
 800e0f6:	68ac      	ldr	r4, [r5, #8]
 800e0f8:	e7cf      	b.n	800e09a <__swbuf_r+0x1a>
 800e0fa:	4b09      	ldr	r3, [pc, #36]	; (800e120 <__swbuf_r+0xa0>)
 800e0fc:	429c      	cmp	r4, r3
 800e0fe:	bf08      	it	eq
 800e100:	68ec      	ldreq	r4, [r5, #12]
 800e102:	e7ca      	b.n	800e09a <__swbuf_r+0x1a>
 800e104:	4621      	mov	r1, r4
 800e106:	4628      	mov	r0, r5
 800e108:	f000 f81a 	bl	800e140 <__swsetup_r>
 800e10c:	2800      	cmp	r0, #0
 800e10e:	d0cb      	beq.n	800e0a8 <__swbuf_r+0x28>
 800e110:	f04f 37ff 	mov.w	r7, #4294967295
 800e114:	e7ea      	b.n	800e0ec <__swbuf_r+0x6c>
 800e116:	bf00      	nop
 800e118:	0800eed0 	.word	0x0800eed0
 800e11c:	0800eef0 	.word	0x0800eef0
 800e120:	0800eeb0 	.word	0x0800eeb0

0800e124 <__ascii_wctomb>:
 800e124:	b149      	cbz	r1, 800e13a <__ascii_wctomb+0x16>
 800e126:	2aff      	cmp	r2, #255	; 0xff
 800e128:	bf85      	ittet	hi
 800e12a:	238a      	movhi	r3, #138	; 0x8a
 800e12c:	6003      	strhi	r3, [r0, #0]
 800e12e:	700a      	strbls	r2, [r1, #0]
 800e130:	f04f 30ff 	movhi.w	r0, #4294967295
 800e134:	bf98      	it	ls
 800e136:	2001      	movls	r0, #1
 800e138:	4770      	bx	lr
 800e13a:	4608      	mov	r0, r1
 800e13c:	4770      	bx	lr
	...

0800e140 <__swsetup_r>:
 800e140:	4b32      	ldr	r3, [pc, #200]	; (800e20c <__swsetup_r+0xcc>)
 800e142:	b570      	push	{r4, r5, r6, lr}
 800e144:	681d      	ldr	r5, [r3, #0]
 800e146:	4606      	mov	r6, r0
 800e148:	460c      	mov	r4, r1
 800e14a:	b125      	cbz	r5, 800e156 <__swsetup_r+0x16>
 800e14c:	69ab      	ldr	r3, [r5, #24]
 800e14e:	b913      	cbnz	r3, 800e156 <__swsetup_r+0x16>
 800e150:	4628      	mov	r0, r5
 800e152:	f000 f985 	bl	800e460 <__sinit>
 800e156:	4b2e      	ldr	r3, [pc, #184]	; (800e210 <__swsetup_r+0xd0>)
 800e158:	429c      	cmp	r4, r3
 800e15a:	d10f      	bne.n	800e17c <__swsetup_r+0x3c>
 800e15c:	686c      	ldr	r4, [r5, #4]
 800e15e:	89a3      	ldrh	r3, [r4, #12]
 800e160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e164:	0719      	lsls	r1, r3, #28
 800e166:	d42c      	bmi.n	800e1c2 <__swsetup_r+0x82>
 800e168:	06dd      	lsls	r5, r3, #27
 800e16a:	d411      	bmi.n	800e190 <__swsetup_r+0x50>
 800e16c:	2309      	movs	r3, #9
 800e16e:	6033      	str	r3, [r6, #0]
 800e170:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e174:	81a3      	strh	r3, [r4, #12]
 800e176:	f04f 30ff 	mov.w	r0, #4294967295
 800e17a:	e03e      	b.n	800e1fa <__swsetup_r+0xba>
 800e17c:	4b25      	ldr	r3, [pc, #148]	; (800e214 <__swsetup_r+0xd4>)
 800e17e:	429c      	cmp	r4, r3
 800e180:	d101      	bne.n	800e186 <__swsetup_r+0x46>
 800e182:	68ac      	ldr	r4, [r5, #8]
 800e184:	e7eb      	b.n	800e15e <__swsetup_r+0x1e>
 800e186:	4b24      	ldr	r3, [pc, #144]	; (800e218 <__swsetup_r+0xd8>)
 800e188:	429c      	cmp	r4, r3
 800e18a:	bf08      	it	eq
 800e18c:	68ec      	ldreq	r4, [r5, #12]
 800e18e:	e7e6      	b.n	800e15e <__swsetup_r+0x1e>
 800e190:	0758      	lsls	r0, r3, #29
 800e192:	d512      	bpl.n	800e1ba <__swsetup_r+0x7a>
 800e194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e196:	b141      	cbz	r1, 800e1aa <__swsetup_r+0x6a>
 800e198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e19c:	4299      	cmp	r1, r3
 800e19e:	d002      	beq.n	800e1a6 <__swsetup_r+0x66>
 800e1a0:	4630      	mov	r0, r6
 800e1a2:	f7ff fba9 	bl	800d8f8 <_free_r>
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	6363      	str	r3, [r4, #52]	; 0x34
 800e1aa:	89a3      	ldrh	r3, [r4, #12]
 800e1ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e1b0:	81a3      	strh	r3, [r4, #12]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	6063      	str	r3, [r4, #4]
 800e1b6:	6923      	ldr	r3, [r4, #16]
 800e1b8:	6023      	str	r3, [r4, #0]
 800e1ba:	89a3      	ldrh	r3, [r4, #12]
 800e1bc:	f043 0308 	orr.w	r3, r3, #8
 800e1c0:	81a3      	strh	r3, [r4, #12]
 800e1c2:	6923      	ldr	r3, [r4, #16]
 800e1c4:	b94b      	cbnz	r3, 800e1da <__swsetup_r+0x9a>
 800e1c6:	89a3      	ldrh	r3, [r4, #12]
 800e1c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e1cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1d0:	d003      	beq.n	800e1da <__swsetup_r+0x9a>
 800e1d2:	4621      	mov	r1, r4
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	f000 fa09 	bl	800e5ec <__smakebuf_r>
 800e1da:	89a0      	ldrh	r0, [r4, #12]
 800e1dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1e0:	f010 0301 	ands.w	r3, r0, #1
 800e1e4:	d00a      	beq.n	800e1fc <__swsetup_r+0xbc>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	60a3      	str	r3, [r4, #8]
 800e1ea:	6963      	ldr	r3, [r4, #20]
 800e1ec:	425b      	negs	r3, r3
 800e1ee:	61a3      	str	r3, [r4, #24]
 800e1f0:	6923      	ldr	r3, [r4, #16]
 800e1f2:	b943      	cbnz	r3, 800e206 <__swsetup_r+0xc6>
 800e1f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e1f8:	d1ba      	bne.n	800e170 <__swsetup_r+0x30>
 800e1fa:	bd70      	pop	{r4, r5, r6, pc}
 800e1fc:	0781      	lsls	r1, r0, #30
 800e1fe:	bf58      	it	pl
 800e200:	6963      	ldrpl	r3, [r4, #20]
 800e202:	60a3      	str	r3, [r4, #8]
 800e204:	e7f4      	b.n	800e1f0 <__swsetup_r+0xb0>
 800e206:	2000      	movs	r0, #0
 800e208:	e7f7      	b.n	800e1fa <__swsetup_r+0xba>
 800e20a:	bf00      	nop
 800e20c:	2000020c 	.word	0x2000020c
 800e210:	0800eed0 	.word	0x0800eed0
 800e214:	0800eef0 	.word	0x0800eef0
 800e218:	0800eeb0 	.word	0x0800eeb0

0800e21c <abort>:
 800e21c:	b508      	push	{r3, lr}
 800e21e:	2006      	movs	r0, #6
 800e220:	f000 faa2 	bl	800e768 <raise>
 800e224:	2001      	movs	r0, #1
 800e226:	f7f4 fa73 	bl	8002710 <_exit>
	...

0800e22c <__sflush_r>:
 800e22c:	898a      	ldrh	r2, [r1, #12]
 800e22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e232:	4605      	mov	r5, r0
 800e234:	0710      	lsls	r0, r2, #28
 800e236:	460c      	mov	r4, r1
 800e238:	d458      	bmi.n	800e2ec <__sflush_r+0xc0>
 800e23a:	684b      	ldr	r3, [r1, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	dc05      	bgt.n	800e24c <__sflush_r+0x20>
 800e240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e242:	2b00      	cmp	r3, #0
 800e244:	dc02      	bgt.n	800e24c <__sflush_r+0x20>
 800e246:	2000      	movs	r0, #0
 800e248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e24c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e24e:	2e00      	cmp	r6, #0
 800e250:	d0f9      	beq.n	800e246 <__sflush_r+0x1a>
 800e252:	2300      	movs	r3, #0
 800e254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e258:	682f      	ldr	r7, [r5, #0]
 800e25a:	602b      	str	r3, [r5, #0]
 800e25c:	d032      	beq.n	800e2c4 <__sflush_r+0x98>
 800e25e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e260:	89a3      	ldrh	r3, [r4, #12]
 800e262:	075a      	lsls	r2, r3, #29
 800e264:	d505      	bpl.n	800e272 <__sflush_r+0x46>
 800e266:	6863      	ldr	r3, [r4, #4]
 800e268:	1ac0      	subs	r0, r0, r3
 800e26a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e26c:	b10b      	cbz	r3, 800e272 <__sflush_r+0x46>
 800e26e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e270:	1ac0      	subs	r0, r0, r3
 800e272:	2300      	movs	r3, #0
 800e274:	4602      	mov	r2, r0
 800e276:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e278:	6a21      	ldr	r1, [r4, #32]
 800e27a:	4628      	mov	r0, r5
 800e27c:	47b0      	blx	r6
 800e27e:	1c43      	adds	r3, r0, #1
 800e280:	89a3      	ldrh	r3, [r4, #12]
 800e282:	d106      	bne.n	800e292 <__sflush_r+0x66>
 800e284:	6829      	ldr	r1, [r5, #0]
 800e286:	291d      	cmp	r1, #29
 800e288:	d82c      	bhi.n	800e2e4 <__sflush_r+0xb8>
 800e28a:	4a2a      	ldr	r2, [pc, #168]	; (800e334 <__sflush_r+0x108>)
 800e28c:	40ca      	lsrs	r2, r1
 800e28e:	07d6      	lsls	r6, r2, #31
 800e290:	d528      	bpl.n	800e2e4 <__sflush_r+0xb8>
 800e292:	2200      	movs	r2, #0
 800e294:	6062      	str	r2, [r4, #4]
 800e296:	04d9      	lsls	r1, r3, #19
 800e298:	6922      	ldr	r2, [r4, #16]
 800e29a:	6022      	str	r2, [r4, #0]
 800e29c:	d504      	bpl.n	800e2a8 <__sflush_r+0x7c>
 800e29e:	1c42      	adds	r2, r0, #1
 800e2a0:	d101      	bne.n	800e2a6 <__sflush_r+0x7a>
 800e2a2:	682b      	ldr	r3, [r5, #0]
 800e2a4:	b903      	cbnz	r3, 800e2a8 <__sflush_r+0x7c>
 800e2a6:	6560      	str	r0, [r4, #84]	; 0x54
 800e2a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2aa:	602f      	str	r7, [r5, #0]
 800e2ac:	2900      	cmp	r1, #0
 800e2ae:	d0ca      	beq.n	800e246 <__sflush_r+0x1a>
 800e2b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2b4:	4299      	cmp	r1, r3
 800e2b6:	d002      	beq.n	800e2be <__sflush_r+0x92>
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	f7ff fb1d 	bl	800d8f8 <_free_r>
 800e2be:	2000      	movs	r0, #0
 800e2c0:	6360      	str	r0, [r4, #52]	; 0x34
 800e2c2:	e7c1      	b.n	800e248 <__sflush_r+0x1c>
 800e2c4:	6a21      	ldr	r1, [r4, #32]
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	47b0      	blx	r6
 800e2cc:	1c41      	adds	r1, r0, #1
 800e2ce:	d1c7      	bne.n	800e260 <__sflush_r+0x34>
 800e2d0:	682b      	ldr	r3, [r5, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d0c4      	beq.n	800e260 <__sflush_r+0x34>
 800e2d6:	2b1d      	cmp	r3, #29
 800e2d8:	d001      	beq.n	800e2de <__sflush_r+0xb2>
 800e2da:	2b16      	cmp	r3, #22
 800e2dc:	d101      	bne.n	800e2e2 <__sflush_r+0xb6>
 800e2de:	602f      	str	r7, [r5, #0]
 800e2e0:	e7b1      	b.n	800e246 <__sflush_r+0x1a>
 800e2e2:	89a3      	ldrh	r3, [r4, #12]
 800e2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2e8:	81a3      	strh	r3, [r4, #12]
 800e2ea:	e7ad      	b.n	800e248 <__sflush_r+0x1c>
 800e2ec:	690f      	ldr	r7, [r1, #16]
 800e2ee:	2f00      	cmp	r7, #0
 800e2f0:	d0a9      	beq.n	800e246 <__sflush_r+0x1a>
 800e2f2:	0793      	lsls	r3, r2, #30
 800e2f4:	680e      	ldr	r6, [r1, #0]
 800e2f6:	bf08      	it	eq
 800e2f8:	694b      	ldreq	r3, [r1, #20]
 800e2fa:	600f      	str	r7, [r1, #0]
 800e2fc:	bf18      	it	ne
 800e2fe:	2300      	movne	r3, #0
 800e300:	eba6 0807 	sub.w	r8, r6, r7
 800e304:	608b      	str	r3, [r1, #8]
 800e306:	f1b8 0f00 	cmp.w	r8, #0
 800e30a:	dd9c      	ble.n	800e246 <__sflush_r+0x1a>
 800e30c:	6a21      	ldr	r1, [r4, #32]
 800e30e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e310:	4643      	mov	r3, r8
 800e312:	463a      	mov	r2, r7
 800e314:	4628      	mov	r0, r5
 800e316:	47b0      	blx	r6
 800e318:	2800      	cmp	r0, #0
 800e31a:	dc06      	bgt.n	800e32a <__sflush_r+0xfe>
 800e31c:	89a3      	ldrh	r3, [r4, #12]
 800e31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e322:	81a3      	strh	r3, [r4, #12]
 800e324:	f04f 30ff 	mov.w	r0, #4294967295
 800e328:	e78e      	b.n	800e248 <__sflush_r+0x1c>
 800e32a:	4407      	add	r7, r0
 800e32c:	eba8 0800 	sub.w	r8, r8, r0
 800e330:	e7e9      	b.n	800e306 <__sflush_r+0xda>
 800e332:	bf00      	nop
 800e334:	20400001 	.word	0x20400001

0800e338 <_fflush_r>:
 800e338:	b538      	push	{r3, r4, r5, lr}
 800e33a:	690b      	ldr	r3, [r1, #16]
 800e33c:	4605      	mov	r5, r0
 800e33e:	460c      	mov	r4, r1
 800e340:	b913      	cbnz	r3, 800e348 <_fflush_r+0x10>
 800e342:	2500      	movs	r5, #0
 800e344:	4628      	mov	r0, r5
 800e346:	bd38      	pop	{r3, r4, r5, pc}
 800e348:	b118      	cbz	r0, 800e352 <_fflush_r+0x1a>
 800e34a:	6983      	ldr	r3, [r0, #24]
 800e34c:	b90b      	cbnz	r3, 800e352 <_fflush_r+0x1a>
 800e34e:	f000 f887 	bl	800e460 <__sinit>
 800e352:	4b14      	ldr	r3, [pc, #80]	; (800e3a4 <_fflush_r+0x6c>)
 800e354:	429c      	cmp	r4, r3
 800e356:	d11b      	bne.n	800e390 <_fflush_r+0x58>
 800e358:	686c      	ldr	r4, [r5, #4]
 800e35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d0ef      	beq.n	800e342 <_fflush_r+0xa>
 800e362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e364:	07d0      	lsls	r0, r2, #31
 800e366:	d404      	bmi.n	800e372 <_fflush_r+0x3a>
 800e368:	0599      	lsls	r1, r3, #22
 800e36a:	d402      	bmi.n	800e372 <_fflush_r+0x3a>
 800e36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e36e:	f000 f915 	bl	800e59c <__retarget_lock_acquire_recursive>
 800e372:	4628      	mov	r0, r5
 800e374:	4621      	mov	r1, r4
 800e376:	f7ff ff59 	bl	800e22c <__sflush_r>
 800e37a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e37c:	07da      	lsls	r2, r3, #31
 800e37e:	4605      	mov	r5, r0
 800e380:	d4e0      	bmi.n	800e344 <_fflush_r+0xc>
 800e382:	89a3      	ldrh	r3, [r4, #12]
 800e384:	059b      	lsls	r3, r3, #22
 800e386:	d4dd      	bmi.n	800e344 <_fflush_r+0xc>
 800e388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e38a:	f000 f908 	bl	800e59e <__retarget_lock_release_recursive>
 800e38e:	e7d9      	b.n	800e344 <_fflush_r+0xc>
 800e390:	4b05      	ldr	r3, [pc, #20]	; (800e3a8 <_fflush_r+0x70>)
 800e392:	429c      	cmp	r4, r3
 800e394:	d101      	bne.n	800e39a <_fflush_r+0x62>
 800e396:	68ac      	ldr	r4, [r5, #8]
 800e398:	e7df      	b.n	800e35a <_fflush_r+0x22>
 800e39a:	4b04      	ldr	r3, [pc, #16]	; (800e3ac <_fflush_r+0x74>)
 800e39c:	429c      	cmp	r4, r3
 800e39e:	bf08      	it	eq
 800e3a0:	68ec      	ldreq	r4, [r5, #12]
 800e3a2:	e7da      	b.n	800e35a <_fflush_r+0x22>
 800e3a4:	0800eed0 	.word	0x0800eed0
 800e3a8:	0800eef0 	.word	0x0800eef0
 800e3ac:	0800eeb0 	.word	0x0800eeb0

0800e3b0 <std>:
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	b510      	push	{r4, lr}
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	e9c0 3300 	strd	r3, r3, [r0]
 800e3ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3be:	6083      	str	r3, [r0, #8]
 800e3c0:	8181      	strh	r1, [r0, #12]
 800e3c2:	6643      	str	r3, [r0, #100]	; 0x64
 800e3c4:	81c2      	strh	r2, [r0, #14]
 800e3c6:	6183      	str	r3, [r0, #24]
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	2208      	movs	r2, #8
 800e3cc:	305c      	adds	r0, #92	; 0x5c
 800e3ce:	f7fb fdb9 	bl	8009f44 <memset>
 800e3d2:	4b05      	ldr	r3, [pc, #20]	; (800e3e8 <std+0x38>)
 800e3d4:	6263      	str	r3, [r4, #36]	; 0x24
 800e3d6:	4b05      	ldr	r3, [pc, #20]	; (800e3ec <std+0x3c>)
 800e3d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3da:	4b05      	ldr	r3, [pc, #20]	; (800e3f0 <std+0x40>)
 800e3dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3de:	4b05      	ldr	r3, [pc, #20]	; (800e3f4 <std+0x44>)
 800e3e0:	6224      	str	r4, [r4, #32]
 800e3e2:	6323      	str	r3, [r4, #48]	; 0x30
 800e3e4:	bd10      	pop	{r4, pc}
 800e3e6:	bf00      	nop
 800e3e8:	0800e7a1 	.word	0x0800e7a1
 800e3ec:	0800e7c3 	.word	0x0800e7c3
 800e3f0:	0800e7fb 	.word	0x0800e7fb
 800e3f4:	0800e81f 	.word	0x0800e81f

0800e3f8 <_cleanup_r>:
 800e3f8:	4901      	ldr	r1, [pc, #4]	; (800e400 <_cleanup_r+0x8>)
 800e3fa:	f000 b8af 	b.w	800e55c <_fwalk_reent>
 800e3fe:	bf00      	nop
 800e400:	0800e339 	.word	0x0800e339

0800e404 <__sfmoreglue>:
 800e404:	b570      	push	{r4, r5, r6, lr}
 800e406:	2268      	movs	r2, #104	; 0x68
 800e408:	1e4d      	subs	r5, r1, #1
 800e40a:	4355      	muls	r5, r2
 800e40c:	460e      	mov	r6, r1
 800e40e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e412:	f7ff fadd 	bl	800d9d0 <_malloc_r>
 800e416:	4604      	mov	r4, r0
 800e418:	b140      	cbz	r0, 800e42c <__sfmoreglue+0x28>
 800e41a:	2100      	movs	r1, #0
 800e41c:	e9c0 1600 	strd	r1, r6, [r0]
 800e420:	300c      	adds	r0, #12
 800e422:	60a0      	str	r0, [r4, #8]
 800e424:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e428:	f7fb fd8c 	bl	8009f44 <memset>
 800e42c:	4620      	mov	r0, r4
 800e42e:	bd70      	pop	{r4, r5, r6, pc}

0800e430 <__sfp_lock_acquire>:
 800e430:	4801      	ldr	r0, [pc, #4]	; (800e438 <__sfp_lock_acquire+0x8>)
 800e432:	f000 b8b3 	b.w	800e59c <__retarget_lock_acquire_recursive>
 800e436:	bf00      	nop
 800e438:	20000819 	.word	0x20000819

0800e43c <__sfp_lock_release>:
 800e43c:	4801      	ldr	r0, [pc, #4]	; (800e444 <__sfp_lock_release+0x8>)
 800e43e:	f000 b8ae 	b.w	800e59e <__retarget_lock_release_recursive>
 800e442:	bf00      	nop
 800e444:	20000819 	.word	0x20000819

0800e448 <__sinit_lock_acquire>:
 800e448:	4801      	ldr	r0, [pc, #4]	; (800e450 <__sinit_lock_acquire+0x8>)
 800e44a:	f000 b8a7 	b.w	800e59c <__retarget_lock_acquire_recursive>
 800e44e:	bf00      	nop
 800e450:	2000081a 	.word	0x2000081a

0800e454 <__sinit_lock_release>:
 800e454:	4801      	ldr	r0, [pc, #4]	; (800e45c <__sinit_lock_release+0x8>)
 800e456:	f000 b8a2 	b.w	800e59e <__retarget_lock_release_recursive>
 800e45a:	bf00      	nop
 800e45c:	2000081a 	.word	0x2000081a

0800e460 <__sinit>:
 800e460:	b510      	push	{r4, lr}
 800e462:	4604      	mov	r4, r0
 800e464:	f7ff fff0 	bl	800e448 <__sinit_lock_acquire>
 800e468:	69a3      	ldr	r3, [r4, #24]
 800e46a:	b11b      	cbz	r3, 800e474 <__sinit+0x14>
 800e46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e470:	f7ff bff0 	b.w	800e454 <__sinit_lock_release>
 800e474:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e478:	6523      	str	r3, [r4, #80]	; 0x50
 800e47a:	4b13      	ldr	r3, [pc, #76]	; (800e4c8 <__sinit+0x68>)
 800e47c:	4a13      	ldr	r2, [pc, #76]	; (800e4cc <__sinit+0x6c>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	62a2      	str	r2, [r4, #40]	; 0x28
 800e482:	42a3      	cmp	r3, r4
 800e484:	bf04      	itt	eq
 800e486:	2301      	moveq	r3, #1
 800e488:	61a3      	streq	r3, [r4, #24]
 800e48a:	4620      	mov	r0, r4
 800e48c:	f000 f820 	bl	800e4d0 <__sfp>
 800e490:	6060      	str	r0, [r4, #4]
 800e492:	4620      	mov	r0, r4
 800e494:	f000 f81c 	bl	800e4d0 <__sfp>
 800e498:	60a0      	str	r0, [r4, #8]
 800e49a:	4620      	mov	r0, r4
 800e49c:	f000 f818 	bl	800e4d0 <__sfp>
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	60e0      	str	r0, [r4, #12]
 800e4a4:	2104      	movs	r1, #4
 800e4a6:	6860      	ldr	r0, [r4, #4]
 800e4a8:	f7ff ff82 	bl	800e3b0 <std>
 800e4ac:	68a0      	ldr	r0, [r4, #8]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	2109      	movs	r1, #9
 800e4b2:	f7ff ff7d 	bl	800e3b0 <std>
 800e4b6:	68e0      	ldr	r0, [r4, #12]
 800e4b8:	2202      	movs	r2, #2
 800e4ba:	2112      	movs	r1, #18
 800e4bc:	f7ff ff78 	bl	800e3b0 <std>
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	61a3      	str	r3, [r4, #24]
 800e4c4:	e7d2      	b.n	800e46c <__sinit+0xc>
 800e4c6:	bf00      	nop
 800e4c8:	0800ea10 	.word	0x0800ea10
 800e4cc:	0800e3f9 	.word	0x0800e3f9

0800e4d0 <__sfp>:
 800e4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4d2:	4607      	mov	r7, r0
 800e4d4:	f7ff ffac 	bl	800e430 <__sfp_lock_acquire>
 800e4d8:	4b1e      	ldr	r3, [pc, #120]	; (800e554 <__sfp+0x84>)
 800e4da:	681e      	ldr	r6, [r3, #0]
 800e4dc:	69b3      	ldr	r3, [r6, #24]
 800e4de:	b913      	cbnz	r3, 800e4e6 <__sfp+0x16>
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	f7ff ffbd 	bl	800e460 <__sinit>
 800e4e6:	3648      	adds	r6, #72	; 0x48
 800e4e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	d503      	bpl.n	800e4f8 <__sfp+0x28>
 800e4f0:	6833      	ldr	r3, [r6, #0]
 800e4f2:	b30b      	cbz	r3, 800e538 <__sfp+0x68>
 800e4f4:	6836      	ldr	r6, [r6, #0]
 800e4f6:	e7f7      	b.n	800e4e8 <__sfp+0x18>
 800e4f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e4fc:	b9d5      	cbnz	r5, 800e534 <__sfp+0x64>
 800e4fe:	4b16      	ldr	r3, [pc, #88]	; (800e558 <__sfp+0x88>)
 800e500:	60e3      	str	r3, [r4, #12]
 800e502:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e506:	6665      	str	r5, [r4, #100]	; 0x64
 800e508:	f000 f847 	bl	800e59a <__retarget_lock_init_recursive>
 800e50c:	f7ff ff96 	bl	800e43c <__sfp_lock_release>
 800e510:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e514:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e518:	6025      	str	r5, [r4, #0]
 800e51a:	61a5      	str	r5, [r4, #24]
 800e51c:	2208      	movs	r2, #8
 800e51e:	4629      	mov	r1, r5
 800e520:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e524:	f7fb fd0e 	bl	8009f44 <memset>
 800e528:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e52c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e530:	4620      	mov	r0, r4
 800e532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e534:	3468      	adds	r4, #104	; 0x68
 800e536:	e7d9      	b.n	800e4ec <__sfp+0x1c>
 800e538:	2104      	movs	r1, #4
 800e53a:	4638      	mov	r0, r7
 800e53c:	f7ff ff62 	bl	800e404 <__sfmoreglue>
 800e540:	4604      	mov	r4, r0
 800e542:	6030      	str	r0, [r6, #0]
 800e544:	2800      	cmp	r0, #0
 800e546:	d1d5      	bne.n	800e4f4 <__sfp+0x24>
 800e548:	f7ff ff78 	bl	800e43c <__sfp_lock_release>
 800e54c:	230c      	movs	r3, #12
 800e54e:	603b      	str	r3, [r7, #0]
 800e550:	e7ee      	b.n	800e530 <__sfp+0x60>
 800e552:	bf00      	nop
 800e554:	0800ea10 	.word	0x0800ea10
 800e558:	ffff0001 	.word	0xffff0001

0800e55c <_fwalk_reent>:
 800e55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e560:	4606      	mov	r6, r0
 800e562:	4688      	mov	r8, r1
 800e564:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e568:	2700      	movs	r7, #0
 800e56a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e56e:	f1b9 0901 	subs.w	r9, r9, #1
 800e572:	d505      	bpl.n	800e580 <_fwalk_reent+0x24>
 800e574:	6824      	ldr	r4, [r4, #0]
 800e576:	2c00      	cmp	r4, #0
 800e578:	d1f7      	bne.n	800e56a <_fwalk_reent+0xe>
 800e57a:	4638      	mov	r0, r7
 800e57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e580:	89ab      	ldrh	r3, [r5, #12]
 800e582:	2b01      	cmp	r3, #1
 800e584:	d907      	bls.n	800e596 <_fwalk_reent+0x3a>
 800e586:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e58a:	3301      	adds	r3, #1
 800e58c:	d003      	beq.n	800e596 <_fwalk_reent+0x3a>
 800e58e:	4629      	mov	r1, r5
 800e590:	4630      	mov	r0, r6
 800e592:	47c0      	blx	r8
 800e594:	4307      	orrs	r7, r0
 800e596:	3568      	adds	r5, #104	; 0x68
 800e598:	e7e9      	b.n	800e56e <_fwalk_reent+0x12>

0800e59a <__retarget_lock_init_recursive>:
 800e59a:	4770      	bx	lr

0800e59c <__retarget_lock_acquire_recursive>:
 800e59c:	4770      	bx	lr

0800e59e <__retarget_lock_release_recursive>:
 800e59e:	4770      	bx	lr

0800e5a0 <__swhatbuf_r>:
 800e5a0:	b570      	push	{r4, r5, r6, lr}
 800e5a2:	460e      	mov	r6, r1
 800e5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5a8:	2900      	cmp	r1, #0
 800e5aa:	b096      	sub	sp, #88	; 0x58
 800e5ac:	4614      	mov	r4, r2
 800e5ae:	461d      	mov	r5, r3
 800e5b0:	da08      	bge.n	800e5c4 <__swhatbuf_r+0x24>
 800e5b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	602a      	str	r2, [r5, #0]
 800e5ba:	061a      	lsls	r2, r3, #24
 800e5bc:	d410      	bmi.n	800e5e0 <__swhatbuf_r+0x40>
 800e5be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5c2:	e00e      	b.n	800e5e2 <__swhatbuf_r+0x42>
 800e5c4:	466a      	mov	r2, sp
 800e5c6:	f000 f951 	bl	800e86c <_fstat_r>
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	dbf1      	blt.n	800e5b2 <__swhatbuf_r+0x12>
 800e5ce:	9a01      	ldr	r2, [sp, #4]
 800e5d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e5d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e5d8:	425a      	negs	r2, r3
 800e5da:	415a      	adcs	r2, r3
 800e5dc:	602a      	str	r2, [r5, #0]
 800e5de:	e7ee      	b.n	800e5be <__swhatbuf_r+0x1e>
 800e5e0:	2340      	movs	r3, #64	; 0x40
 800e5e2:	2000      	movs	r0, #0
 800e5e4:	6023      	str	r3, [r4, #0]
 800e5e6:	b016      	add	sp, #88	; 0x58
 800e5e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e5ec <__smakebuf_r>:
 800e5ec:	898b      	ldrh	r3, [r1, #12]
 800e5ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e5f0:	079d      	lsls	r5, r3, #30
 800e5f2:	4606      	mov	r6, r0
 800e5f4:	460c      	mov	r4, r1
 800e5f6:	d507      	bpl.n	800e608 <__smakebuf_r+0x1c>
 800e5f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e5fc:	6023      	str	r3, [r4, #0]
 800e5fe:	6123      	str	r3, [r4, #16]
 800e600:	2301      	movs	r3, #1
 800e602:	6163      	str	r3, [r4, #20]
 800e604:	b002      	add	sp, #8
 800e606:	bd70      	pop	{r4, r5, r6, pc}
 800e608:	ab01      	add	r3, sp, #4
 800e60a:	466a      	mov	r2, sp
 800e60c:	f7ff ffc8 	bl	800e5a0 <__swhatbuf_r>
 800e610:	9900      	ldr	r1, [sp, #0]
 800e612:	4605      	mov	r5, r0
 800e614:	4630      	mov	r0, r6
 800e616:	f7ff f9db 	bl	800d9d0 <_malloc_r>
 800e61a:	b948      	cbnz	r0, 800e630 <__smakebuf_r+0x44>
 800e61c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e620:	059a      	lsls	r2, r3, #22
 800e622:	d4ef      	bmi.n	800e604 <__smakebuf_r+0x18>
 800e624:	f023 0303 	bic.w	r3, r3, #3
 800e628:	f043 0302 	orr.w	r3, r3, #2
 800e62c:	81a3      	strh	r3, [r4, #12]
 800e62e:	e7e3      	b.n	800e5f8 <__smakebuf_r+0xc>
 800e630:	4b0d      	ldr	r3, [pc, #52]	; (800e668 <__smakebuf_r+0x7c>)
 800e632:	62b3      	str	r3, [r6, #40]	; 0x28
 800e634:	89a3      	ldrh	r3, [r4, #12]
 800e636:	6020      	str	r0, [r4, #0]
 800e638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e63c:	81a3      	strh	r3, [r4, #12]
 800e63e:	9b00      	ldr	r3, [sp, #0]
 800e640:	6163      	str	r3, [r4, #20]
 800e642:	9b01      	ldr	r3, [sp, #4]
 800e644:	6120      	str	r0, [r4, #16]
 800e646:	b15b      	cbz	r3, 800e660 <__smakebuf_r+0x74>
 800e648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e64c:	4630      	mov	r0, r6
 800e64e:	f000 f91f 	bl	800e890 <_isatty_r>
 800e652:	b128      	cbz	r0, 800e660 <__smakebuf_r+0x74>
 800e654:	89a3      	ldrh	r3, [r4, #12]
 800e656:	f023 0303 	bic.w	r3, r3, #3
 800e65a:	f043 0301 	orr.w	r3, r3, #1
 800e65e:	81a3      	strh	r3, [r4, #12]
 800e660:	89a0      	ldrh	r0, [r4, #12]
 800e662:	4305      	orrs	r5, r0
 800e664:	81a5      	strh	r5, [r4, #12]
 800e666:	e7cd      	b.n	800e604 <__smakebuf_r+0x18>
 800e668:	0800e3f9 	.word	0x0800e3f9

0800e66c <memmove>:
 800e66c:	4288      	cmp	r0, r1
 800e66e:	b510      	push	{r4, lr}
 800e670:	eb01 0402 	add.w	r4, r1, r2
 800e674:	d902      	bls.n	800e67c <memmove+0x10>
 800e676:	4284      	cmp	r4, r0
 800e678:	4623      	mov	r3, r4
 800e67a:	d807      	bhi.n	800e68c <memmove+0x20>
 800e67c:	1e43      	subs	r3, r0, #1
 800e67e:	42a1      	cmp	r1, r4
 800e680:	d008      	beq.n	800e694 <memmove+0x28>
 800e682:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e68a:	e7f8      	b.n	800e67e <memmove+0x12>
 800e68c:	4402      	add	r2, r0
 800e68e:	4601      	mov	r1, r0
 800e690:	428a      	cmp	r2, r1
 800e692:	d100      	bne.n	800e696 <memmove+0x2a>
 800e694:	bd10      	pop	{r4, pc}
 800e696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e69a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e69e:	e7f7      	b.n	800e690 <memmove+0x24>

0800e6a0 <__malloc_lock>:
 800e6a0:	4801      	ldr	r0, [pc, #4]	; (800e6a8 <__malloc_lock+0x8>)
 800e6a2:	f7ff bf7b 	b.w	800e59c <__retarget_lock_acquire_recursive>
 800e6a6:	bf00      	nop
 800e6a8:	20000818 	.word	0x20000818

0800e6ac <__malloc_unlock>:
 800e6ac:	4801      	ldr	r0, [pc, #4]	; (800e6b4 <__malloc_unlock+0x8>)
 800e6ae:	f7ff bf76 	b.w	800e59e <__retarget_lock_release_recursive>
 800e6b2:	bf00      	nop
 800e6b4:	20000818 	.word	0x20000818

0800e6b8 <_realloc_r>:
 800e6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6bc:	4680      	mov	r8, r0
 800e6be:	4614      	mov	r4, r2
 800e6c0:	460e      	mov	r6, r1
 800e6c2:	b921      	cbnz	r1, 800e6ce <_realloc_r+0x16>
 800e6c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6c8:	4611      	mov	r1, r2
 800e6ca:	f7ff b981 	b.w	800d9d0 <_malloc_r>
 800e6ce:	b92a      	cbnz	r2, 800e6dc <_realloc_r+0x24>
 800e6d0:	f7ff f912 	bl	800d8f8 <_free_r>
 800e6d4:	4625      	mov	r5, r4
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6dc:	f000 f8fa 	bl	800e8d4 <_malloc_usable_size_r>
 800e6e0:	4284      	cmp	r4, r0
 800e6e2:	4607      	mov	r7, r0
 800e6e4:	d802      	bhi.n	800e6ec <_realloc_r+0x34>
 800e6e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e6ea:	d812      	bhi.n	800e712 <_realloc_r+0x5a>
 800e6ec:	4621      	mov	r1, r4
 800e6ee:	4640      	mov	r0, r8
 800e6f0:	f7ff f96e 	bl	800d9d0 <_malloc_r>
 800e6f4:	4605      	mov	r5, r0
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	d0ed      	beq.n	800e6d6 <_realloc_r+0x1e>
 800e6fa:	42bc      	cmp	r4, r7
 800e6fc:	4622      	mov	r2, r4
 800e6fe:	4631      	mov	r1, r6
 800e700:	bf28      	it	cs
 800e702:	463a      	movcs	r2, r7
 800e704:	f7fe fc12 	bl	800cf2c <memcpy>
 800e708:	4631      	mov	r1, r6
 800e70a:	4640      	mov	r0, r8
 800e70c:	f7ff f8f4 	bl	800d8f8 <_free_r>
 800e710:	e7e1      	b.n	800e6d6 <_realloc_r+0x1e>
 800e712:	4635      	mov	r5, r6
 800e714:	e7df      	b.n	800e6d6 <_realloc_r+0x1e>

0800e716 <_raise_r>:
 800e716:	291f      	cmp	r1, #31
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4604      	mov	r4, r0
 800e71c:	460d      	mov	r5, r1
 800e71e:	d904      	bls.n	800e72a <_raise_r+0x14>
 800e720:	2316      	movs	r3, #22
 800e722:	6003      	str	r3, [r0, #0]
 800e724:	f04f 30ff 	mov.w	r0, #4294967295
 800e728:	bd38      	pop	{r3, r4, r5, pc}
 800e72a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e72c:	b112      	cbz	r2, 800e734 <_raise_r+0x1e>
 800e72e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e732:	b94b      	cbnz	r3, 800e748 <_raise_r+0x32>
 800e734:	4620      	mov	r0, r4
 800e736:	f000 f831 	bl	800e79c <_getpid_r>
 800e73a:	462a      	mov	r2, r5
 800e73c:	4601      	mov	r1, r0
 800e73e:	4620      	mov	r0, r4
 800e740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e744:	f000 b818 	b.w	800e778 <_kill_r>
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d00a      	beq.n	800e762 <_raise_r+0x4c>
 800e74c:	1c59      	adds	r1, r3, #1
 800e74e:	d103      	bne.n	800e758 <_raise_r+0x42>
 800e750:	2316      	movs	r3, #22
 800e752:	6003      	str	r3, [r0, #0]
 800e754:	2001      	movs	r0, #1
 800e756:	e7e7      	b.n	800e728 <_raise_r+0x12>
 800e758:	2400      	movs	r4, #0
 800e75a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e75e:	4628      	mov	r0, r5
 800e760:	4798      	blx	r3
 800e762:	2000      	movs	r0, #0
 800e764:	e7e0      	b.n	800e728 <_raise_r+0x12>
	...

0800e768 <raise>:
 800e768:	4b02      	ldr	r3, [pc, #8]	; (800e774 <raise+0xc>)
 800e76a:	4601      	mov	r1, r0
 800e76c:	6818      	ldr	r0, [r3, #0]
 800e76e:	f7ff bfd2 	b.w	800e716 <_raise_r>
 800e772:	bf00      	nop
 800e774:	2000020c 	.word	0x2000020c

0800e778 <_kill_r>:
 800e778:	b538      	push	{r3, r4, r5, lr}
 800e77a:	4d07      	ldr	r5, [pc, #28]	; (800e798 <_kill_r+0x20>)
 800e77c:	2300      	movs	r3, #0
 800e77e:	4604      	mov	r4, r0
 800e780:	4608      	mov	r0, r1
 800e782:	4611      	mov	r1, r2
 800e784:	602b      	str	r3, [r5, #0]
 800e786:	f7f3 ffb3 	bl	80026f0 <_kill>
 800e78a:	1c43      	adds	r3, r0, #1
 800e78c:	d102      	bne.n	800e794 <_kill_r+0x1c>
 800e78e:	682b      	ldr	r3, [r5, #0]
 800e790:	b103      	cbz	r3, 800e794 <_kill_r+0x1c>
 800e792:	6023      	str	r3, [r4, #0]
 800e794:	bd38      	pop	{r3, r4, r5, pc}
 800e796:	bf00      	nop
 800e798:	2000081c 	.word	0x2000081c

0800e79c <_getpid_r>:
 800e79c:	f7f3 bfa0 	b.w	80026e0 <_getpid>

0800e7a0 <__sread>:
 800e7a0:	b510      	push	{r4, lr}
 800e7a2:	460c      	mov	r4, r1
 800e7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a8:	f000 f89c 	bl	800e8e4 <_read_r>
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	bfab      	itete	ge
 800e7b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e7b2:	89a3      	ldrhlt	r3, [r4, #12]
 800e7b4:	181b      	addge	r3, r3, r0
 800e7b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e7ba:	bfac      	ite	ge
 800e7bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e7be:	81a3      	strhlt	r3, [r4, #12]
 800e7c0:	bd10      	pop	{r4, pc}

0800e7c2 <__swrite>:
 800e7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c6:	461f      	mov	r7, r3
 800e7c8:	898b      	ldrh	r3, [r1, #12]
 800e7ca:	05db      	lsls	r3, r3, #23
 800e7cc:	4605      	mov	r5, r0
 800e7ce:	460c      	mov	r4, r1
 800e7d0:	4616      	mov	r6, r2
 800e7d2:	d505      	bpl.n	800e7e0 <__swrite+0x1e>
 800e7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7d8:	2302      	movs	r3, #2
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f000 f868 	bl	800e8b0 <_lseek_r>
 800e7e0:	89a3      	ldrh	r3, [r4, #12]
 800e7e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7ea:	81a3      	strh	r3, [r4, #12]
 800e7ec:	4632      	mov	r2, r6
 800e7ee:	463b      	mov	r3, r7
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f6:	f000 b817 	b.w	800e828 <_write_r>

0800e7fa <__sseek>:
 800e7fa:	b510      	push	{r4, lr}
 800e7fc:	460c      	mov	r4, r1
 800e7fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e802:	f000 f855 	bl	800e8b0 <_lseek_r>
 800e806:	1c43      	adds	r3, r0, #1
 800e808:	89a3      	ldrh	r3, [r4, #12]
 800e80a:	bf15      	itete	ne
 800e80c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e80e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e812:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e816:	81a3      	strheq	r3, [r4, #12]
 800e818:	bf18      	it	ne
 800e81a:	81a3      	strhne	r3, [r4, #12]
 800e81c:	bd10      	pop	{r4, pc}

0800e81e <__sclose>:
 800e81e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e822:	f000 b813 	b.w	800e84c <_close_r>
	...

0800e828 <_write_r>:
 800e828:	b538      	push	{r3, r4, r5, lr}
 800e82a:	4d07      	ldr	r5, [pc, #28]	; (800e848 <_write_r+0x20>)
 800e82c:	4604      	mov	r4, r0
 800e82e:	4608      	mov	r0, r1
 800e830:	4611      	mov	r1, r2
 800e832:	2200      	movs	r2, #0
 800e834:	602a      	str	r2, [r5, #0]
 800e836:	461a      	mov	r2, r3
 800e838:	f7f3 ff91 	bl	800275e <_write>
 800e83c:	1c43      	adds	r3, r0, #1
 800e83e:	d102      	bne.n	800e846 <_write_r+0x1e>
 800e840:	682b      	ldr	r3, [r5, #0]
 800e842:	b103      	cbz	r3, 800e846 <_write_r+0x1e>
 800e844:	6023      	str	r3, [r4, #0]
 800e846:	bd38      	pop	{r3, r4, r5, pc}
 800e848:	2000081c 	.word	0x2000081c

0800e84c <_close_r>:
 800e84c:	b538      	push	{r3, r4, r5, lr}
 800e84e:	4d06      	ldr	r5, [pc, #24]	; (800e868 <_close_r+0x1c>)
 800e850:	2300      	movs	r3, #0
 800e852:	4604      	mov	r4, r0
 800e854:	4608      	mov	r0, r1
 800e856:	602b      	str	r3, [r5, #0]
 800e858:	f7f3 ff9d 	bl	8002796 <_close>
 800e85c:	1c43      	adds	r3, r0, #1
 800e85e:	d102      	bne.n	800e866 <_close_r+0x1a>
 800e860:	682b      	ldr	r3, [r5, #0]
 800e862:	b103      	cbz	r3, 800e866 <_close_r+0x1a>
 800e864:	6023      	str	r3, [r4, #0]
 800e866:	bd38      	pop	{r3, r4, r5, pc}
 800e868:	2000081c 	.word	0x2000081c

0800e86c <_fstat_r>:
 800e86c:	b538      	push	{r3, r4, r5, lr}
 800e86e:	4d07      	ldr	r5, [pc, #28]	; (800e88c <_fstat_r+0x20>)
 800e870:	2300      	movs	r3, #0
 800e872:	4604      	mov	r4, r0
 800e874:	4608      	mov	r0, r1
 800e876:	4611      	mov	r1, r2
 800e878:	602b      	str	r3, [r5, #0]
 800e87a:	f7f3 ff98 	bl	80027ae <_fstat>
 800e87e:	1c43      	adds	r3, r0, #1
 800e880:	d102      	bne.n	800e888 <_fstat_r+0x1c>
 800e882:	682b      	ldr	r3, [r5, #0]
 800e884:	b103      	cbz	r3, 800e888 <_fstat_r+0x1c>
 800e886:	6023      	str	r3, [r4, #0]
 800e888:	bd38      	pop	{r3, r4, r5, pc}
 800e88a:	bf00      	nop
 800e88c:	2000081c 	.word	0x2000081c

0800e890 <_isatty_r>:
 800e890:	b538      	push	{r3, r4, r5, lr}
 800e892:	4d06      	ldr	r5, [pc, #24]	; (800e8ac <_isatty_r+0x1c>)
 800e894:	2300      	movs	r3, #0
 800e896:	4604      	mov	r4, r0
 800e898:	4608      	mov	r0, r1
 800e89a:	602b      	str	r3, [r5, #0]
 800e89c:	f7f3 ff97 	bl	80027ce <_isatty>
 800e8a0:	1c43      	adds	r3, r0, #1
 800e8a2:	d102      	bne.n	800e8aa <_isatty_r+0x1a>
 800e8a4:	682b      	ldr	r3, [r5, #0]
 800e8a6:	b103      	cbz	r3, 800e8aa <_isatty_r+0x1a>
 800e8a8:	6023      	str	r3, [r4, #0]
 800e8aa:	bd38      	pop	{r3, r4, r5, pc}
 800e8ac:	2000081c 	.word	0x2000081c

0800e8b0 <_lseek_r>:
 800e8b0:	b538      	push	{r3, r4, r5, lr}
 800e8b2:	4d07      	ldr	r5, [pc, #28]	; (800e8d0 <_lseek_r+0x20>)
 800e8b4:	4604      	mov	r4, r0
 800e8b6:	4608      	mov	r0, r1
 800e8b8:	4611      	mov	r1, r2
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	602a      	str	r2, [r5, #0]
 800e8be:	461a      	mov	r2, r3
 800e8c0:	f7f3 ff90 	bl	80027e4 <_lseek>
 800e8c4:	1c43      	adds	r3, r0, #1
 800e8c6:	d102      	bne.n	800e8ce <_lseek_r+0x1e>
 800e8c8:	682b      	ldr	r3, [r5, #0]
 800e8ca:	b103      	cbz	r3, 800e8ce <_lseek_r+0x1e>
 800e8cc:	6023      	str	r3, [r4, #0]
 800e8ce:	bd38      	pop	{r3, r4, r5, pc}
 800e8d0:	2000081c 	.word	0x2000081c

0800e8d4 <_malloc_usable_size_r>:
 800e8d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8d8:	1f18      	subs	r0, r3, #4
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	bfbc      	itt	lt
 800e8de:	580b      	ldrlt	r3, [r1, r0]
 800e8e0:	18c0      	addlt	r0, r0, r3
 800e8e2:	4770      	bx	lr

0800e8e4 <_read_r>:
 800e8e4:	b538      	push	{r3, r4, r5, lr}
 800e8e6:	4d07      	ldr	r5, [pc, #28]	; (800e904 <_read_r+0x20>)
 800e8e8:	4604      	mov	r4, r0
 800e8ea:	4608      	mov	r0, r1
 800e8ec:	4611      	mov	r1, r2
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	602a      	str	r2, [r5, #0]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	f7f3 ff16 	bl	8002724 <_read>
 800e8f8:	1c43      	adds	r3, r0, #1
 800e8fa:	d102      	bne.n	800e902 <_read_r+0x1e>
 800e8fc:	682b      	ldr	r3, [r5, #0]
 800e8fe:	b103      	cbz	r3, 800e902 <_read_r+0x1e>
 800e900:	6023      	str	r3, [r4, #0]
 800e902:	bd38      	pop	{r3, r4, r5, pc}
 800e904:	2000081c 	.word	0x2000081c

0800e908 <_init>:
 800e908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e90a:	bf00      	nop
 800e90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e90e:	bc08      	pop	{r3}
 800e910:	469e      	mov	lr, r3
 800e912:	4770      	bx	lr

0800e914 <_fini>:
 800e914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e916:	bf00      	nop
 800e918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e91a:	bc08      	pop	{r3}
 800e91c:	469e      	mov	lr, r3
 800e91e:	4770      	bx	lr
