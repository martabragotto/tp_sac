
NUCLEO-G431RB-MSC_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d1c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08009efc  08009efc  00019efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1f8  0800a1f8  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1f8  0800a1f8  0001a1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a200  0800a200  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a200  0800a200  0001a200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a204  0800a204  0001a204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800a208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000210  0800a418  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  0800a418  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019944  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ded  00000000  00000000  00039b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  0003c978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  0003ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002162d  00000000  00000000  0003f310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017790  00000000  00000000  0006093d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd649  00000000  00000000  000780cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155716  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068d8  00000000  00000000  00155768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009ee4 	.word	0x08009ee4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	08009ee4 	.word	0x08009ee4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b974 	b.w	8000958 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9d08      	ldr	r5, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	468e      	mov	lr, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d14d      	bne.n	8000732 <__udivmoddi4+0xaa>
 8000696:	428a      	cmp	r2, r1
 8000698:	4694      	mov	ip, r2
 800069a:	d969      	bls.n	8000770 <__udivmoddi4+0xe8>
 800069c:	fab2 f282 	clz	r2, r2
 80006a0:	b152      	cbz	r2, 80006b8 <__udivmoddi4+0x30>
 80006a2:	fa01 f302 	lsl.w	r3, r1, r2
 80006a6:	f1c2 0120 	rsb	r1, r2, #32
 80006aa:	fa20 f101 	lsr.w	r1, r0, r1
 80006ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80006b2:	ea41 0e03 	orr.w	lr, r1, r3
 80006b6:	4094      	lsls	r4, r2
 80006b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006bc:	0c21      	lsrs	r1, r4, #16
 80006be:	fbbe f6f8 	udiv	r6, lr, r8
 80006c2:	fa1f f78c 	uxth.w	r7, ip
 80006c6:	fb08 e316 	mls	r3, r8, r6, lr
 80006ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006ce:	fb06 f107 	mul.w	r1, r6, r7
 80006d2:	4299      	cmp	r1, r3
 80006d4:	d90a      	bls.n	80006ec <__udivmoddi4+0x64>
 80006d6:	eb1c 0303 	adds.w	r3, ip, r3
 80006da:	f106 30ff 	add.w	r0, r6, #4294967295
 80006de:	f080 811f 	bcs.w	8000920 <__udivmoddi4+0x298>
 80006e2:	4299      	cmp	r1, r3
 80006e4:	f240 811c 	bls.w	8000920 <__udivmoddi4+0x298>
 80006e8:	3e02      	subs	r6, #2
 80006ea:	4463      	add	r3, ip
 80006ec:	1a5b      	subs	r3, r3, r1
 80006ee:	b2a4      	uxth	r4, r4
 80006f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006f4:	fb08 3310 	mls	r3, r8, r0, r3
 80006f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006fc:	fb00 f707 	mul.w	r7, r0, r7
 8000700:	42a7      	cmp	r7, r4
 8000702:	d90a      	bls.n	800071a <__udivmoddi4+0x92>
 8000704:	eb1c 0404 	adds.w	r4, ip, r4
 8000708:	f100 33ff 	add.w	r3, r0, #4294967295
 800070c:	f080 810a 	bcs.w	8000924 <__udivmoddi4+0x29c>
 8000710:	42a7      	cmp	r7, r4
 8000712:	f240 8107 	bls.w	8000924 <__udivmoddi4+0x29c>
 8000716:	4464      	add	r4, ip
 8000718:	3802      	subs	r0, #2
 800071a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800071e:	1be4      	subs	r4, r4, r7
 8000720:	2600      	movs	r6, #0
 8000722:	b11d      	cbz	r5, 800072c <__udivmoddi4+0xa4>
 8000724:	40d4      	lsrs	r4, r2
 8000726:	2300      	movs	r3, #0
 8000728:	e9c5 4300 	strd	r4, r3, [r5]
 800072c:	4631      	mov	r1, r6
 800072e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000732:	428b      	cmp	r3, r1
 8000734:	d909      	bls.n	800074a <__udivmoddi4+0xc2>
 8000736:	2d00      	cmp	r5, #0
 8000738:	f000 80ef 	beq.w	800091a <__udivmoddi4+0x292>
 800073c:	2600      	movs	r6, #0
 800073e:	e9c5 0100 	strd	r0, r1, [r5]
 8000742:	4630      	mov	r0, r6
 8000744:	4631      	mov	r1, r6
 8000746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074a:	fab3 f683 	clz	r6, r3
 800074e:	2e00      	cmp	r6, #0
 8000750:	d14a      	bne.n	80007e8 <__udivmoddi4+0x160>
 8000752:	428b      	cmp	r3, r1
 8000754:	d302      	bcc.n	800075c <__udivmoddi4+0xd4>
 8000756:	4282      	cmp	r2, r0
 8000758:	f200 80f9 	bhi.w	800094e <__udivmoddi4+0x2c6>
 800075c:	1a84      	subs	r4, r0, r2
 800075e:	eb61 0303 	sbc.w	r3, r1, r3
 8000762:	2001      	movs	r0, #1
 8000764:	469e      	mov	lr, r3
 8000766:	2d00      	cmp	r5, #0
 8000768:	d0e0      	beq.n	800072c <__udivmoddi4+0xa4>
 800076a:	e9c5 4e00 	strd	r4, lr, [r5]
 800076e:	e7dd      	b.n	800072c <__udivmoddi4+0xa4>
 8000770:	b902      	cbnz	r2, 8000774 <__udivmoddi4+0xec>
 8000772:	deff      	udf	#255	; 0xff
 8000774:	fab2 f282 	clz	r2, r2
 8000778:	2a00      	cmp	r2, #0
 800077a:	f040 8092 	bne.w	80008a2 <__udivmoddi4+0x21a>
 800077e:	eba1 010c 	sub.w	r1, r1, ip
 8000782:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000786:	fa1f fe8c 	uxth.w	lr, ip
 800078a:	2601      	movs	r6, #1
 800078c:	0c20      	lsrs	r0, r4, #16
 800078e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000792:	fb07 1113 	mls	r1, r7, r3, r1
 8000796:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800079a:	fb0e f003 	mul.w	r0, lr, r3
 800079e:	4288      	cmp	r0, r1
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0x12c>
 80007a2:	eb1c 0101 	adds.w	r1, ip, r1
 80007a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x12a>
 80007ac:	4288      	cmp	r0, r1
 80007ae:	f200 80cb 	bhi.w	8000948 <__udivmoddi4+0x2c0>
 80007b2:	4643      	mov	r3, r8
 80007b4:	1a09      	subs	r1, r1, r0
 80007b6:	b2a4      	uxth	r4, r4
 80007b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007bc:	fb07 1110 	mls	r1, r7, r0, r1
 80007c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007c4:	fb0e fe00 	mul.w	lr, lr, r0
 80007c8:	45a6      	cmp	lr, r4
 80007ca:	d908      	bls.n	80007de <__udivmoddi4+0x156>
 80007cc:	eb1c 0404 	adds.w	r4, ip, r4
 80007d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007d4:	d202      	bcs.n	80007dc <__udivmoddi4+0x154>
 80007d6:	45a6      	cmp	lr, r4
 80007d8:	f200 80bb 	bhi.w	8000952 <__udivmoddi4+0x2ca>
 80007dc:	4608      	mov	r0, r1
 80007de:	eba4 040e 	sub.w	r4, r4, lr
 80007e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007e6:	e79c      	b.n	8000722 <__udivmoddi4+0x9a>
 80007e8:	f1c6 0720 	rsb	r7, r6, #32
 80007ec:	40b3      	lsls	r3, r6
 80007ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80007f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007f6:	fa20 f407 	lsr.w	r4, r0, r7
 80007fa:	fa01 f306 	lsl.w	r3, r1, r6
 80007fe:	431c      	orrs	r4, r3
 8000800:	40f9      	lsrs	r1, r7
 8000802:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000806:	fa00 f306 	lsl.w	r3, r0, r6
 800080a:	fbb1 f8f9 	udiv	r8, r1, r9
 800080e:	0c20      	lsrs	r0, r4, #16
 8000810:	fa1f fe8c 	uxth.w	lr, ip
 8000814:	fb09 1118 	mls	r1, r9, r8, r1
 8000818:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081c:	fb08 f00e 	mul.w	r0, r8, lr
 8000820:	4288      	cmp	r0, r1
 8000822:	fa02 f206 	lsl.w	r2, r2, r6
 8000826:	d90b      	bls.n	8000840 <__udivmoddi4+0x1b8>
 8000828:	eb1c 0101 	adds.w	r1, ip, r1
 800082c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000830:	f080 8088 	bcs.w	8000944 <__udivmoddi4+0x2bc>
 8000834:	4288      	cmp	r0, r1
 8000836:	f240 8085 	bls.w	8000944 <__udivmoddi4+0x2bc>
 800083a:	f1a8 0802 	sub.w	r8, r8, #2
 800083e:	4461      	add	r1, ip
 8000840:	1a09      	subs	r1, r1, r0
 8000842:	b2a4      	uxth	r4, r4
 8000844:	fbb1 f0f9 	udiv	r0, r1, r9
 8000848:	fb09 1110 	mls	r1, r9, r0, r1
 800084c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	458e      	cmp	lr, r1
 8000856:	d908      	bls.n	800086a <__udivmoddi4+0x1e2>
 8000858:	eb1c 0101 	adds.w	r1, ip, r1
 800085c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000860:	d26c      	bcs.n	800093c <__udivmoddi4+0x2b4>
 8000862:	458e      	cmp	lr, r1
 8000864:	d96a      	bls.n	800093c <__udivmoddi4+0x2b4>
 8000866:	3802      	subs	r0, #2
 8000868:	4461      	add	r1, ip
 800086a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800086e:	fba0 9402 	umull	r9, r4, r0, r2
 8000872:	eba1 010e 	sub.w	r1, r1, lr
 8000876:	42a1      	cmp	r1, r4
 8000878:	46c8      	mov	r8, r9
 800087a:	46a6      	mov	lr, r4
 800087c:	d356      	bcc.n	800092c <__udivmoddi4+0x2a4>
 800087e:	d053      	beq.n	8000928 <__udivmoddi4+0x2a0>
 8000880:	b15d      	cbz	r5, 800089a <__udivmoddi4+0x212>
 8000882:	ebb3 0208 	subs.w	r2, r3, r8
 8000886:	eb61 010e 	sbc.w	r1, r1, lr
 800088a:	fa01 f707 	lsl.w	r7, r1, r7
 800088e:	fa22 f306 	lsr.w	r3, r2, r6
 8000892:	40f1      	lsrs	r1, r6
 8000894:	431f      	orrs	r7, r3
 8000896:	e9c5 7100 	strd	r7, r1, [r5]
 800089a:	2600      	movs	r6, #0
 800089c:	4631      	mov	r1, r6
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	f1c2 0320 	rsb	r3, r2, #32
 80008a6:	40d8      	lsrs	r0, r3
 80008a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ac:	fa21 f303 	lsr.w	r3, r1, r3
 80008b0:	4091      	lsls	r1, r2
 80008b2:	4301      	orrs	r1, r0
 80008b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b8:	fa1f fe8c 	uxth.w	lr, ip
 80008bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008c0:	fb07 3610 	mls	r6, r7, r0, r3
 80008c4:	0c0b      	lsrs	r3, r1, #16
 80008c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008ca:	fb00 f60e 	mul.w	r6, r0, lr
 80008ce:	429e      	cmp	r6, r3
 80008d0:	fa04 f402 	lsl.w	r4, r4, r2
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0x260>
 80008d6:	eb1c 0303 	adds.w	r3, ip, r3
 80008da:	f100 38ff 	add.w	r8, r0, #4294967295
 80008de:	d22f      	bcs.n	8000940 <__udivmoddi4+0x2b8>
 80008e0:	429e      	cmp	r6, r3
 80008e2:	d92d      	bls.n	8000940 <__udivmoddi4+0x2b8>
 80008e4:	3802      	subs	r0, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1b9b      	subs	r3, r3, r6
 80008ea:	b289      	uxth	r1, r1
 80008ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80008f0:	fb07 3316 	mls	r3, r7, r6, r3
 80008f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008f8:	fb06 f30e 	mul.w	r3, r6, lr
 80008fc:	428b      	cmp	r3, r1
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x28a>
 8000900:	eb1c 0101 	adds.w	r1, ip, r1
 8000904:	f106 38ff 	add.w	r8, r6, #4294967295
 8000908:	d216      	bcs.n	8000938 <__udivmoddi4+0x2b0>
 800090a:	428b      	cmp	r3, r1
 800090c:	d914      	bls.n	8000938 <__udivmoddi4+0x2b0>
 800090e:	3e02      	subs	r6, #2
 8000910:	4461      	add	r1, ip
 8000912:	1ac9      	subs	r1, r1, r3
 8000914:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000918:	e738      	b.n	800078c <__udivmoddi4+0x104>
 800091a:	462e      	mov	r6, r5
 800091c:	4628      	mov	r0, r5
 800091e:	e705      	b.n	800072c <__udivmoddi4+0xa4>
 8000920:	4606      	mov	r6, r0
 8000922:	e6e3      	b.n	80006ec <__udivmoddi4+0x64>
 8000924:	4618      	mov	r0, r3
 8000926:	e6f8      	b.n	800071a <__udivmoddi4+0x92>
 8000928:	454b      	cmp	r3, r9
 800092a:	d2a9      	bcs.n	8000880 <__udivmoddi4+0x1f8>
 800092c:	ebb9 0802 	subs.w	r8, r9, r2
 8000930:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000934:	3801      	subs	r0, #1
 8000936:	e7a3      	b.n	8000880 <__udivmoddi4+0x1f8>
 8000938:	4646      	mov	r6, r8
 800093a:	e7ea      	b.n	8000912 <__udivmoddi4+0x28a>
 800093c:	4620      	mov	r0, r4
 800093e:	e794      	b.n	800086a <__udivmoddi4+0x1e2>
 8000940:	4640      	mov	r0, r8
 8000942:	e7d1      	b.n	80008e8 <__udivmoddi4+0x260>
 8000944:	46d0      	mov	r8, sl
 8000946:	e77b      	b.n	8000840 <__udivmoddi4+0x1b8>
 8000948:	3b02      	subs	r3, #2
 800094a:	4461      	add	r1, ip
 800094c:	e732      	b.n	80007b4 <__udivmoddi4+0x12c>
 800094e:	4630      	mov	r0, r6
 8000950:	e709      	b.n	8000766 <__udivmoddi4+0xde>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	e742      	b.n	80007de <__udivmoddi4+0x156>

08000958 <__aeabi_idiv0>:
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b09e      	sub	sp, #120	; 0x78
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f001 f890 	bl	8001a8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 fa67 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000972:	f000 fcb3 	bl	80012dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000976:	f000 fc87 	bl	8001288 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800097a:	f000 fc39 	bl	80011f0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800097e:	f000 fb23 	bl	8000fc8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000982:	f000 faa9 	bl	8000ed8 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000986:	f000 fbdf 	bl	8001148 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 800098a:	463b      	mov	r3, r7
 800098c:	2224      	movs	r2, #36	; 0x24
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f007 ffe1 	bl	8008958 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	2240      	movs	r2, #64	; 0x40
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f007 ffda 	bl	8008958 <memset>
 80009a4:	4bad      	ldr	r3, [pc, #692]	; (8000c5c <main+0x300>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80009aa:	2240      	movs	r2, #64	; 0x40
 80009ac:	2100      	movs	r1, #0
 80009ae:	48ac      	ldr	r0, [pc, #688]	; (8000c60 <main+0x304>)
 80009b0:	f007 ffd2 	bl	8008958 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80009b4:	2201      	movs	r2, #1
 80009b6:	49a9      	ldr	r1, [pc, #676]	; (8000c5c <main+0x300>)
 80009b8:	48aa      	ldr	r0, [pc, #680]	; (8000c64 <main+0x308>)
 80009ba:	f006 f83f 	bl	8006a3c <HAL_UART_Receive_IT>
	HAL_Delay(10);
 80009be:	200a      	movs	r0, #10
 80009c0:	f001 f89c 	bl	8001afc <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
 80009c8:	2266      	movs	r2, #102	; 0x66
 80009ca:	49a7      	ldr	r1, [pc, #668]	; (8000c68 <main+0x30c>)
 80009cc:	48a5      	ldr	r0, [pc, #660]	; (8000c64 <main+0x308>)
 80009ce:	f005 ff9e 	bl	800690e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	2218      	movs	r2, #24
 80009d8:	49a4      	ldr	r1, [pc, #656]	; (8000c6c <main+0x310>)
 80009da:	48a2      	ldr	r0, [pc, #648]	; (8000c64 <main+0x308>)
 80009dc:	f005 ff97 	bl	800690e <HAL_UART_Transmit>

	//scrivere commento su acquisizione per corrente
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 80009e0:	217f      	movs	r1, #127	; 0x7f
 80009e2:	48a3      	ldr	r0, [pc, #652]	; (8000c70 <main+0x314>)
 80009e4:	f002 fade 	bl	8002fa4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, ADC_buffer, ADC_BUFF_SIZE);
 80009e8:	220a      	movs	r2, #10
 80009ea:	49a2      	ldr	r1, [pc, #648]	; (8000c74 <main+0x318>)
 80009ec:	48a0      	ldr	r0, [pc, #640]	; (8000c70 <main+0x314>)
 80009ee:	f001 fc79 	bl	80022e4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim8);
 80009f2:	48a1      	ldr	r0, [pc, #644]	; (8000c78 <main+0x31c>)
 80009f4:	f004 f9da 	bl	8004dac <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 80009f8:	4ba0      	ldr	r3, [pc, #640]	; (8000c7c <main+0x320>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d06e      	beq.n	8000ade <main+0x182>
			switch(uartRxBuffer[0]){
 8000a00:	4b96      	ldr	r3, [pc, #600]	; (8000c5c <main+0x300>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b0d      	cmp	r3, #13
 8000a06:	d002      	beq.n	8000a0e <main+0xb2>
 8000a08:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0a:	d045      	beq.n	8000a98 <main+0x13c>
 8000a0c:	e054      	b.n	8000ab8 <main+0x15c>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	2203      	movs	r2, #3
 8000a14:	499a      	ldr	r1, [pc, #616]	; (8000c80 <main+0x324>)
 8000a16:	4893      	ldr	r0, [pc, #588]	; (8000c64 <main+0x308>)
 8000a18:	f005 ff79 	bl	800690e <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8000a1c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a22:	4413      	add	r3, r2
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4994      	ldr	r1, [pc, #592]	; (8000c84 <main+0x328>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f007 ffb8 	bl	80089a8 <strtok>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 8000a3c:	e00e      	b.n	8000a5c <main+0x100>
					argv[argc++] = token;
 8000a3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a40:	1c5a      	adds	r2, r3, #1
 8000a42:	673a      	str	r2, [r7, #112]	; 0x70
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	3378      	adds	r3, #120	; 0x78
 8000a48:	443b      	add	r3, r7
 8000a4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000a4c:	f843 2c78 	str.w	r2, [r3, #-120]
					token = strtok(NULL, " ");
 8000a50:	498c      	ldr	r1, [pc, #560]	; (8000c84 <main+0x328>)
 8000a52:	2000      	movs	r0, #0
 8000a54:	f007 ffa8 	bl	80089a8 <strtok>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 8000a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1ed      	bne.n	8000a3e <main+0xe2>
				}

				//requested echo transmission to check characters

				HAL_UART_Transmit(&huart2, "\r\n ", sizeof("\r\n "), HAL_MAX_DELAY);
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	2204      	movs	r2, #4
 8000a68:	4987      	ldr	r1, [pc, #540]	; (8000c88 <main+0x32c>)
 8000a6a:	487e      	ldr	r0, [pc, #504]	; (8000c64 <main+0x308>)
 8000a6c:	f005 ff4f 	bl	800690e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, cmdBuffer, sizeof(cmdBuffer), HAL_MAX_DELAY);
 8000a70:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295
 8000a78:	2240      	movs	r2, #64	; 0x40
 8000a7a:	487a      	ldr	r0, [pc, #488]	; (8000c64 <main+0x308>)
 8000a7c:	f005 ff47 	bl	800690e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\r\n ", sizeof("\r\n "), HAL_MAX_DELAY);
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	2204      	movs	r2, #4
 8000a86:	4980      	ldr	r1, [pc, #512]	; (8000c88 <main+0x32c>)
 8000a88:	4876      	ldr	r0, [pc, #472]	; (8000c64 <main+0x308>)
 8000a8a:	f005 ff40 	bl	800690e <HAL_UART_Transmit>

				idx_cmd = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 8000a96:	e01f      	b.n	8000ad8 <main+0x17c>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 8000a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a9a:	1e5a      	subs	r2, r3, #1
 8000a9c:	677a      	str	r2, [r7, #116]	; 0x74
 8000a9e:	3378      	adds	r3, #120	; 0x78
 8000aa0:	443b      	add	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	2201      	movs	r2, #1
 8000aae:	496b      	ldr	r1, [pc, #428]	; (8000c5c <main+0x300>)
 8000ab0:	486c      	ldr	r0, [pc, #432]	; (8000c64 <main+0x308>)
 8000ab2:	f005 ff2c 	bl	800690e <HAL_UART_Transmit>
				break;
 8000ab6:	e00f      	b.n	8000ad8 <main+0x17c>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000aba:	1c5a      	adds	r2, r3, #1
 8000abc:	677a      	str	r2, [r7, #116]	; 0x74
 8000abe:	4a67      	ldr	r2, [pc, #412]	; (8000c5c <main+0x300>)
 8000ac0:	7812      	ldrb	r2, [r2, #0]
 8000ac2:	3378      	adds	r3, #120	; 0x78
 8000ac4:	443b      	add	r3, r7
 8000ac6:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4962      	ldr	r1, [pc, #392]	; (8000c5c <main+0x300>)
 8000ad2:	4864      	ldr	r0, [pc, #400]	; (8000c64 <main+0x308>)
 8000ad4:	f005 ff1b 	bl	800690e <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8000ad8:	4b68      	ldr	r3, [pc, #416]	; (8000c7c <main+0x320>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8000ade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f000 8130 	beq.w	8000d46 <main+0x3ea>
			if(strcmp(argv[0],"set")==0){
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	4968      	ldr	r1, [pc, #416]	; (8000c8c <main+0x330>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fb98 	bl	8000220 <strcmp>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d12d      	bne.n	8000b52 <main+0x1f6>
				if(strcmp(argv[1],"PA5")==0){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4965      	ldr	r1, [pc, #404]	; (8000c90 <main+0x334>)
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fb90 	bl	8000220 <strcmp>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d11d      	bne.n	8000b42 <main+0x1e6>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f007 fef7 	bl	80088fc <atoi>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	461a      	mov	r2, r3
 8000b14:	2120      	movs	r1, #32
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f003 f8dd 	bl	8003cd8 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f007 feeb 	bl	80088fc <atoi>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	495a      	ldr	r1, [pc, #360]	; (8000c94 <main+0x338>)
 8000b2c:	484c      	ldr	r0, [pc, #304]	; (8000c60 <main+0x304>)
 8000b2e:	f007 ff1b 	bl	8008968 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	2220      	movs	r2, #32
 8000b38:	4949      	ldr	r1, [pc, #292]	; (8000c60 <main+0x304>)
 8000b3a:	484a      	ldr	r0, [pc, #296]	; (8000c64 <main+0x308>)
 8000b3c:	f005 fee7 	bl	800690e <HAL_UART_Transmit>
 8000b40:	e0f8      	b.n	8000d34 <main+0x3d8>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	2214      	movs	r2, #20
 8000b48:	4953      	ldr	r1, [pc, #332]	; (8000c98 <main+0x33c>)
 8000b4a:	4846      	ldr	r0, [pc, #280]	; (8000c64 <main+0x308>)
 8000b4c:	f005 fedf 	bl	800690e <HAL_UART_Transmit>
 8000b50:	e0f0      	b.n	8000d34 <main+0x3d8>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	4951      	ldr	r1, [pc, #324]	; (8000c9c <main+0x340>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fb62 	bl	8000220 <strcmp>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d107      	bne.n	8000b72 <main+0x216>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	2214      	movs	r2, #20
 8000b68:	494b      	ldr	r1, [pc, #300]	; (8000c98 <main+0x33c>)
 8000b6a:	483e      	ldr	r0, [pc, #248]	; (8000c64 <main+0x308>)
 8000b6c:	f005 fecf 	bl	800690e <HAL_UART_Transmit>
 8000b70:	e0e0      	b.n	8000d34 <main+0x3d8>
			}

			// help function prints all the available commands
			else if(strcmp(argv[0],"help")==0){
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	494a      	ldr	r1, [pc, #296]	; (8000ca0 <main+0x344>)
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fb52 	bl	8000220 <strcmp>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d107      	bne.n	8000b92 <main+0x236>
				HAL_UART_Transmit(&huart2, helpContent, sizeof(helpContent), HAL_MAX_DELAY);
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	223b      	movs	r2, #59	; 0x3b
 8000b88:	4946      	ldr	r1, [pc, #280]	; (8000ca4 <main+0x348>)
 8000b8a:	4836      	ldr	r0, [pc, #216]	; (8000c64 <main+0x308>)
 8000b8c:	f005 febf 	bl	800690e <HAL_UART_Transmit>
 8000b90:	e0d0      	b.n	8000d34 <main+0x3d8>
			}
			else if(strcmp(argv[0],"pinout")==0){
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	4944      	ldr	r1, [pc, #272]	; (8000ca8 <main+0x34c>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fb42 	bl	8000220 <strcmp>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d107      	bne.n	8000bb2 <main+0x256>
				HAL_UART_Transmit(&huart2, pinoutContent, sizeof(pinoutContent), HAL_MAX_DELAY);
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	2289      	movs	r2, #137	; 0x89
 8000ba8:	4940      	ldr	r1, [pc, #256]	; (8000cac <main+0x350>)
 8000baa:	482e      	ldr	r0, [pc, #184]	; (8000c64 <main+0x308>)
 8000bac:	f005 feaf 	bl	800690e <HAL_UART_Transmit>
 8000bb0:	e0c0      	b.n	8000d34 <main+0x3d8>
			}
			else if(strcmp(argv[0],"start")==0){
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	493e      	ldr	r1, [pc, #248]	; (8000cb0 <main+0x354>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fb32 	bl	8000220 <strcmp>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d12b      	bne.n	8000c1a <main+0x2be>
				HAL_UART_Transmit(&huart2, startContent, sizeof(startContent), HAL_MAX_DELAY);
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	493a      	ldr	r1, [pc, #232]	; (8000cb4 <main+0x358>)
 8000bca:	4826      	ldr	r0, [pc, #152]	; (8000c64 <main+0x308>)
 8000bcc:	f005 fe9f 	bl	800690e <HAL_UART_Transmit>
				//ISO_RESET code
				HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	4838      	ldr	r0, [pc, #224]	; (8000cb8 <main+0x35c>)
 8000bd6:	f003 f87f 	bl	8003cd8 <HAL_GPIO_WritePin>
				for(i=0; i<ISO_RESET_TIME; i++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	667b      	str	r3, [r7, #100]	; 0x64
 8000bde:	e002      	b.n	8000be6 <main+0x28a>
 8000be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000be2:	3301      	adds	r3, #1
 8000be4:	667b      	str	r3, [r7, #100]	; 0x64
 8000be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000be8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000bec:	dbf8      	blt.n	8000be0 <main+0x284>
				{
					//wait for at least 2microSec
				}
				//HAL_Delay(100);
				HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	4831      	ldr	r0, [pc, #196]	; (8000cb8 <main+0x35c>)
 8000bf4:	f003 f870 	bl	8003cd8 <HAL_GPIO_WritePin>
				//Timers start
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4830      	ldr	r0, [pc, #192]	; (8000cbc <main+0x360>)
 8000bfc:	f004 fa04 	bl	8005008 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c00:	2104      	movs	r1, #4
 8000c02:	482e      	ldr	r0, [pc, #184]	; (8000cbc <main+0x360>)
 8000c04:	f004 fa00 	bl	8005008 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	482c      	ldr	r0, [pc, #176]	; (8000cbc <main+0x360>)
 8000c0c:	f005 fb90 	bl	8006330 <HAL_TIMEx_PWMN_Start>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000c10:	2104      	movs	r1, #4
 8000c12:	482a      	ldr	r0, [pc, #168]	; (8000cbc <main+0x360>)
 8000c14:	f005 fb8c 	bl	8006330 <HAL_TIMEx_PWMN_Start>
 8000c18:	e08c      	b.n	8000d34 <main+0x3d8>
			}
			else if(strcmp(argv[0],"stop")==0){
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	4928      	ldr	r1, [pc, #160]	; (8000cc0 <main+0x364>)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fafe 	bl	8000220 <strcmp>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d14e      	bne.n	8000cc8 <main+0x36c>
				HAL_UART_Transmit(&huart2, stopContent, sizeof(stopContent), HAL_MAX_DELAY);
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	2210      	movs	r2, #16
 8000c30:	4924      	ldr	r1, [pc, #144]	; (8000cc4 <main+0x368>)
 8000c32:	480c      	ldr	r0, [pc, #48]	; (8000c64 <main+0x308>)
 8000c34:	f005 fe6b 	bl	800690e <HAL_UART_Transmit>
				//Timers stop
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4820      	ldr	r0, [pc, #128]	; (8000cbc <main+0x360>)
 8000c3c:	f004 fae4 	bl	8005208 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000c40:	2104      	movs	r1, #4
 8000c42:	481e      	ldr	r0, [pc, #120]	; (8000cbc <main+0x360>)
 8000c44:	f004 fae0 	bl	8005208 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	481c      	ldr	r0, [pc, #112]	; (8000cbc <main+0x360>)
 8000c4c:	f005 fc24 	bl	8006498 <HAL_TIMEx_PWMN_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000c50:	2104      	movs	r1, #4
 8000c52:	481a      	ldr	r0, [pc, #104]	; (8000cbc <main+0x360>)
 8000c54:	f005 fc20 	bl	8006498 <HAL_TIMEx_PWMN_Stop>
 8000c58:	e06c      	b.n	8000d34 <main+0x3d8>
 8000c5a:	bf00      	nop
 8000c5c:	20000430 	.word	0x20000430
 8000c60:	20000434 	.word	0x20000434
 8000c64:	20000390 	.word	0x20000390
 8000c68:	20000018 	.word	0x20000018
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	2000022c 	.word	0x2000022c
 8000c74:	20000474 	.word	0x20000474
 8000c78:	20000344 	.word	0x20000344
 8000c7c:	20000428 	.word	0x20000428
 8000c80:	20000080 	.word	0x20000080
 8000c84:	08009efc 	.word	0x08009efc
 8000c88:	08009f00 	.word	0x08009f00
 8000c8c:	08009f04 	.word	0x08009f04
 8000c90:	08009f08 	.word	0x08009f08
 8000c94:	08009f0c 	.word	0x08009f0c
 8000c98:	20000084 	.word	0x20000084
 8000c9c:	08009f28 	.word	0x08009f28
 8000ca0:	08009f2c 	.word	0x08009f2c
 8000ca4:	20000098 	.word	0x20000098
 8000ca8:	08009f34 	.word	0x08009f34
 8000cac:	200000d4 	.word	0x200000d4
 8000cb0:	08009f3c 	.word	0x08009f3c
 8000cb4:	20000160 	.word	0x20000160
 8000cb8:	48000800 	.word	0x48000800
 8000cbc:	200002f8 	.word	0x200002f8
 8000cc0:	08009f44 	.word	0x08009f44
 8000cc4:	20000170 	.word	0x20000170
			}
			else if(strcmp(argv[0],"dutycycle")==0){
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	494a      	ldr	r1, [pc, #296]	; (8000df4 <main+0x498>)
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff faa7 	bl	8000220 <strcmp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d126      	bne.n	8000d26 <main+0x3ca>

				HAL_UART_Transmit(&huart2, dutyCycleChoiceContent, sizeof(dutyCycleChoiceContent), HAL_MAX_DELAY);
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cdc:	221e      	movs	r2, #30
 8000cde:	4946      	ldr	r1, [pc, #280]	; (8000df8 <main+0x49c>)
 8000ce0:	4846      	ldr	r0, [pc, #280]	; (8000dfc <main+0x4a0>)
 8000ce2:	f005 fe14 	bl	800690e <HAL_UART_Transmit>

				dutycycle= atoi(argv[1]);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f007 fe07 	bl	80088fc <atoi>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4a43      	ldr	r2, [pc, #268]	; (8000e00 <main+0x4a4>)
 8000cf2:	6013      	str	r3, [r2, #0]
				pulse=(dutycycle*TIM1_ARR)/100;
 8000cf4:	4b42      	ldr	r3, [pc, #264]	; (8000e00 <main+0x4a4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8000cfc:	fb02 f303 	mul.w	r3, r2, r3
 8000d00:	4a40      	ldr	r2, [pc, #256]	; (8000e04 <main+0x4a8>)
 8000d02:	fb82 1203 	smull	r1, r2, r2, r3
 8000d06:	1152      	asrs	r2, r2, #5
 8000d08:	17db      	asrs	r3, r3, #31
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	4a3e      	ldr	r2, [pc, #248]	; (8000e08 <main+0x4ac>)
 8000d0e:	6013      	str	r3, [r2, #0]
				TIM1->CCR1=pulse;
 8000d10:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <main+0x4ac>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b3d      	ldr	r3, [pc, #244]	; (8000e0c <main+0x4b0>)
 8000d16:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2=TIM1_ARR-pulse;
 8000d18:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <main+0x4ac>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f5c3 52a6 	rsb	r2, r3, #5312	; 0x14c0
 8000d20:	4b3a      	ldr	r3, [pc, #232]	; (8000e0c <main+0x4b0>)
 8000d22:	639a      	str	r2, [r3, #56]	; 0x38
 8000d24:	e006      	b.n	8000d34 <main+0x3d8>

				//HAL_UART_Transmit(&huart2, &pulse, sizeof(pulse), HAL_MAX_DELAY);
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	2214      	movs	r2, #20
 8000d2c:	4938      	ldr	r1, [pc, #224]	; (8000e10 <main+0x4b4>)
 8000d2e:	4833      	ldr	r0, [pc, #204]	; (8000dfc <main+0x4a0>)
 8000d30:	f005 fded 	bl	800690e <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
 8000d38:	2218      	movs	r2, #24
 8000d3a:	4936      	ldr	r1, [pc, #216]	; (8000e14 <main+0x4b8>)
 8000d3c:	482f      	ldr	r0, [pc, #188]	; (8000dfc <main+0x4a0>)
 8000d3e:	f005 fde6 	bl	800690e <HAL_UART_Transmit>
			newCmdReady = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		if(DMA_Received){
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <main+0x4bc>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f43f ae54 	beq.w	80009f8 <main+0x9c>
			for(i=0;i++;i<10){
 8000d50:	2300      	movs	r3, #0
 8000d52:	667b      	str	r3, [r7, #100]	; 0x64
 8000d54:	e009      	b.n	8000d6a <main+0x40e>
			Raw_Data_Sum=Raw_Data_Sum+ADC_buffer[i];
 8000d56:	4a31      	ldr	r2, [pc, #196]	; (8000e1c <main+0x4c0>)
 8000d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d5a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d5e:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <main+0x4c4>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <main+0x4c4>)
 8000d68:	801a      	strh	r2, [r3, #0]
			for(i=0;i++;i<10){
 8000d6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	667a      	str	r2, [r7, #100]	; 0x64
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1f0      	bne.n	8000d56 <main+0x3fa>
			}
			Average_Voltage=Raw_Data_Sum/ADC_BUFF_SIZE;
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <main+0x4c4>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <main+0x4c8>)
 8000d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7e:	08db      	lsrs	r3, r3, #3
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	ee07 3a90 	vmov	s15, r3
 8000d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d8a:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <main+0x4cc>)
 8000d8c:	edc3 7a00 	vstr	s15, [r3]
			Converted_Average_Voltage=(Average_Voltage/4095)*(33/10);
 8000d90:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <main+0x4cc>)
 8000d92:	ed93 7a00 	vldr	s14, [r3]
 8000d96:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000e2c <main+0x4d0>
 8000d9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d9e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da6:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <main+0x4d4>)
 8000da8:	edc3 7a00 	vstr	s15, [r3]
			Sensed_Current_Value=12*Converted_Average_Voltage -30;
 8000dac:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <main+0x4d4>)
 8000dae:	edd3 7a00 	vldr	s15, [r3]
 8000db2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dba:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000dbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <main+0x4d8>)
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
			sprintf(Current_Sensed, "current sensed is %d \r\n", Sensed_Current_Value);
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <main+0x4d8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fbeb 	bl	80005a8 <__aeabi_f2d>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4918      	ldr	r1, [pc, #96]	; (8000e38 <main+0x4dc>)
 8000dd8:	4818      	ldr	r0, [pc, #96]	; (8000e3c <main+0x4e0>)
 8000dda:	f007 fdc5 	bl	8008968 <siprintf>
			HAL_UART_Transmit(&huart2, Current_Sensed, sizeof(Current_Sensed), HAL_MAX_DELAY);
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	221e      	movs	r2, #30
 8000de4:	4915      	ldr	r1, [pc, #84]	; (8000e3c <main+0x4e0>)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <main+0x4a0>)
 8000de8:	f005 fd91 	bl	800690e <HAL_UART_Transmit>
			DMA_Received=0;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <main+0x4bc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
		if(uartRxReceived){
 8000df2:	e601      	b.n	80009f8 <main+0x9c>
 8000df4:	08009f4c 	.word	0x08009f4c
 8000df8:	20000180 	.word	0x20000180
 8000dfc:	20000390 	.word	0x20000390
 8000e00:	20000420 	.word	0x20000420
 8000e04:	51eb851f 	.word	0x51eb851f
 8000e08:	20000424 	.word	0x20000424
 8000e0c:	40012c00 	.word	0x40012c00
 8000e10:	20000084 	.word	0x20000084
 8000e14:	20000000 	.word	0x20000000
 8000e18:	2000042c 	.word	0x2000042c
 8000e1c:	20000474 	.word	0x20000474
 8000e20:	20000488 	.word	0x20000488
 8000e24:	cccccccd 	.word	0xcccccccd
 8000e28:	2000048c 	.word	0x2000048c
 8000e2c:	457ff000 	.word	0x457ff000
 8000e30:	20000490 	.word	0x20000490
 8000e34:	20000494 	.word	0x20000494
 8000e38:	08009f58 	.word	0x08009f58
 8000e3c:	20000498 	.word	0x20000498

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b094      	sub	sp, #80	; 0x50
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	2238      	movs	r2, #56	; 0x38
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f007 fd82 	bl	8008958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f002 ff50 	bl	8003d08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e72:	2340      	movs	r3, #64	; 0x40
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e76:	2302      	movs	r3, #2
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e82:	2355      	movs	r3, #85	; 0x55
 8000e84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e92:	f107 0318 	add.w	r3, r7, #24
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 ffda 	bl	8003e50 <HAL_RCC_OscConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ea2:	f000 fac1 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 fade 	bl	8004480 <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000eca:	f000 faad 	bl	8001428 <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3750      	adds	r7, #80	; 0x50
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2220      	movs	r2, #32
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f007 fd31 	bl	8008958 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef6:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000ef8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000efc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000efe:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f06:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f12:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f20:	2204      	movs	r2, #4
 8000f22:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f24:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f36:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f60:	4817      	ldr	r0, [pc, #92]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f62:	f001 f835 	bl	8001fd0 <HAL_ADC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f6c:	f000 fa5c 	bl	8001428 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f7c:	f002 f874 	bl	8003068 <HAL_ADCEx_MultiModeConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f86:	f000 fa4f 	bl	8001428 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f8e:	2306      	movs	r3, #6
 8000f90:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f96:	237f      	movs	r3, #127	; 0x7f
 8000f98:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000fa8:	f001 fa64 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fb2:	f000 fa39 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3730      	adds	r7, #48	; 0x30
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000022c 	.word	0x2000022c
 8000fc4:	04300002 	.word	0x04300002

08000fc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b09c      	sub	sp, #112	; 0x70
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	615a      	str	r2, [r3, #20]
 8000ffa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2234      	movs	r2, #52	; 0x34
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f007 fca8 	bl	8008958 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001008:	4b4d      	ldr	r3, [pc, #308]	; (8001140 <MX_TIM1_Init+0x178>)
 800100a:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <MX_TIM1_Init+0x17c>)
 800100c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800100e:	4b4c      	ldr	r3, [pc, #304]	; (8001140 <MX_TIM1_Init+0x178>)
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001014:	4b4a      	ldr	r3, [pc, #296]	; (8001140 <MX_TIM1_Init+0x178>)
 8001016:	2220      	movs	r2, #32
 8001018:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5312;
 800101a:	4b49      	ldr	r3, [pc, #292]	; (8001140 <MX_TIM1_Init+0x178>)
 800101c:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8001020:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001022:	4b47      	ldr	r3, [pc, #284]	; (8001140 <MX_TIM1_Init+0x178>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001028:	4b45      	ldr	r3, [pc, #276]	; (8001140 <MX_TIM1_Init+0x178>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800102e:	4b44      	ldr	r3, [pc, #272]	; (8001140 <MX_TIM1_Init+0x178>)
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001034:	4842      	ldr	r0, [pc, #264]	; (8001140 <MX_TIM1_Init+0x178>)
 8001036:	f003 fe61 	bl	8004cfc <HAL_TIM_Base_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001040:	f000 f9f2 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001048:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800104a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800104e:	4619      	mov	r1, r3
 8001050:	483b      	ldr	r0, [pc, #236]	; (8001140 <MX_TIM1_Init+0x178>)
 8001052:	f004 fc03 	bl	800585c <HAL_TIM_ConfigClockSource>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800105c:	f000 f9e4 	bl	8001428 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001060:	4837      	ldr	r0, [pc, #220]	; (8001140 <MX_TIM1_Init+0x178>)
 8001062:	f003 ff6f 	bl	8004f44 <HAL_TIM_PWM_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800106c:	f000 f9dc 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001070:	2300      	movs	r3, #0
 8001072:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800107c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001080:	4619      	mov	r1, r3
 8001082:	482f      	ldr	r0, [pc, #188]	; (8001140 <MX_TIM1_Init+0x178>)
 8001084:	f005 fa66 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800108e:	f000 f9cb 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001092:	2360      	movs	r3, #96	; 0x60
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1328;
 8001096:	f44f 63a6 	mov.w	r3, #1328	; 0x530
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109c:	2300      	movs	r3, #0
 800109e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	4821      	ldr	r0, [pc, #132]	; (8001140 <MX_TIM1_Init+0x178>)
 80010ba:	f004 fabb 	bl	8005634 <HAL_TIM_PWM_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80010c4:	f000 f9b0 	bl	8001428 <Error_Handler>
  }
  sConfigOC.Pulse = 3986;
 80010c8:	f640 7392 	movw	r3, #3986	; 0xf92
 80010cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010d2:	2204      	movs	r2, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	481a      	ldr	r0, [pc, #104]	; (8001140 <MX_TIM1_Init+0x178>)
 80010d8:	f004 faac 	bl	8005634 <HAL_TIM_PWM_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80010e2:	f000 f9a1 	bl	8001428 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 80010f2:	23cb      	movs	r3, #203	; 0xcb
 80010f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800110c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001116:	2300      	movs	r3, #0
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4807      	ldr	r0, [pc, #28]	; (8001140 <MX_TIM1_Init+0x178>)
 8001124:	f005 fa98 	bl	8006658 <HAL_TIMEx_ConfigBreakDeadTime>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 800112e:	f000 f97b 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <MX_TIM1_Init+0x178>)
 8001134:	f000 fa58 	bl	80015e8 <HAL_TIM_MspPostInit>

}
 8001138:	bf00      	nop
 800113a:	3770      	adds	r7, #112	; 0x70
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200002f8 	.word	0x200002f8
 8001144:	40012c00 	.word	0x40012c00

08001148 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <MX_TIM8_Init+0xa0>)
 8001168:	4a20      	ldr	r2, [pc, #128]	; (80011ec <MX_TIM8_Init+0xa4>)
 800116a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_TIM8_Init+0xa0>)
 800116e:	2200      	movs	r2, #0
 8001170:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_TIM8_Init+0xa0>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 530;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_TIM8_Init+0xa0>)
 800117a:	f240 2212 	movw	r2, #530	; 0x212
 800117e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_TIM8_Init+0xa0>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_TIM8_Init+0xa0>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_TIM8_Init+0xa0>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <MX_TIM8_Init+0xa0>)
 8001194:	f003 fdb2 	bl	8004cfc <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800119e:	f000 f943 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	480e      	ldr	r0, [pc, #56]	; (80011e8 <MX_TIM8_Init+0xa0>)
 80011b0:	f004 fb54 	bl	800585c <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80011ba:	f000 f935 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011be:	2320      	movs	r3, #32
 80011c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_TIM8_Init+0xa0>)
 80011d0:	f005 f9c0 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80011da:	f000 f925 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000344 	.word	0x20000344
 80011ec:	40013400 	.word	0x40013400

080011f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_USART2_UART_Init+0x90>)
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <MX_USART2_UART_Init+0x94>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_USART2_UART_Init+0x90>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800123a:	f005 fb18 	bl	800686e <HAL_UART_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001244:	f000 f8f0 	bl	8001428 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001248:	2100      	movs	r1, #0
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800124c:	f007 fa8b 	bl	8008766 <HAL_UARTEx_SetTxFifoThreshold>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001256:	f000 f8e7 	bl	8001428 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800125e:	f007 fac0 	bl	80087e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001268:	f000 f8de 	bl	8001428 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800126e:	f007 fa41 	bl	80086f4 <HAL_UARTEx_DisableFifoMode>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001278:	f000 f8d6 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000390 	.word	0x20000390
 8001284:	40004400 	.word	0x40004400

08001288 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_DMA_Init+0x50>)
 8001290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001292:	4a11      	ldr	r2, [pc, #68]	; (80012d8 <MX_DMA_Init+0x50>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6493      	str	r3, [r2, #72]	; 0x48
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_DMA_Init+0x50>)
 800129c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_DMA_Init+0x50>)
 80012a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012aa:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <MX_DMA_Init+0x50>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6493      	str	r3, [r2, #72]	; 0x48
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_DMA_Init+0x50>)
 80012b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	200b      	movs	r0, #11
 80012c4:	f002 f82c 	bl	8003320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012c8:	200b      	movs	r0, #11
 80012ca:	f002 f843 	bl	8003354 <HAL_NVIC_EnableIRQ>

}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000

080012dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <MX_GPIO_Init+0xd4>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	4a2e      	ldr	r2, [pc, #184]	; (80013b0 <MX_GPIO_Init+0xd4>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fe:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <MX_GPIO_Init+0xd4>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800130a:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <MX_GPIO_Init+0xd4>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	4a28      	ldr	r2, [pc, #160]	; (80013b0 <MX_GPIO_Init+0xd4>)
 8001310:	f043 0320 	orr.w	r3, r3, #32
 8001314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <MX_GPIO_Init+0xd4>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	f003 0320 	and.w	r3, r3, #32
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <MX_GPIO_Init+0xd4>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <MX_GPIO_Init+0xd4>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <MX_GPIO_Init+0xd4>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2102      	movs	r1, #2
 800133e:	481d      	ldr	r0, [pc, #116]	; (80013b4 <MX_GPIO_Init+0xd8>)
 8001340:	f002 fcca 	bl	8003cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2120      	movs	r1, #32
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f002 fcc4 	bl	8003cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001356:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800135a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	4619      	mov	r1, r3
 8001366:	4813      	ldr	r0, [pc, #76]	; (80013b4 <MX_GPIO_Init+0xd8>)
 8001368:	f002 fb34 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISO_RESET_Pin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 800136c:	2302      	movs	r3, #2
 800136e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	4619      	mov	r1, r3
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_GPIO_Init+0xd8>)
 8001384:	f002 fb26 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001388:	2320      	movs	r3, #32
 800138a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a2:	f002 fb17 	bl	80039d4 <HAL_GPIO_Init>

}
 80013a6:	bf00      	nop
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000800 	.word	0x48000800

080013b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	uartRxReceived=1;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_UART_RxCpltCallback+0x20>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80013c6:	2201      	movs	r2, #1
 80013c8:	4904      	ldr	r1, [pc, #16]	; (80013dc <HAL_UART_RxCpltCallback+0x24>)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <HAL_UART_RxCpltCallback+0x28>)
 80013cc:	f005 fb36 	bl	8006a3c <HAL_UART_Receive_IT>

}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000428 	.word	0x20000428
 80013dc:	20000430 	.word	0x20000430
 80013e0:	20000390 	.word	0x20000390

080013e4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*hadc){
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	DMA_Received=1;
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <HAL_ADC_ConvCpltCallback+0x1c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	2000042c 	.word	0x2000042c

08001404 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001416:	f000 fb53 	bl	8001ac0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40001000 	.word	0x40001000

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_MspInit+0x44>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_MspInit+0x44>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6613      	str	r3, [r2, #96]	; 0x60
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_MspInit+0x44>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x44>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x44>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6593      	str	r3, [r2, #88]	; 0x58
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x44>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b09a      	sub	sp, #104	; 0x68
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	2244      	movs	r2, #68	; 0x44
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f007 fa5b 	bl	8008958 <memset>
  if(hadc->Instance==ADC1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014aa:	d15f      	bne.n	800156c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 fa2d 	bl	800491c <HAL_RCCEx_PeriphCLKConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80014c8:	f7ff ffae 	bl	8001428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <HAL_ADC_MspInit+0xf8>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d0:	4a28      	ldr	r2, [pc, #160]	; (8001574 <HAL_ADC_MspInit+0xf8>)
 80014d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d8:	4b26      	ldr	r3, [pc, #152]	; (8001574 <HAL_ADC_MspInit+0xf8>)
 80014da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <HAL_ADC_MspInit+0xf8>)
 80014e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e8:	4a22      	ldr	r2, [pc, #136]	; (8001574 <HAL_ADC_MspInit+0xf8>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_ADC_MspInit+0xf8>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_CURRENT_Pin;
 80014fc:	2301      	movs	r3, #1
 80014fe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001500:	2303      	movs	r3, #3
 8001502:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(ADC_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001512:	f002 fa5f 	bl	80039d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_ADC_MspInit+0xfc>)
 8001518:	4a18      	ldr	r2, [pc, #96]	; (800157c <HAL_ADC_MspInit+0x100>)
 800151a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_ADC_MspInit+0xfc>)
 800151e:	2205      	movs	r2, #5
 8001520:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_ADC_MspInit+0xfc>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_ADC_MspInit+0xfc>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_ADC_MspInit+0xfc>)
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_ADC_MspInit+0xfc>)
 8001536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800153a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_ADC_MspInit+0xfc>)
 800153e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001542:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_ADC_MspInit+0xfc>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_ADC_MspInit+0xfc>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <HAL_ADC_MspInit+0xfc>)
 8001552:	f001 ff0d 	bl	8003370 <HAL_DMA_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800155c:	f7ff ff64 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <HAL_ADC_MspInit+0xfc>)
 8001564:	655a      	str	r2, [r3, #84]	; 0x54
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_ADC_MspInit+0xfc>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800156c:	bf00      	nop
 800156e:	3768      	adds	r7, #104	; 0x68
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000
 8001578:	20000298 	.word	0x20000298
 800157c:	40020008 	.word	0x40020008

08001580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a13      	ldr	r2, [pc, #76]	; (80015dc <HAL_TIM_Base_MspInit+0x5c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d10c      	bne.n	80015ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_TIM_Base_MspInit+0x60>)
 8001594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <HAL_TIM_Base_MspInit+0x60>)
 8001598:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800159c:	6613      	str	r3, [r2, #96]	; 0x60
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_TIM_Base_MspInit+0x60>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80015aa:	e010      	b.n	80015ce <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <HAL_TIM_Base_MspInit+0x64>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10b      	bne.n	80015ce <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_TIM_Base_MspInit+0x60>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <HAL_TIM_Base_MspInit+0x60>)
 80015bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015c0:	6613      	str	r3, [r2, #96]	; 0x60
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <HAL_TIM_Base_MspInit+0x60>)
 80015c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40012c00 	.word	0x40012c00
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40013400 	.word	0x40013400

080015e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a12      	ldr	r2, [pc, #72]	; (8001650 <HAL_TIM_MspPostInit+0x68>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d11d      	bne.n	8001646 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_TIM_MspPostInit+0x6c>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	4a11      	ldr	r2, [pc, #68]	; (8001654 <HAL_TIM_MspPostInit+0x6c>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_TIM_MspPostInit+0x6c>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001622:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001626:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001634:	2306      	movs	r3, #6
 8001636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001642:	f002 f9c7 	bl	80039d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40012c00 	.word	0x40012c00
 8001654:	40021000 	.word	0x40021000

08001658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b09a      	sub	sp, #104	; 0x68
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	2244      	movs	r2, #68	; 0x44
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f007 f96d 	bl	8008958 <memset>
  if(huart->Instance==USART2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a23      	ldr	r2, [pc, #140]	; (8001710 <HAL_UART_MspInit+0xb8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d13e      	bne.n	8001706 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001688:	2302      	movs	r3, #2
 800168a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4618      	mov	r0, r3
 8001696:	f003 f941 	bl	800491c <HAL_RCCEx_PeriphCLKConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016a0:	f7ff fec2 	bl	8001428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_UART_MspInit+0xbc>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a8:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <HAL_UART_MspInit+0xbc>)
 80016aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ae:	6593      	str	r3, [r2, #88]	; 0x58
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_UART_MspInit+0xbc>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_UART_MspInit+0xbc>)
 80016be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <HAL_UART_MspInit+0xbc>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_UART_MspInit+0xbc>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016d4:	230c      	movs	r3, #12
 80016d6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e4:	2307      	movs	r3, #7
 80016e6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016ec:	4619      	mov	r1, r3
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f2:	f002 f96f 	bl	80039d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2026      	movs	r0, #38	; 0x26
 80016fc:	f001 fe10 	bl	8003320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001700:	2026      	movs	r0, #38	; 0x26
 8001702:	f001 fe27 	bl	8003354 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3768      	adds	r7, #104	; 0x68
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40004400 	.word	0x40004400
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_InitTick+0xcc>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	4a2c      	ldr	r2, [pc, #176]	; (80017e4 <HAL_InitTick+0xcc>)
 8001734:	f043 0310 	orr.w	r3, r3, #16
 8001738:	6593      	str	r3, [r2, #88]	; 0x58
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <HAL_InitTick+0xcc>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001746:	f107 020c 	add.w	r2, r7, #12
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f003 f86b 	bl	800482c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001756:	f003 f83d 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 800175a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175e:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <HAL_InitTick+0xd0>)
 8001760:	fba2 2303 	umull	r2, r3, r2, r3
 8001764:	0c9b      	lsrs	r3, r3, #18
 8001766:	3b01      	subs	r3, #1
 8001768:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_InitTick+0xd4>)
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <HAL_InitTick+0xd8>)
 800176e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_InitTick+0xd4>)
 8001772:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001776:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001778:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_InitTick+0xd4>)
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_InitTick+0xd4>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_InitTick+0xd4>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800178a:	4818      	ldr	r0, [pc, #96]	; (80017ec <HAL_InitTick+0xd4>)
 800178c:	f003 fab6 	bl	8004cfc <HAL_TIM_Base_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800179a:	2b00      	cmp	r3, #0
 800179c:	d11b      	bne.n	80017d6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800179e:	4813      	ldr	r0, [pc, #76]	; (80017ec <HAL_InitTick+0xd4>)
 80017a0:	f003 fb66 	bl	8004e70 <HAL_TIM_Base_Start_IT>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80017aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d111      	bne.n	80017d6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017b2:	2036      	movs	r0, #54	; 0x36
 80017b4:	f001 fdce 	bl	8003354 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b0f      	cmp	r3, #15
 80017bc:	d808      	bhi.n	80017d0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017be:	2200      	movs	r2, #0
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	2036      	movs	r0, #54	; 0x36
 80017c4:	f001 fdac 	bl	8003320 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_InitTick+0xdc>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e002      	b.n	80017d6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3730      	adds	r7, #48	; 0x30
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	431bde83 	.word	0x431bde83
 80017ec:	200004b8 	.word	0x200004b8
 80017f0:	40001000 	.word	0x40001000
 80017f4:	200001a4 	.word	0x200001a4

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <NMI_Handler+0x4>

080017fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <MemManage_Handler+0x4>

0800180a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <UsageFault_Handler+0x4>

08001816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA1_Channel1_IRQHandler+0x10>)
 8001856:	f001 ff6e 	bl	8003736 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000298 	.word	0x20000298

08001864 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <USART2_IRQHandler+0x10>)
 800186a:	f005 f93d 	bl	8006ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000390 	.word	0x20000390

08001878 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <TIM6_DAC_IRQHandler+0x10>)
 800187e:	f003 fd59 	bl	8005334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200004b8 	.word	0x200004b8

0800188c <_getpid>:
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
 8001890:	2301      	movs	r3, #1
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_kill>:
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	f007 f82d 	bl	8008904 <__errno>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2216      	movs	r2, #22
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_exit>:
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ffe7 	bl	800189c <_kill>
 80018ce:	e7fe      	b.n	80018ce <_exit+0x12>

080018d0 <_read>:
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e00a      	b.n	80018f8 <_read+0x28>
 80018e2:	f3af 8000 	nop.w
 80018e6:	4601      	mov	r1, r0
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	b2ca      	uxtb	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf0      	blt.n	80018e2 <_read+0x12>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_write>:
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e009      	b.n	8001930 <_write+0x26>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f3af 8000 	nop.w
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf1      	blt.n	800191c <_write+0x12>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_close>:
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_fstat>:
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	2300      	movs	r3, #0
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_isatty>:
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	2301      	movs	r3, #1
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_lseek>:
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	2300      	movs	r3, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <_sbrk>:
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
 80019dc:	f006 ff92 	bl	8008904 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20008000 	.word	0x20008000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	20000504 	.word	0x20000504
 8001a14:	20000520 	.word	0x20000520

08001a18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <Reset_Handler>:
 8001a3c:	480d      	ldr	r0, [pc, #52]	; (8001a74 <LoopForever+0x2>)
 8001a3e:	4685      	mov	sp, r0
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <LoopForever+0x6>)
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <LoopForever+0xa>)
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <LoopForever+0xe>)
 8001a46:	2300      	movs	r3, #0
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:
 8001a4a:	58d4      	ldr	r4, [r2, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:
 8001a50:	18c4      	adds	r4, r0, r3
 8001a52:	428c      	cmp	r4, r1
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <LoopForever+0x12>)
 8001a58:	4c0b      	ldr	r4, [pc, #44]	; (8001a88 <LoopForever+0x16>)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:
 8001a62:	42a2      	cmp	r2, r4
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>
 8001a66:	f7ff ffd7 	bl	8001a18 <SystemInit>
 8001a6a:	f006 ff51 	bl	8008910 <__libc_init_array>
 8001a6e:	f7fe ff75 	bl	800095c <main>

08001a72 <LoopForever>:
 8001a72:	e7fe      	b.n	8001a72 <LoopForever>
 8001a74:	20008000 	.word	0x20008000
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000210 	.word	0x20000210
 8001a80:	0800a208 	.word	0x0800a208
 8001a84:	20000210 	.word	0x20000210
 8001a88:	2000051c 	.word	0x2000051c

08001a8c <ADC1_2_IRQHandler>:
 8001a8c:	e7fe      	b.n	8001a8c <ADC1_2_IRQHandler>

08001a8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f001 fc36 	bl	800330a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f7ff fe3a 	bl	8001718 <HAL_InitTick>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	71fb      	strb	r3, [r7, #7]
 8001aae:	e001      	b.n	8001ab4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ab0:	f7ff fcc0 	bl	8001434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ab4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_IncTick+0x1c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_IncTick+0x20>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a03      	ldr	r2, [pc, #12]	; (8001adc <HAL_IncTick+0x1c>)
 8001ad0:	6013      	str	r3, [r2, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	20000508 	.word	0x20000508
 8001ae0:	200001a8 	.word	0x200001a8

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000508 	.word	0x20000508

08001afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff ffee 	bl	8001ae4 <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d004      	beq.n	8001b20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_Delay+0x40>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b20:	bf00      	nop
 8001b22:	f7ff ffdf 	bl	8001ae4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d8f7      	bhi.n	8001b22 <HAL_Delay+0x26>
  {
  }
}
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	200001a8 	.word	0x200001a8

08001b40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	609a      	str	r2, [r3, #8]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3360      	adds	r3, #96	; 0x60
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <LL_ADC_SetOffset+0x44>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001be0:	bf00      	nop
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	03fff000 	.word	0x03fff000

08001bf0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3360      	adds	r3, #96	; 0x60
 8001bfe:	461a      	mov	r2, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3360      	adds	r3, #96	; 0x60
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b087      	sub	sp, #28
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3360      	adds	r3, #96	; 0x60
 8001c62:	461a      	mov	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c7c:	bf00      	nop
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3360      	adds	r3, #96	; 0x60
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cb2:	bf00      	nop
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	615a      	str	r2, [r3, #20]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b087      	sub	sp, #28
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3330      	adds	r3, #48	; 0x30
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	4413      	add	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	211f      	movs	r1, #31
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	0e9b      	lsrs	r3, r3, #26
 8001d42:	f003 011f 	and.w	r1, r3, #31
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	431a      	orrs	r2, r3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d56:	bf00      	nop
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b087      	sub	sp, #28
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3314      	adds	r3, #20
 8001d72:	461a      	mov	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	0e5b      	lsrs	r3, r3, #25
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	4413      	add	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	0d1b      	lsrs	r3, r3, #20
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2107      	movs	r1, #7
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	401a      	ands	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	0d1b      	lsrs	r3, r3, #20
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	431a      	orrs	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dac:	bf00      	nop
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d10a      	bne.n	8001de2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001de0:	e00a      	b.n	8001df8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dee:	43db      	mvns	r3, r3
 8001df0:	401a      	ands	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	407f0000 	.word	0x407f0000

08001e08 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 031f 	and.w	r3, r3, #31
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6093      	str	r3, [r2, #8]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e5c:	d101      	bne.n	8001e62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001eac:	d101      	bne.n	8001eb2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ed0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001efc:	f043 0202 	orr.w	r2, r3, #2
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <LL_ADC_IsEnabled+0x18>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <LL_ADC_IsEnabled+0x1a>
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_IsDisableOngoing+0x18>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_IsDisableOngoing+0x1a>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f70:	f043 0204 	orr.w	r2, r3, #4
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d101      	bne.n	8001f9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d101      	bne.n	8001fc2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e177      	b.n	80022da <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fa3f 	bl	800147c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff19 	bl	8001e48 <LL_ADC_IsDeepPowerDownEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff feff 	bl	8001e24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff34 	bl	8001e98 <LL_ADC_IsInternalRegulatorEnabled>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d115      	bne.n	8002062 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff18 	bl	8001e70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002040:	4b9c      	ldr	r3, [pc, #624]	; (80022b4 <HAL_ADC_Init+0x2e4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	4a9c      	ldr	r2, [pc, #624]	; (80022b8 <HAL_ADC_Init+0x2e8>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002054:	e002      	b.n	800205c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3b01      	subs	r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff16 	bl	8001e98 <LL_ADC_IsInternalRegulatorEnabled>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10d      	bne.n	800208e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	f043 0210 	orr.w	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff76 	bl	8001f84 <LL_ADC_REG_IsConversionOngoing>
 8002098:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 8110 	bne.w	80022c8 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 810c 	bne.w	80022c8 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020b8:	f043 0202 	orr.w	r2, r3, #2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff23 	bl	8001f10 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020d4:	f7ff ff1c 	bl	8001f10 <LL_ADC_IsEnabled>
 80020d8:	4604      	mov	r4, r0
 80020da:	4878      	ldr	r0, [pc, #480]	; (80022bc <HAL_ADC_Init+0x2ec>)
 80020dc:	f7ff ff18 	bl	8001f10 <LL_ADC_IsEnabled>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4323      	orrs	r3, r4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4619      	mov	r1, r3
 80020ee:	4874      	ldr	r0, [pc, #464]	; (80022c0 <HAL_ADC_Init+0x2f0>)
 80020f0:	f7ff fd26 	bl	8001b40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7f5b      	ldrb	r3, [r3, #29]
 80020f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002104:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800210a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002112:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800211e:	2b01      	cmp	r3, #1
 8002120:	d106      	bne.n	8002130 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	3b01      	subs	r3, #1
 8002128:	045b      	lsls	r3, r3, #17
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	4b5c      	ldr	r3, [pc, #368]	; (80022c4 <HAL_ADC_Init+0x2f4>)
 8002154:	4013      	ands	r3, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	69b9      	ldr	r1, [r7, #24]
 800215c:	430b      	orrs	r3, r1
 800215e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff02 	bl	8001f84 <LL_ADC_REG_IsConversionOngoing>
 8002180:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff0f 	bl	8001faa <LL_ADC_INJ_IsConversionOngoing>
 800218c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d16d      	bne.n	8002270 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d16a      	bne.n	8002270 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800219e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021a6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021b6:	f023 0302 	bic.w	r3, r3, #2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	69b9      	ldr	r1, [r7, #24]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d017      	beq.n	80021fc <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80021e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6911      	ldr	r1, [r2, #16]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80021fa:	e013      	b.n	8002224 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800220a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800221c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002220:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800222a:	2b01      	cmp	r3, #1
 800222c:	d118      	bne.n	8002260 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800224a:	4311      	orrs	r1, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002250:	430a      	orrs	r2, r1
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	611a      	str	r2, [r3, #16]
 800225e:	e007      	b.n	8002270 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d10c      	bne.n	8002292 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f023 010f 	bic.w	r1, r3, #15
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	1e5a      	subs	r2, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
 8002290:	e007      	b.n	80022a2 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 020f 	bic.w	r2, r2, #15
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	f023 0303 	bic.w	r3, r3, #3
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80022b2:	e011      	b.n	80022d8 <HAL_ADC_Init+0x308>
 80022b4:	200001a0 	.word	0x200001a0
 80022b8:	053e2d63 	.word	0x053e2d63
 80022bc:	50000100 	.word	0x50000100
 80022c0:	50000300 	.word	0x50000300
 80022c4:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	f043 0210 	orr.w	r2, r3, #16
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3724      	adds	r7, #36	; 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd90      	pop	{r4, r7, pc}
 80022e2:	bf00      	nop

080022e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022f0:	4851      	ldr	r0, [pc, #324]	; (8002438 <HAL_ADC_Start_DMA+0x154>)
 80022f2:	f7ff fd89 	bl	8001e08 <LL_ADC_GetMultimode>
 80022f6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fe41 	bl	8001f84 <LL_ADC_REG_IsConversionOngoing>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 808f 	bne.w	8002428 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_ADC_Start_DMA+0x34>
 8002314:	2302      	movs	r3, #2
 8002316:	e08a      	b.n	800242e <HAL_ADC_Start_DMA+0x14a>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	2b05      	cmp	r3, #5
 800232a:	d002      	beq.n	8002332 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b09      	cmp	r3, #9
 8002330:	d173      	bne.n	800241a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fc8e 	bl	8002c54 <ADC_Enable>
 8002338:	4603      	mov	r3, r0
 800233a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d166      	bne.n	8002410 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a38      	ldr	r2, [pc, #224]	; (800243c <HAL_ADC_Start_DMA+0x158>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d002      	beq.n	8002366 <HAL_ADC_Start_DMA+0x82>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	e001      	b.n	800236a <HAL_ADC_Start_DMA+0x86>
 8002366:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	4293      	cmp	r3, r2
 8002370:	d002      	beq.n	8002378 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002394:	f023 0206 	bic.w	r2, r3, #6
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	661a      	str	r2, [r3, #96]	; 0x60
 800239c:	e002      	b.n	80023a4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	4a25      	ldr	r2, [pc, #148]	; (8002440 <HAL_ADC_Start_DMA+0x15c>)
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	4a24      	ldr	r2, [pc, #144]	; (8002444 <HAL_ADC_Start_DMA+0x160>)
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b8:	4a23      	ldr	r2, [pc, #140]	; (8002448 <HAL_ADC_Start_DMA+0x164>)
 80023ba:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	221c      	movs	r2, #28
 80023c2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0210 	orr.w	r2, r2, #16
 80023da:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3340      	adds	r3, #64	; 0x40
 80023f6:	4619      	mov	r1, r3
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f001 f860 	bl	80034c0 <HAL_DMA_Start_IT>
 8002400:	4603      	mov	r3, r0
 8002402:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fda7 	bl	8001f5c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800240e:	e00d      	b.n	800242c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002418:	e008      	b.n	800242c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002426:	e001      	b.n	800242c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002428:	2302      	movs	r3, #2
 800242a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800242c:	7dfb      	ldrb	r3, [r7, #23]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	50000300 	.word	0x50000300
 800243c:	50000100 	.word	0x50000100
 8002440:	08002dd7 	.word	0x08002dd7
 8002444:	08002eaf 	.word	0x08002eaf
 8002448:	08002ecb 	.word	0x08002ecb

0800244c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b0b6      	sub	sp, #216	; 0xd8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x22>
 8002492:	2302      	movs	r3, #2
 8002494:	e3c8      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x7b4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fd6e 	bl	8001f84 <LL_ADC_REG_IsConversionOngoing>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 83ad 	bne.w	8002c0a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	f7ff fc24 	bl	8001d0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd5c 	bl	8001f84 <LL_ADC_REG_IsConversionOngoing>
 80024cc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fd68 	bl	8001faa <LL_ADC_INJ_IsConversionOngoing>
 80024da:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 81d9 	bne.w	800289a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f040 81d4 	bne.w	800289a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024fa:	d10f      	bne.n	800251c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2200      	movs	r2, #0
 8002506:	4619      	mov	r1, r3
 8002508:	f7ff fc2b 	bl	8001d62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fbd2 	bl	8001cbe <LL_ADC_SetSamplingTimeCommonConfig>
 800251a:	e00e      	b.n	800253a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	461a      	mov	r2, r3
 800252a:	f7ff fc1a 	bl	8001d62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fbc2 	bl	8001cbe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	08db      	lsrs	r3, r3, #3
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d022      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6919      	ldr	r1, [r3, #16]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800256c:	f7ff fb1c 	bl	8001ba8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6919      	ldr	r1, [r3, #16]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	461a      	mov	r2, r3
 800257e:	f7ff fb68 	bl	8001c52 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6919      	ldr	r1, [r3, #16]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	7f1b      	ldrb	r3, [r3, #28]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d102      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x124>
 8002592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002596:	e000      	b.n	800259a <HAL_ADC_ConfigChannel+0x126>
 8002598:	2300      	movs	r3, #0
 800259a:	461a      	mov	r2, r3
 800259c:	f7ff fb74 	bl	8001c88 <LL_ADC_SetOffsetSaturation>
 80025a0:	e17b      	b.n	800289a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fb21 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x15a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fb16 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	0e9b      	lsrs	r3, r3, #26
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	e01e      	b.n	800260c <HAL_ADC_ConfigChannel+0x198>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fb0b 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80025fc:	2320      	movs	r3, #32
 80025fe:	e004      	b.n	800260a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1b0>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	e018      	b.n	8002656 <HAL_ADC_ConfigChannel+0x1e2>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800263c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002640:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002648:	2320      	movs	r3, #32
 800264a:	e004      	b.n	8002656 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800264c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002656:	429a      	cmp	r2, r3
 8002658:	d106      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fada 	bl	8001c1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fabe 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10a      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x220>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2101      	movs	r1, #1
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fab3 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 800268a:	4603      	mov	r3, r0
 800268c:	0e9b      	lsrs	r3, r3, #26
 800268e:	f003 021f 	and.w	r2, r3, #31
 8002692:	e01e      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x25e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff faa8 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80026b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80026ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80026c2:	2320      	movs	r3, #32
 80026c4:	e004      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80026c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d105      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x276>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	0e9b      	lsrs	r3, r3, #26
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	e018      	b.n	800271c <HAL_ADC_ConfigChannel+0x2a8>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002706:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e004      	b.n	800271c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002712:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800271c:	429a      	cmp	r2, r3
 800271e:	d106      	bne.n	800272e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2200      	movs	r2, #0
 8002726:	2101      	movs	r1, #1
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fa77 	bl	8001c1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2102      	movs	r1, #2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fa5b 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <HAL_ADC_ConfigChannel+0x2e6>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2102      	movs	r1, #2
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fa50 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	0e9b      	lsrs	r3, r3, #26
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	e01e      	b.n	8002798 <HAL_ADC_ConfigChannel+0x324>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2102      	movs	r1, #2
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fa45 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002778:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800277c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002780:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e004      	b.n	8002796 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800278c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002790:	fab3 f383 	clz	r3, r3
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x33c>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0e9b      	lsrs	r3, r3, #26
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	e016      	b.n	80027de <HAL_ADC_ConfigChannel+0x36a>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80027d0:	2320      	movs	r3, #32
 80027d2:	e004      	b.n	80027de <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80027d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027de:	429a      	cmp	r2, r3
 80027e0:	d106      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2102      	movs	r1, #2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fa16 	bl	8001c1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2103      	movs	r1, #3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff f9fa 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10a      	bne.n	800281c <HAL_ADC_ConfigChannel+0x3a8>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2103      	movs	r1, #3
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff f9ef 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	f003 021f 	and.w	r2, r3, #31
 800281a:	e017      	b.n	800284c <HAL_ADC_ConfigChannel+0x3d8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2103      	movs	r1, #3
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff f9e4 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 8002828:	4603      	mov	r3, r0
 800282a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002836:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800283e:	2320      	movs	r3, #32
 8002840:	e003      	b.n	800284a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002842:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x3f0>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0e9b      	lsrs	r3, r3, #26
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	e011      	b.n	8002888 <HAL_ADC_ConfigChannel+0x414>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002874:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e003      	b.n	8002888 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002888:	429a      	cmp	r2, r3
 800288a:	d106      	bne.n	800289a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	2103      	movs	r1, #3
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff f9c1 	bl	8001c1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fb36 	bl	8001f10 <LL_ADC_IsEnabled>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 8140 	bne.w	8002b2c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6819      	ldr	r1, [r3, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	461a      	mov	r2, r3
 80028ba:	f7ff fa7d 	bl	8001db8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	4a8f      	ldr	r2, [pc, #572]	; (8002b00 <HAL_ADC_ConfigChannel+0x68c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	f040 8131 	bne.w	8002b2c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10b      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x47e>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	0e9b      	lsrs	r3, r3, #26
 80028e0:	3301      	adds	r3, #1
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	2b09      	cmp	r3, #9
 80028e8:	bf94      	ite	ls
 80028ea:	2301      	movls	r3, #1
 80028ec:	2300      	movhi	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	e019      	b.n	8002926 <HAL_ADC_ConfigChannel+0x4b2>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002902:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800290a:	2320      	movs	r3, #32
 800290c:	e003      	b.n	8002916 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800290e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3301      	adds	r3, #1
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	2b09      	cmp	r3, #9
 800291e:	bf94      	ite	ls
 8002920:	2301      	movls	r3, #1
 8002922:	2300      	movhi	r3, #0
 8002924:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002926:	2b00      	cmp	r3, #0
 8002928:	d079      	beq.n	8002a1e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002932:	2b00      	cmp	r3, #0
 8002934:	d107      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x4d2>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0e9b      	lsrs	r3, r3, #26
 800293c:	3301      	adds	r3, #1
 800293e:	069b      	lsls	r3, r3, #26
 8002940:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002944:	e015      	b.n	8002972 <HAL_ADC_ConfigChannel+0x4fe>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002956:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800295e:	2320      	movs	r3, #32
 8002960:	e003      	b.n	800296a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	3301      	adds	r3, #1
 800296c:	069b      	lsls	r3, r3, #26
 800296e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x51e>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0e9b      	lsrs	r3, r3, #26
 8002984:	3301      	adds	r3, #1
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	e017      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x54e>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80029a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80029a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e003      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80029ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	2101      	movs	r1, #1
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	ea42 0103 	orr.w	r1, r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x574>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	3301      	adds	r3, #1
 80029da:	f003 021f 	and.w	r2, r3, #31
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	051b      	lsls	r3, r3, #20
 80029e6:	e018      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x5a6>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e003      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f003 021f 	and.w	r2, r3, #31
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	e081      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x5c6>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	0e9b      	lsrs	r3, r3, #26
 8002a30:	3301      	adds	r3, #1
 8002a32:	069b      	lsls	r3, r3, #26
 8002a34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a38:	e015      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x5f2>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002a52:	2320      	movs	r3, #32
 8002a54:	e003      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	069b      	lsls	r3, r3, #26
 8002a62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x612>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0e9b      	lsrs	r3, r3, #26
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	e017      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x642>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	61fb      	str	r3, [r7, #28]
  return result;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	e003      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	ea42 0103 	orr.w	r1, r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10d      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x66e>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	0e9b      	lsrs	r3, r3, #26
 8002acc:	3301      	adds	r3, #1
 8002ace:	f003 021f 	and.w	r2, r3, #31
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3b1e      	subs	r3, #30
 8002ada:	051b      	lsls	r3, r3, #20
 8002adc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	e01e      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x6ac>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	613b      	str	r3, [r7, #16]
  return result;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d104      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002afa:	2320      	movs	r3, #32
 8002afc:	e006      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x698>
 8002afe:	bf00      	nop
 8002b00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f003 021f 	and.w	r2, r3, #31
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	3b1e      	subs	r3, #30
 8002b1a:	051b      	lsls	r3, r3, #20
 8002b1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b20:	430b      	orrs	r3, r1
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	6892      	ldr	r2, [r2, #8]
 8002b26:	4619      	mov	r1, r3
 8002b28:	f7ff f91b 	bl	8001d62 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b3f      	ldr	r3, [pc, #252]	; (8002c30 <HAL_ADC_ConfigChannel+0x7bc>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d071      	beq.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b38:	483e      	ldr	r0, [pc, #248]	; (8002c34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b3a:	f7ff f827 	bl	8001b8c <LL_ADC_GetCommonPathInternalCh>
 8002b3e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a3c      	ldr	r2, [pc, #240]	; (8002c38 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <HAL_ADC_ConfigChannel+0x6e2>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a3a      	ldr	r2, [pc, #232]	; (8002c3c <HAL_ADC_ConfigChannel+0x7c8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d127      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d121      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b6a:	d157      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b74:	4619      	mov	r1, r3
 8002b76:	482f      	ldr	r0, [pc, #188]	; (8002c34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b78:	f7fe fff5 	bl	8001b66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b7c:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	4a30      	ldr	r2, [pc, #192]	; (8002c44 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b96:	e002      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f9      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ba4:	e03a      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <HAL_ADC_ConfigChannel+0x7d4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d113      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x764>
 8002bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10d      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <HAL_ADC_ConfigChannel+0x7d8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d02a      	beq.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4818      	ldr	r0, [pc, #96]	; (8002c34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bd2:	f7fe ffc8 	bl	8001b66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd6:	e021      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d11c      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d116      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <HAL_ADC_ConfigChannel+0x7d8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d011      	beq.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c00:	4619      	mov	r1, r3
 8002c02:	480c      	ldr	r0, [pc, #48]	; (8002c34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c04:	f7fe ffaf 	bl	8001b66 <LL_ADC_SetCommonPathInternalCh>
 8002c08:	e008      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	f043 0220 	orr.w	r2, r3, #32
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c24:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	37d8      	adds	r7, #216	; 0xd8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	80080000 	.word	0x80080000
 8002c34:	50000300 	.word	0x50000300
 8002c38:	c3210000 	.word	0xc3210000
 8002c3c:	90c00010 	.word	0x90c00010
 8002c40:	200001a0 	.word	0x200001a0
 8002c44:	053e2d63 	.word	0x053e2d63
 8002c48:	c7520000 	.word	0xc7520000
 8002c4c:	50000100 	.word	0x50000100
 8002c50:	cb840000 	.word	0xcb840000

08002c54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff f955 	bl	8001f10 <LL_ADC_IsEnabled>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d14d      	bne.n	8002d08 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <ADC_Enable+0xc0>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	f043 0210 	orr.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e039      	b.n	8002d0a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff f910 	bl	8001ec0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ca0:	f7fe ff20 	bl	8001ae4 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ca6:	e028      	b.n	8002cfa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff f92f 	bl	8001f10 <LL_ADC_IsEnabled>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f8ff 	bl	8001ec0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cc2:	f7fe ff0f 	bl	8001ae4 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d914      	bls.n	8002cfa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d00d      	beq.n	8002cfa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	f043 0210 	orr.w	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e007      	b.n	8002d0a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d1cf      	bne.n	8002ca8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	8000003f 	.word	0x8000003f

08002d18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff f906 	bl	8001f36 <LL_ADC_IsDisableOngoing>
 8002d2a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff f8ed 	bl	8001f10 <LL_ADC_IsEnabled>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d047      	beq.n	8002dcc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d144      	bne.n	8002dcc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030d 	and.w	r3, r3, #13
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d10c      	bne.n	8002d6a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f8c7 	bl	8001ee8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2203      	movs	r2, #3
 8002d60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d62:	f7fe febf 	bl	8001ae4 <HAL_GetTick>
 8002d66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d68:	e029      	b.n	8002dbe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	f043 0210 	orr.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e023      	b.n	8002dce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d86:	f7fe fead 	bl	8001ae4 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d914      	bls.n	8002dbe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	f043 0210 	orr.w	r2, r3, #16
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e007      	b.n	8002dce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1dc      	bne.n	8002d86 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d14b      	bne.n	8002e88 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d021      	beq.n	8002e4e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe ff68 	bl	8001ce4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d032      	beq.n	8002e80 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d12b      	bne.n	8002e80 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d11f      	bne.n	8002e80 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e4c:	e018      	b.n	8002e80 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d111      	bne.n	8002e80 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7fe faaf 	bl	80013e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e86:	e00e      	b.n	8002ea6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f7ff fae3 	bl	8002460 <HAL_ADC_ErrorCallback>
}
 8002e9a:	e004      	b.n	8002ea6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff fac5 	bl	800244c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee8:	f043 0204 	orr.w	r2, r3, #4
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7ff fab5 	bl	8002460 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <LL_ADC_IsEnabled>:
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <LL_ADC_IsEnabled+0x18>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <LL_ADC_IsEnabled+0x1a>
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <LL_ADC_StartCalibration>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002f36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	609a      	str	r2, [r3, #8]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_ADC_IsCalibrationOnGoing>:
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f6a:	d101      	bne.n	8002f70 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_ADC_REG_IsConversionOngoing>:
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d101      	bne.n	8002f96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADCEx_Calibration_Start+0x1c>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e04d      	b.n	800305c <HAL_ADCEx_Calibration_Start+0xb8>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff fea5 	bl	8002d18 <ADC_Disable>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d136      	bne.n	8003046 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fe0:	f023 0302 	bic.w	r3, r3, #2
 8002fe4:	f043 0202 	orr.w	r2, r3, #2
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6839      	ldr	r1, [r7, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ff96 	bl	8002f24 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ff8:	e014      	b.n	8003024 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4a18      	ldr	r2, [pc, #96]	; (8003064 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d90d      	bls.n	8003024 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	f023 0312 	bic.w	r3, r3, #18
 8003010:	f043 0210 	orr.w	r2, r3, #16
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e01b      	b.n	800305c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff94 	bl	8002f56 <LL_ADC_IsCalibrationOnGoing>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1e2      	bne.n	8002ffa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	f023 0303 	bic.w	r3, r3, #3
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	65da      	str	r2, [r3, #92]	; 0x5c
 8003044:	e005      	b.n	8003052 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304a:	f043 0210 	orr.w	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	0004de01 	.word	0x0004de01

08003068 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b0a1      	sub	sp, #132	; 0x84
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003082:	2302      	movs	r3, #2
 8003084:	e08b      	b.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800308e:	2300      	movs	r3, #0
 8003090:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003092:	2300      	movs	r3, #0
 8003094:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800309e:	d102      	bne.n	80030a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030a0:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	e001      	b.n	80030aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10b      	bne.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e06a      	b.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff57 	bl	8002f7e <LL_ADC_REG_IsConversionOngoing>
 80030d0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff51 	bl	8002f7e <LL_ADC_REG_IsConversionOngoing>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d14c      	bne.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80030e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d149      	bne.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030e8:	4b30      	ldr	r3, [pc, #192]	; (80031ac <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80030ea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d028      	beq.n	8003146 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003106:	035b      	lsls	r3, r3, #13
 8003108:	430b      	orrs	r3, r1
 800310a:	431a      	orrs	r2, r3
 800310c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800310e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003110:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003114:	f7ff fef3 	bl	8002efe <LL_ADC_IsEnabled>
 8003118:	4604      	mov	r4, r0
 800311a:	4823      	ldr	r0, [pc, #140]	; (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800311c:	f7ff feef 	bl	8002efe <LL_ADC_IsEnabled>
 8003120:	4603      	mov	r3, r0
 8003122:	4323      	orrs	r3, r4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d133      	bne.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003130:	f023 030f 	bic.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	6811      	ldr	r1, [r2, #0]
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	6892      	ldr	r2, [r2, #8]
 800313c:	430a      	orrs	r2, r1
 800313e:	431a      	orrs	r2, r3
 8003140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003142:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003144:	e024      	b.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800314e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003150:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003152:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003156:	f7ff fed2 	bl	8002efe <LL_ADC_IsEnabled>
 800315a:	4604      	mov	r4, r0
 800315c:	4812      	ldr	r0, [pc, #72]	; (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800315e:	f7ff fece 	bl	8002efe <LL_ADC_IsEnabled>
 8003162:	4603      	mov	r3, r0
 8003164:	4323      	orrs	r3, r4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d112      	bne.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800316a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003172:	f023 030f 	bic.w	r3, r3, #15
 8003176:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003178:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800317a:	e009      	b.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800318e:	e000      	b.n	8003192 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003190:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800319a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3784      	adds	r7, #132	; 0x84
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd90      	pop	{r4, r7, pc}
 80031a6:	bf00      	nop
 80031a8:	50000100 	.word	0x50000100
 80031ac:	50000300 	.word	0x50000300

080031b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031cc:	4013      	ands	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e2:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	60d3      	str	r3, [r2, #12]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <__NVIC_GetPriorityGrouping+0x18>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 0307 	and.w	r3, r3, #7
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	2b00      	cmp	r3, #0
 8003224:	db0b      	blt.n	800323e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	f003 021f 	and.w	r2, r3, #31
 800322c:	4907      	ldr	r1, [pc, #28]	; (800324c <__NVIC_EnableIRQ+0x38>)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	2001      	movs	r0, #1
 8003236:	fa00 f202 	lsl.w	r2, r0, r2
 800323a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	e000e100 	.word	0xe000e100

08003250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	db0a      	blt.n	800327a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	490c      	ldr	r1, [pc, #48]	; (800329c <__NVIC_SetPriority+0x4c>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	440b      	add	r3, r1
 8003274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003278:	e00a      	b.n	8003290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4908      	ldr	r1, [pc, #32]	; (80032a0 <__NVIC_SetPriority+0x50>)
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3b04      	subs	r3, #4
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	440b      	add	r3, r1
 800328e:	761a      	strb	r2, [r3, #24]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000e100 	.word	0xe000e100
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	; 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f1c3 0307 	rsb	r3, r3, #7
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf28      	it	cs
 80032c2:	2304      	movcs	r3, #4
 80032c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d902      	bls.n	80032d4 <NVIC_EncodePriority+0x30>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3b03      	subs	r3, #3
 80032d2:	e000      	b.n	80032d6 <NVIC_EncodePriority+0x32>
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	401a      	ands	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ec:	f04f 31ff 	mov.w	r1, #4294967295
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	43d9      	mvns	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	4313      	orrs	r3, r2
         );
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3724      	adds	r7, #36	; 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ff4c 	bl	80031b0 <__NVIC_SetPriorityGrouping>
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800332e:	f7ff ff63 	bl	80031f8 <__NVIC_GetPriorityGrouping>
 8003332:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	6978      	ldr	r0, [r7, #20]
 800333a:	f7ff ffb3 	bl	80032a4 <NVIC_EncodePriority>
 800333e:	4602      	mov	r2, r0
 8003340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff ff82 	bl	8003250 <__NVIC_SetPriority>
}
 800334c:	bf00      	nop
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ff56 	bl	8003214 <__NVIC_EnableIRQ>
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e08d      	b.n	800349e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <HAL_DMA_Init+0x138>)
 800338a:	429a      	cmp	r2, r3
 800338c:	d80f      	bhi.n	80033ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	4b45      	ldr	r3, [pc, #276]	; (80034ac <HAL_DMA_Init+0x13c>)
 8003396:	4413      	add	r3, r2
 8003398:	4a45      	ldr	r2, [pc, #276]	; (80034b0 <HAL_DMA_Init+0x140>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	091b      	lsrs	r3, r3, #4
 80033a0:	009a      	lsls	r2, r3, #2
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a42      	ldr	r2, [pc, #264]	; (80034b4 <HAL_DMA_Init+0x144>)
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40
 80033ac:	e00e      	b.n	80033cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	4b40      	ldr	r3, [pc, #256]	; (80034b8 <HAL_DMA_Init+0x148>)
 80033b6:	4413      	add	r3, r2
 80033b8:	4a3d      	ldr	r2, [pc, #244]	; (80034b0 <HAL_DMA_Init+0x140>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	009a      	lsls	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a3c      	ldr	r2, [pc, #240]	; (80034bc <HAL_DMA_Init+0x14c>)
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa76 	bl	8003910 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800342c:	d102      	bne.n	8003434 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003448:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d010      	beq.n	8003474 <HAL_DMA_Init+0x104>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b04      	cmp	r3, #4
 8003458:	d80c      	bhi.n	8003474 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fa96 	bl	800398c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	e008      	b.n	8003486 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40020407 	.word	0x40020407
 80034ac:	bffdfff8 	.word	0xbffdfff8
 80034b0:	cccccccd 	.word	0xcccccccd
 80034b4:	40020000 	.word	0x40020000
 80034b8:	bffdfbf8 	.word	0xbffdfbf8
 80034bc:	40020400 	.word	0x40020400

080034c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_DMA_Start_IT+0x20>
 80034dc:	2302      	movs	r3, #2
 80034de:	e066      	b.n	80035ae <HAL_DMA_Start_IT+0xee>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d155      	bne.n	80035a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f9bb 	bl	8003894 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 020e 	orr.w	r2, r2, #14
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	e00f      	b.n	8003558 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0204 	bic.w	r2, r2, #4
 8003546:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 020a 	orr.w	r2, r2, #10
 8003556:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003574:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800358c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e005      	b.n	80035ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
 80035aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b085      	sub	sp, #20
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d005      	beq.n	80035da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2204      	movs	r2, #4
 80035d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e037      	b.n	800364a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 020e 	bic.w	r2, r2, #14
 80035e8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f003 021f 	and.w	r2, r3, #31
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2101      	movs	r1, #1
 8003618:	fa01 f202 	lsl.w	r2, r1, r2
 800361c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003626:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00c      	beq.n	800364a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800363e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003648:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d00d      	beq.n	800369c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2204      	movs	r2, #4
 8003684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	e047      	b.n	800372c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 020e 	bic.w	r2, r2, #14
 80036aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	f003 021f 	and.w	r2, r3, #31
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f202 	lsl.w	r2, r1, r2
 80036de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00c      	beq.n	800370c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003700:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800370a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
    }
  }
  return status;
 800372c:	7bfb      	ldrb	r3, [r7, #15]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	2204      	movs	r2, #4
 8003758:	409a      	lsls	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d026      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x7a>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d021      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b00      	cmp	r3, #0
 8003778:	d107      	bne.n	800378a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0204 	bic.w	r2, r2, #4
 8003788:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f003 021f 	and.w	r2, r3, #31
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2104      	movs	r1, #4
 8003798:	fa01 f202 	lsl.w	r2, r1, r2
 800379c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d071      	beq.n	800388a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037ae:	e06c      	b.n	800388a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	2202      	movs	r2, #2
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02e      	beq.n	8003822 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d029      	beq.n	8003822 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10b      	bne.n	80037f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 020a 	bic.w	r2, r2, #10
 80037ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f003 021f 	and.w	r2, r3, #31
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	2102      	movs	r1, #2
 8003802:	fa01 f202 	lsl.w	r2, r1, r2
 8003806:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d038      	beq.n	800388a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003820:	e033      	b.n	800388a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	2208      	movs	r2, #8
 800382c:	409a      	lsls	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4013      	ands	r3, r2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d02a      	beq.n	800388c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d025      	beq.n	800388c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 020e 	bic.w	r2, r2, #14
 800384e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	f003 021f 	and.w	r2, r3, #31
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387e:	2b00      	cmp	r3, #0
 8003880:	d004      	beq.n	800388c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800388a:	bf00      	nop
 800388c:	bf00      	nop
}
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d004      	beq.n	80038be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f003 021f 	and.w	r2, r3, #31
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2101      	movs	r1, #1
 80038cc:	fa01 f202 	lsl.w	r2, r1, r2
 80038d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d108      	bne.n	80038f4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038f2:	e007      	b.n	8003904 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	60da      	str	r2, [r3, #12]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	4b16      	ldr	r3, [pc, #88]	; (8003978 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003920:	429a      	cmp	r2, r3
 8003922:	d802      	bhi.n	800392a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003924:	4b15      	ldr	r3, [pc, #84]	; (800397c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	e001      	b.n	800392e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800392c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	3b08      	subs	r3, #8
 800393a:	4a12      	ldr	r2, [pc, #72]	; (8003984 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	009a      	lsls	r2, r3, #2
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	461a      	mov	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800395a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	2201      	movs	r2, #1
 8003964:	409a      	lsls	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	651a      	str	r2, [r3, #80]	; 0x50
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40020407 	.word	0x40020407
 800397c:	40020800 	.word	0x40020800
 8003980:	40020820 	.word	0x40020820
 8003984:	cccccccd 	.word	0xcccccccd
 8003988:	40020880 	.word	0x40020880

0800398c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	461a      	mov	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2201      	movs	r2, #1
 80039ba:	409a      	lsls	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	1000823f 	.word	0x1000823f
 80039d0:	40020940 	.word	0x40020940

080039d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039e2:	e15a      	b.n	8003c9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2101      	movs	r1, #1
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	4013      	ands	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 814c 	beq.w	8003c94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d005      	beq.n	8003a14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d130      	bne.n	8003a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	2203      	movs	r2, #3
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4013      	ands	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	f003 0201 	and.w	r2, r3, #1
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d017      	beq.n	8003ab2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43db      	mvns	r3, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d123      	bne.n	8003b06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	08da      	lsrs	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3208      	adds	r2, #8
 8003ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	220f      	movs	r2, #15
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	08da      	lsrs	r2, r3, #3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3208      	adds	r2, #8
 8003b00:	6939      	ldr	r1, [r7, #16]
 8003b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	2203      	movs	r2, #3
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 0203 	and.w	r2, r3, #3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 80a6 	beq.w	8003c94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b48:	4b5b      	ldr	r3, [pc, #364]	; (8003cb8 <HAL_GPIO_Init+0x2e4>)
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4c:	4a5a      	ldr	r2, [pc, #360]	; (8003cb8 <HAL_GPIO_Init+0x2e4>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6613      	str	r3, [r2, #96]	; 0x60
 8003b54:	4b58      	ldr	r3, [pc, #352]	; (8003cb8 <HAL_GPIO_Init+0x2e4>)
 8003b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b60:	4a56      	ldr	r2, [pc, #344]	; (8003cbc <HAL_GPIO_Init+0x2e8>)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	089b      	lsrs	r3, r3, #2
 8003b66:	3302      	adds	r3, #2
 8003b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	220f      	movs	r2, #15
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4013      	ands	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b8a:	d01f      	beq.n	8003bcc <HAL_GPIO_Init+0x1f8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a4c      	ldr	r2, [pc, #304]	; (8003cc0 <HAL_GPIO_Init+0x2ec>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d019      	beq.n	8003bc8 <HAL_GPIO_Init+0x1f4>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a4b      	ldr	r2, [pc, #300]	; (8003cc4 <HAL_GPIO_Init+0x2f0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d013      	beq.n	8003bc4 <HAL_GPIO_Init+0x1f0>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a4a      	ldr	r2, [pc, #296]	; (8003cc8 <HAL_GPIO_Init+0x2f4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_GPIO_Init+0x1ec>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a49      	ldr	r2, [pc, #292]	; (8003ccc <HAL_GPIO_Init+0x2f8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d007      	beq.n	8003bbc <HAL_GPIO_Init+0x1e8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a48      	ldr	r2, [pc, #288]	; (8003cd0 <HAL_GPIO_Init+0x2fc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <HAL_GPIO_Init+0x1e4>
 8003bb4:	2305      	movs	r3, #5
 8003bb6:	e00a      	b.n	8003bce <HAL_GPIO_Init+0x1fa>
 8003bb8:	2306      	movs	r3, #6
 8003bba:	e008      	b.n	8003bce <HAL_GPIO_Init+0x1fa>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	e006      	b.n	8003bce <HAL_GPIO_Init+0x1fa>
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e004      	b.n	8003bce <HAL_GPIO_Init+0x1fa>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e002      	b.n	8003bce <HAL_GPIO_Init+0x1fa>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <HAL_GPIO_Init+0x1fa>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	f002 0203 	and.w	r2, r2, #3
 8003bd4:	0092      	lsls	r2, r2, #2
 8003bd6:	4093      	lsls	r3, r2
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bde:	4937      	ldr	r1, [pc, #220]	; (8003cbc <HAL_GPIO_Init+0x2e8>)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	3302      	adds	r3, #2
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bec:	4b39      	ldr	r3, [pc, #228]	; (8003cd4 <HAL_GPIO_Init+0x300>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c10:	4a30      	ldr	r2, [pc, #192]	; (8003cd4 <HAL_GPIO_Init+0x300>)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c16:	4b2f      	ldr	r3, [pc, #188]	; (8003cd4 <HAL_GPIO_Init+0x300>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c3a:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <HAL_GPIO_Init+0x300>)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c40:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_GPIO_Init+0x300>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c64:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <HAL_GPIO_Init+0x300>)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c6a:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <HAL_GPIO_Init+0x300>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c8e:	4a11      	ldr	r2, [pc, #68]	; (8003cd4 <HAL_GPIO_Init+0x300>)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	3301      	adds	r3, #1
 8003c98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f47f ae9d 	bne.w	80039e4 <HAL_GPIO_Init+0x10>
  }
}
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	48000400 	.word	0x48000400
 8003cc4:	48000800 	.word	0x48000800
 8003cc8:	48000c00 	.word	0x48000c00
 8003ccc:	48001000 	.word	0x48001000
 8003cd0:	48001400 	.word	0x48001400
 8003cd4:	40010400 	.word	0x40010400

08003cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ce8:	787b      	ldrb	r3, [r7, #1]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cee:	887a      	ldrh	r2, [r7, #2]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cf4:	e002      	b.n	8003cfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cf6:	887a      	ldrh	r2, [r7, #2]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d141      	bne.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d16:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d22:	d131      	bne.n	8003d88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d24:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2a:	4a46      	ldr	r2, [pc, #280]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d34:	4b43      	ldr	r3, [pc, #268]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d3c:	4a41      	ldr	r2, [pc, #260]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d44:	4b40      	ldr	r3, [pc, #256]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2232      	movs	r2, #50	; 0x32
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	4a3f      	ldr	r2, [pc, #252]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	0c9b      	lsrs	r3, r3, #18
 8003d56:	3301      	adds	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d5a:	e002      	b.n	8003d62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d62:	4b38      	ldr	r3, [pc, #224]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6e:	d102      	bne.n	8003d76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f2      	bne.n	8003d5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d76:	4b33      	ldr	r3, [pc, #204]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d82:	d158      	bne.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e057      	b.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d88:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d8e:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d98:	e04d      	b.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da0:	d141      	bne.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003da2:	4b28      	ldr	r3, [pc, #160]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dae:	d131      	bne.n	8003e14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db0:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db6:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dc0:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dc8:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2232      	movs	r2, #50	; 0x32
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	4a1c      	ldr	r2, [pc, #112]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	0c9b      	lsrs	r3, r3, #18
 8003de2:	3301      	adds	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003de6:	e002      	b.n	8003dee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfa:	d102      	bne.n	8003e02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f2      	bne.n	8003de8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0e:	d112      	bne.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e011      	b.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e24:	e007      	b.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e26:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e2e:	4a05      	ldr	r2, [pc, #20]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	40007000 	.word	0x40007000
 8003e48:	200001a0 	.word	0x200001a0
 8003e4c:	431bde83 	.word	0x431bde83

08003e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e306      	b.n	8004470 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d075      	beq.n	8003f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e6e:	4b97      	ldr	r3, [pc, #604]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e78:	4b94      	ldr	r3, [pc, #592]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	2b0c      	cmp	r3, #12
 8003e86:	d102      	bne.n	8003e8e <HAL_RCC_OscConfig+0x3e>
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d002      	beq.n	8003e94 <HAL_RCC_OscConfig+0x44>
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d10b      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	4b8d      	ldr	r3, [pc, #564]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05b      	beq.n	8003f58 <HAL_RCC_OscConfig+0x108>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d157      	bne.n	8003f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e2e1      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x74>
 8003eb6:	4b85      	ldr	r3, [pc, #532]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a84      	ldr	r2, [pc, #528]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e01d      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x98>
 8003ece:	4b7f      	ldr	r3, [pc, #508]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a7e      	ldr	r2, [pc, #504]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b7c      	ldr	r3, [pc, #496]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a7b      	ldr	r2, [pc, #492]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ee8:	4b78      	ldr	r3, [pc, #480]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a77      	ldr	r2, [pc, #476]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b75      	ldr	r3, [pc, #468]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a74      	ldr	r2, [pc, #464]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd fdec 	bl	8001ae4 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fd fde8 	bl	8001ae4 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e2a6      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f22:	4b6a      	ldr	r3, [pc, #424]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0xc0>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fd fdd8 	bl	8001ae4 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fd fdd4 	bl	8001ae4 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e292      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f4a:	4b60      	ldr	r3, [pc, #384]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0xe8>
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d075      	beq.n	8004052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f66:	4b59      	ldr	r3, [pc, #356]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f70:	4b56      	ldr	r3, [pc, #344]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b0c      	cmp	r3, #12
 8003f7e:	d102      	bne.n	8003f86 <HAL_RCC_OscConfig+0x136>
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d002      	beq.n	8003f8c <HAL_RCC_OscConfig+0x13c>
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d11f      	bne.n	8003fcc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f8c:	4b4f      	ldr	r3, [pc, #316]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x154>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e265      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b49      	ldr	r3, [pc, #292]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	4946      	ldr	r1, [pc, #280]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fb8:	4b45      	ldr	r3, [pc, #276]	; (80040d0 <HAL_RCC_OscConfig+0x280>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fd fbab 	bl	8001718 <HAL_InitTick>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d043      	beq.n	8004050 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e251      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d023      	beq.n	800401c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd4:	4b3d      	ldr	r3, [pc, #244]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a3c      	ldr	r2, [pc, #240]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fd80 	bl	8001ae4 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe8:	f7fd fd7c 	bl	8001ae4 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e23a      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffa:	4b34      	ldr	r3, [pc, #208]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004006:	4b31      	ldr	r3, [pc, #196]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	061b      	lsls	r3, r3, #24
 8004014:	492d      	ldr	r1, [pc, #180]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8004016:	4313      	orrs	r3, r2
 8004018:	604b      	str	r3, [r1, #4]
 800401a:	e01a      	b.n	8004052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401c:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2a      	ldr	r2, [pc, #168]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8004022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd fd5c 	bl	8001ae4 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004030:	f7fd fd58 	bl	8001ae4 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e216      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004042:	4b22      	ldr	r3, [pc, #136]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x1e0>
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004050:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d041      	beq.n	80040e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01c      	beq.n	80040a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004066:	4b19      	ldr	r3, [pc, #100]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8004068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406c:	4a17      	ldr	r2, [pc, #92]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7fd fd35 	bl	8001ae4 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407e:	f7fd fd31 	bl	8001ae4 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e1ef      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004090:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8004092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0ef      	beq.n	800407e <HAL_RCC_OscConfig+0x22e>
 800409e:	e020      	b.n	80040e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a0:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 80040a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a6:	4a09      	ldr	r2, [pc, #36]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7fd fd18 	bl	8001ae4 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b6:	e00d      	b.n	80040d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b8:	f7fd fd14 	bl	8001ae4 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d906      	bls.n	80040d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e1d2      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	200001a4 	.word	0x200001a4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040d4:	4b8c      	ldr	r3, [pc, #560]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80040d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1ea      	bne.n	80040b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80a6 	beq.w	800423c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f0:	2300      	movs	r3, #0
 80040f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040f4:	4b84      	ldr	r3, [pc, #528]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_OscConfig+0x2b4>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_RCC_OscConfig+0x2b6>
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410a:	4b7f      	ldr	r3, [pc, #508]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410e:	4a7e      	ldr	r2, [pc, #504]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004114:	6593      	str	r3, [r2, #88]	; 0x58
 8004116:	4b7c      	ldr	r3, [pc, #496]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004122:	2301      	movs	r3, #1
 8004124:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004126:	4b79      	ldr	r3, [pc, #484]	; (800430c <HAL_RCC_OscConfig+0x4bc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412e:	2b00      	cmp	r3, #0
 8004130:	d118      	bne.n	8004164 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004132:	4b76      	ldr	r3, [pc, #472]	; (800430c <HAL_RCC_OscConfig+0x4bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a75      	ldr	r2, [pc, #468]	; (800430c <HAL_RCC_OscConfig+0x4bc>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413e:	f7fd fcd1 	bl	8001ae4 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004146:	f7fd fccd 	bl	8001ae4 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e18b      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004158:	4b6c      	ldr	r3, [pc, #432]	; (800430c <HAL_RCC_OscConfig+0x4bc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d108      	bne.n	800417e <HAL_RCC_OscConfig+0x32e>
 800416c:	4b66      	ldr	r3, [pc, #408]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	4a65      	ldr	r2, [pc, #404]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800417c:	e024      	b.n	80041c8 <HAL_RCC_OscConfig+0x378>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b05      	cmp	r3, #5
 8004184:	d110      	bne.n	80041a8 <HAL_RCC_OscConfig+0x358>
 8004186:	4b60      	ldr	r3, [pc, #384]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	4a5e      	ldr	r2, [pc, #376]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800418e:	f043 0304 	orr.w	r3, r3, #4
 8004192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004196:	4b5c      	ldr	r3, [pc, #368]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	4a5a      	ldr	r2, [pc, #360]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a6:	e00f      	b.n	80041c8 <HAL_RCC_OscConfig+0x378>
 80041a8:	4b57      	ldr	r3, [pc, #348]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	4a56      	ldr	r2, [pc, #344]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041b8:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	4a52      	ldr	r2, [pc, #328]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80041c0:	f023 0304 	bic.w	r3, r3, #4
 80041c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d016      	beq.n	80041fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fd fc88 	bl	8001ae4 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d8:	f7fd fc84 	bl	8001ae4 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e140      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ee:	4b46      	ldr	r3, [pc, #280]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0ed      	beq.n	80041d8 <HAL_RCC_OscConfig+0x388>
 80041fc:	e015      	b.n	800422a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fe:	f7fd fc71 	bl	8001ae4 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004204:	e00a      	b.n	800421c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7fd fc6d 	bl	8001ae4 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f241 3288 	movw	r2, #5000	; 0x1388
 8004214:	4293      	cmp	r3, r2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e129      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800421c:	4b3a      	ldr	r3, [pc, #232]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1ed      	bne.n	8004206 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800422a:	7ffb      	ldrb	r3, [r7, #31]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d105      	bne.n	800423c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004230:	4b35      	ldr	r3, [pc, #212]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	4a34      	ldr	r2, [pc, #208]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800423a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d03c      	beq.n	80042c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01c      	beq.n	800428a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004250:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004252:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004256:	4a2c      	ldr	r2, [pc, #176]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7fd fc40 	bl	8001ae4 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004268:	f7fd fc3c 	bl	8001ae4 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e0fa      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800427a:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800427c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ef      	beq.n	8004268 <HAL_RCC_OscConfig+0x418>
 8004288:	e01b      	b.n	80042c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800428a:	4b1f      	ldr	r3, [pc, #124]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800428c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004290:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fd fc23 	bl	8001ae4 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042a2:	f7fd fc1f 	bl	8001ae4 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0dd      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042b4:	4b14      	ldr	r3, [pc, #80]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80042b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1ef      	bne.n	80042a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80d1 	beq.w	800446e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042cc:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	f000 808b 	beq.w	80043f0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d15e      	bne.n	80043a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a08      	ldr	r2, [pc, #32]	; (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80042e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fd fbf9 	bl	8001ae4 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f4:	e00c      	b.n	8004310 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fd fbf5 	bl	8001ae4 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d905      	bls.n	8004310 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e0b3      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
 8004308:	40021000 	.word	0x40021000
 800430c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004310:	4b59      	ldr	r3, [pc, #356]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1ec      	bne.n	80042f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800431c:	4b56      	ldr	r3, [pc, #344]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	4b56      	ldr	r3, [pc, #344]	; (800447c <HAL_RCC_OscConfig+0x62c>)
 8004322:	4013      	ands	r3, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6a11      	ldr	r1, [r2, #32]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800432c:	3a01      	subs	r2, #1
 800432e:	0112      	lsls	r2, r2, #4
 8004330:	4311      	orrs	r1, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004336:	0212      	lsls	r2, r2, #8
 8004338:	4311      	orrs	r1, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800433e:	0852      	lsrs	r2, r2, #1
 8004340:	3a01      	subs	r2, #1
 8004342:	0552      	lsls	r2, r2, #21
 8004344:	4311      	orrs	r1, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800434a:	0852      	lsrs	r2, r2, #1
 800434c:	3a01      	subs	r2, #1
 800434e:	0652      	lsls	r2, r2, #25
 8004350:	4311      	orrs	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004356:	06d2      	lsls	r2, r2, #27
 8004358:	430a      	orrs	r2, r1
 800435a:	4947      	ldr	r1, [pc, #284]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 800435c:	4313      	orrs	r3, r2
 800435e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004360:	4b45      	ldr	r3, [pc, #276]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a44      	ldr	r2, [pc, #272]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 8004366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800436a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800436c:	4b42      	ldr	r3, [pc, #264]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a41      	ldr	r2, [pc, #260]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 8004372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004376:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd fbb4 	bl	8001ae4 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004380:	f7fd fbb0 	bl	8001ae4 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e06e      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004392:	4b39      	ldr	r3, [pc, #228]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0x530>
 800439e:	e066      	b.n	800446e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a0:	4b35      	ldr	r3, [pc, #212]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a34      	ldr	r2, [pc, #208]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 80043a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043aa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043ac:	4b32      	ldr	r3, [pc, #200]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a31      	ldr	r2, [pc, #196]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 80043b2:	f023 0303 	bic.w	r3, r3, #3
 80043b6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043b8:	4b2f      	ldr	r3, [pc, #188]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4a2e      	ldr	r2, [pc, #184]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 80043be:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fd fb8c 	bl	8001ae4 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fd fb88 	bl	8001ae4 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e046      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e2:	4b25      	ldr	r3, [pc, #148]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x580>
 80043ee:	e03e      	b.n	800446e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e039      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043fc:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <HAL_RCC_OscConfig+0x628>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 0203 	and.w	r2, r3, #3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	429a      	cmp	r2, r3
 800440e:	d12c      	bne.n	800446a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	3b01      	subs	r3, #1
 800441c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d123      	bne.n	800446a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d11b      	bne.n	800446a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d113      	bne.n	800446a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	085b      	lsrs	r3, r3, #1
 800444e:	3b01      	subs	r3, #1
 8004450:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d109      	bne.n	800446a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	3b01      	subs	r3, #1
 8004464:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d001      	beq.n	800446e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40021000 	.word	0x40021000
 800447c:	019f800c 	.word	0x019f800c

08004480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e11e      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004498:	4b91      	ldr	r3, [pc, #580]	; (80046e0 <HAL_RCC_ClockConfig+0x260>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d910      	bls.n	80044c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b8e      	ldr	r3, [pc, #568]	; (80046e0 <HAL_RCC_ClockConfig+0x260>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 020f 	bic.w	r2, r3, #15
 80044ae:	498c      	ldr	r1, [pc, #560]	; (80046e0 <HAL_RCC_ClockConfig+0x260>)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b6:	4b8a      	ldr	r3, [pc, #552]	; (80046e0 <HAL_RCC_ClockConfig+0x260>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d001      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e106      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d073      	beq.n	80045bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d129      	bne.n	8004530 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044dc:	4b81      	ldr	r3, [pc, #516]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0f4      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80044ec:	f000 f9d0 	bl	8004890 <RCC_GetSysClockFreqFromPLLSource>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4a7c      	ldr	r2, [pc, #496]	; (80046e8 <HAL_RCC_ClockConfig+0x268>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d93f      	bls.n	800457a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044fa:	4b7a      	ldr	r3, [pc, #488]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800450e:	2b00      	cmp	r3, #0
 8004510:	d033      	beq.n	800457a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004516:	2b00      	cmp	r3, #0
 8004518:	d12f      	bne.n	800457a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800451a:	4b72      	ldr	r3, [pc, #456]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004522:	4a70      	ldr	r2, [pc, #448]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004528:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	e024      	b.n	800457a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d107      	bne.n	8004548 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004538:	4b6a      	ldr	r3, [pc, #424]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0c6      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004548:	4b66      	ldr	r3, [pc, #408]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0be      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004558:	f000 f8ce 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 800455c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4a61      	ldr	r2, [pc, #388]	; (80046e8 <HAL_RCC_ClockConfig+0x268>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d909      	bls.n	800457a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004566:	4b5f      	ldr	r3, [pc, #380]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800456e:	4a5d      	ldr	r2, [pc, #372]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004574:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800457a:	4b5a      	ldr	r3, [pc, #360]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 0203 	bic.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4957      	ldr	r1, [pc, #348]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004588:	4313      	orrs	r3, r2
 800458a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458c:	f7fd faaa 	bl	8001ae4 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	e00a      	b.n	80045aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004594:	f7fd faa6 	bl	8001ae4 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e095      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	4b4e      	ldr	r3, [pc, #312]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 020c 	and.w	r2, r3, #12
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1eb      	bne.n	8004594 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d023      	beq.n	8004610 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d4:	4b43      	ldr	r3, [pc, #268]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4a42      	ldr	r2, [pc, #264]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80045da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80045ec:	4b3d      	ldr	r3, [pc, #244]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045f4:	4a3b      	ldr	r2, [pc, #236]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80045f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045fc:	4b39      	ldr	r3, [pc, #228]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	4936      	ldr	r1, [pc, #216]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800460a:	4313      	orrs	r3, r2
 800460c:	608b      	str	r3, [r1, #8]
 800460e:	e008      	b.n	8004622 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2b80      	cmp	r3, #128	; 0x80
 8004614:	d105      	bne.n	8004622 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004616:	4b33      	ldr	r3, [pc, #204]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	4a32      	ldr	r2, [pc, #200]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800461c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004620:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004622:	4b2f      	ldr	r3, [pc, #188]	; (80046e0 <HAL_RCC_ClockConfig+0x260>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d21d      	bcs.n	800466c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004630:	4b2b      	ldr	r3, [pc, #172]	; (80046e0 <HAL_RCC_ClockConfig+0x260>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 020f 	bic.w	r2, r3, #15
 8004638:	4929      	ldr	r1, [pc, #164]	; (80046e0 <HAL_RCC_ClockConfig+0x260>)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004640:	f7fd fa50 	bl	8001ae4 <HAL_GetTick>
 8004644:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004646:	e00a      	b.n	800465e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004648:	f7fd fa4c 	bl	8001ae4 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	; 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e03b      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <HAL_RCC_ClockConfig+0x260>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d1ed      	bne.n	8004648 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004678:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4917      	ldr	r1, [pc, #92]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004696:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	490f      	ldr	r1, [pc, #60]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046aa:	f000 f825 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	490c      	ldr	r1, [pc, #48]	; (80046ec <HAL_RCC_ClockConfig+0x26c>)
 80046bc:	5ccb      	ldrb	r3, [r1, r3]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <HAL_RCC_ClockConfig+0x270>)
 80046c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046ca:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <HAL_RCC_ClockConfig+0x274>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fd f822 	bl	8001718 <HAL_InitTick>
 80046d4:	4603      	mov	r3, r0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40022000 	.word	0x40022000
 80046e4:	40021000 	.word	0x40021000
 80046e8:	04c4b400 	.word	0x04c4b400
 80046ec:	08009f70 	.word	0x08009f70
 80046f0:	200001a0 	.word	0x200001a0
 80046f4:	200001a4 	.word	0x200001a4

080046f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046fe:	4b2c      	ldr	r3, [pc, #176]	; (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b04      	cmp	r3, #4
 8004708:	d102      	bne.n	8004710 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800470a:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	e047      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004710:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	2b08      	cmp	r3, #8
 800471a:	d102      	bne.n	8004722 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800471c:	4b26      	ldr	r3, [pc, #152]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	e03e      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004722:	4b23      	ldr	r3, [pc, #140]	; (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b0c      	cmp	r3, #12
 800472c:	d136      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800472e:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004738:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	3301      	adds	r3, #1
 8004744:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d10c      	bne.n	8004766 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800474c:	4a1a      	ldr	r2, [pc, #104]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	4a16      	ldr	r2, [pc, #88]	; (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004756:	68d2      	ldr	r2, [r2, #12]
 8004758:	0a12      	lsrs	r2, r2, #8
 800475a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	617b      	str	r3, [r7, #20]
      break;
 8004764:	e00c      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004766:	4a13      	ldr	r2, [pc, #76]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	fbb2 f3f3 	udiv	r3, r2, r3
 800476e:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004770:	68d2      	ldr	r2, [r2, #12]
 8004772:	0a12      	lsrs	r2, r2, #8
 8004774:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004778:	fb02 f303 	mul.w	r3, r2, r3
 800477c:	617b      	str	r3, [r7, #20]
      break;
 800477e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	0e5b      	lsrs	r3, r3, #25
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	3301      	adds	r3, #1
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	e001      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047a0:	693b      	ldr	r3, [r7, #16]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	00f42400 	.word	0x00f42400
 80047b8:	016e3600 	.word	0x016e3600

080047bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c0:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047c2:	681b      	ldr	r3, [r3, #0]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	200001a0 	.word	0x200001a0

080047d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047d8:	f7ff fff0 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	0a1b      	lsrs	r3, r3, #8
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	4904      	ldr	r1, [pc, #16]	; (80047fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000
 80047fc:	08009f80 	.word	0x08009f80

08004800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004804:	f7ff ffda 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	0adb      	lsrs	r3, r3, #11
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4904      	ldr	r1, [pc, #16]	; (8004828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000
 8004828:	08009f80 	.word	0x08009f80

0800482c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	220f      	movs	r2, #15
 800483a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800483c:	4b12      	ldr	r3, [pc, #72]	; (8004888 <HAL_RCC_GetClockConfig+0x5c>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 0203 	and.w	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <HAL_RCC_GetClockConfig+0x5c>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <HAL_RCC_GetClockConfig+0x5c>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RCC_GetClockConfig+0x5c>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800486e:	4b07      	ldr	r3, [pc, #28]	; (800488c <HAL_RCC_GetClockConfig+0x60>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 020f 	and.w	r2, r3, #15
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
 800488c:	40022000 	.word	0x40022000

08004890 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004896:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048a0:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d10c      	bne.n	80048ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048b4:	4a17      	ldr	r2, [pc, #92]	; (8004914 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048be:	68d2      	ldr	r2, [r2, #12]
 80048c0:	0a12      	lsrs	r2, r2, #8
 80048c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	617b      	str	r3, [r7, #20]
    break;
 80048cc:	e00c      	b.n	80048e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048ce:	4a12      	ldr	r2, [pc, #72]	; (8004918 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	4a0e      	ldr	r2, [pc, #56]	; (8004910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048d8:	68d2      	ldr	r2, [r2, #12]
 80048da:	0a12      	lsrs	r2, r2, #8
 80048dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
 80048e4:	617b      	str	r3, [r7, #20]
    break;
 80048e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	0e5b      	lsrs	r3, r3, #25
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	3301      	adds	r3, #1
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004900:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004902:	687b      	ldr	r3, [r7, #4]
}
 8004904:	4618      	mov	r0, r3
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	40021000 	.word	0x40021000
 8004914:	016e3600 	.word	0x016e3600
 8004918:	00f42400 	.word	0x00f42400

0800491c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004924:	2300      	movs	r3, #0
 8004926:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004928:	2300      	movs	r3, #0
 800492a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8098 	beq.w	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493a:	2300      	movs	r3, #0
 800493c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493e:	4b43      	ldr	r3, [pc, #268]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10d      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800494a:	4b40      	ldr	r3, [pc, #256]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	4a3f      	ldr	r2, [pc, #252]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004954:	6593      	str	r3, [r2, #88]	; 0x58
 8004956:	4b3d      	ldr	r3, [pc, #244]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004962:	2301      	movs	r3, #1
 8004964:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004966:	4b3a      	ldr	r3, [pc, #232]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a39      	ldr	r2, [pc, #228]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800496c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004972:	f7fd f8b7 	bl	8001ae4 <HAL_GetTick>
 8004976:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004978:	e009      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497a:	f7fd f8b3 	bl	8001ae4 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d902      	bls.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	74fb      	strb	r3, [r7, #19]
        break;
 800498c:	e005      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800498e:	4b30      	ldr	r3, [pc, #192]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0ef      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800499a:	7cfb      	ldrb	r3, [r7, #19]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d159      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049a0:	4b2a      	ldr	r3, [pc, #168]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01e      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d019      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049bc:	4b23      	ldr	r3, [pc, #140]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049c8:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049d8:	4b1c      	ldr	r3, [pc, #112]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049de:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049e8:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d016      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fa:	f7fd f873 	bl	8001ae4 <HAL_GetTick>
 80049fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a00:	e00b      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a02:	f7fd f86f 	bl	8001ae4 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d902      	bls.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	74fb      	strb	r3, [r7, #19]
            break;
 8004a18:	e006      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ec      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a28:	7cfb      	ldrb	r3, [r7, #19]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a2e:	4b07      	ldr	r3, [pc, #28]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	4903      	ldr	r1, [pc, #12]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a44:	e008      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	74bb      	strb	r3, [r7, #18]
 8004a4a:	e005      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a58:	7c7b      	ldrb	r3, [r7, #17]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d105      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5e:	4ba6      	ldr	r3, [pc, #664]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a62:	4aa5      	ldr	r2, [pc, #660]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a76:	4ba0      	ldr	r3, [pc, #640]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	f023 0203 	bic.w	r2, r3, #3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	499c      	ldr	r1, [pc, #624]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a98:	4b97      	ldr	r3, [pc, #604]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f023 020c 	bic.w	r2, r3, #12
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	4994      	ldr	r1, [pc, #592]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aba:	4b8f      	ldr	r3, [pc, #572]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	498b      	ldr	r1, [pc, #556]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004adc:	4b86      	ldr	r3, [pc, #536]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	4983      	ldr	r1, [pc, #524]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004afe:	4b7e      	ldr	r3, [pc, #504]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	497a      	ldr	r1, [pc, #488]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b20:	4b75      	ldr	r3, [pc, #468]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	4972      	ldr	r1, [pc, #456]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b42:	4b6d      	ldr	r3, [pc, #436]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	4969      	ldr	r1, [pc, #420]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b64:	4b64      	ldr	r3, [pc, #400]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	4961      	ldr	r1, [pc, #388]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b86:	4b5c      	ldr	r3, [pc, #368]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	4958      	ldr	r1, [pc, #352]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	4950      	ldr	r1, [pc, #320]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc6:	d105      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc8:	4b4b      	ldr	r3, [pc, #300]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a4a      	ldr	r2, [pc, #296]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004be0:	4b45      	ldr	r3, [pc, #276]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	4942      	ldr	r1, [pc, #264]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bfe:	d105      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c00:	4b3d      	ldr	r3, [pc, #244]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a3c      	ldr	r2, [pc, #240]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d015      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c18:	4b37      	ldr	r3, [pc, #220]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	4934      	ldr	r1, [pc, #208]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c36:	d105      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c38:	4b2f      	ldr	r3, [pc, #188]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a2e      	ldr	r2, [pc, #184]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d015      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c50:	4b29      	ldr	r3, [pc, #164]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	4926      	ldr	r1, [pc, #152]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c6e:	d105      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c70:	4b21      	ldr	r3, [pc, #132]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4a20      	ldr	r2, [pc, #128]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d015      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c88:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	4918      	ldr	r1, [pc, #96]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca8:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a12      	ldr	r2, [pc, #72]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d015      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cc0:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cce:	490a      	ldr	r1, [pc, #40]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cde:	d105      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cec:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000

08004cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e049      	b.n	8004da2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fc fc2c 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f000 feb0 	bl	8005aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d001      	beq.n	8004dc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e042      	b.n	8004e4a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a21      	ldr	r2, [pc, #132]	; (8004e58 <HAL_TIM_Base_Start+0xac>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d018      	beq.n	8004e08 <HAL_TIM_Base_Start+0x5c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dde:	d013      	beq.n	8004e08 <HAL_TIM_Base_Start+0x5c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1d      	ldr	r2, [pc, #116]	; (8004e5c <HAL_TIM_Base_Start+0xb0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00e      	beq.n	8004e08 <HAL_TIM_Base_Start+0x5c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1c      	ldr	r2, [pc, #112]	; (8004e60 <HAL_TIM_Base_Start+0xb4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d009      	beq.n	8004e08 <HAL_TIM_Base_Start+0x5c>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <HAL_TIM_Base_Start+0xb8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <HAL_TIM_Base_Start+0x5c>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a19      	ldr	r2, [pc, #100]	; (8004e68 <HAL_TIM_Base_Start+0xbc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d115      	bne.n	8004e34 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	4b17      	ldr	r3, [pc, #92]	; (8004e6c <HAL_TIM_Base_Start+0xc0>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b06      	cmp	r3, #6
 8004e18:	d015      	beq.n	8004e46 <HAL_TIM_Base_Start+0x9a>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e20:	d011      	beq.n	8004e46 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0201 	orr.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e32:	e008      	b.n	8004e46 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	e000      	b.n	8004e48 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800
 8004e64:	40013400 	.word	0x40013400
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	00010007 	.word	0x00010007

08004e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d001      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e04a      	b.n	8004f1e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <HAL_TIM_Base_Start_IT+0xbc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d018      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x6c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb2:	d013      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x6c>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1d      	ldr	r2, [pc, #116]	; (8004f30 <HAL_TIM_Base_Start_IT+0xc0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00e      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x6c>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a1c      	ldr	r2, [pc, #112]	; (8004f34 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d009      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x6c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1a      	ldr	r2, [pc, #104]	; (8004f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x6c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a19      	ldr	r2, [pc, #100]	; (8004f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d115      	bne.n	8004f08 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b06      	cmp	r3, #6
 8004eec:	d015      	beq.n	8004f1a <HAL_TIM_Base_Start_IT+0xaa>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef4:	d011      	beq.n	8004f1a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 0201 	orr.w	r2, r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f06:	e008      	b.n	8004f1a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e000      	b.n	8004f1c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40012c00 	.word	0x40012c00
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40013400 	.word	0x40013400
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	00010007 	.word	0x00010007

08004f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e049      	b.n	8004fea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f841 	bl	8004ff2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f000 fd8c 	bl	8005aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <HAL_TIM_PWM_Start+0x24>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b01      	cmp	r3, #1
 8005022:	bf14      	ite	ne
 8005024:	2301      	movne	r3, #1
 8005026:	2300      	moveq	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	e03c      	b.n	80050a6 <HAL_TIM_PWM_Start+0x9e>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b04      	cmp	r3, #4
 8005030:	d109      	bne.n	8005046 <HAL_TIM_PWM_Start+0x3e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b01      	cmp	r3, #1
 800503c:	bf14      	ite	ne
 800503e:	2301      	movne	r3, #1
 8005040:	2300      	moveq	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	e02f      	b.n	80050a6 <HAL_TIM_PWM_Start+0x9e>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d109      	bne.n	8005060 <HAL_TIM_PWM_Start+0x58>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	e022      	b.n	80050a6 <HAL_TIM_PWM_Start+0x9e>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b0c      	cmp	r3, #12
 8005064:	d109      	bne.n	800507a <HAL_TIM_PWM_Start+0x72>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b01      	cmp	r3, #1
 8005070:	bf14      	ite	ne
 8005072:	2301      	movne	r3, #1
 8005074:	2300      	moveq	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	e015      	b.n	80050a6 <HAL_TIM_PWM_Start+0x9e>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b10      	cmp	r3, #16
 800507e:	d109      	bne.n	8005094 <HAL_TIM_PWM_Start+0x8c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	bf14      	ite	ne
 800508c:	2301      	movne	r3, #1
 800508e:	2300      	moveq	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e008      	b.n	80050a6 <HAL_TIM_PWM_Start+0x9e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	bf14      	ite	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	2300      	moveq	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e097      	b.n	80051de <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <HAL_TIM_PWM_Start+0xb6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050bc:	e023      	b.n	8005106 <HAL_TIM_PWM_Start+0xfe>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_PWM_Start+0xc6>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050cc:	e01b      	b.n	8005106 <HAL_TIM_PWM_Start+0xfe>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d104      	bne.n	80050de <HAL_TIM_PWM_Start+0xd6>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050dc:	e013      	b.n	8005106 <HAL_TIM_PWM_Start+0xfe>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b0c      	cmp	r3, #12
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_PWM_Start+0xe6>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ec:	e00b      	b.n	8005106 <HAL_TIM_PWM_Start+0xfe>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_PWM_Start+0xf6>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050fc:	e003      	b.n	8005106 <HAL_TIM_PWM_Start+0xfe>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2201      	movs	r2, #1
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f001 f8e8 	bl	80062e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a33      	ldr	r2, [pc, #204]	; (80051e8 <HAL_TIM_PWM_Start+0x1e0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <HAL_TIM_PWM_Start+0x13e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a32      	ldr	r2, [pc, #200]	; (80051ec <HAL_TIM_PWM_Start+0x1e4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00e      	beq.n	8005146 <HAL_TIM_PWM_Start+0x13e>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a30      	ldr	r2, [pc, #192]	; (80051f0 <HAL_TIM_PWM_Start+0x1e8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d009      	beq.n	8005146 <HAL_TIM_PWM_Start+0x13e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2f      	ldr	r2, [pc, #188]	; (80051f4 <HAL_TIM_PWM_Start+0x1ec>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_TIM_PWM_Start+0x13e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a2d      	ldr	r2, [pc, #180]	; (80051f8 <HAL_TIM_PWM_Start+0x1f0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d101      	bne.n	800514a <HAL_TIM_PWM_Start+0x142>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <HAL_TIM_PWM_Start+0x144>
 800514a:	2300      	movs	r3, #0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800515e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a20      	ldr	r2, [pc, #128]	; (80051e8 <HAL_TIM_PWM_Start+0x1e0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d018      	beq.n	800519c <HAL_TIM_PWM_Start+0x194>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d013      	beq.n	800519c <HAL_TIM_PWM_Start+0x194>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a20      	ldr	r2, [pc, #128]	; (80051fc <HAL_TIM_PWM_Start+0x1f4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00e      	beq.n	800519c <HAL_TIM_PWM_Start+0x194>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1f      	ldr	r2, [pc, #124]	; (8005200 <HAL_TIM_PWM_Start+0x1f8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d009      	beq.n	800519c <HAL_TIM_PWM_Start+0x194>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a17      	ldr	r2, [pc, #92]	; (80051ec <HAL_TIM_PWM_Start+0x1e4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d004      	beq.n	800519c <HAL_TIM_PWM_Start+0x194>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a16      	ldr	r2, [pc, #88]	; (80051f0 <HAL_TIM_PWM_Start+0x1e8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d115      	bne.n	80051c8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	4b18      	ldr	r3, [pc, #96]	; (8005204 <HAL_TIM_PWM_Start+0x1fc>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b06      	cmp	r3, #6
 80051ac:	d015      	beq.n	80051da <HAL_TIM_PWM_Start+0x1d2>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b4:	d011      	beq.n	80051da <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f042 0201 	orr.w	r2, r2, #1
 80051c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c6:	e008      	b.n	80051da <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	e000      	b.n	80051dc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40012c00 	.word	0x40012c00
 80051ec:	40013400 	.word	0x40013400
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40014400 	.word	0x40014400
 80051f8:	40014800 	.word	0x40014800
 80051fc:	40000400 	.word	0x40000400
 8005200:	40000800 	.word	0x40000800
 8005204:	00010007 	.word	0x00010007

08005208 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2200      	movs	r2, #0
 8005218:	6839      	ldr	r1, [r7, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f001 f862 	bl	80062e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a3e      	ldr	r2, [pc, #248]	; (8005320 <HAL_TIM_PWM_Stop+0x118>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <HAL_TIM_PWM_Stop+0x4a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a3d      	ldr	r2, [pc, #244]	; (8005324 <HAL_TIM_PWM_Stop+0x11c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00e      	beq.n	8005252 <HAL_TIM_PWM_Stop+0x4a>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a3b      	ldr	r2, [pc, #236]	; (8005328 <HAL_TIM_PWM_Stop+0x120>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d009      	beq.n	8005252 <HAL_TIM_PWM_Stop+0x4a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a3a      	ldr	r2, [pc, #232]	; (800532c <HAL_TIM_PWM_Stop+0x124>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_TIM_PWM_Stop+0x4a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a38      	ldr	r2, [pc, #224]	; (8005330 <HAL_TIM_PWM_Stop+0x128>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d101      	bne.n	8005256 <HAL_TIM_PWM_Stop+0x4e>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <HAL_TIM_PWM_Stop+0x50>
 8005256:	2300      	movs	r3, #0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d017      	beq.n	800528c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6a1a      	ldr	r2, [r3, #32]
 8005262:	f241 1311 	movw	r3, #4369	; 0x1111
 8005266:	4013      	ands	r3, r2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10f      	bne.n	800528c <HAL_TIM_PWM_Stop+0x84>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6a1a      	ldr	r2, [r3, #32]
 8005272:	f244 4344 	movw	r3, #17476	; 0x4444
 8005276:	4013      	ands	r3, r2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d107      	bne.n	800528c <HAL_TIM_PWM_Stop+0x84>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800528a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6a1a      	ldr	r2, [r3, #32]
 8005292:	f241 1311 	movw	r3, #4369	; 0x1111
 8005296:	4013      	ands	r3, r2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10f      	bne.n	80052bc <HAL_TIM_PWM_Stop+0xb4>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6a1a      	ldr	r2, [r3, #32]
 80052a2:	f244 4344 	movw	r3, #17476	; 0x4444
 80052a6:	4013      	ands	r3, r2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d107      	bne.n	80052bc <HAL_TIM_PWM_Stop+0xb4>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0201 	bic.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d104      	bne.n	80052cc <HAL_TIM_PWM_Stop+0xc4>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ca:	e023      	b.n	8005314 <HAL_TIM_PWM_Stop+0x10c>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d104      	bne.n	80052dc <HAL_TIM_PWM_Stop+0xd4>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052da:	e01b      	b.n	8005314 <HAL_TIM_PWM_Stop+0x10c>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d104      	bne.n	80052ec <HAL_TIM_PWM_Stop+0xe4>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ea:	e013      	b.n	8005314 <HAL_TIM_PWM_Stop+0x10c>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b0c      	cmp	r3, #12
 80052f0:	d104      	bne.n	80052fc <HAL_TIM_PWM_Stop+0xf4>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052fa:	e00b      	b.n	8005314 <HAL_TIM_PWM_Stop+0x10c>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d104      	bne.n	800530c <HAL_TIM_PWM_Stop+0x104>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800530a:	e003      	b.n	8005314 <HAL_TIM_PWM_Stop+0x10c>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40012c00 	.word	0x40012c00
 8005324:	40013400 	.word	0x40013400
 8005328:	40014000 	.word	0x40014000
 800532c:	40014400 	.word	0x40014400
 8005330:	40014800 	.word	0x40014800

08005334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b02      	cmp	r3, #2
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0202 	mvn.w	r2, #2
 8005360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fb74 	bl	8005a64 <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fb66 	bl	8005a50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fb77 	bl	8005a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b04      	cmp	r3, #4
 800539c:	d122      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d11b      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0204 	mvn.w	r2, #4
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fb4a 	bl	8005a64 <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fb3c 	bl	8005a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fb4d 	bl	8005a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d11b      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0208 	mvn.w	r2, #8
 8005408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2204      	movs	r2, #4
 800540e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fb20 	bl	8005a64 <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fb12 	bl	8005a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fb23 	bl	8005a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b10      	cmp	r3, #16
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b10      	cmp	r3, #16
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0210 	mvn.w	r2, #16
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2208      	movs	r2, #8
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 faf6 	bl	8005a64 <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fae8 	bl	8005a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 faf9 	bl	8005a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b01      	cmp	r3, #1
 8005498:	d10e      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0201 	mvn.w	r2, #1
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fb ffa6 	bl	8001404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	2b80      	cmp	r3, #128	; 0x80
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f001 f964 	bl	80067ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f2:	d10e      	bne.n	8005512 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b80      	cmp	r3, #128	; 0x80
 8005500:	d107      	bne.n	8005512 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800550a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f001 f957 	bl	80067c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d10e      	bne.n	800553e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d107      	bne.n	800553e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 faa7 	bl	8005a8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b20      	cmp	r3, #32
 800554a:	d10e      	bne.n	800556a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b20      	cmp	r3, #32
 8005558:	d107      	bne.n	800556a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f06f 0220 	mvn.w	r2, #32
 8005562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f001 f917 	bl	8006798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005578:	d10f      	bne.n	800559a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005588:	d107      	bne.n	800559a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f001 f91d 	bl	80067d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055a8:	d10f      	bne.n	80055ca <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055b8:	d107      	bne.n	80055ca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80055c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f001 f90f 	bl	80067e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055d8:	d10f      	bne.n	80055fa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055e8:	d107      	bne.n	80055fa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80055f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f001 f901 	bl	80067fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005604:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005608:	d10f      	bne.n	800562a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005614:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005618:	d107      	bne.n	800562a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f001 f8f3 	bl	8006810 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800562a:	bf00      	nop
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800564e:	2302      	movs	r3, #2
 8005650:	e0ff      	b.n	8005852 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b14      	cmp	r3, #20
 800565e:	f200 80f0 	bhi.w	8005842 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005662:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005668:	080056bd 	.word	0x080056bd
 800566c:	08005843 	.word	0x08005843
 8005670:	08005843 	.word	0x08005843
 8005674:	08005843 	.word	0x08005843
 8005678:	080056fd 	.word	0x080056fd
 800567c:	08005843 	.word	0x08005843
 8005680:	08005843 	.word	0x08005843
 8005684:	08005843 	.word	0x08005843
 8005688:	0800573f 	.word	0x0800573f
 800568c:	08005843 	.word	0x08005843
 8005690:	08005843 	.word	0x08005843
 8005694:	08005843 	.word	0x08005843
 8005698:	0800577f 	.word	0x0800577f
 800569c:	08005843 	.word	0x08005843
 80056a0:	08005843 	.word	0x08005843
 80056a4:	08005843 	.word	0x08005843
 80056a8:	080057c1 	.word	0x080057c1
 80056ac:	08005843 	.word	0x08005843
 80056b0:	08005843 	.word	0x08005843
 80056b4:	08005843 	.word	0x08005843
 80056b8:	08005801 	.word	0x08005801
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fa7c 	bl	8005bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0208 	orr.w	r2, r2, #8
 80056d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0204 	bic.w	r2, r2, #4
 80056e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6999      	ldr	r1, [r3, #24]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	619a      	str	r2, [r3, #24]
      break;
 80056fa:	e0a5      	b.n	8005848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68b9      	ldr	r1, [r7, #8]
 8005702:	4618      	mov	r0, r3
 8005704:	f000 faec 	bl	8005ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6999      	ldr	r1, [r3, #24]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	021a      	lsls	r2, r3, #8
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	619a      	str	r2, [r3, #24]
      break;
 800573c:	e084      	b.n	8005848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fb55 	bl	8005df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0208 	orr.w	r2, r2, #8
 8005758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0204 	bic.w	r2, r2, #4
 8005768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69d9      	ldr	r1, [r3, #28]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	61da      	str	r2, [r3, #28]
      break;
 800577c:	e064      	b.n	8005848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fbbd 	bl	8005f04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69d9      	ldr	r1, [r3, #28]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	021a      	lsls	r2, r3, #8
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	61da      	str	r2, [r3, #28]
      break;
 80057be:	e043      	b.n	8005848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fc26 	bl	8006018 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0208 	orr.w	r2, r2, #8
 80057da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0204 	bic.w	r2, r2, #4
 80057ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80057fe:	e023      	b.n	8005848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fc6a 	bl	80060e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800581a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	021a      	lsls	r2, r3, #8
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005840:	e002      	b.n	8005848 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	75fb      	strb	r3, [r7, #23]
      break;
 8005846:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005850:	7dfb      	ldrb	r3, [r7, #23]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop

0800585c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_TIM_ConfigClockSource+0x1c>
 8005874:	2302      	movs	r3, #2
 8005876:	e0de      	b.n	8005a36 <HAL_TIM_ConfigClockSource+0x1da>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800589a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a63      	ldr	r2, [pc, #396]	; (8005a40 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	f000 80a9 	beq.w	8005a0a <HAL_TIM_ConfigClockSource+0x1ae>
 80058b8:	4a61      	ldr	r2, [pc, #388]	; (8005a40 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	f200 80ae 	bhi.w	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
 80058c0:	4a60      	ldr	r2, [pc, #384]	; (8005a44 <HAL_TIM_ConfigClockSource+0x1e8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	f000 80a1 	beq.w	8005a0a <HAL_TIM_ConfigClockSource+0x1ae>
 80058c8:	4a5e      	ldr	r2, [pc, #376]	; (8005a44 <HAL_TIM_ConfigClockSource+0x1e8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	f200 80a6 	bhi.w	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
 80058d0:	4a5d      	ldr	r2, [pc, #372]	; (8005a48 <HAL_TIM_ConfigClockSource+0x1ec>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	f000 8099 	beq.w	8005a0a <HAL_TIM_ConfigClockSource+0x1ae>
 80058d8:	4a5b      	ldr	r2, [pc, #364]	; (8005a48 <HAL_TIM_ConfigClockSource+0x1ec>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	f200 809e 	bhi.w	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
 80058e0:	4a5a      	ldr	r2, [pc, #360]	; (8005a4c <HAL_TIM_ConfigClockSource+0x1f0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	f000 8091 	beq.w	8005a0a <HAL_TIM_ConfigClockSource+0x1ae>
 80058e8:	4a58      	ldr	r2, [pc, #352]	; (8005a4c <HAL_TIM_ConfigClockSource+0x1f0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	f200 8096 	bhi.w	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
 80058f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058f4:	f000 8089 	beq.w	8005a0a <HAL_TIM_ConfigClockSource+0x1ae>
 80058f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058fc:	f200 808e 	bhi.w	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
 8005900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005904:	d03e      	beq.n	8005984 <HAL_TIM_ConfigClockSource+0x128>
 8005906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590a:	f200 8087 	bhi.w	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
 800590e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005912:	f000 8086 	beq.w	8005a22 <HAL_TIM_ConfigClockSource+0x1c6>
 8005916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591a:	d87f      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
 800591c:	2b70      	cmp	r3, #112	; 0x70
 800591e:	d01a      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0xfa>
 8005920:	2b70      	cmp	r3, #112	; 0x70
 8005922:	d87b      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
 8005924:	2b60      	cmp	r3, #96	; 0x60
 8005926:	d050      	beq.n	80059ca <HAL_TIM_ConfigClockSource+0x16e>
 8005928:	2b60      	cmp	r3, #96	; 0x60
 800592a:	d877      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
 800592c:	2b50      	cmp	r3, #80	; 0x50
 800592e:	d03c      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x14e>
 8005930:	2b50      	cmp	r3, #80	; 0x50
 8005932:	d873      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	d058      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0x18e>
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d86f      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
 800593c:	2b30      	cmp	r3, #48	; 0x30
 800593e:	d064      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0x1ae>
 8005940:	2b30      	cmp	r3, #48	; 0x30
 8005942:	d86b      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
 8005944:	2b20      	cmp	r3, #32
 8005946:	d060      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0x1ae>
 8005948:	2b20      	cmp	r3, #32
 800594a:	d867      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d05c      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0x1ae>
 8005950:	2b10      	cmp	r3, #16
 8005952:	d05a      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0x1ae>
 8005954:	e062      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6899      	ldr	r1, [r3, #8]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f000 fc9d 	bl	80062a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	609a      	str	r2, [r3, #8]
      break;
 8005982:	e04f      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6818      	ldr	r0, [r3, #0]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	6899      	ldr	r1, [r3, #8]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f000 fc86 	bl	80062a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059a6:	609a      	str	r2, [r3, #8]
      break;
 80059a8:	e03c      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6859      	ldr	r1, [r3, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	461a      	mov	r2, r3
 80059b8:	f000 fbf8 	bl	80061ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2150      	movs	r1, #80	; 0x50
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fc51 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 80059c8:	e02c      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6859      	ldr	r1, [r3, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f000 fc17 	bl	800620a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2160      	movs	r1, #96	; 0x60
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fc41 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 80059e8:	e01c      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6859      	ldr	r1, [r3, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f000 fbd8 	bl	80061ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2140      	movs	r1, #64	; 0x40
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fc31 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 8005a08:	e00c      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f000 fc28 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 8005a1a:	e003      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a20:	e000      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	00100070 	.word	0x00100070
 8005a44:	00100040 	.word	0x00100040
 8005a48:	00100030 	.word	0x00100030
 8005a4c:	00100020 	.word	0x00100020

08005a50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a3c      	ldr	r2, [pc, #240]	; (8005ba4 <TIM_Base_SetConfig+0x104>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00f      	beq.n	8005ad8 <TIM_Base_SetConfig+0x38>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abe:	d00b      	beq.n	8005ad8 <TIM_Base_SetConfig+0x38>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a39      	ldr	r2, [pc, #228]	; (8005ba8 <TIM_Base_SetConfig+0x108>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d007      	beq.n	8005ad8 <TIM_Base_SetConfig+0x38>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a38      	ldr	r2, [pc, #224]	; (8005bac <TIM_Base_SetConfig+0x10c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_Base_SetConfig+0x38>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a37      	ldr	r2, [pc, #220]	; (8005bb0 <TIM_Base_SetConfig+0x110>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d108      	bne.n	8005aea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a2d      	ldr	r2, [pc, #180]	; (8005ba4 <TIM_Base_SetConfig+0x104>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d01b      	beq.n	8005b2a <TIM_Base_SetConfig+0x8a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af8:	d017      	beq.n	8005b2a <TIM_Base_SetConfig+0x8a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a2a      	ldr	r2, [pc, #168]	; (8005ba8 <TIM_Base_SetConfig+0x108>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <TIM_Base_SetConfig+0x8a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a29      	ldr	r2, [pc, #164]	; (8005bac <TIM_Base_SetConfig+0x10c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00f      	beq.n	8005b2a <TIM_Base_SetConfig+0x8a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a28      	ldr	r2, [pc, #160]	; (8005bb0 <TIM_Base_SetConfig+0x110>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00b      	beq.n	8005b2a <TIM_Base_SetConfig+0x8a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a27      	ldr	r2, [pc, #156]	; (8005bb4 <TIM_Base_SetConfig+0x114>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d007      	beq.n	8005b2a <TIM_Base_SetConfig+0x8a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a26      	ldr	r2, [pc, #152]	; (8005bb8 <TIM_Base_SetConfig+0x118>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_Base_SetConfig+0x8a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a25      	ldr	r2, [pc, #148]	; (8005bbc <TIM_Base_SetConfig+0x11c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d108      	bne.n	8005b3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a10      	ldr	r2, [pc, #64]	; (8005ba4 <TIM_Base_SetConfig+0x104>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00f      	beq.n	8005b88 <TIM_Base_SetConfig+0xe8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a11      	ldr	r2, [pc, #68]	; (8005bb0 <TIM_Base_SetConfig+0x110>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00b      	beq.n	8005b88 <TIM_Base_SetConfig+0xe8>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a10      	ldr	r2, [pc, #64]	; (8005bb4 <TIM_Base_SetConfig+0x114>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d007      	beq.n	8005b88 <TIM_Base_SetConfig+0xe8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a0f      	ldr	r2, [pc, #60]	; (8005bb8 <TIM_Base_SetConfig+0x118>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_Base_SetConfig+0xe8>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <TIM_Base_SetConfig+0x11c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d103      	bne.n	8005b90 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	615a      	str	r2, [r3, #20]
}
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40012c00 	.word	0x40012c00
 8005ba8:	40000400 	.word	0x40000400
 8005bac:	40000800 	.word	0x40000800
 8005bb0:	40013400 	.word	0x40013400
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800

08005bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f023 0201 	bic.w	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0303 	bic.w	r3, r3, #3
 8005bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f023 0302 	bic.w	r3, r3, #2
 8005c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <TIM_OC1_SetConfig+0x10c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00f      	beq.n	8005c40 <TIM_OC1_SetConfig+0x80>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a2b      	ldr	r2, [pc, #172]	; (8005cd0 <TIM_OC1_SetConfig+0x110>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00b      	beq.n	8005c40 <TIM_OC1_SetConfig+0x80>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a2a      	ldr	r2, [pc, #168]	; (8005cd4 <TIM_OC1_SetConfig+0x114>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d007      	beq.n	8005c40 <TIM_OC1_SetConfig+0x80>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a29      	ldr	r2, [pc, #164]	; (8005cd8 <TIM_OC1_SetConfig+0x118>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_OC1_SetConfig+0x80>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a28      	ldr	r2, [pc, #160]	; (8005cdc <TIM_OC1_SetConfig+0x11c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10c      	bne.n	8005c5a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f023 0308 	bic.w	r3, r3, #8
 8005c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f023 0304 	bic.w	r3, r3, #4
 8005c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a1b      	ldr	r2, [pc, #108]	; (8005ccc <TIM_OC1_SetConfig+0x10c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00f      	beq.n	8005c82 <TIM_OC1_SetConfig+0xc2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a1a      	ldr	r2, [pc, #104]	; (8005cd0 <TIM_OC1_SetConfig+0x110>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00b      	beq.n	8005c82 <TIM_OC1_SetConfig+0xc2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a19      	ldr	r2, [pc, #100]	; (8005cd4 <TIM_OC1_SetConfig+0x114>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d007      	beq.n	8005c82 <TIM_OC1_SetConfig+0xc2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a18      	ldr	r2, [pc, #96]	; (8005cd8 <TIM_OC1_SetConfig+0x118>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d003      	beq.n	8005c82 <TIM_OC1_SetConfig+0xc2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <TIM_OC1_SetConfig+0x11c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d111      	bne.n	8005ca6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	621a      	str	r2, [r3, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	40012c00 	.word	0x40012c00
 8005cd0:	40013400 	.word	0x40013400
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40014400 	.word	0x40014400
 8005cdc:	40014800 	.word	0x40014800

08005ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f023 0210 	bic.w	r2, r3, #16
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f023 0320 	bic.w	r3, r3, #32
 8005d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a28      	ldr	r2, [pc, #160]	; (8005de0 <TIM_OC2_SetConfig+0x100>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC2_SetConfig+0x6c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a27      	ldr	r2, [pc, #156]	; (8005de4 <TIM_OC2_SetConfig+0x104>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10d      	bne.n	8005d68 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <TIM_OC2_SetConfig+0x100>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00f      	beq.n	8005d90 <TIM_OC2_SetConfig+0xb0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a1c      	ldr	r2, [pc, #112]	; (8005de4 <TIM_OC2_SetConfig+0x104>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00b      	beq.n	8005d90 <TIM_OC2_SetConfig+0xb0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <TIM_OC2_SetConfig+0x108>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d007      	beq.n	8005d90 <TIM_OC2_SetConfig+0xb0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a1a      	ldr	r2, [pc, #104]	; (8005dec <TIM_OC2_SetConfig+0x10c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_OC2_SetConfig+0xb0>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <TIM_OC2_SetConfig+0x110>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d113      	bne.n	8005db8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800

08005df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0303 	bic.w	r3, r3, #3
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a27      	ldr	r2, [pc, #156]	; (8005ef0 <TIM_OC3_SetConfig+0xfc>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_OC3_SetConfig+0x6a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a26      	ldr	r2, [pc, #152]	; (8005ef4 <TIM_OC3_SetConfig+0x100>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d10d      	bne.n	8005e7a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <TIM_OC3_SetConfig+0xfc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00f      	beq.n	8005ea2 <TIM_OC3_SetConfig+0xae>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a1b      	ldr	r2, [pc, #108]	; (8005ef4 <TIM_OC3_SetConfig+0x100>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00b      	beq.n	8005ea2 <TIM_OC3_SetConfig+0xae>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ef8 <TIM_OC3_SetConfig+0x104>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d007      	beq.n	8005ea2 <TIM_OC3_SetConfig+0xae>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a19      	ldr	r2, [pc, #100]	; (8005efc <TIM_OC3_SetConfig+0x108>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d003      	beq.n	8005ea2 <TIM_OC3_SetConfig+0xae>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a18      	ldr	r2, [pc, #96]	; (8005f00 <TIM_OC3_SetConfig+0x10c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d113      	bne.n	8005eca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	621a      	str	r2, [r3, #32]
}
 8005ee4:	bf00      	nop
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40013400 	.word	0x40013400
 8005ef8:	40014000 	.word	0x40014000
 8005efc:	40014400 	.word	0x40014400
 8005f00:	40014800 	.word	0x40014800

08005f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	031b      	lsls	r3, r3, #12
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a28      	ldr	r2, [pc, #160]	; (8006004 <TIM_OC4_SetConfig+0x100>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_OC4_SetConfig+0x6c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a27      	ldr	r2, [pc, #156]	; (8006008 <TIM_OC4_SetConfig+0x104>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10d      	bne.n	8005f8c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	031b      	lsls	r3, r3, #12
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <TIM_OC4_SetConfig+0x100>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00f      	beq.n	8005fb4 <TIM_OC4_SetConfig+0xb0>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a1c      	ldr	r2, [pc, #112]	; (8006008 <TIM_OC4_SetConfig+0x104>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00b      	beq.n	8005fb4 <TIM_OC4_SetConfig+0xb0>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a1b      	ldr	r2, [pc, #108]	; (800600c <TIM_OC4_SetConfig+0x108>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d007      	beq.n	8005fb4 <TIM_OC4_SetConfig+0xb0>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a1a      	ldr	r2, [pc, #104]	; (8006010 <TIM_OC4_SetConfig+0x10c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_OC4_SetConfig+0xb0>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a19      	ldr	r2, [pc, #100]	; (8006014 <TIM_OC4_SetConfig+0x110>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d113      	bne.n	8005fdc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fc2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	019b      	lsls	r3, r3, #6
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	019b      	lsls	r3, r3, #6
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40013400 	.word	0x40013400
 800600c:	40014000 	.word	0x40014000
 8006010:	40014400 	.word	0x40014400
 8006014:	40014800 	.word	0x40014800

08006018 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800605c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	041b      	lsls	r3, r3, #16
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a17      	ldr	r2, [pc, #92]	; (80060cc <TIM_OC5_SetConfig+0xb4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00f      	beq.n	8006092 <TIM_OC5_SetConfig+0x7a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <TIM_OC5_SetConfig+0xb8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00b      	beq.n	8006092 <TIM_OC5_SetConfig+0x7a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <TIM_OC5_SetConfig+0xbc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <TIM_OC5_SetConfig+0x7a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a14      	ldr	r2, [pc, #80]	; (80060d8 <TIM_OC5_SetConfig+0xc0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_OC5_SetConfig+0x7a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a13      	ldr	r2, [pc, #76]	; (80060dc <TIM_OC5_SetConfig+0xc4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d109      	bne.n	80060a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006098:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	621a      	str	r2, [r3, #32]
}
 80060c0:	bf00      	nop
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40013400 	.word	0x40013400
 80060d4:	40014000 	.word	0x40014000
 80060d8:	40014400 	.word	0x40014400
 80060dc:	40014800 	.word	0x40014800

080060e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800610e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	051b      	lsls	r3, r3, #20
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4313      	orrs	r3, r2
 8006132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a18      	ldr	r2, [pc, #96]	; (8006198 <TIM_OC6_SetConfig+0xb8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00f      	beq.n	800615c <TIM_OC6_SetConfig+0x7c>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a17      	ldr	r2, [pc, #92]	; (800619c <TIM_OC6_SetConfig+0xbc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00b      	beq.n	800615c <TIM_OC6_SetConfig+0x7c>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a16      	ldr	r2, [pc, #88]	; (80061a0 <TIM_OC6_SetConfig+0xc0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d007      	beq.n	800615c <TIM_OC6_SetConfig+0x7c>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a15      	ldr	r2, [pc, #84]	; (80061a4 <TIM_OC6_SetConfig+0xc4>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_OC6_SetConfig+0x7c>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a14      	ldr	r2, [pc, #80]	; (80061a8 <TIM_OC6_SetConfig+0xc8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d109      	bne.n	8006170 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006162:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	029b      	lsls	r3, r3, #10
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40012c00 	.word	0x40012c00
 800619c:	40013400 	.word	0x40013400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40014800 	.word	0x40014800

080061ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	f023 0201 	bic.w	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f023 030a 	bic.w	r3, r3, #10
 80061e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800620a:	b480      	push	{r7}
 800620c:	b087      	sub	sp, #28
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f023 0210 	bic.w	r2, r3, #16
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	031b      	lsls	r3, r3, #12
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	f043 0307 	orr.w	r3, r3, #7
 8006290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	609a      	str	r2, [r3, #8]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	021a      	lsls	r2, r3, #8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	609a      	str	r2, [r3, #8]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2201      	movs	r2, #1
 80062f8:	fa02 f303 	lsl.w	r3, r2, r3
 80062fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1a      	ldr	r2, [r3, #32]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	43db      	mvns	r3, r3
 8006306:	401a      	ands	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a1a      	ldr	r2, [r3, #32]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	fa01 f303 	lsl.w	r3, r1, r3
 800631c:	431a      	orrs	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	621a      	str	r2, [r3, #32]
}
 8006322:	bf00      	nop
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d109      	bne.n	8006354 <HAL_TIMEx_PWMN_Start+0x24>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	bf14      	ite	ne
 800634c:	2301      	movne	r3, #1
 800634e:	2300      	moveq	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	e022      	b.n	800639a <HAL_TIMEx_PWMN_Start+0x6a>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b04      	cmp	r3, #4
 8006358:	d109      	bne.n	800636e <HAL_TIMEx_PWMN_Start+0x3e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b01      	cmp	r3, #1
 8006364:	bf14      	ite	ne
 8006366:	2301      	movne	r3, #1
 8006368:	2300      	moveq	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	e015      	b.n	800639a <HAL_TIMEx_PWMN_Start+0x6a>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b08      	cmp	r3, #8
 8006372:	d109      	bne.n	8006388 <HAL_TIMEx_PWMN_Start+0x58>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	e008      	b.n	800639a <HAL_TIMEx_PWMN_Start+0x6a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b01      	cmp	r3, #1
 8006392:	bf14      	ite	ne
 8006394:	2301      	movne	r3, #1
 8006396:	2300      	moveq	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e069      	b.n	8006476 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <HAL_TIMEx_PWMN_Start+0x82>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063b0:	e013      	b.n	80063da <HAL_TIMEx_PWMN_Start+0xaa>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d104      	bne.n	80063c2 <HAL_TIMEx_PWMN_Start+0x92>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063c0:	e00b      	b.n	80063da <HAL_TIMEx_PWMN_Start+0xaa>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d104      	bne.n	80063d2 <HAL_TIMEx_PWMN_Start+0xa2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063d0:	e003      	b.n	80063da <HAL_TIMEx_PWMN_Start+0xaa>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2204      	movs	r2, #4
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fa1e 	bl	8006824 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a20      	ldr	r2, [pc, #128]	; (8006480 <HAL_TIMEx_PWMN_Start+0x150>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d018      	beq.n	8006434 <HAL_TIMEx_PWMN_Start+0x104>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640a:	d013      	beq.n	8006434 <HAL_TIMEx_PWMN_Start+0x104>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1c      	ldr	r2, [pc, #112]	; (8006484 <HAL_TIMEx_PWMN_Start+0x154>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00e      	beq.n	8006434 <HAL_TIMEx_PWMN_Start+0x104>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1b      	ldr	r2, [pc, #108]	; (8006488 <HAL_TIMEx_PWMN_Start+0x158>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d009      	beq.n	8006434 <HAL_TIMEx_PWMN_Start+0x104>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a19      	ldr	r2, [pc, #100]	; (800648c <HAL_TIMEx_PWMN_Start+0x15c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d004      	beq.n	8006434 <HAL_TIMEx_PWMN_Start+0x104>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a18      	ldr	r2, [pc, #96]	; (8006490 <HAL_TIMEx_PWMN_Start+0x160>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d115      	bne.n	8006460 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	4b16      	ldr	r3, [pc, #88]	; (8006494 <HAL_TIMEx_PWMN_Start+0x164>)
 800643c:	4013      	ands	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b06      	cmp	r3, #6
 8006444:	d015      	beq.n	8006472 <HAL_TIMEx_PWMN_Start+0x142>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800644c:	d011      	beq.n	8006472 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0201 	orr.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645e:	e008      	b.n	8006472 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	e000      	b.n	8006474 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006472:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40000400 	.word	0x40000400
 8006488:	40000800 	.word	0x40000800
 800648c:	40013400 	.word	0x40013400
 8006490:	40014000 	.word	0x40014000
 8006494:	00010007 	.word	0x00010007

08006498 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2200      	movs	r2, #0
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 f9ba 	bl	8006824 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6a1a      	ldr	r2, [r3, #32]
 80064b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80064ba:	4013      	ands	r3, r2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10f      	bne.n	80064e0 <HAL_TIMEx_PWMN_Stop+0x48>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6a1a      	ldr	r2, [r3, #32]
 80064c6:	f244 4344 	movw	r3, #17476	; 0x4444
 80064ca:	4013      	ands	r3, r2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d107      	bne.n	80064e0 <HAL_TIMEx_PWMN_Stop+0x48>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6a1a      	ldr	r2, [r3, #32]
 80064e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10f      	bne.n	8006510 <HAL_TIMEx_PWMN_Stop+0x78>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6a1a      	ldr	r2, [r3, #32]
 80064f6:	f244 4344 	movw	r3, #17476	; 0x4444
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d107      	bne.n	8006510 <HAL_TIMEx_PWMN_Stop+0x78>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0201 	bic.w	r2, r2, #1
 800650e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <HAL_TIMEx_PWMN_Stop+0x88>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800651e:	e013      	b.n	8006548 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b04      	cmp	r3, #4
 8006524:	d104      	bne.n	8006530 <HAL_TIMEx_PWMN_Stop+0x98>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800652e:	e00b      	b.n	8006548 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b08      	cmp	r3, #8
 8006534:	d104      	bne.n	8006540 <HAL_TIMEx_PWMN_Stop+0xa8>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800653e:	e003      	b.n	8006548 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006568:	2302      	movs	r3, #2
 800656a:	e065      	b.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a2c      	ldr	r2, [pc, #176]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d004      	beq.n	80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a2b      	ldr	r2, [pc, #172]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d108      	bne.n	80065b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80065b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1b      	ldr	r2, [pc, #108]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d018      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e2:	d013      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a18      	ldr	r2, [pc, #96]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00e      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a17      	ldr	r2, [pc, #92]	; (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d009      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a12      	ldr	r2, [pc, #72]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d004      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a13      	ldr	r2, [pc, #76]	; (8006654 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d10c      	bne.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006612:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	4313      	orrs	r3, r2
 800661c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40013400 	.word	0x40013400
 800664c:	40000400 	.word	0x40000400
 8006650:	40000800 	.word	0x40000800
 8006654:	40014000 	.word	0x40014000

08006658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006670:	2302      	movs	r3, #2
 8006672:	e087      	b.n	8006784 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	041b      	lsls	r3, r3, #16
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a27      	ldr	r2, [pc, #156]	; (8006790 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d004      	beq.n	8006702 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a25      	ldr	r2, [pc, #148]	; (8006794 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d106      	bne.n	8006710 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a1e      	ldr	r2, [pc, #120]	; (8006790 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a1d      	ldr	r2, [pc, #116]	; (8006794 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d126      	bne.n	8006772 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	051b      	lsls	r3, r3, #20
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a0e      	ldr	r2, [pc, #56]	; (8006790 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a0d      	ldr	r2, [pc, #52]	; (8006794 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d106      	bne.n	8006772 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	40012c00 	.word	0x40012c00
 8006794:	40013400 	.word	0x40013400

08006798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f003 031f 	and.w	r3, r3, #31
 8006836:	2204      	movs	r2, #4
 8006838:	fa02 f303 	lsl.w	r3, r2, r3
 800683c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a1a      	ldr	r2, [r3, #32]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	43db      	mvns	r3, r3
 8006846:	401a      	ands	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a1a      	ldr	r2, [r3, #32]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f003 031f 	and.w	r3, r3, #31
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	fa01 f303 	lsl.w	r3, r1, r3
 800685c:	431a      	orrs	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e042      	b.n	8006906 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006886:	2b00      	cmp	r3, #0
 8006888:	d106      	bne.n	8006898 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fa fee0 	bl	8001658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2224      	movs	r2, #36	; 0x24
 800689c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0201 	bic.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fc51 	bl	8007158 <UART_SetConfig>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e022      	b.n	8006906 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 ff11 	bl	80076f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0201 	orr.w	r2, r2, #1
 80068fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 ff98 	bl	8007834 <UART_CheckIdleState>
 8006904:	4603      	mov	r3, r0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b08a      	sub	sp, #40	; 0x28
 8006912:	af02      	add	r7, sp, #8
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	603b      	str	r3, [r7, #0]
 800691a:	4613      	mov	r3, r2
 800691c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006924:	2b20      	cmp	r3, #32
 8006926:	f040 8083 	bne.w	8006a30 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_UART_Transmit+0x28>
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e07b      	b.n	8006a32 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006940:	2b01      	cmp	r3, #1
 8006942:	d101      	bne.n	8006948 <HAL_UART_Transmit+0x3a>
 8006944:	2302      	movs	r3, #2
 8006946:	e074      	b.n	8006a32 <HAL_UART_Transmit+0x124>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2221      	movs	r2, #33	; 0x21
 800695c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006960:	f7fb f8c0 	bl	8001ae4 <HAL_GetTick>
 8006964:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	88fa      	ldrh	r2, [r7, #6]
 800696a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	88fa      	ldrh	r2, [r7, #6]
 8006972:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697e:	d108      	bne.n	8006992 <HAL_UART_Transmit+0x84>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d104      	bne.n	8006992 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006988:	2300      	movs	r3, #0
 800698a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	61bb      	str	r3, [r7, #24]
 8006990:	e003      	b.n	800699a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006996:	2300      	movs	r3, #0
 8006998:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80069a2:	e02c      	b.n	80069fe <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2200      	movs	r2, #0
 80069ac:	2180      	movs	r1, #128	; 0x80
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 ff8b 	bl	80078ca <UART_WaitOnFlagUntilTimeout>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e039      	b.n	8006a32 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10b      	bne.n	80069dc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	3302      	adds	r3, #2
 80069d8:	61bb      	str	r3, [r7, #24]
 80069da:	e007      	b.n	80069ec <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	781a      	ldrb	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	3301      	adds	r3, #1
 80069ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1cc      	bne.n	80069a4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2200      	movs	r2, #0
 8006a12:	2140      	movs	r1, #64	; 0x40
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 ff58 	bl	80078ca <UART_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e006      	b.n	8006a32 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	e000      	b.n	8006a32 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006a30:	2302      	movs	r3, #2
  }
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3720      	adds	r7, #32
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	; 0x28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d142      	bne.n	8006ada <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <HAL_UART_Receive_IT+0x24>
 8006a5a:	88fb      	ldrh	r3, [r7, #6]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e03b      	b.n	8006adc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_UART_Receive_IT+0x36>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e034      	b.n	8006adc <HAL_UART_Receive_IT+0xa0>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a17      	ldr	r2, [pc, #92]	; (8006ae4 <HAL_UART_Receive_IT+0xa8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d01f      	beq.n	8006aca <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d018      	beq.n	8006aca <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	623b      	str	r3, [r7, #32]
 8006ab8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	69f9      	ldr	r1, [r7, #28]
 8006abc:	6a3a      	ldr	r2, [r7, #32]
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e6      	bne.n	8006a98 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	461a      	mov	r2, r3
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 ffc3 	bl	8007a5c <UART_Start_Receive_IT>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	e000      	b.n	8006adc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006ada:	2302      	movs	r3, #2
  }
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3728      	adds	r7, #40	; 0x28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40008000 	.word	0x40008000

08006ae8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b0ba      	sub	sp, #232	; 0xe8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b12:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b16:	4013      	ands	r3, r2
 8006b18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d11b      	bne.n	8006b5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d015      	beq.n	8006b5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b34:	f003 0320 	and.w	r3, r3, #32
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d105      	bne.n	8006b48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d009      	beq.n	8006b5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 82d6 	beq.w	80070fe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
      }
      return;
 8006b5a:	e2d0      	b.n	80070fe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 811f 	beq.w	8006da4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b6a:	4b8b      	ldr	r3, [pc, #556]	; (8006d98 <HAL_UART_IRQHandler+0x2b0>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b76:	4b89      	ldr	r3, [pc, #548]	; (8006d9c <HAL_UART_IRQHandler+0x2b4>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 8112 	beq.w	8006da4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d011      	beq.n	8006bb0 <HAL_UART_IRQHandler+0xc8>
 8006b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00b      	beq.n	8006bb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ba6:	f043 0201 	orr.w	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d011      	beq.n	8006be0 <HAL_UART_IRQHandler+0xf8>
 8006bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd6:	f043 0204 	orr.w	r2, r3, #4
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d011      	beq.n	8006c10 <HAL_UART_IRQHandler+0x128>
 8006bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c06:	f043 0202 	orr.w	r2, r3, #2
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d017      	beq.n	8006c4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d105      	bne.n	8006c34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006c28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c2c:	4b5a      	ldr	r3, [pc, #360]	; (8006d98 <HAL_UART_IRQHandler+0x2b0>)
 8006c2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00b      	beq.n	8006c4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2208      	movs	r2, #8
 8006c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c42:	f043 0208 	orr.w	r2, r3, #8
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d012      	beq.n	8006c7e <HAL_UART_IRQHandler+0x196>
 8006c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00c      	beq.n	8006c7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c74:	f043 0220 	orr.w	r2, r3, #32
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 823c 	beq.w	8007102 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d013      	beq.n	8006cbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d105      	bne.n	8006cae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd2:	2b40      	cmp	r3, #64	; 0x40
 8006cd4:	d005      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d04f      	beq.n	8006d82 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 ffe4 	bl	8007cb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf2:	2b40      	cmp	r3, #64	; 0x40
 8006cf4:	d141      	bne.n	8006d7a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3308      	adds	r3, #8
 8006cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1d9      	bne.n	8006cf6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d013      	beq.n	8006d72 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d4e:	4a14      	ldr	r2, [pc, #80]	; (8006da0 <HAL_UART_IRQHandler+0x2b8>)
 8006d50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fc fc86 	bl	8003668 <HAL_DMA_Abort_IT>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d017      	beq.n	8006d92 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d70:	e00f      	b.n	8006d92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f9da 	bl	800712c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d78:	e00b      	b.n	8006d92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f9d6 	bl	800712c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d80:	e007      	b.n	8006d92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f9d2 	bl	800712c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006d90:	e1b7      	b.n	8007102 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d92:	bf00      	nop
    return;
 8006d94:	e1b5      	b.n	8007102 <HAL_UART_IRQHandler+0x61a>
 8006d96:	bf00      	nop
 8006d98:	10000001 	.word	0x10000001
 8006d9c:	04000120 	.word	0x04000120
 8006da0:	08007d7d 	.word	0x08007d7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	f040 814a 	bne.w	8007042 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db2:	f003 0310 	and.w	r3, r3, #16
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 8143 	beq.w	8007042 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc0:	f003 0310 	and.w	r3, r3, #16
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 813c 	beq.w	8007042 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2210      	movs	r2, #16
 8006dd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ddc:	2b40      	cmp	r3, #64	; 0x40
 8006dde:	f040 80b5 	bne.w	8006f4c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006dee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 8187 	beq.w	8007106 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e02:	429a      	cmp	r2, r3
 8006e04:	f080 817f 	bcs.w	8007106 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f040 8086 	bne.w	8006f30 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e5e:	e841 2300 	strex	r3, r2, [r1]
 8006e62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1da      	bne.n	8006e24 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3308      	adds	r3, #8
 8006e74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e80:	f023 0301 	bic.w	r3, r3, #1
 8006e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e1      	bne.n	8006e6e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3308      	adds	r3, #8
 8006eb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ece:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ed0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ed4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e3      	bne.n	8006eaa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f00:	f023 0310 	bic.w	r3, r3, #16
 8006f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f12:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e4      	bne.n	8006ef0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fc fb43 	bl	80035b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f8fb 	bl	8007140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f4a:	e0dc      	b.n	8007106 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80ce 	beq.w	800710a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006f6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 80c9 	beq.w	800710a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e4      	bne.n	8006f78 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fc4:	f023 0301 	bic.w	r3, r3, #1
 8006fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fd6:	633a      	str	r2, [r7, #48]	; 0x30
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e1      	bne.n	8006fae <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	60fb      	str	r3, [r7, #12]
   return(result);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0310 	bic.w	r3, r3, #16
 8007012:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007020:	61fb      	str	r3, [r7, #28]
 8007022:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007024:	69b9      	ldr	r1, [r7, #24]
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	e841 2300 	strex	r3, r2, [r1]
 800702c:	617b      	str	r3, [r7, #20]
   return(result);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e4      	bne.n	8006ffe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f880 	bl	8007140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007040:	e063      	b.n	800710a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00e      	beq.n	800706c <HAL_UART_IRQHandler+0x584>
 800704e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d008      	beq.n	800706c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007062:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 fb27 	bl	80086b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800706a:	e051      	b.n	8007110 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800706c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007074:	2b00      	cmp	r3, #0
 8007076:	d014      	beq.n	80070a2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800707c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007080:	2b00      	cmp	r3, #0
 8007082:	d105      	bne.n	8007090 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d008      	beq.n	80070a2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007094:	2b00      	cmp	r3, #0
 8007096:	d03a      	beq.n	800710e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	4798      	blx	r3
    }
    return;
 80070a0:	e035      	b.n	800710e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d009      	beq.n	80070c2 <HAL_UART_IRQHandler+0x5da>
 80070ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fe74 	bl	8007da8 <UART_EndTransmit_IT>
    return;
 80070c0:	e026      	b.n	8007110 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80070c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d009      	beq.n	80070e2 <HAL_UART_IRQHandler+0x5fa>
 80070ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 fb00 	bl	80086e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070e0:	e016      	b.n	8007110 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80070e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d010      	beq.n	8007110 <HAL_UART_IRQHandler+0x628>
 80070ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	da0c      	bge.n	8007110 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 fae8 	bl	80086cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070fc:	e008      	b.n	8007110 <HAL_UART_IRQHandler+0x628>
      return;
 80070fe:	bf00      	nop
 8007100:	e006      	b.n	8007110 <HAL_UART_IRQHandler+0x628>
    return;
 8007102:	bf00      	nop
 8007104:	e004      	b.n	8007110 <HAL_UART_IRQHandler+0x628>
      return;
 8007106:	bf00      	nop
 8007108:	e002      	b.n	8007110 <HAL_UART_IRQHandler+0x628>
      return;
 800710a:	bf00      	nop
 800710c:	e000      	b.n	8007110 <HAL_UART_IRQHandler+0x628>
    return;
 800710e:	bf00      	nop
  }
}
 8007110:	37e8      	adds	r7, #232	; 0xe8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop

08007118 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800715c:	b08c      	sub	sp, #48	; 0x30
 800715e:	af00      	add	r7, sp, #0
 8007160:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	431a      	orrs	r2, r3
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	431a      	orrs	r2, r3
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	4313      	orrs	r3, r2
 800717e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	4bab      	ldr	r3, [pc, #684]	; (8007434 <UART_SetConfig+0x2dc>)
 8007188:	4013      	ands	r3, r2
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	6812      	ldr	r2, [r2, #0]
 800718e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007190:	430b      	orrs	r3, r1
 8007192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4aa0      	ldr	r2, [pc, #640]	; (8007438 <UART_SetConfig+0x2e0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d004      	beq.n	80071c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071c0:	4313      	orrs	r3, r2
 80071c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80071ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	6812      	ldr	r2, [r2, #0]
 80071d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071d8:	430b      	orrs	r3, r1
 80071da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e2:	f023 010f 	bic.w	r1, r3, #15
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a91      	ldr	r2, [pc, #580]	; (800743c <UART_SetConfig+0x2e4>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d125      	bne.n	8007248 <UART_SetConfig+0xf0>
 80071fc:	4b90      	ldr	r3, [pc, #576]	; (8007440 <UART_SetConfig+0x2e8>)
 80071fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	2b03      	cmp	r3, #3
 8007208:	d81a      	bhi.n	8007240 <UART_SetConfig+0xe8>
 800720a:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <UART_SetConfig+0xb8>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007221 	.word	0x08007221
 8007214:	08007231 	.word	0x08007231
 8007218:	08007229 	.word	0x08007229
 800721c:	08007239 	.word	0x08007239
 8007220:	2301      	movs	r3, #1
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007226:	e0d6      	b.n	80073d6 <UART_SetConfig+0x27e>
 8007228:	2302      	movs	r3, #2
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800722e:	e0d2      	b.n	80073d6 <UART_SetConfig+0x27e>
 8007230:	2304      	movs	r3, #4
 8007232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007236:	e0ce      	b.n	80073d6 <UART_SetConfig+0x27e>
 8007238:	2308      	movs	r3, #8
 800723a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800723e:	e0ca      	b.n	80073d6 <UART_SetConfig+0x27e>
 8007240:	2310      	movs	r3, #16
 8007242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007246:	e0c6      	b.n	80073d6 <UART_SetConfig+0x27e>
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a7d      	ldr	r2, [pc, #500]	; (8007444 <UART_SetConfig+0x2ec>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d138      	bne.n	80072c4 <UART_SetConfig+0x16c>
 8007252:	4b7b      	ldr	r3, [pc, #492]	; (8007440 <UART_SetConfig+0x2e8>)
 8007254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007258:	f003 030c 	and.w	r3, r3, #12
 800725c:	2b0c      	cmp	r3, #12
 800725e:	d82d      	bhi.n	80072bc <UART_SetConfig+0x164>
 8007260:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <UART_SetConfig+0x110>)
 8007262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007266:	bf00      	nop
 8007268:	0800729d 	.word	0x0800729d
 800726c:	080072bd 	.word	0x080072bd
 8007270:	080072bd 	.word	0x080072bd
 8007274:	080072bd 	.word	0x080072bd
 8007278:	080072ad 	.word	0x080072ad
 800727c:	080072bd 	.word	0x080072bd
 8007280:	080072bd 	.word	0x080072bd
 8007284:	080072bd 	.word	0x080072bd
 8007288:	080072a5 	.word	0x080072a5
 800728c:	080072bd 	.word	0x080072bd
 8007290:	080072bd 	.word	0x080072bd
 8007294:	080072bd 	.word	0x080072bd
 8007298:	080072b5 	.word	0x080072b5
 800729c:	2300      	movs	r3, #0
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072a2:	e098      	b.n	80073d6 <UART_SetConfig+0x27e>
 80072a4:	2302      	movs	r3, #2
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072aa:	e094      	b.n	80073d6 <UART_SetConfig+0x27e>
 80072ac:	2304      	movs	r3, #4
 80072ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072b2:	e090      	b.n	80073d6 <UART_SetConfig+0x27e>
 80072b4:	2308      	movs	r3, #8
 80072b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ba:	e08c      	b.n	80073d6 <UART_SetConfig+0x27e>
 80072bc:	2310      	movs	r3, #16
 80072be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c2:	e088      	b.n	80073d6 <UART_SetConfig+0x27e>
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a5f      	ldr	r2, [pc, #380]	; (8007448 <UART_SetConfig+0x2f0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d125      	bne.n	800731a <UART_SetConfig+0x1c2>
 80072ce:	4b5c      	ldr	r3, [pc, #368]	; (8007440 <UART_SetConfig+0x2e8>)
 80072d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072d8:	2b30      	cmp	r3, #48	; 0x30
 80072da:	d016      	beq.n	800730a <UART_SetConfig+0x1b2>
 80072dc:	2b30      	cmp	r3, #48	; 0x30
 80072de:	d818      	bhi.n	8007312 <UART_SetConfig+0x1ba>
 80072e0:	2b20      	cmp	r3, #32
 80072e2:	d00a      	beq.n	80072fa <UART_SetConfig+0x1a2>
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	d814      	bhi.n	8007312 <UART_SetConfig+0x1ba>
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <UART_SetConfig+0x19a>
 80072ec:	2b10      	cmp	r3, #16
 80072ee:	d008      	beq.n	8007302 <UART_SetConfig+0x1aa>
 80072f0:	e00f      	b.n	8007312 <UART_SetConfig+0x1ba>
 80072f2:	2300      	movs	r3, #0
 80072f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f8:	e06d      	b.n	80073d6 <UART_SetConfig+0x27e>
 80072fa:	2302      	movs	r3, #2
 80072fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007300:	e069      	b.n	80073d6 <UART_SetConfig+0x27e>
 8007302:	2304      	movs	r3, #4
 8007304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007308:	e065      	b.n	80073d6 <UART_SetConfig+0x27e>
 800730a:	2308      	movs	r3, #8
 800730c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007310:	e061      	b.n	80073d6 <UART_SetConfig+0x27e>
 8007312:	2310      	movs	r3, #16
 8007314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007318:	e05d      	b.n	80073d6 <UART_SetConfig+0x27e>
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a4b      	ldr	r2, [pc, #300]	; (800744c <UART_SetConfig+0x2f4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d125      	bne.n	8007370 <UART_SetConfig+0x218>
 8007324:	4b46      	ldr	r3, [pc, #280]	; (8007440 <UART_SetConfig+0x2e8>)
 8007326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800732a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800732e:	2bc0      	cmp	r3, #192	; 0xc0
 8007330:	d016      	beq.n	8007360 <UART_SetConfig+0x208>
 8007332:	2bc0      	cmp	r3, #192	; 0xc0
 8007334:	d818      	bhi.n	8007368 <UART_SetConfig+0x210>
 8007336:	2b80      	cmp	r3, #128	; 0x80
 8007338:	d00a      	beq.n	8007350 <UART_SetConfig+0x1f8>
 800733a:	2b80      	cmp	r3, #128	; 0x80
 800733c:	d814      	bhi.n	8007368 <UART_SetConfig+0x210>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <UART_SetConfig+0x1f0>
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d008      	beq.n	8007358 <UART_SetConfig+0x200>
 8007346:	e00f      	b.n	8007368 <UART_SetConfig+0x210>
 8007348:	2300      	movs	r3, #0
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800734e:	e042      	b.n	80073d6 <UART_SetConfig+0x27e>
 8007350:	2302      	movs	r3, #2
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007356:	e03e      	b.n	80073d6 <UART_SetConfig+0x27e>
 8007358:	2304      	movs	r3, #4
 800735a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800735e:	e03a      	b.n	80073d6 <UART_SetConfig+0x27e>
 8007360:	2308      	movs	r3, #8
 8007362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007366:	e036      	b.n	80073d6 <UART_SetConfig+0x27e>
 8007368:	2310      	movs	r3, #16
 800736a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800736e:	e032      	b.n	80073d6 <UART_SetConfig+0x27e>
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a30      	ldr	r2, [pc, #192]	; (8007438 <UART_SetConfig+0x2e0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d12a      	bne.n	80073d0 <UART_SetConfig+0x278>
 800737a:	4b31      	ldr	r3, [pc, #196]	; (8007440 <UART_SetConfig+0x2e8>)
 800737c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007380:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007388:	d01a      	beq.n	80073c0 <UART_SetConfig+0x268>
 800738a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800738e:	d81b      	bhi.n	80073c8 <UART_SetConfig+0x270>
 8007390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007394:	d00c      	beq.n	80073b0 <UART_SetConfig+0x258>
 8007396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800739a:	d815      	bhi.n	80073c8 <UART_SetConfig+0x270>
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <UART_SetConfig+0x250>
 80073a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073a4:	d008      	beq.n	80073b8 <UART_SetConfig+0x260>
 80073a6:	e00f      	b.n	80073c8 <UART_SetConfig+0x270>
 80073a8:	2300      	movs	r3, #0
 80073aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ae:	e012      	b.n	80073d6 <UART_SetConfig+0x27e>
 80073b0:	2302      	movs	r3, #2
 80073b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b6:	e00e      	b.n	80073d6 <UART_SetConfig+0x27e>
 80073b8:	2304      	movs	r3, #4
 80073ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073be:	e00a      	b.n	80073d6 <UART_SetConfig+0x27e>
 80073c0:	2308      	movs	r3, #8
 80073c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073c6:	e006      	b.n	80073d6 <UART_SetConfig+0x27e>
 80073c8:	2310      	movs	r3, #16
 80073ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ce:	e002      	b.n	80073d6 <UART_SetConfig+0x27e>
 80073d0:	2310      	movs	r3, #16
 80073d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a17      	ldr	r2, [pc, #92]	; (8007438 <UART_SetConfig+0x2e0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	f040 80a8 	bne.w	8007532 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073e6:	2b08      	cmp	r3, #8
 80073e8:	d834      	bhi.n	8007454 <UART_SetConfig+0x2fc>
 80073ea:	a201      	add	r2, pc, #4	; (adr r2, 80073f0 <UART_SetConfig+0x298>)
 80073ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f0:	08007415 	.word	0x08007415
 80073f4:	08007455 	.word	0x08007455
 80073f8:	0800741d 	.word	0x0800741d
 80073fc:	08007455 	.word	0x08007455
 8007400:	08007423 	.word	0x08007423
 8007404:	08007455 	.word	0x08007455
 8007408:	08007455 	.word	0x08007455
 800740c:	08007455 	.word	0x08007455
 8007410:	0800742b 	.word	0x0800742b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007414:	f7fd f9de 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8007418:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800741a:	e021      	b.n	8007460 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800741c:	4b0c      	ldr	r3, [pc, #48]	; (8007450 <UART_SetConfig+0x2f8>)
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007420:	e01e      	b.n	8007460 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007422:	f7fd f969 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 8007426:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007428:	e01a      	b.n	8007460 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800742a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800742e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007430:	e016      	b.n	8007460 <UART_SetConfig+0x308>
 8007432:	bf00      	nop
 8007434:	cfff69f3 	.word	0xcfff69f3
 8007438:	40008000 	.word	0x40008000
 800743c:	40013800 	.word	0x40013800
 8007440:	40021000 	.word	0x40021000
 8007444:	40004400 	.word	0x40004400
 8007448:	40004800 	.word	0x40004800
 800744c:	40004c00 	.word	0x40004c00
 8007450:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800745e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 812a 	beq.w	80076bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	4a9e      	ldr	r2, [pc, #632]	; (80076e8 <UART_SetConfig+0x590>)
 800746e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007472:	461a      	mov	r2, r3
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	fbb3 f3f2 	udiv	r3, r3, r2
 800747a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	4413      	add	r3, r2
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	429a      	cmp	r2, r3
 800748a:	d305      	bcc.n	8007498 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	429a      	cmp	r2, r3
 8007496:	d903      	bls.n	80074a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800749e:	e10d      	b.n	80076bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	2200      	movs	r2, #0
 80074a4:	60bb      	str	r3, [r7, #8]
 80074a6:	60fa      	str	r2, [r7, #12]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	4a8e      	ldr	r2, [pc, #568]	; (80076e8 <UART_SetConfig+0x590>)
 80074ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2200      	movs	r2, #0
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	607a      	str	r2, [r7, #4]
 80074ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074c2:	f7f9 f8c9 	bl	8000658 <__aeabi_uldivmod>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	4610      	mov	r0, r2
 80074cc:	4619      	mov	r1, r3
 80074ce:	f04f 0200 	mov.w	r2, #0
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	020b      	lsls	r3, r1, #8
 80074d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074dc:	0202      	lsls	r2, r0, #8
 80074de:	6979      	ldr	r1, [r7, #20]
 80074e0:	6849      	ldr	r1, [r1, #4]
 80074e2:	0849      	lsrs	r1, r1, #1
 80074e4:	2000      	movs	r0, #0
 80074e6:	460c      	mov	r4, r1
 80074e8:	4605      	mov	r5, r0
 80074ea:	eb12 0804 	adds.w	r8, r2, r4
 80074ee:	eb43 0905 	adc.w	r9, r3, r5
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	469a      	mov	sl, r3
 80074fa:	4693      	mov	fp, r2
 80074fc:	4652      	mov	r2, sl
 80074fe:	465b      	mov	r3, fp
 8007500:	4640      	mov	r0, r8
 8007502:	4649      	mov	r1, r9
 8007504:	f7f9 f8a8 	bl	8000658 <__aeabi_uldivmod>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4613      	mov	r3, r2
 800750e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007516:	d308      	bcc.n	800752a <UART_SetConfig+0x3d2>
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800751e:	d204      	bcs.n	800752a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6a3a      	ldr	r2, [r7, #32]
 8007526:	60da      	str	r2, [r3, #12]
 8007528:	e0c8      	b.n	80076bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007530:	e0c4      	b.n	80076bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800753a:	d167      	bne.n	800760c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800753c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007540:	2b08      	cmp	r3, #8
 8007542:	d828      	bhi.n	8007596 <UART_SetConfig+0x43e>
 8007544:	a201      	add	r2, pc, #4	; (adr r2, 800754c <UART_SetConfig+0x3f4>)
 8007546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754a:	bf00      	nop
 800754c:	08007571 	.word	0x08007571
 8007550:	08007579 	.word	0x08007579
 8007554:	08007581 	.word	0x08007581
 8007558:	08007597 	.word	0x08007597
 800755c:	08007587 	.word	0x08007587
 8007560:	08007597 	.word	0x08007597
 8007564:	08007597 	.word	0x08007597
 8007568:	08007597 	.word	0x08007597
 800756c:	0800758f 	.word	0x0800758f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007570:	f7fd f930 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8007574:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007576:	e014      	b.n	80075a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007578:	f7fd f942 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 800757c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800757e:	e010      	b.n	80075a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007580:	4b5a      	ldr	r3, [pc, #360]	; (80076ec <UART_SetConfig+0x594>)
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007584:	e00d      	b.n	80075a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007586:	f7fd f8b7 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 800758a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800758c:	e009      	b.n	80075a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800758e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007594:	e005      	b.n	80075a2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 8089 	beq.w	80076bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	4a4e      	ldr	r2, [pc, #312]	; (80076e8 <UART_SetConfig+0x590>)
 80075b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075b4:	461a      	mov	r2, r3
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075bc:	005a      	lsls	r2, r3, #1
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	085b      	lsrs	r3, r3, #1
 80075c4:	441a      	add	r2, r3
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	2b0f      	cmp	r3, #15
 80075d4:	d916      	bls.n	8007604 <UART_SetConfig+0x4ac>
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075dc:	d212      	bcs.n	8007604 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f023 030f 	bic.w	r3, r3, #15
 80075e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	085b      	lsrs	r3, r3, #1
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f003 0307 	and.w	r3, r3, #7
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	8bfb      	ldrh	r3, [r7, #30]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	8bfa      	ldrh	r2, [r7, #30]
 8007600:	60da      	str	r2, [r3, #12]
 8007602:	e05b      	b.n	80076bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800760a:	e057      	b.n	80076bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800760c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007610:	2b08      	cmp	r3, #8
 8007612:	d828      	bhi.n	8007666 <UART_SetConfig+0x50e>
 8007614:	a201      	add	r2, pc, #4	; (adr r2, 800761c <UART_SetConfig+0x4c4>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	08007641 	.word	0x08007641
 8007620:	08007649 	.word	0x08007649
 8007624:	08007651 	.word	0x08007651
 8007628:	08007667 	.word	0x08007667
 800762c:	08007657 	.word	0x08007657
 8007630:	08007667 	.word	0x08007667
 8007634:	08007667 	.word	0x08007667
 8007638:	08007667 	.word	0x08007667
 800763c:	0800765f 	.word	0x0800765f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007640:	f7fd f8c8 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8007644:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007646:	e014      	b.n	8007672 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007648:	f7fd f8da 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 800764c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800764e:	e010      	b.n	8007672 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007650:	4b26      	ldr	r3, [pc, #152]	; (80076ec <UART_SetConfig+0x594>)
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007654:	e00d      	b.n	8007672 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007656:	f7fd f84f 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 800765a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800765c:	e009      	b.n	8007672 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800765e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007664:	e005      	b.n	8007672 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007670:	bf00      	nop
    }

    if (pclk != 0U)
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	2b00      	cmp	r3, #0
 8007676:	d021      	beq.n	80076bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	4a1a      	ldr	r2, [pc, #104]	; (80076e8 <UART_SetConfig+0x590>)
 800767e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007682:	461a      	mov	r2, r3
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	fbb3 f2f2 	udiv	r2, r3, r2
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	085b      	lsrs	r3, r3, #1
 8007690:	441a      	add	r2, r3
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	fbb2 f3f3 	udiv	r3, r2, r3
 800769a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	2b0f      	cmp	r3, #15
 80076a0:	d909      	bls.n	80076b6 <UART_SetConfig+0x55e>
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a8:	d205      	bcs.n	80076b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60da      	str	r2, [r3, #12]
 80076b4:	e002      	b.n	80076bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2201      	movs	r2, #1
 80076c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2200      	movs	r2, #0
 80076d0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2200      	movs	r2, #0
 80076d6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80076d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3730      	adds	r7, #48	; 0x30
 80076e0:	46bd      	mov	sp, r7
 80076e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076e6:	bf00      	nop
 80076e8:	08009f88 	.word	0x08009f88
 80076ec:	00f42400 	.word	0x00f42400

080076f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00a      	beq.n	800771a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00a      	beq.n	800775e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	f003 0310 	and.w	r3, r3, #16
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00a      	beq.n	80077a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	f003 0320 	and.w	r3, r3, #32
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d01a      	beq.n	8007806 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077ee:	d10a      	bne.n	8007806 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00a      	beq.n	8007828 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	605a      	str	r2, [r3, #4]
  }
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af02      	add	r7, sp, #8
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007844:	f7fa f94e 	bl	8001ae4 <HAL_GetTick>
 8007848:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0308 	and.w	r3, r3, #8
 8007854:	2b08      	cmp	r3, #8
 8007856:	d10e      	bne.n	8007876 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f82f 	bl	80078ca <UART_WaitOnFlagUntilTimeout>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e025      	b.n	80078c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b04      	cmp	r3, #4
 8007882:	d10e      	bne.n	80078a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f819 	bl	80078ca <UART_WaitOnFlagUntilTimeout>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e00f      	b.n	80078c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b09c      	sub	sp, #112	; 0x70
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	60b9      	str	r1, [r7, #8]
 80078d4:	603b      	str	r3, [r7, #0]
 80078d6:	4613      	mov	r3, r2
 80078d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078da:	e0a9      	b.n	8007a30 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e2:	f000 80a5 	beq.w	8007a30 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078e6:	f7fa f8fd 	bl	8001ae4 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d302      	bcc.n	80078fc <UART_WaitOnFlagUntilTimeout+0x32>
 80078f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d140      	bne.n	800797e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800790a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800790c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007910:	667b      	str	r3, [r7, #100]	; 0x64
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	461a      	mov	r2, r3
 8007918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800791a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800791c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007920:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e6      	bne.n	80078fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3308      	adds	r3, #8
 8007934:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800793e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007940:	f023 0301 	bic.w	r3, r3, #1
 8007944:	663b      	str	r3, [r7, #96]	; 0x60
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3308      	adds	r3, #8
 800794c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800794e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007950:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007952:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007956:	e841 2300 	strex	r3, r2, [r1]
 800795a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800795c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1e5      	bne.n	800792e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2220      	movs	r2, #32
 8007966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2220      	movs	r2, #32
 800796e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e069      	b.n	8007a52 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	d051      	beq.n	8007a30 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800799a:	d149      	bne.n	8007a30 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
 80079c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e6      	bne.n	80079a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	613b      	str	r3, [r7, #16]
   return(result);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f023 0301 	bic.w	r3, r3, #1
 80079ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3308      	adds	r3, #8
 80079f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079f8:	623a      	str	r2, [r7, #32]
 80079fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	69f9      	ldr	r1, [r7, #28]
 80079fe:	6a3a      	ldr	r2, [r7, #32]
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e5      	bne.n	80079d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e010      	b.n	8007a52 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	69da      	ldr	r2, [r3, #28]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	bf0c      	ite	eq
 8007a40:	2301      	moveq	r3, #1
 8007a42:	2300      	movne	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	461a      	mov	r2, r3
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	f43f af46 	beq.w	80078dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3770      	adds	r7, #112	; 0x70
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b0a3      	sub	sp, #140	; 0x8c
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	88fa      	ldrh	r2, [r7, #6]
 8007a74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	88fa      	ldrh	r2, [r7, #6]
 8007a7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8e:	d10e      	bne.n	8007aae <UART_Start_Receive_IT+0x52>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d105      	bne.n	8007aa4 <UART_Start_Receive_IT+0x48>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007aa2:	e02d      	b.n	8007b00 <UART_Start_Receive_IT+0xa4>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	22ff      	movs	r2, #255	; 0xff
 8007aa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007aac:	e028      	b.n	8007b00 <UART_Start_Receive_IT+0xa4>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10d      	bne.n	8007ad2 <UART_Start_Receive_IT+0x76>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d104      	bne.n	8007ac8 <UART_Start_Receive_IT+0x6c>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	22ff      	movs	r2, #255	; 0xff
 8007ac2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ac6:	e01b      	b.n	8007b00 <UART_Start_Receive_IT+0xa4>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	227f      	movs	r2, #127	; 0x7f
 8007acc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ad0:	e016      	b.n	8007b00 <UART_Start_Receive_IT+0xa4>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ada:	d10d      	bne.n	8007af8 <UART_Start_Receive_IT+0x9c>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d104      	bne.n	8007aee <UART_Start_Receive_IT+0x92>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	227f      	movs	r2, #127	; 0x7f
 8007ae8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007aec:	e008      	b.n	8007b00 <UART_Start_Receive_IT+0xa4>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	223f      	movs	r2, #63	; 0x3f
 8007af2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007af6:	e003      	b.n	8007b00 <UART_Start_Receive_IT+0xa4>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2222      	movs	r2, #34	; 0x22
 8007b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3308      	adds	r3, #8
 8007b16:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b1a:	e853 3f00 	ldrex	r3, [r3]
 8007b1e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007b20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b22:	f043 0301 	orr.w	r3, r3, #1
 8007b26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3308      	adds	r3, #8
 8007b30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007b34:	673a      	str	r2, [r7, #112]	; 0x70
 8007b36:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007b3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b3c:	e841 2300 	strex	r3, r2, [r1]
 8007b40:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e3      	bne.n	8007b10 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b50:	d153      	bne.n	8007bfa <UART_Start_Receive_IT+0x19e>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007b58:	88fa      	ldrh	r2, [r7, #6]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d34d      	bcc.n	8007bfa <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b66:	d107      	bne.n	8007b78 <UART_Start_Receive_IT+0x11c>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4a4b      	ldr	r2, [pc, #300]	; (8007ca0 <UART_Start_Receive_IT+0x244>)
 8007b74:	671a      	str	r2, [r3, #112]	; 0x70
 8007b76:	e002      	b.n	8007b7e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4a4a      	ldr	r2, [pc, #296]	; (8007ca4 <UART_Start_Receive_IT+0x248>)
 8007b7c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d01a      	beq.n	8007bc4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bb2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e4      	bne.n	8007b8e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3308      	adds	r3, #8
 8007bca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bce:	e853 3f00 	ldrex	r3, [r3]
 8007bd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3308      	adds	r3, #8
 8007be2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007be4:	64ba      	str	r2, [r7, #72]	; 0x48
 8007be6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e5      	bne.n	8007bc4 <UART_Start_Receive_IT+0x168>
 8007bf8:	e04a      	b.n	8007c90 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c02:	d107      	bne.n	8007c14 <UART_Start_Receive_IT+0x1b8>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d103      	bne.n	8007c14 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4a26      	ldr	r2, [pc, #152]	; (8007ca8 <UART_Start_Receive_IT+0x24c>)
 8007c10:	671a      	str	r2, [r3, #112]	; 0x70
 8007c12:	e002      	b.n	8007c1a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4a25      	ldr	r2, [pc, #148]	; (8007cac <UART_Start_Receive_IT+0x250>)
 8007c18:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d019      	beq.n	8007c5e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007c3e:	677b      	str	r3, [r7, #116]	; 0x74
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e6      	bne.n	8007c2a <UART_Start_Receive_IT+0x1ce>
 8007c5c:	e018      	b.n	8007c90 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f043 0320 	orr.w	r3, r3, #32
 8007c72:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c7c:	623b      	str	r3, [r7, #32]
 8007c7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	69f9      	ldr	r1, [r7, #28]
 8007c82:	6a3a      	ldr	r2, [r7, #32]
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e6      	bne.n	8007c5e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	378c      	adds	r7, #140	; 0x8c
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	080083b9 	.word	0x080083b9
 8007ca4:	080080c1 	.word	0x080080c1
 8007ca8:	08007f5f 	.word	0x08007f5f
 8007cac:	08007dff 	.word	0x08007dff

08007cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b095      	sub	sp, #84	; 0x54
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8007cd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e6      	bne.n	8007cb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d00:	f023 0301 	bic.w	r3, r3, #1
 8007d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e3      	bne.n	8007cea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d118      	bne.n	8007d5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f023 0310 	bic.w	r3, r3, #16
 8007d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	6979      	ldr	r1, [r7, #20]
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	613b      	str	r3, [r7, #16]
   return(result);
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e6      	bne.n	8007d2a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007d70:	bf00      	nop
 8007d72:	3754      	adds	r7, #84	; 0x54
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f7ff f9c6 	bl	800712c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc4:	61fb      	str	r3, [r7, #28]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	61bb      	str	r3, [r7, #24]
 8007dd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6979      	ldr	r1, [r7, #20]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	613b      	str	r3, [r7, #16]
   return(result);
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e6      	bne.n	8007db0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff f991 	bl	8007118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007df6:	bf00      	nop
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b096      	sub	sp, #88	; 0x58
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e16:	2b22      	cmp	r3, #34	; 0x22
 8007e18:	f040 8095 	bne.w	8007f46 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e26:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007e2a:	b2d9      	uxtb	r1, r3
 8007e2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e36:	400a      	ands	r2, r1
 8007e38:	b2d2      	uxtb	r2, r2
 8007e3a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d178      	bne.n	8007f56 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6c:	e853 3f00 	ldrex	r3, [r3]
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e78:	653b      	str	r3, [r7, #80]	; 0x50
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e82:	647b      	str	r3, [r7, #68]	; 0x44
 8007e84:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e6      	bne.n	8007e64 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3308      	adds	r3, #8
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	f023 0301 	bic.w	r3, r3, #1
 8007eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8007eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e5      	bne.n	8007e96 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d12e      	bne.n	8007f3e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	e853 3f00 	ldrex	r3, [r3]
 8007ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f023 0310 	bic.w	r3, r3, #16
 8007efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f04:	61fb      	str	r3, [r7, #28]
 8007f06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	69b9      	ldr	r1, [r7, #24]
 8007f0a:	69fa      	ldr	r2, [r7, #28]
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	617b      	str	r3, [r7, #20]
   return(result);
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e6      	bne.n	8007ee6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	f003 0310 	and.w	r3, r3, #16
 8007f22:	2b10      	cmp	r3, #16
 8007f24:	d103      	bne.n	8007f2e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2210      	movs	r2, #16
 8007f2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7ff f902 	bl	8007140 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f3c:	e00b      	b.n	8007f56 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7f9 fa3a 	bl	80013b8 <HAL_UART_RxCpltCallback>
}
 8007f44:	e007      	b.n	8007f56 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	699a      	ldr	r2, [r3, #24]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f042 0208 	orr.w	r2, r2, #8
 8007f54:	619a      	str	r2, [r3, #24]
}
 8007f56:	bf00      	nop
 8007f58:	3758      	adds	r7, #88	; 0x58
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b096      	sub	sp, #88	; 0x58
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f76:	2b22      	cmp	r3, #34	; 0x22
 8007f78:	f040 8095 	bne.w	80080a6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f8c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007f90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f94:	4013      	ands	r3, r2
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f9a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa0:	1c9a      	adds	r2, r3, #2
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d178      	bne.n	80080b6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8007fe4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e6      	bne.n	8007fc4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	61fb      	str	r3, [r7, #28]
   return(result);
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	f023 0301 	bic.w	r3, r3, #1
 800800c:	64bb      	str	r3, [r7, #72]	; 0x48
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3308      	adds	r3, #8
 8008014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008016:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008018:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800801c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800801e:	e841 2300 	strex	r3, r2, [r1]
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1e5      	bne.n	8007ff6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2220      	movs	r2, #32
 800802e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800803c:	2b01      	cmp	r3, #1
 800803e:	d12e      	bne.n	800809e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	60bb      	str	r3, [r7, #8]
   return(result);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f023 0310 	bic.w	r3, r3, #16
 800805a:	647b      	str	r3, [r7, #68]	; 0x44
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	461a      	mov	r2, r3
 8008062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008064:	61bb      	str	r3, [r7, #24]
 8008066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008068:	6979      	ldr	r1, [r7, #20]
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	e841 2300 	strex	r3, r2, [r1]
 8008070:	613b      	str	r3, [r7, #16]
   return(result);
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e6      	bne.n	8008046 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	f003 0310 	and.w	r3, r3, #16
 8008082:	2b10      	cmp	r3, #16
 8008084:	d103      	bne.n	800808e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2210      	movs	r2, #16
 800808c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff f852 	bl	8007140 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800809c:	e00b      	b.n	80080b6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7f9 f98a 	bl	80013b8 <HAL_UART_RxCpltCallback>
}
 80080a4:	e007      	b.n	80080b6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	699a      	ldr	r2, [r3, #24]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f042 0208 	orr.w	r2, r2, #8
 80080b4:	619a      	str	r2, [r3, #24]
}
 80080b6:	bf00      	nop
 80080b8:	3758      	adds	r7, #88	; 0x58
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b0a6      	sub	sp, #152	; 0x98
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080ce:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f6:	2b22      	cmp	r3, #34	; 0x22
 80080f8:	f040 814f 	bne.w	800839a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008102:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008106:	e0f6      	b.n	80082f6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008112:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008116:	b2d9      	uxtb	r1, r3
 8008118:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800811c:	b2da      	uxtb	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008122:	400a      	ands	r2, r1
 8008124:	b2d2      	uxtb	r2, r2
 8008126:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008138:	b29b      	uxth	r3, r3
 800813a:	3b01      	subs	r3, #1
 800813c:	b29a      	uxth	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800814e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008152:	f003 0307 	and.w	r3, r3, #7
 8008156:	2b00      	cmp	r3, #0
 8008158:	d053      	beq.n	8008202 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800815a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	d011      	beq.n	800818a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800816a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00b      	beq.n	800818a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2201      	movs	r2, #1
 8008178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008180:	f043 0201 	orr.w	r2, r3, #1
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800818a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d011      	beq.n	80081ba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00b      	beq.n	80081ba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2202      	movs	r2, #2
 80081a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b0:	f043 0204 	orr.w	r2, r3, #4
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80081be:	f003 0304 	and.w	r3, r3, #4
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d011      	beq.n	80081ea <UART_RxISR_8BIT_FIFOEN+0x12a>
 80081c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00b      	beq.n	80081ea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2204      	movs	r2, #4
 80081d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e0:	f043 0202 	orr.w	r2, r3, #2
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d006      	beq.n	8008202 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7fe ff99 	bl	800712c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008208:	b29b      	uxth	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d173      	bne.n	80082f6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800821c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800821e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008222:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008230:	66bb      	str	r3, [r7, #104]	; 0x68
 8008232:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008234:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008236:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008238:	e841 2300 	strex	r3, r2, [r1]
 800823c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800823e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e4      	bne.n	800820e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3308      	adds	r3, #8
 800824a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800824e:	e853 3f00 	ldrex	r3, [r3]
 8008252:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800825a:	f023 0301 	bic.w	r3, r3, #1
 800825e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3308      	adds	r3, #8
 8008266:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008268:	657a      	str	r2, [r7, #84]	; 0x54
 800826a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800826e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008270:	e841 2300 	strex	r3, r2, [r1]
 8008274:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1e3      	bne.n	8008244 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2220      	movs	r2, #32
 8008280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800828e:	2b01      	cmp	r3, #1
 8008290:	d12e      	bne.n	80082f0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	f023 0310 	bic.w	r3, r3, #16
 80082ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082b6:	643b      	str	r3, [r7, #64]	; 0x40
 80082b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082be:	e841 2300 	strex	r3, r2, [r1]
 80082c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e6      	bne.n	8008298 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	f003 0310 	and.w	r3, r3, #16
 80082d4:	2b10      	cmp	r3, #16
 80082d6:	d103      	bne.n	80082e0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2210      	movs	r2, #16
 80082de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7fe ff29 	bl	8007140 <HAL_UARTEx_RxEventCallback>
 80082ee:	e002      	b.n	80082f6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7f9 f861 	bl	80013b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d006      	beq.n	800830c <UART_RxISR_8BIT_FIFOEN+0x24c>
 80082fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008302:	f003 0320 	and.w	r3, r3, #32
 8008306:	2b00      	cmp	r3, #0
 8008308:	f47f aefe 	bne.w	8008108 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008312:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008316:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800831a:	2b00      	cmp	r3, #0
 800831c:	d045      	beq.n	80083aa <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008324:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008328:	429a      	cmp	r2, r3
 800832a:	d23e      	bcs.n	80083aa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3308      	adds	r3, #8
 8008332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	e853 3f00 	ldrex	r3, [r3]
 800833a:	61fb      	str	r3, [r7, #28]
   return(result);
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008342:	673b      	str	r3, [r7, #112]	; 0x70
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3308      	adds	r3, #8
 800834a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800834c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800834e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008354:	e841 2300 	strex	r3, r2, [r1]
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e5      	bne.n	800832c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a14      	ldr	r2, [pc, #80]	; (80083b4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008364:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	e853 3f00 	ldrex	r3, [r3]
 8008372:	60bb      	str	r3, [r7, #8]
   return(result);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	f043 0320 	orr.w	r3, r3, #32
 800837a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	461a      	mov	r2, r3
 8008382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008384:	61bb      	str	r3, [r7, #24]
 8008386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008388:	6979      	ldr	r1, [r7, #20]
 800838a:	69ba      	ldr	r2, [r7, #24]
 800838c:	e841 2300 	strex	r3, r2, [r1]
 8008390:	613b      	str	r3, [r7, #16]
   return(result);
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e6      	bne.n	8008366 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008398:	e007      	b.n	80083aa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	699a      	ldr	r2, [r3, #24]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f042 0208 	orr.w	r2, r2, #8
 80083a8:	619a      	str	r2, [r3, #24]
}
 80083aa:	bf00      	nop
 80083ac:	3798      	adds	r7, #152	; 0x98
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	08007dff 	.word	0x08007dff

080083b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b0a8      	sub	sp, #160	; 0xa0
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083c6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ee:	2b22      	cmp	r3, #34	; 0x22
 80083f0:	f040 8153 	bne.w	800869a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80083fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083fe:	e0fa      	b.n	80085f6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008412:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008416:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800841a:	4013      	ands	r3, r2
 800841c:	b29a      	uxth	r2, r3
 800841e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008422:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008428:	1c9a      	adds	r2, r3, #2
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008434:	b29b      	uxth	r3, r3
 8008436:	3b01      	subs	r3, #1
 8008438:	b29a      	uxth	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800844a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800844e:	f003 0307 	and.w	r3, r3, #7
 8008452:	2b00      	cmp	r3, #0
 8008454:	d053      	beq.n	80084fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008456:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b00      	cmp	r3, #0
 8008460:	d011      	beq.n	8008486 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008462:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00b      	beq.n	8008486 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2201      	movs	r2, #1
 8008474:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800847c:	f043 0201 	orr.w	r2, r3, #1
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008486:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d011      	beq.n	80084b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008492:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00b      	beq.n	80084b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2202      	movs	r2, #2
 80084a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ac:	f043 0204 	orr.w	r2, r3, #4
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084ba:	f003 0304 	and.w	r3, r3, #4
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d011      	beq.n	80084e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80084c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00b      	beq.n	80084e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2204      	movs	r2, #4
 80084d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084dc:	f043 0202 	orr.w	r2, r3, #2
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d006      	beq.n	80084fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7fe fe1b 	bl	800712c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008504:	b29b      	uxth	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d175      	bne.n	80085f6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800851a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800851e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800852c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800852e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008532:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800853a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e4      	bne.n	800850a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3308      	adds	r3, #8
 8008546:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800854a:	e853 3f00 	ldrex	r3, [r3]
 800854e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008556:	f023 0301 	bic.w	r3, r3, #1
 800855a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3308      	adds	r3, #8
 8008564:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008568:	65ba      	str	r2, [r7, #88]	; 0x58
 800856a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800856e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e1      	bne.n	8008540 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2220      	movs	r2, #32
 8008580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800858e:	2b01      	cmp	r3, #1
 8008590:	d12e      	bne.n	80085f0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a8:	f023 0310 	bic.w	r3, r3, #16
 80085ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085b6:	647b      	str	r3, [r7, #68]	; 0x44
 80085b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e6      	bne.n	8008598 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	f003 0310 	and.w	r3, r3, #16
 80085d4:	2b10      	cmp	r3, #16
 80085d6:	d103      	bne.n	80085e0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2210      	movs	r2, #16
 80085de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7fe fda9 	bl	8007140 <HAL_UARTEx_RxEventCallback>
 80085ee:	e002      	b.n	80085f6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7f8 fee1 	bl	80013b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d006      	beq.n	800860c <UART_RxISR_16BIT_FIFOEN+0x254>
 80085fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008602:	f003 0320 	and.w	r3, r3, #32
 8008606:	2b00      	cmp	r3, #0
 8008608:	f47f aefa 	bne.w	8008400 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008612:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008616:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800861a:	2b00      	cmp	r3, #0
 800861c:	d045      	beq.n	80086aa <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008624:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008628:	429a      	cmp	r2, r3
 800862a:	d23e      	bcs.n	80086aa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3308      	adds	r3, #8
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	623b      	str	r3, [r7, #32]
   return(result);
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008642:	677b      	str	r3, [r7, #116]	; 0x74
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3308      	adds	r3, #8
 800864a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800864c:	633a      	str	r2, [r7, #48]	; 0x30
 800864e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e5      	bne.n	800862c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a14      	ldr	r2, [pc, #80]	; (80086b4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008664:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	60fb      	str	r3, [r7, #12]
   return(result);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f043 0320 	orr.w	r3, r3, #32
 800867a:	673b      	str	r3, [r7, #112]	; 0x70
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	461a      	mov	r2, r3
 8008682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008684:	61fb      	str	r3, [r7, #28]
 8008686:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	69b9      	ldr	r1, [r7, #24]
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	e841 2300 	strex	r3, r2, [r1]
 8008690:	617b      	str	r3, [r7, #20]
   return(result);
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e6      	bne.n	8008666 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008698:	e007      	b.n	80086aa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	699a      	ldr	r2, [r3, #24]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f042 0208 	orr.w	r2, r2, #8
 80086a8:	619a      	str	r2, [r3, #24]
}
 80086aa:	bf00      	nop
 80086ac:	37a0      	adds	r7, #160	; 0xa0
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	08007f5f 	.word	0x08007f5f

080086b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008702:	2b01      	cmp	r3, #1
 8008704:	d101      	bne.n	800870a <HAL_UARTEx_DisableFifoMode+0x16>
 8008706:	2302      	movs	r3, #2
 8008708:	e027      	b.n	800875a <HAL_UARTEx_DisableFifoMode+0x66>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2224      	movs	r2, #36	; 0x24
 8008716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0201 	bic.w	r2, r2, #1
 8008730:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008738:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2220      	movs	r2, #32
 800874c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008776:	2b01      	cmp	r3, #1
 8008778:	d101      	bne.n	800877e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800877a:	2302      	movs	r3, #2
 800877c:	e02d      	b.n	80087da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2224      	movs	r2, #36	; 0x24
 800878a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f022 0201 	bic.w	r2, r2, #1
 80087a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f850 	bl	8008860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087f6:	2302      	movs	r3, #2
 80087f8:	e02d      	b.n	8008856 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2224      	movs	r2, #36	; 0x24
 8008806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 0201 	bic.w	r2, r2, #1
 8008820:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f812 	bl	8008860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2220      	movs	r2, #32
 8008848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800886c:	2b00      	cmp	r3, #0
 800886e:	d108      	bne.n	8008882 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008880:	e031      	b.n	80088e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008882:	2308      	movs	r3, #8
 8008884:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008886:	2308      	movs	r3, #8
 8008888:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	0e5b      	lsrs	r3, r3, #25
 8008892:	b2db      	uxtb	r3, r3
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	0f5b      	lsrs	r3, r3, #29
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	f003 0307 	and.w	r3, r3, #7
 80088a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	7b3a      	ldrb	r2, [r7, #12]
 80088ae:	4911      	ldr	r1, [pc, #68]	; (80088f4 <UARTEx_SetNbDataToProcess+0x94>)
 80088b0:	5c8a      	ldrb	r2, [r1, r2]
 80088b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80088b6:	7b3a      	ldrb	r2, [r7, #12]
 80088b8:	490f      	ldr	r1, [pc, #60]	; (80088f8 <UARTEx_SetNbDataToProcess+0x98>)
 80088ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
 80088ca:	7b7a      	ldrb	r2, [r7, #13]
 80088cc:	4909      	ldr	r1, [pc, #36]	; (80088f4 <UARTEx_SetNbDataToProcess+0x94>)
 80088ce:	5c8a      	ldrb	r2, [r1, r2]
 80088d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80088d4:	7b7a      	ldrb	r2, [r7, #13]
 80088d6:	4908      	ldr	r1, [pc, #32]	; (80088f8 <UARTEx_SetNbDataToProcess+0x98>)
 80088d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088da:	fb93 f3f2 	sdiv	r3, r3, r2
 80088de:	b29a      	uxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80088e6:	bf00      	nop
 80088e8:	3714      	adds	r7, #20
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	08009fa0 	.word	0x08009fa0
 80088f8:	08009fa8 	.word	0x08009fa8

080088fc <atoi>:
 80088fc:	220a      	movs	r2, #10
 80088fe:	2100      	movs	r1, #0
 8008900:	f000 b930 	b.w	8008b64 <strtol>

08008904 <__errno>:
 8008904:	4b01      	ldr	r3, [pc, #4]	; (800890c <__errno+0x8>)
 8008906:	6818      	ldr	r0, [r3, #0]
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	200001ac 	.word	0x200001ac

08008910 <__libc_init_array>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	4d0d      	ldr	r5, [pc, #52]	; (8008948 <__libc_init_array+0x38>)
 8008914:	4c0d      	ldr	r4, [pc, #52]	; (800894c <__libc_init_array+0x3c>)
 8008916:	1b64      	subs	r4, r4, r5
 8008918:	10a4      	asrs	r4, r4, #2
 800891a:	2600      	movs	r6, #0
 800891c:	42a6      	cmp	r6, r4
 800891e:	d109      	bne.n	8008934 <__libc_init_array+0x24>
 8008920:	4d0b      	ldr	r5, [pc, #44]	; (8008950 <__libc_init_array+0x40>)
 8008922:	4c0c      	ldr	r4, [pc, #48]	; (8008954 <__libc_init_array+0x44>)
 8008924:	f001 fade 	bl	8009ee4 <_init>
 8008928:	1b64      	subs	r4, r4, r5
 800892a:	10a4      	asrs	r4, r4, #2
 800892c:	2600      	movs	r6, #0
 800892e:	42a6      	cmp	r6, r4
 8008930:	d105      	bne.n	800893e <__libc_init_array+0x2e>
 8008932:	bd70      	pop	{r4, r5, r6, pc}
 8008934:	f855 3b04 	ldr.w	r3, [r5], #4
 8008938:	4798      	blx	r3
 800893a:	3601      	adds	r6, #1
 800893c:	e7ee      	b.n	800891c <__libc_init_array+0xc>
 800893e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008942:	4798      	blx	r3
 8008944:	3601      	adds	r6, #1
 8008946:	e7f2      	b.n	800892e <__libc_init_array+0x1e>
 8008948:	0800a200 	.word	0x0800a200
 800894c:	0800a200 	.word	0x0800a200
 8008950:	0800a200 	.word	0x0800a200
 8008954:	0800a204 	.word	0x0800a204

08008958 <memset>:
 8008958:	4402      	add	r2, r0
 800895a:	4603      	mov	r3, r0
 800895c:	4293      	cmp	r3, r2
 800895e:	d100      	bne.n	8008962 <memset+0xa>
 8008960:	4770      	bx	lr
 8008962:	f803 1b01 	strb.w	r1, [r3], #1
 8008966:	e7f9      	b.n	800895c <memset+0x4>

08008968 <siprintf>:
 8008968:	b40e      	push	{r1, r2, r3}
 800896a:	b500      	push	{lr}
 800896c:	b09c      	sub	sp, #112	; 0x70
 800896e:	ab1d      	add	r3, sp, #116	; 0x74
 8008970:	9002      	str	r0, [sp, #8]
 8008972:	9006      	str	r0, [sp, #24]
 8008974:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008978:	4809      	ldr	r0, [pc, #36]	; (80089a0 <siprintf+0x38>)
 800897a:	9107      	str	r1, [sp, #28]
 800897c:	9104      	str	r1, [sp, #16]
 800897e:	4909      	ldr	r1, [pc, #36]	; (80089a4 <siprintf+0x3c>)
 8008980:	f853 2b04 	ldr.w	r2, [r3], #4
 8008984:	9105      	str	r1, [sp, #20]
 8008986:	6800      	ldr	r0, [r0, #0]
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	a902      	add	r1, sp, #8
 800898c:	f000 fa68 	bl	8008e60 <_svfiprintf_r>
 8008990:	9b02      	ldr	r3, [sp, #8]
 8008992:	2200      	movs	r2, #0
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	b01c      	add	sp, #112	; 0x70
 8008998:	f85d eb04 	ldr.w	lr, [sp], #4
 800899c:	b003      	add	sp, #12
 800899e:	4770      	bx	lr
 80089a0:	200001ac 	.word	0x200001ac
 80089a4:	ffff0208 	.word	0xffff0208

080089a8 <strtok>:
 80089a8:	4b16      	ldr	r3, [pc, #88]	; (8008a04 <strtok+0x5c>)
 80089aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089ac:	681e      	ldr	r6, [r3, #0]
 80089ae:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80089b0:	4605      	mov	r5, r0
 80089b2:	b9fc      	cbnz	r4, 80089f4 <strtok+0x4c>
 80089b4:	2050      	movs	r0, #80	; 0x50
 80089b6:	9101      	str	r1, [sp, #4]
 80089b8:	f000 f90e 	bl	8008bd8 <malloc>
 80089bc:	9901      	ldr	r1, [sp, #4]
 80089be:	65b0      	str	r0, [r6, #88]	; 0x58
 80089c0:	4602      	mov	r2, r0
 80089c2:	b920      	cbnz	r0, 80089ce <strtok+0x26>
 80089c4:	4b10      	ldr	r3, [pc, #64]	; (8008a08 <strtok+0x60>)
 80089c6:	4811      	ldr	r0, [pc, #68]	; (8008a0c <strtok+0x64>)
 80089c8:	2157      	movs	r1, #87	; 0x57
 80089ca:	f000 f8d5 	bl	8008b78 <__assert_func>
 80089ce:	e9c0 4400 	strd	r4, r4, [r0]
 80089d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80089d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80089da:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80089de:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80089e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80089e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80089ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80089ee:	6184      	str	r4, [r0, #24]
 80089f0:	7704      	strb	r4, [r0, #28]
 80089f2:	6244      	str	r4, [r0, #36]	; 0x24
 80089f4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80089f6:	2301      	movs	r3, #1
 80089f8:	4628      	mov	r0, r5
 80089fa:	b002      	add	sp, #8
 80089fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a00:	f000 b806 	b.w	8008a10 <__strtok_r>
 8008a04:	200001ac 	.word	0x200001ac
 8008a08:	08009fb4 	.word	0x08009fb4
 8008a0c:	08009fcb 	.word	0x08009fcb

08008a10 <__strtok_r>:
 8008a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a12:	b908      	cbnz	r0, 8008a18 <__strtok_r+0x8>
 8008a14:	6810      	ldr	r0, [r2, #0]
 8008a16:	b188      	cbz	r0, 8008a3c <__strtok_r+0x2c>
 8008a18:	4604      	mov	r4, r0
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008a20:	460f      	mov	r7, r1
 8008a22:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008a26:	b91e      	cbnz	r6, 8008a30 <__strtok_r+0x20>
 8008a28:	b965      	cbnz	r5, 8008a44 <__strtok_r+0x34>
 8008a2a:	6015      	str	r5, [r2, #0]
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	e005      	b.n	8008a3c <__strtok_r+0x2c>
 8008a30:	42b5      	cmp	r5, r6
 8008a32:	d1f6      	bne.n	8008a22 <__strtok_r+0x12>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1f0      	bne.n	8008a1a <__strtok_r+0xa>
 8008a38:	6014      	str	r4, [r2, #0]
 8008a3a:	7003      	strb	r3, [r0, #0]
 8008a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a3e:	461c      	mov	r4, r3
 8008a40:	e00c      	b.n	8008a5c <__strtok_r+0x4c>
 8008a42:	b915      	cbnz	r5, 8008a4a <__strtok_r+0x3a>
 8008a44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a48:	460e      	mov	r6, r1
 8008a4a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008a4e:	42ab      	cmp	r3, r5
 8008a50:	d1f7      	bne.n	8008a42 <__strtok_r+0x32>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0f3      	beq.n	8008a3e <__strtok_r+0x2e>
 8008a56:	2300      	movs	r3, #0
 8008a58:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008a5c:	6014      	str	r4, [r2, #0]
 8008a5e:	e7ed      	b.n	8008a3c <__strtok_r+0x2c>

08008a60 <_strtol_l.constprop.0>:
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a66:	d001      	beq.n	8008a6c <_strtol_l.constprop.0+0xc>
 8008a68:	2b24      	cmp	r3, #36	; 0x24
 8008a6a:	d906      	bls.n	8008a7a <_strtol_l.constprop.0+0x1a>
 8008a6c:	f7ff ff4a 	bl	8008904 <__errno>
 8008a70:	2316      	movs	r3, #22
 8008a72:	6003      	str	r3, [r0, #0]
 8008a74:	2000      	movs	r0, #0
 8008a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008b60 <_strtol_l.constprop.0+0x100>
 8008a7e:	460d      	mov	r5, r1
 8008a80:	462e      	mov	r6, r5
 8008a82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a86:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008a8a:	f017 0708 	ands.w	r7, r7, #8
 8008a8e:	d1f7      	bne.n	8008a80 <_strtol_l.constprop.0+0x20>
 8008a90:	2c2d      	cmp	r4, #45	; 0x2d
 8008a92:	d132      	bne.n	8008afa <_strtol_l.constprop.0+0x9a>
 8008a94:	782c      	ldrb	r4, [r5, #0]
 8008a96:	2701      	movs	r7, #1
 8008a98:	1cb5      	adds	r5, r6, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d05b      	beq.n	8008b56 <_strtol_l.constprop.0+0xf6>
 8008a9e:	2b10      	cmp	r3, #16
 8008aa0:	d109      	bne.n	8008ab6 <_strtol_l.constprop.0+0x56>
 8008aa2:	2c30      	cmp	r4, #48	; 0x30
 8008aa4:	d107      	bne.n	8008ab6 <_strtol_l.constprop.0+0x56>
 8008aa6:	782c      	ldrb	r4, [r5, #0]
 8008aa8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008aac:	2c58      	cmp	r4, #88	; 0x58
 8008aae:	d14d      	bne.n	8008b4c <_strtol_l.constprop.0+0xec>
 8008ab0:	786c      	ldrb	r4, [r5, #1]
 8008ab2:	2310      	movs	r3, #16
 8008ab4:	3502      	adds	r5, #2
 8008ab6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008aba:	f108 38ff 	add.w	r8, r8, #4294967295
 8008abe:	f04f 0c00 	mov.w	ip, #0
 8008ac2:	fbb8 f9f3 	udiv	r9, r8, r3
 8008ac6:	4666      	mov	r6, ip
 8008ac8:	fb03 8a19 	mls	sl, r3, r9, r8
 8008acc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008ad0:	f1be 0f09 	cmp.w	lr, #9
 8008ad4:	d816      	bhi.n	8008b04 <_strtol_l.constprop.0+0xa4>
 8008ad6:	4674      	mov	r4, lr
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	dd24      	ble.n	8008b26 <_strtol_l.constprop.0+0xc6>
 8008adc:	f1bc 0f00 	cmp.w	ip, #0
 8008ae0:	db1e      	blt.n	8008b20 <_strtol_l.constprop.0+0xc0>
 8008ae2:	45b1      	cmp	r9, r6
 8008ae4:	d31c      	bcc.n	8008b20 <_strtol_l.constprop.0+0xc0>
 8008ae6:	d101      	bne.n	8008aec <_strtol_l.constprop.0+0x8c>
 8008ae8:	45a2      	cmp	sl, r4
 8008aea:	db19      	blt.n	8008b20 <_strtol_l.constprop.0+0xc0>
 8008aec:	fb06 4603 	mla	r6, r6, r3, r4
 8008af0:	f04f 0c01 	mov.w	ip, #1
 8008af4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008af8:	e7e8      	b.n	8008acc <_strtol_l.constprop.0+0x6c>
 8008afa:	2c2b      	cmp	r4, #43	; 0x2b
 8008afc:	bf04      	itt	eq
 8008afe:	782c      	ldrbeq	r4, [r5, #0]
 8008b00:	1cb5      	addeq	r5, r6, #2
 8008b02:	e7ca      	b.n	8008a9a <_strtol_l.constprop.0+0x3a>
 8008b04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008b08:	f1be 0f19 	cmp.w	lr, #25
 8008b0c:	d801      	bhi.n	8008b12 <_strtol_l.constprop.0+0xb2>
 8008b0e:	3c37      	subs	r4, #55	; 0x37
 8008b10:	e7e2      	b.n	8008ad8 <_strtol_l.constprop.0+0x78>
 8008b12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008b16:	f1be 0f19 	cmp.w	lr, #25
 8008b1a:	d804      	bhi.n	8008b26 <_strtol_l.constprop.0+0xc6>
 8008b1c:	3c57      	subs	r4, #87	; 0x57
 8008b1e:	e7db      	b.n	8008ad8 <_strtol_l.constprop.0+0x78>
 8008b20:	f04f 3cff 	mov.w	ip, #4294967295
 8008b24:	e7e6      	b.n	8008af4 <_strtol_l.constprop.0+0x94>
 8008b26:	f1bc 0f00 	cmp.w	ip, #0
 8008b2a:	da05      	bge.n	8008b38 <_strtol_l.constprop.0+0xd8>
 8008b2c:	2322      	movs	r3, #34	; 0x22
 8008b2e:	6003      	str	r3, [r0, #0]
 8008b30:	4646      	mov	r6, r8
 8008b32:	b942      	cbnz	r2, 8008b46 <_strtol_l.constprop.0+0xe6>
 8008b34:	4630      	mov	r0, r6
 8008b36:	e79e      	b.n	8008a76 <_strtol_l.constprop.0+0x16>
 8008b38:	b107      	cbz	r7, 8008b3c <_strtol_l.constprop.0+0xdc>
 8008b3a:	4276      	negs	r6, r6
 8008b3c:	2a00      	cmp	r2, #0
 8008b3e:	d0f9      	beq.n	8008b34 <_strtol_l.constprop.0+0xd4>
 8008b40:	f1bc 0f00 	cmp.w	ip, #0
 8008b44:	d000      	beq.n	8008b48 <_strtol_l.constprop.0+0xe8>
 8008b46:	1e69      	subs	r1, r5, #1
 8008b48:	6011      	str	r1, [r2, #0]
 8008b4a:	e7f3      	b.n	8008b34 <_strtol_l.constprop.0+0xd4>
 8008b4c:	2430      	movs	r4, #48	; 0x30
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1b1      	bne.n	8008ab6 <_strtol_l.constprop.0+0x56>
 8008b52:	2308      	movs	r3, #8
 8008b54:	e7af      	b.n	8008ab6 <_strtol_l.constprop.0+0x56>
 8008b56:	2c30      	cmp	r4, #48	; 0x30
 8008b58:	d0a5      	beq.n	8008aa6 <_strtol_l.constprop.0+0x46>
 8008b5a:	230a      	movs	r3, #10
 8008b5c:	e7ab      	b.n	8008ab6 <_strtol_l.constprop.0+0x56>
 8008b5e:	bf00      	nop
 8008b60:	0800a065 	.word	0x0800a065

08008b64 <strtol>:
 8008b64:	4613      	mov	r3, r2
 8008b66:	460a      	mov	r2, r1
 8008b68:	4601      	mov	r1, r0
 8008b6a:	4802      	ldr	r0, [pc, #8]	; (8008b74 <strtol+0x10>)
 8008b6c:	6800      	ldr	r0, [r0, #0]
 8008b6e:	f7ff bf77 	b.w	8008a60 <_strtol_l.constprop.0>
 8008b72:	bf00      	nop
 8008b74:	200001ac 	.word	0x200001ac

08008b78 <__assert_func>:
 8008b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b7a:	4614      	mov	r4, r2
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	4b09      	ldr	r3, [pc, #36]	; (8008ba4 <__assert_func+0x2c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4605      	mov	r5, r0
 8008b84:	68d8      	ldr	r0, [r3, #12]
 8008b86:	b14c      	cbz	r4, 8008b9c <__assert_func+0x24>
 8008b88:	4b07      	ldr	r3, [pc, #28]	; (8008ba8 <__assert_func+0x30>)
 8008b8a:	9100      	str	r1, [sp, #0]
 8008b8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b90:	4906      	ldr	r1, [pc, #24]	; (8008bac <__assert_func+0x34>)
 8008b92:	462b      	mov	r3, r5
 8008b94:	f000 f80e 	bl	8008bb4 <fiprintf>
 8008b98:	f000 fe20 	bl	80097dc <abort>
 8008b9c:	4b04      	ldr	r3, [pc, #16]	; (8008bb0 <__assert_func+0x38>)
 8008b9e:	461c      	mov	r4, r3
 8008ba0:	e7f3      	b.n	8008b8a <__assert_func+0x12>
 8008ba2:	bf00      	nop
 8008ba4:	200001ac 	.word	0x200001ac
 8008ba8:	0800a028 	.word	0x0800a028
 8008bac:	0800a035 	.word	0x0800a035
 8008bb0:	0800a063 	.word	0x0800a063

08008bb4 <fiprintf>:
 8008bb4:	b40e      	push	{r1, r2, r3}
 8008bb6:	b503      	push	{r0, r1, lr}
 8008bb8:	4601      	mov	r1, r0
 8008bba:	ab03      	add	r3, sp, #12
 8008bbc:	4805      	ldr	r0, [pc, #20]	; (8008bd4 <fiprintf+0x20>)
 8008bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bc2:	6800      	ldr	r0, [r0, #0]
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	f000 fa75 	bl	80090b4 <_vfiprintf_r>
 8008bca:	b002      	add	sp, #8
 8008bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bd0:	b003      	add	sp, #12
 8008bd2:	4770      	bx	lr
 8008bd4:	200001ac 	.word	0x200001ac

08008bd8 <malloc>:
 8008bd8:	4b02      	ldr	r3, [pc, #8]	; (8008be4 <malloc+0xc>)
 8008bda:	4601      	mov	r1, r0
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	f000 b86f 	b.w	8008cc0 <_malloc_r>
 8008be2:	bf00      	nop
 8008be4:	200001ac 	.word	0x200001ac

08008be8 <_free_r>:
 8008be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bea:	2900      	cmp	r1, #0
 8008bec:	d044      	beq.n	8008c78 <_free_r+0x90>
 8008bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf2:	9001      	str	r0, [sp, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f1a1 0404 	sub.w	r4, r1, #4
 8008bfa:	bfb8      	it	lt
 8008bfc:	18e4      	addlt	r4, r4, r3
 8008bfe:	f001 f83d 	bl	8009c7c <__malloc_lock>
 8008c02:	4a1e      	ldr	r2, [pc, #120]	; (8008c7c <_free_r+0x94>)
 8008c04:	9801      	ldr	r0, [sp, #4]
 8008c06:	6813      	ldr	r3, [r2, #0]
 8008c08:	b933      	cbnz	r3, 8008c18 <_free_r+0x30>
 8008c0a:	6063      	str	r3, [r4, #4]
 8008c0c:	6014      	str	r4, [r2, #0]
 8008c0e:	b003      	add	sp, #12
 8008c10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c14:	f001 b838 	b.w	8009c88 <__malloc_unlock>
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	d908      	bls.n	8008c2e <_free_r+0x46>
 8008c1c:	6825      	ldr	r5, [r4, #0]
 8008c1e:	1961      	adds	r1, r4, r5
 8008c20:	428b      	cmp	r3, r1
 8008c22:	bf01      	itttt	eq
 8008c24:	6819      	ldreq	r1, [r3, #0]
 8008c26:	685b      	ldreq	r3, [r3, #4]
 8008c28:	1949      	addeq	r1, r1, r5
 8008c2a:	6021      	streq	r1, [r4, #0]
 8008c2c:	e7ed      	b.n	8008c0a <_free_r+0x22>
 8008c2e:	461a      	mov	r2, r3
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	b10b      	cbz	r3, 8008c38 <_free_r+0x50>
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	d9fa      	bls.n	8008c2e <_free_r+0x46>
 8008c38:	6811      	ldr	r1, [r2, #0]
 8008c3a:	1855      	adds	r5, r2, r1
 8008c3c:	42a5      	cmp	r5, r4
 8008c3e:	d10b      	bne.n	8008c58 <_free_r+0x70>
 8008c40:	6824      	ldr	r4, [r4, #0]
 8008c42:	4421      	add	r1, r4
 8008c44:	1854      	adds	r4, r2, r1
 8008c46:	42a3      	cmp	r3, r4
 8008c48:	6011      	str	r1, [r2, #0]
 8008c4a:	d1e0      	bne.n	8008c0e <_free_r+0x26>
 8008c4c:	681c      	ldr	r4, [r3, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	6053      	str	r3, [r2, #4]
 8008c52:	4421      	add	r1, r4
 8008c54:	6011      	str	r1, [r2, #0]
 8008c56:	e7da      	b.n	8008c0e <_free_r+0x26>
 8008c58:	d902      	bls.n	8008c60 <_free_r+0x78>
 8008c5a:	230c      	movs	r3, #12
 8008c5c:	6003      	str	r3, [r0, #0]
 8008c5e:	e7d6      	b.n	8008c0e <_free_r+0x26>
 8008c60:	6825      	ldr	r5, [r4, #0]
 8008c62:	1961      	adds	r1, r4, r5
 8008c64:	428b      	cmp	r3, r1
 8008c66:	bf04      	itt	eq
 8008c68:	6819      	ldreq	r1, [r3, #0]
 8008c6a:	685b      	ldreq	r3, [r3, #4]
 8008c6c:	6063      	str	r3, [r4, #4]
 8008c6e:	bf04      	itt	eq
 8008c70:	1949      	addeq	r1, r1, r5
 8008c72:	6021      	streq	r1, [r4, #0]
 8008c74:	6054      	str	r4, [r2, #4]
 8008c76:	e7ca      	b.n	8008c0e <_free_r+0x26>
 8008c78:	b003      	add	sp, #12
 8008c7a:	bd30      	pop	{r4, r5, pc}
 8008c7c:	2000050c 	.word	0x2000050c

08008c80 <sbrk_aligned>:
 8008c80:	b570      	push	{r4, r5, r6, lr}
 8008c82:	4e0e      	ldr	r6, [pc, #56]	; (8008cbc <sbrk_aligned+0x3c>)
 8008c84:	460c      	mov	r4, r1
 8008c86:	6831      	ldr	r1, [r6, #0]
 8008c88:	4605      	mov	r5, r0
 8008c8a:	b911      	cbnz	r1, 8008c92 <sbrk_aligned+0x12>
 8008c8c:	f000 fcd6 	bl	800963c <_sbrk_r>
 8008c90:	6030      	str	r0, [r6, #0]
 8008c92:	4621      	mov	r1, r4
 8008c94:	4628      	mov	r0, r5
 8008c96:	f000 fcd1 	bl	800963c <_sbrk_r>
 8008c9a:	1c43      	adds	r3, r0, #1
 8008c9c:	d00a      	beq.n	8008cb4 <sbrk_aligned+0x34>
 8008c9e:	1cc4      	adds	r4, r0, #3
 8008ca0:	f024 0403 	bic.w	r4, r4, #3
 8008ca4:	42a0      	cmp	r0, r4
 8008ca6:	d007      	beq.n	8008cb8 <sbrk_aligned+0x38>
 8008ca8:	1a21      	subs	r1, r4, r0
 8008caa:	4628      	mov	r0, r5
 8008cac:	f000 fcc6 	bl	800963c <_sbrk_r>
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d101      	bne.n	8008cb8 <sbrk_aligned+0x38>
 8008cb4:	f04f 34ff 	mov.w	r4, #4294967295
 8008cb8:	4620      	mov	r0, r4
 8008cba:	bd70      	pop	{r4, r5, r6, pc}
 8008cbc:	20000510 	.word	0x20000510

08008cc0 <_malloc_r>:
 8008cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc4:	1ccd      	adds	r5, r1, #3
 8008cc6:	f025 0503 	bic.w	r5, r5, #3
 8008cca:	3508      	adds	r5, #8
 8008ccc:	2d0c      	cmp	r5, #12
 8008cce:	bf38      	it	cc
 8008cd0:	250c      	movcc	r5, #12
 8008cd2:	2d00      	cmp	r5, #0
 8008cd4:	4607      	mov	r7, r0
 8008cd6:	db01      	blt.n	8008cdc <_malloc_r+0x1c>
 8008cd8:	42a9      	cmp	r1, r5
 8008cda:	d905      	bls.n	8008ce8 <_malloc_r+0x28>
 8008cdc:	230c      	movs	r3, #12
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	2600      	movs	r6, #0
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce8:	4e2e      	ldr	r6, [pc, #184]	; (8008da4 <_malloc_r+0xe4>)
 8008cea:	f000 ffc7 	bl	8009c7c <__malloc_lock>
 8008cee:	6833      	ldr	r3, [r6, #0]
 8008cf0:	461c      	mov	r4, r3
 8008cf2:	bb34      	cbnz	r4, 8008d42 <_malloc_r+0x82>
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	f7ff ffc2 	bl	8008c80 <sbrk_aligned>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	4604      	mov	r4, r0
 8008d00:	d14d      	bne.n	8008d9e <_malloc_r+0xde>
 8008d02:	6834      	ldr	r4, [r6, #0]
 8008d04:	4626      	mov	r6, r4
 8008d06:	2e00      	cmp	r6, #0
 8008d08:	d140      	bne.n	8008d8c <_malloc_r+0xcc>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	4638      	mov	r0, r7
 8008d10:	eb04 0803 	add.w	r8, r4, r3
 8008d14:	f000 fc92 	bl	800963c <_sbrk_r>
 8008d18:	4580      	cmp	r8, r0
 8008d1a:	d13a      	bne.n	8008d92 <_malloc_r+0xd2>
 8008d1c:	6821      	ldr	r1, [r4, #0]
 8008d1e:	3503      	adds	r5, #3
 8008d20:	1a6d      	subs	r5, r5, r1
 8008d22:	f025 0503 	bic.w	r5, r5, #3
 8008d26:	3508      	adds	r5, #8
 8008d28:	2d0c      	cmp	r5, #12
 8008d2a:	bf38      	it	cc
 8008d2c:	250c      	movcc	r5, #12
 8008d2e:	4629      	mov	r1, r5
 8008d30:	4638      	mov	r0, r7
 8008d32:	f7ff ffa5 	bl	8008c80 <sbrk_aligned>
 8008d36:	3001      	adds	r0, #1
 8008d38:	d02b      	beq.n	8008d92 <_malloc_r+0xd2>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	442b      	add	r3, r5
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	e00e      	b.n	8008d60 <_malloc_r+0xa0>
 8008d42:	6822      	ldr	r2, [r4, #0]
 8008d44:	1b52      	subs	r2, r2, r5
 8008d46:	d41e      	bmi.n	8008d86 <_malloc_r+0xc6>
 8008d48:	2a0b      	cmp	r2, #11
 8008d4a:	d916      	bls.n	8008d7a <_malloc_r+0xba>
 8008d4c:	1961      	adds	r1, r4, r5
 8008d4e:	42a3      	cmp	r3, r4
 8008d50:	6025      	str	r5, [r4, #0]
 8008d52:	bf18      	it	ne
 8008d54:	6059      	strne	r1, [r3, #4]
 8008d56:	6863      	ldr	r3, [r4, #4]
 8008d58:	bf08      	it	eq
 8008d5a:	6031      	streq	r1, [r6, #0]
 8008d5c:	5162      	str	r2, [r4, r5]
 8008d5e:	604b      	str	r3, [r1, #4]
 8008d60:	4638      	mov	r0, r7
 8008d62:	f104 060b 	add.w	r6, r4, #11
 8008d66:	f000 ff8f 	bl	8009c88 <__malloc_unlock>
 8008d6a:	f026 0607 	bic.w	r6, r6, #7
 8008d6e:	1d23      	adds	r3, r4, #4
 8008d70:	1af2      	subs	r2, r6, r3
 8008d72:	d0b6      	beq.n	8008ce2 <_malloc_r+0x22>
 8008d74:	1b9b      	subs	r3, r3, r6
 8008d76:	50a3      	str	r3, [r4, r2]
 8008d78:	e7b3      	b.n	8008ce2 <_malloc_r+0x22>
 8008d7a:	6862      	ldr	r2, [r4, #4]
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	bf0c      	ite	eq
 8008d80:	6032      	streq	r2, [r6, #0]
 8008d82:	605a      	strne	r2, [r3, #4]
 8008d84:	e7ec      	b.n	8008d60 <_malloc_r+0xa0>
 8008d86:	4623      	mov	r3, r4
 8008d88:	6864      	ldr	r4, [r4, #4]
 8008d8a:	e7b2      	b.n	8008cf2 <_malloc_r+0x32>
 8008d8c:	4634      	mov	r4, r6
 8008d8e:	6876      	ldr	r6, [r6, #4]
 8008d90:	e7b9      	b.n	8008d06 <_malloc_r+0x46>
 8008d92:	230c      	movs	r3, #12
 8008d94:	603b      	str	r3, [r7, #0]
 8008d96:	4638      	mov	r0, r7
 8008d98:	f000 ff76 	bl	8009c88 <__malloc_unlock>
 8008d9c:	e7a1      	b.n	8008ce2 <_malloc_r+0x22>
 8008d9e:	6025      	str	r5, [r4, #0]
 8008da0:	e7de      	b.n	8008d60 <_malloc_r+0xa0>
 8008da2:	bf00      	nop
 8008da4:	2000050c 	.word	0x2000050c

08008da8 <__ssputs_r>:
 8008da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	688e      	ldr	r6, [r1, #8]
 8008dae:	429e      	cmp	r6, r3
 8008db0:	4682      	mov	sl, r0
 8008db2:	460c      	mov	r4, r1
 8008db4:	4690      	mov	r8, r2
 8008db6:	461f      	mov	r7, r3
 8008db8:	d838      	bhi.n	8008e2c <__ssputs_r+0x84>
 8008dba:	898a      	ldrh	r2, [r1, #12]
 8008dbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dc0:	d032      	beq.n	8008e28 <__ssputs_r+0x80>
 8008dc2:	6825      	ldr	r5, [r4, #0]
 8008dc4:	6909      	ldr	r1, [r1, #16]
 8008dc6:	eba5 0901 	sub.w	r9, r5, r1
 8008dca:	6965      	ldr	r5, [r4, #20]
 8008dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	444b      	add	r3, r9
 8008dd8:	106d      	asrs	r5, r5, #1
 8008dda:	429d      	cmp	r5, r3
 8008ddc:	bf38      	it	cc
 8008dde:	461d      	movcc	r5, r3
 8008de0:	0553      	lsls	r3, r2, #21
 8008de2:	d531      	bpl.n	8008e48 <__ssputs_r+0xa0>
 8008de4:	4629      	mov	r1, r5
 8008de6:	f7ff ff6b 	bl	8008cc0 <_malloc_r>
 8008dea:	4606      	mov	r6, r0
 8008dec:	b950      	cbnz	r0, 8008e04 <__ssputs_r+0x5c>
 8008dee:	230c      	movs	r3, #12
 8008df0:	f8ca 3000 	str.w	r3, [sl]
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dfa:	81a3      	strh	r3, [r4, #12]
 8008dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e04:	6921      	ldr	r1, [r4, #16]
 8008e06:	464a      	mov	r2, r9
 8008e08:	f000 ff10 	bl	8009c2c <memcpy>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	6126      	str	r6, [r4, #16]
 8008e1a:	6165      	str	r5, [r4, #20]
 8008e1c:	444e      	add	r6, r9
 8008e1e:	eba5 0509 	sub.w	r5, r5, r9
 8008e22:	6026      	str	r6, [r4, #0]
 8008e24:	60a5      	str	r5, [r4, #8]
 8008e26:	463e      	mov	r6, r7
 8008e28:	42be      	cmp	r6, r7
 8008e2a:	d900      	bls.n	8008e2e <__ssputs_r+0x86>
 8008e2c:	463e      	mov	r6, r7
 8008e2e:	6820      	ldr	r0, [r4, #0]
 8008e30:	4632      	mov	r2, r6
 8008e32:	4641      	mov	r1, r8
 8008e34:	f000 ff08 	bl	8009c48 <memmove>
 8008e38:	68a3      	ldr	r3, [r4, #8]
 8008e3a:	1b9b      	subs	r3, r3, r6
 8008e3c:	60a3      	str	r3, [r4, #8]
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	4433      	add	r3, r6
 8008e42:	6023      	str	r3, [r4, #0]
 8008e44:	2000      	movs	r0, #0
 8008e46:	e7db      	b.n	8008e00 <__ssputs_r+0x58>
 8008e48:	462a      	mov	r2, r5
 8008e4a:	f000 ff23 	bl	8009c94 <_realloc_r>
 8008e4e:	4606      	mov	r6, r0
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d1e1      	bne.n	8008e18 <__ssputs_r+0x70>
 8008e54:	6921      	ldr	r1, [r4, #16]
 8008e56:	4650      	mov	r0, sl
 8008e58:	f7ff fec6 	bl	8008be8 <_free_r>
 8008e5c:	e7c7      	b.n	8008dee <__ssputs_r+0x46>
	...

08008e60 <_svfiprintf_r>:
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	4698      	mov	r8, r3
 8008e66:	898b      	ldrh	r3, [r1, #12]
 8008e68:	061b      	lsls	r3, r3, #24
 8008e6a:	b09d      	sub	sp, #116	; 0x74
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	460d      	mov	r5, r1
 8008e70:	4614      	mov	r4, r2
 8008e72:	d50e      	bpl.n	8008e92 <_svfiprintf_r+0x32>
 8008e74:	690b      	ldr	r3, [r1, #16]
 8008e76:	b963      	cbnz	r3, 8008e92 <_svfiprintf_r+0x32>
 8008e78:	2140      	movs	r1, #64	; 0x40
 8008e7a:	f7ff ff21 	bl	8008cc0 <_malloc_r>
 8008e7e:	6028      	str	r0, [r5, #0]
 8008e80:	6128      	str	r0, [r5, #16]
 8008e82:	b920      	cbnz	r0, 8008e8e <_svfiprintf_r+0x2e>
 8008e84:	230c      	movs	r3, #12
 8008e86:	603b      	str	r3, [r7, #0]
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8c:	e0d1      	b.n	8009032 <_svfiprintf_r+0x1d2>
 8008e8e:	2340      	movs	r3, #64	; 0x40
 8008e90:	616b      	str	r3, [r5, #20]
 8008e92:	2300      	movs	r3, #0
 8008e94:	9309      	str	r3, [sp, #36]	; 0x24
 8008e96:	2320      	movs	r3, #32
 8008e98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ea0:	2330      	movs	r3, #48	; 0x30
 8008ea2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800904c <_svfiprintf_r+0x1ec>
 8008ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eaa:	f04f 0901 	mov.w	r9, #1
 8008eae:	4623      	mov	r3, r4
 8008eb0:	469a      	mov	sl, r3
 8008eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eb6:	b10a      	cbz	r2, 8008ebc <_svfiprintf_r+0x5c>
 8008eb8:	2a25      	cmp	r2, #37	; 0x25
 8008eba:	d1f9      	bne.n	8008eb0 <_svfiprintf_r+0x50>
 8008ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ec0:	d00b      	beq.n	8008eda <_svfiprintf_r+0x7a>
 8008ec2:	465b      	mov	r3, fp
 8008ec4:	4622      	mov	r2, r4
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	4638      	mov	r0, r7
 8008eca:	f7ff ff6d 	bl	8008da8 <__ssputs_r>
 8008ece:	3001      	adds	r0, #1
 8008ed0:	f000 80aa 	beq.w	8009028 <_svfiprintf_r+0x1c8>
 8008ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ed6:	445a      	add	r2, fp
 8008ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8008eda:	f89a 3000 	ldrb.w	r3, [sl]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 80a2 	beq.w	8009028 <_svfiprintf_r+0x1c8>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eee:	f10a 0a01 	add.w	sl, sl, #1
 8008ef2:	9304      	str	r3, [sp, #16]
 8008ef4:	9307      	str	r3, [sp, #28]
 8008ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008efa:	931a      	str	r3, [sp, #104]	; 0x68
 8008efc:	4654      	mov	r4, sl
 8008efe:	2205      	movs	r2, #5
 8008f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f04:	4851      	ldr	r0, [pc, #324]	; (800904c <_svfiprintf_r+0x1ec>)
 8008f06:	f7f7 f99b 	bl	8000240 <memchr>
 8008f0a:	9a04      	ldr	r2, [sp, #16]
 8008f0c:	b9d8      	cbnz	r0, 8008f46 <_svfiprintf_r+0xe6>
 8008f0e:	06d0      	lsls	r0, r2, #27
 8008f10:	bf44      	itt	mi
 8008f12:	2320      	movmi	r3, #32
 8008f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f18:	0711      	lsls	r1, r2, #28
 8008f1a:	bf44      	itt	mi
 8008f1c:	232b      	movmi	r3, #43	; 0x2b
 8008f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f22:	f89a 3000 	ldrb.w	r3, [sl]
 8008f26:	2b2a      	cmp	r3, #42	; 0x2a
 8008f28:	d015      	beq.n	8008f56 <_svfiprintf_r+0xf6>
 8008f2a:	9a07      	ldr	r2, [sp, #28]
 8008f2c:	4654      	mov	r4, sl
 8008f2e:	2000      	movs	r0, #0
 8008f30:	f04f 0c0a 	mov.w	ip, #10
 8008f34:	4621      	mov	r1, r4
 8008f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f3a:	3b30      	subs	r3, #48	; 0x30
 8008f3c:	2b09      	cmp	r3, #9
 8008f3e:	d94e      	bls.n	8008fde <_svfiprintf_r+0x17e>
 8008f40:	b1b0      	cbz	r0, 8008f70 <_svfiprintf_r+0x110>
 8008f42:	9207      	str	r2, [sp, #28]
 8008f44:	e014      	b.n	8008f70 <_svfiprintf_r+0x110>
 8008f46:	eba0 0308 	sub.w	r3, r0, r8
 8008f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	9304      	str	r3, [sp, #16]
 8008f52:	46a2      	mov	sl, r4
 8008f54:	e7d2      	b.n	8008efc <_svfiprintf_r+0x9c>
 8008f56:	9b03      	ldr	r3, [sp, #12]
 8008f58:	1d19      	adds	r1, r3, #4
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	9103      	str	r1, [sp, #12]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	bfbb      	ittet	lt
 8008f62:	425b      	neglt	r3, r3
 8008f64:	f042 0202 	orrlt.w	r2, r2, #2
 8008f68:	9307      	strge	r3, [sp, #28]
 8008f6a:	9307      	strlt	r3, [sp, #28]
 8008f6c:	bfb8      	it	lt
 8008f6e:	9204      	strlt	r2, [sp, #16]
 8008f70:	7823      	ldrb	r3, [r4, #0]
 8008f72:	2b2e      	cmp	r3, #46	; 0x2e
 8008f74:	d10c      	bne.n	8008f90 <_svfiprintf_r+0x130>
 8008f76:	7863      	ldrb	r3, [r4, #1]
 8008f78:	2b2a      	cmp	r3, #42	; 0x2a
 8008f7a:	d135      	bne.n	8008fe8 <_svfiprintf_r+0x188>
 8008f7c:	9b03      	ldr	r3, [sp, #12]
 8008f7e:	1d1a      	adds	r2, r3, #4
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	9203      	str	r2, [sp, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	bfb8      	it	lt
 8008f88:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f8c:	3402      	adds	r4, #2
 8008f8e:	9305      	str	r3, [sp, #20]
 8008f90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800905c <_svfiprintf_r+0x1fc>
 8008f94:	7821      	ldrb	r1, [r4, #0]
 8008f96:	2203      	movs	r2, #3
 8008f98:	4650      	mov	r0, sl
 8008f9a:	f7f7 f951 	bl	8000240 <memchr>
 8008f9e:	b140      	cbz	r0, 8008fb2 <_svfiprintf_r+0x152>
 8008fa0:	2340      	movs	r3, #64	; 0x40
 8008fa2:	eba0 000a 	sub.w	r0, r0, sl
 8008fa6:	fa03 f000 	lsl.w	r0, r3, r0
 8008faa:	9b04      	ldr	r3, [sp, #16]
 8008fac:	4303      	orrs	r3, r0
 8008fae:	3401      	adds	r4, #1
 8008fb0:	9304      	str	r3, [sp, #16]
 8008fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb6:	4826      	ldr	r0, [pc, #152]	; (8009050 <_svfiprintf_r+0x1f0>)
 8008fb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fbc:	2206      	movs	r2, #6
 8008fbe:	f7f7 f93f 	bl	8000240 <memchr>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d038      	beq.n	8009038 <_svfiprintf_r+0x1d8>
 8008fc6:	4b23      	ldr	r3, [pc, #140]	; (8009054 <_svfiprintf_r+0x1f4>)
 8008fc8:	bb1b      	cbnz	r3, 8009012 <_svfiprintf_r+0x1b2>
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	3307      	adds	r3, #7
 8008fce:	f023 0307 	bic.w	r3, r3, #7
 8008fd2:	3308      	adds	r3, #8
 8008fd4:	9303      	str	r3, [sp, #12]
 8008fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd8:	4433      	add	r3, r6
 8008fda:	9309      	str	r3, [sp, #36]	; 0x24
 8008fdc:	e767      	b.n	8008eae <_svfiprintf_r+0x4e>
 8008fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	2001      	movs	r0, #1
 8008fe6:	e7a5      	b.n	8008f34 <_svfiprintf_r+0xd4>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	3401      	adds	r4, #1
 8008fec:	9305      	str	r3, [sp, #20]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	f04f 0c0a 	mov.w	ip, #10
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ffa:	3a30      	subs	r2, #48	; 0x30
 8008ffc:	2a09      	cmp	r2, #9
 8008ffe:	d903      	bls.n	8009008 <_svfiprintf_r+0x1a8>
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0c5      	beq.n	8008f90 <_svfiprintf_r+0x130>
 8009004:	9105      	str	r1, [sp, #20]
 8009006:	e7c3      	b.n	8008f90 <_svfiprintf_r+0x130>
 8009008:	fb0c 2101 	mla	r1, ip, r1, r2
 800900c:	4604      	mov	r4, r0
 800900e:	2301      	movs	r3, #1
 8009010:	e7f0      	b.n	8008ff4 <_svfiprintf_r+0x194>
 8009012:	ab03      	add	r3, sp, #12
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	462a      	mov	r2, r5
 8009018:	4b0f      	ldr	r3, [pc, #60]	; (8009058 <_svfiprintf_r+0x1f8>)
 800901a:	a904      	add	r1, sp, #16
 800901c:	4638      	mov	r0, r7
 800901e:	f3af 8000 	nop.w
 8009022:	1c42      	adds	r2, r0, #1
 8009024:	4606      	mov	r6, r0
 8009026:	d1d6      	bne.n	8008fd6 <_svfiprintf_r+0x176>
 8009028:	89ab      	ldrh	r3, [r5, #12]
 800902a:	065b      	lsls	r3, r3, #25
 800902c:	f53f af2c 	bmi.w	8008e88 <_svfiprintf_r+0x28>
 8009030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009032:	b01d      	add	sp, #116	; 0x74
 8009034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009038:	ab03      	add	r3, sp, #12
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	462a      	mov	r2, r5
 800903e:	4b06      	ldr	r3, [pc, #24]	; (8009058 <_svfiprintf_r+0x1f8>)
 8009040:	a904      	add	r1, sp, #16
 8009042:	4638      	mov	r0, r7
 8009044:	f000 f9d4 	bl	80093f0 <_printf_i>
 8009048:	e7eb      	b.n	8009022 <_svfiprintf_r+0x1c2>
 800904a:	bf00      	nop
 800904c:	0800a165 	.word	0x0800a165
 8009050:	0800a16f 	.word	0x0800a16f
 8009054:	00000000 	.word	0x00000000
 8009058:	08008da9 	.word	0x08008da9
 800905c:	0800a16b 	.word	0x0800a16b

08009060 <__sfputc_r>:
 8009060:	6893      	ldr	r3, [r2, #8]
 8009062:	3b01      	subs	r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	b410      	push	{r4}
 8009068:	6093      	str	r3, [r2, #8]
 800906a:	da08      	bge.n	800907e <__sfputc_r+0x1e>
 800906c:	6994      	ldr	r4, [r2, #24]
 800906e:	42a3      	cmp	r3, r4
 8009070:	db01      	blt.n	8009076 <__sfputc_r+0x16>
 8009072:	290a      	cmp	r1, #10
 8009074:	d103      	bne.n	800907e <__sfputc_r+0x1e>
 8009076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800907a:	f000 baef 	b.w	800965c <__swbuf_r>
 800907e:	6813      	ldr	r3, [r2, #0]
 8009080:	1c58      	adds	r0, r3, #1
 8009082:	6010      	str	r0, [r2, #0]
 8009084:	7019      	strb	r1, [r3, #0]
 8009086:	4608      	mov	r0, r1
 8009088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800908c:	4770      	bx	lr

0800908e <__sfputs_r>:
 800908e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009090:	4606      	mov	r6, r0
 8009092:	460f      	mov	r7, r1
 8009094:	4614      	mov	r4, r2
 8009096:	18d5      	adds	r5, r2, r3
 8009098:	42ac      	cmp	r4, r5
 800909a:	d101      	bne.n	80090a0 <__sfputs_r+0x12>
 800909c:	2000      	movs	r0, #0
 800909e:	e007      	b.n	80090b0 <__sfputs_r+0x22>
 80090a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a4:	463a      	mov	r2, r7
 80090a6:	4630      	mov	r0, r6
 80090a8:	f7ff ffda 	bl	8009060 <__sfputc_r>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	d1f3      	bne.n	8009098 <__sfputs_r+0xa>
 80090b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090b4 <_vfiprintf_r>:
 80090b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b8:	460d      	mov	r5, r1
 80090ba:	b09d      	sub	sp, #116	; 0x74
 80090bc:	4614      	mov	r4, r2
 80090be:	4698      	mov	r8, r3
 80090c0:	4606      	mov	r6, r0
 80090c2:	b118      	cbz	r0, 80090cc <_vfiprintf_r+0x18>
 80090c4:	6983      	ldr	r3, [r0, #24]
 80090c6:	b90b      	cbnz	r3, 80090cc <_vfiprintf_r+0x18>
 80090c8:	f000 fcaa 	bl	8009a20 <__sinit>
 80090cc:	4b89      	ldr	r3, [pc, #548]	; (80092f4 <_vfiprintf_r+0x240>)
 80090ce:	429d      	cmp	r5, r3
 80090d0:	d11b      	bne.n	800910a <_vfiprintf_r+0x56>
 80090d2:	6875      	ldr	r5, [r6, #4]
 80090d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090d6:	07d9      	lsls	r1, r3, #31
 80090d8:	d405      	bmi.n	80090e6 <_vfiprintf_r+0x32>
 80090da:	89ab      	ldrh	r3, [r5, #12]
 80090dc:	059a      	lsls	r2, r3, #22
 80090de:	d402      	bmi.n	80090e6 <_vfiprintf_r+0x32>
 80090e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090e2:	f000 fd3b 	bl	8009b5c <__retarget_lock_acquire_recursive>
 80090e6:	89ab      	ldrh	r3, [r5, #12]
 80090e8:	071b      	lsls	r3, r3, #28
 80090ea:	d501      	bpl.n	80090f0 <_vfiprintf_r+0x3c>
 80090ec:	692b      	ldr	r3, [r5, #16]
 80090ee:	b9eb      	cbnz	r3, 800912c <_vfiprintf_r+0x78>
 80090f0:	4629      	mov	r1, r5
 80090f2:	4630      	mov	r0, r6
 80090f4:	f000 fb04 	bl	8009700 <__swsetup_r>
 80090f8:	b1c0      	cbz	r0, 800912c <_vfiprintf_r+0x78>
 80090fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090fc:	07dc      	lsls	r4, r3, #31
 80090fe:	d50e      	bpl.n	800911e <_vfiprintf_r+0x6a>
 8009100:	f04f 30ff 	mov.w	r0, #4294967295
 8009104:	b01d      	add	sp, #116	; 0x74
 8009106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910a:	4b7b      	ldr	r3, [pc, #492]	; (80092f8 <_vfiprintf_r+0x244>)
 800910c:	429d      	cmp	r5, r3
 800910e:	d101      	bne.n	8009114 <_vfiprintf_r+0x60>
 8009110:	68b5      	ldr	r5, [r6, #8]
 8009112:	e7df      	b.n	80090d4 <_vfiprintf_r+0x20>
 8009114:	4b79      	ldr	r3, [pc, #484]	; (80092fc <_vfiprintf_r+0x248>)
 8009116:	429d      	cmp	r5, r3
 8009118:	bf08      	it	eq
 800911a:	68f5      	ldreq	r5, [r6, #12]
 800911c:	e7da      	b.n	80090d4 <_vfiprintf_r+0x20>
 800911e:	89ab      	ldrh	r3, [r5, #12]
 8009120:	0598      	lsls	r0, r3, #22
 8009122:	d4ed      	bmi.n	8009100 <_vfiprintf_r+0x4c>
 8009124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009126:	f000 fd1a 	bl	8009b5e <__retarget_lock_release_recursive>
 800912a:	e7e9      	b.n	8009100 <_vfiprintf_r+0x4c>
 800912c:	2300      	movs	r3, #0
 800912e:	9309      	str	r3, [sp, #36]	; 0x24
 8009130:	2320      	movs	r3, #32
 8009132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009136:	f8cd 800c 	str.w	r8, [sp, #12]
 800913a:	2330      	movs	r3, #48	; 0x30
 800913c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009300 <_vfiprintf_r+0x24c>
 8009140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009144:	f04f 0901 	mov.w	r9, #1
 8009148:	4623      	mov	r3, r4
 800914a:	469a      	mov	sl, r3
 800914c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009150:	b10a      	cbz	r2, 8009156 <_vfiprintf_r+0xa2>
 8009152:	2a25      	cmp	r2, #37	; 0x25
 8009154:	d1f9      	bne.n	800914a <_vfiprintf_r+0x96>
 8009156:	ebba 0b04 	subs.w	fp, sl, r4
 800915a:	d00b      	beq.n	8009174 <_vfiprintf_r+0xc0>
 800915c:	465b      	mov	r3, fp
 800915e:	4622      	mov	r2, r4
 8009160:	4629      	mov	r1, r5
 8009162:	4630      	mov	r0, r6
 8009164:	f7ff ff93 	bl	800908e <__sfputs_r>
 8009168:	3001      	adds	r0, #1
 800916a:	f000 80aa 	beq.w	80092c2 <_vfiprintf_r+0x20e>
 800916e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009170:	445a      	add	r2, fp
 8009172:	9209      	str	r2, [sp, #36]	; 0x24
 8009174:	f89a 3000 	ldrb.w	r3, [sl]
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 80a2 	beq.w	80092c2 <_vfiprintf_r+0x20e>
 800917e:	2300      	movs	r3, #0
 8009180:	f04f 32ff 	mov.w	r2, #4294967295
 8009184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009188:	f10a 0a01 	add.w	sl, sl, #1
 800918c:	9304      	str	r3, [sp, #16]
 800918e:	9307      	str	r3, [sp, #28]
 8009190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009194:	931a      	str	r3, [sp, #104]	; 0x68
 8009196:	4654      	mov	r4, sl
 8009198:	2205      	movs	r2, #5
 800919a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800919e:	4858      	ldr	r0, [pc, #352]	; (8009300 <_vfiprintf_r+0x24c>)
 80091a0:	f7f7 f84e 	bl	8000240 <memchr>
 80091a4:	9a04      	ldr	r2, [sp, #16]
 80091a6:	b9d8      	cbnz	r0, 80091e0 <_vfiprintf_r+0x12c>
 80091a8:	06d1      	lsls	r1, r2, #27
 80091aa:	bf44      	itt	mi
 80091ac:	2320      	movmi	r3, #32
 80091ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091b2:	0713      	lsls	r3, r2, #28
 80091b4:	bf44      	itt	mi
 80091b6:	232b      	movmi	r3, #43	; 0x2b
 80091b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091bc:	f89a 3000 	ldrb.w	r3, [sl]
 80091c0:	2b2a      	cmp	r3, #42	; 0x2a
 80091c2:	d015      	beq.n	80091f0 <_vfiprintf_r+0x13c>
 80091c4:	9a07      	ldr	r2, [sp, #28]
 80091c6:	4654      	mov	r4, sl
 80091c8:	2000      	movs	r0, #0
 80091ca:	f04f 0c0a 	mov.w	ip, #10
 80091ce:	4621      	mov	r1, r4
 80091d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091d4:	3b30      	subs	r3, #48	; 0x30
 80091d6:	2b09      	cmp	r3, #9
 80091d8:	d94e      	bls.n	8009278 <_vfiprintf_r+0x1c4>
 80091da:	b1b0      	cbz	r0, 800920a <_vfiprintf_r+0x156>
 80091dc:	9207      	str	r2, [sp, #28]
 80091de:	e014      	b.n	800920a <_vfiprintf_r+0x156>
 80091e0:	eba0 0308 	sub.w	r3, r0, r8
 80091e4:	fa09 f303 	lsl.w	r3, r9, r3
 80091e8:	4313      	orrs	r3, r2
 80091ea:	9304      	str	r3, [sp, #16]
 80091ec:	46a2      	mov	sl, r4
 80091ee:	e7d2      	b.n	8009196 <_vfiprintf_r+0xe2>
 80091f0:	9b03      	ldr	r3, [sp, #12]
 80091f2:	1d19      	adds	r1, r3, #4
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	9103      	str	r1, [sp, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	bfbb      	ittet	lt
 80091fc:	425b      	neglt	r3, r3
 80091fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009202:	9307      	strge	r3, [sp, #28]
 8009204:	9307      	strlt	r3, [sp, #28]
 8009206:	bfb8      	it	lt
 8009208:	9204      	strlt	r2, [sp, #16]
 800920a:	7823      	ldrb	r3, [r4, #0]
 800920c:	2b2e      	cmp	r3, #46	; 0x2e
 800920e:	d10c      	bne.n	800922a <_vfiprintf_r+0x176>
 8009210:	7863      	ldrb	r3, [r4, #1]
 8009212:	2b2a      	cmp	r3, #42	; 0x2a
 8009214:	d135      	bne.n	8009282 <_vfiprintf_r+0x1ce>
 8009216:	9b03      	ldr	r3, [sp, #12]
 8009218:	1d1a      	adds	r2, r3, #4
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	9203      	str	r2, [sp, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	bfb8      	it	lt
 8009222:	f04f 33ff 	movlt.w	r3, #4294967295
 8009226:	3402      	adds	r4, #2
 8009228:	9305      	str	r3, [sp, #20]
 800922a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009310 <_vfiprintf_r+0x25c>
 800922e:	7821      	ldrb	r1, [r4, #0]
 8009230:	2203      	movs	r2, #3
 8009232:	4650      	mov	r0, sl
 8009234:	f7f7 f804 	bl	8000240 <memchr>
 8009238:	b140      	cbz	r0, 800924c <_vfiprintf_r+0x198>
 800923a:	2340      	movs	r3, #64	; 0x40
 800923c:	eba0 000a 	sub.w	r0, r0, sl
 8009240:	fa03 f000 	lsl.w	r0, r3, r0
 8009244:	9b04      	ldr	r3, [sp, #16]
 8009246:	4303      	orrs	r3, r0
 8009248:	3401      	adds	r4, #1
 800924a:	9304      	str	r3, [sp, #16]
 800924c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009250:	482c      	ldr	r0, [pc, #176]	; (8009304 <_vfiprintf_r+0x250>)
 8009252:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009256:	2206      	movs	r2, #6
 8009258:	f7f6 fff2 	bl	8000240 <memchr>
 800925c:	2800      	cmp	r0, #0
 800925e:	d03f      	beq.n	80092e0 <_vfiprintf_r+0x22c>
 8009260:	4b29      	ldr	r3, [pc, #164]	; (8009308 <_vfiprintf_r+0x254>)
 8009262:	bb1b      	cbnz	r3, 80092ac <_vfiprintf_r+0x1f8>
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	3307      	adds	r3, #7
 8009268:	f023 0307 	bic.w	r3, r3, #7
 800926c:	3308      	adds	r3, #8
 800926e:	9303      	str	r3, [sp, #12]
 8009270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009272:	443b      	add	r3, r7
 8009274:	9309      	str	r3, [sp, #36]	; 0x24
 8009276:	e767      	b.n	8009148 <_vfiprintf_r+0x94>
 8009278:	fb0c 3202 	mla	r2, ip, r2, r3
 800927c:	460c      	mov	r4, r1
 800927e:	2001      	movs	r0, #1
 8009280:	e7a5      	b.n	80091ce <_vfiprintf_r+0x11a>
 8009282:	2300      	movs	r3, #0
 8009284:	3401      	adds	r4, #1
 8009286:	9305      	str	r3, [sp, #20]
 8009288:	4619      	mov	r1, r3
 800928a:	f04f 0c0a 	mov.w	ip, #10
 800928e:	4620      	mov	r0, r4
 8009290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009294:	3a30      	subs	r2, #48	; 0x30
 8009296:	2a09      	cmp	r2, #9
 8009298:	d903      	bls.n	80092a2 <_vfiprintf_r+0x1ee>
 800929a:	2b00      	cmp	r3, #0
 800929c:	d0c5      	beq.n	800922a <_vfiprintf_r+0x176>
 800929e:	9105      	str	r1, [sp, #20]
 80092a0:	e7c3      	b.n	800922a <_vfiprintf_r+0x176>
 80092a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80092a6:	4604      	mov	r4, r0
 80092a8:	2301      	movs	r3, #1
 80092aa:	e7f0      	b.n	800928e <_vfiprintf_r+0x1da>
 80092ac:	ab03      	add	r3, sp, #12
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	462a      	mov	r2, r5
 80092b2:	4b16      	ldr	r3, [pc, #88]	; (800930c <_vfiprintf_r+0x258>)
 80092b4:	a904      	add	r1, sp, #16
 80092b6:	4630      	mov	r0, r6
 80092b8:	f3af 8000 	nop.w
 80092bc:	4607      	mov	r7, r0
 80092be:	1c78      	adds	r0, r7, #1
 80092c0:	d1d6      	bne.n	8009270 <_vfiprintf_r+0x1bc>
 80092c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092c4:	07d9      	lsls	r1, r3, #31
 80092c6:	d405      	bmi.n	80092d4 <_vfiprintf_r+0x220>
 80092c8:	89ab      	ldrh	r3, [r5, #12]
 80092ca:	059a      	lsls	r2, r3, #22
 80092cc:	d402      	bmi.n	80092d4 <_vfiprintf_r+0x220>
 80092ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092d0:	f000 fc45 	bl	8009b5e <__retarget_lock_release_recursive>
 80092d4:	89ab      	ldrh	r3, [r5, #12]
 80092d6:	065b      	lsls	r3, r3, #25
 80092d8:	f53f af12 	bmi.w	8009100 <_vfiprintf_r+0x4c>
 80092dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092de:	e711      	b.n	8009104 <_vfiprintf_r+0x50>
 80092e0:	ab03      	add	r3, sp, #12
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	462a      	mov	r2, r5
 80092e6:	4b09      	ldr	r3, [pc, #36]	; (800930c <_vfiprintf_r+0x258>)
 80092e8:	a904      	add	r1, sp, #16
 80092ea:	4630      	mov	r0, r6
 80092ec:	f000 f880 	bl	80093f0 <_printf_i>
 80092f0:	e7e4      	b.n	80092bc <_vfiprintf_r+0x208>
 80092f2:	bf00      	nop
 80092f4:	0800a1b8 	.word	0x0800a1b8
 80092f8:	0800a1d8 	.word	0x0800a1d8
 80092fc:	0800a198 	.word	0x0800a198
 8009300:	0800a165 	.word	0x0800a165
 8009304:	0800a16f 	.word	0x0800a16f
 8009308:	00000000 	.word	0x00000000
 800930c:	0800908f 	.word	0x0800908f
 8009310:	0800a16b 	.word	0x0800a16b

08009314 <_printf_common>:
 8009314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009318:	4616      	mov	r6, r2
 800931a:	4699      	mov	r9, r3
 800931c:	688a      	ldr	r2, [r1, #8]
 800931e:	690b      	ldr	r3, [r1, #16]
 8009320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009324:	4293      	cmp	r3, r2
 8009326:	bfb8      	it	lt
 8009328:	4613      	movlt	r3, r2
 800932a:	6033      	str	r3, [r6, #0]
 800932c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009330:	4607      	mov	r7, r0
 8009332:	460c      	mov	r4, r1
 8009334:	b10a      	cbz	r2, 800933a <_printf_common+0x26>
 8009336:	3301      	adds	r3, #1
 8009338:	6033      	str	r3, [r6, #0]
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	0699      	lsls	r1, r3, #26
 800933e:	bf42      	ittt	mi
 8009340:	6833      	ldrmi	r3, [r6, #0]
 8009342:	3302      	addmi	r3, #2
 8009344:	6033      	strmi	r3, [r6, #0]
 8009346:	6825      	ldr	r5, [r4, #0]
 8009348:	f015 0506 	ands.w	r5, r5, #6
 800934c:	d106      	bne.n	800935c <_printf_common+0x48>
 800934e:	f104 0a19 	add.w	sl, r4, #25
 8009352:	68e3      	ldr	r3, [r4, #12]
 8009354:	6832      	ldr	r2, [r6, #0]
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	42ab      	cmp	r3, r5
 800935a:	dc26      	bgt.n	80093aa <_printf_common+0x96>
 800935c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009360:	1e13      	subs	r3, r2, #0
 8009362:	6822      	ldr	r2, [r4, #0]
 8009364:	bf18      	it	ne
 8009366:	2301      	movne	r3, #1
 8009368:	0692      	lsls	r2, r2, #26
 800936a:	d42b      	bmi.n	80093c4 <_printf_common+0xb0>
 800936c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009370:	4649      	mov	r1, r9
 8009372:	4638      	mov	r0, r7
 8009374:	47c0      	blx	r8
 8009376:	3001      	adds	r0, #1
 8009378:	d01e      	beq.n	80093b8 <_printf_common+0xa4>
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	68e5      	ldr	r5, [r4, #12]
 800937e:	6832      	ldr	r2, [r6, #0]
 8009380:	f003 0306 	and.w	r3, r3, #6
 8009384:	2b04      	cmp	r3, #4
 8009386:	bf08      	it	eq
 8009388:	1aad      	subeq	r5, r5, r2
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	6922      	ldr	r2, [r4, #16]
 800938e:	bf0c      	ite	eq
 8009390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009394:	2500      	movne	r5, #0
 8009396:	4293      	cmp	r3, r2
 8009398:	bfc4      	itt	gt
 800939a:	1a9b      	subgt	r3, r3, r2
 800939c:	18ed      	addgt	r5, r5, r3
 800939e:	2600      	movs	r6, #0
 80093a0:	341a      	adds	r4, #26
 80093a2:	42b5      	cmp	r5, r6
 80093a4:	d11a      	bne.n	80093dc <_printf_common+0xc8>
 80093a6:	2000      	movs	r0, #0
 80093a8:	e008      	b.n	80093bc <_printf_common+0xa8>
 80093aa:	2301      	movs	r3, #1
 80093ac:	4652      	mov	r2, sl
 80093ae:	4649      	mov	r1, r9
 80093b0:	4638      	mov	r0, r7
 80093b2:	47c0      	blx	r8
 80093b4:	3001      	adds	r0, #1
 80093b6:	d103      	bne.n	80093c0 <_printf_common+0xac>
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295
 80093bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c0:	3501      	adds	r5, #1
 80093c2:	e7c6      	b.n	8009352 <_printf_common+0x3e>
 80093c4:	18e1      	adds	r1, r4, r3
 80093c6:	1c5a      	adds	r2, r3, #1
 80093c8:	2030      	movs	r0, #48	; 0x30
 80093ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093ce:	4422      	add	r2, r4
 80093d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093d8:	3302      	adds	r3, #2
 80093da:	e7c7      	b.n	800936c <_printf_common+0x58>
 80093dc:	2301      	movs	r3, #1
 80093de:	4622      	mov	r2, r4
 80093e0:	4649      	mov	r1, r9
 80093e2:	4638      	mov	r0, r7
 80093e4:	47c0      	blx	r8
 80093e6:	3001      	adds	r0, #1
 80093e8:	d0e6      	beq.n	80093b8 <_printf_common+0xa4>
 80093ea:	3601      	adds	r6, #1
 80093ec:	e7d9      	b.n	80093a2 <_printf_common+0x8e>
	...

080093f0 <_printf_i>:
 80093f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093f4:	7e0f      	ldrb	r7, [r1, #24]
 80093f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093f8:	2f78      	cmp	r7, #120	; 0x78
 80093fa:	4691      	mov	r9, r2
 80093fc:	4680      	mov	r8, r0
 80093fe:	460c      	mov	r4, r1
 8009400:	469a      	mov	sl, r3
 8009402:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009406:	d807      	bhi.n	8009418 <_printf_i+0x28>
 8009408:	2f62      	cmp	r7, #98	; 0x62
 800940a:	d80a      	bhi.n	8009422 <_printf_i+0x32>
 800940c:	2f00      	cmp	r7, #0
 800940e:	f000 80d8 	beq.w	80095c2 <_printf_i+0x1d2>
 8009412:	2f58      	cmp	r7, #88	; 0x58
 8009414:	f000 80a3 	beq.w	800955e <_printf_i+0x16e>
 8009418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800941c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009420:	e03a      	b.n	8009498 <_printf_i+0xa8>
 8009422:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009426:	2b15      	cmp	r3, #21
 8009428:	d8f6      	bhi.n	8009418 <_printf_i+0x28>
 800942a:	a101      	add	r1, pc, #4	; (adr r1, 8009430 <_printf_i+0x40>)
 800942c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009430:	08009489 	.word	0x08009489
 8009434:	0800949d 	.word	0x0800949d
 8009438:	08009419 	.word	0x08009419
 800943c:	08009419 	.word	0x08009419
 8009440:	08009419 	.word	0x08009419
 8009444:	08009419 	.word	0x08009419
 8009448:	0800949d 	.word	0x0800949d
 800944c:	08009419 	.word	0x08009419
 8009450:	08009419 	.word	0x08009419
 8009454:	08009419 	.word	0x08009419
 8009458:	08009419 	.word	0x08009419
 800945c:	080095a9 	.word	0x080095a9
 8009460:	080094cd 	.word	0x080094cd
 8009464:	0800958b 	.word	0x0800958b
 8009468:	08009419 	.word	0x08009419
 800946c:	08009419 	.word	0x08009419
 8009470:	080095cb 	.word	0x080095cb
 8009474:	08009419 	.word	0x08009419
 8009478:	080094cd 	.word	0x080094cd
 800947c:	08009419 	.word	0x08009419
 8009480:	08009419 	.word	0x08009419
 8009484:	08009593 	.word	0x08009593
 8009488:	682b      	ldr	r3, [r5, #0]
 800948a:	1d1a      	adds	r2, r3, #4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	602a      	str	r2, [r5, #0]
 8009490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009498:	2301      	movs	r3, #1
 800949a:	e0a3      	b.n	80095e4 <_printf_i+0x1f4>
 800949c:	6820      	ldr	r0, [r4, #0]
 800949e:	6829      	ldr	r1, [r5, #0]
 80094a0:	0606      	lsls	r6, r0, #24
 80094a2:	f101 0304 	add.w	r3, r1, #4
 80094a6:	d50a      	bpl.n	80094be <_printf_i+0xce>
 80094a8:	680e      	ldr	r6, [r1, #0]
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	2e00      	cmp	r6, #0
 80094ae:	da03      	bge.n	80094b8 <_printf_i+0xc8>
 80094b0:	232d      	movs	r3, #45	; 0x2d
 80094b2:	4276      	negs	r6, r6
 80094b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094b8:	485e      	ldr	r0, [pc, #376]	; (8009634 <_printf_i+0x244>)
 80094ba:	230a      	movs	r3, #10
 80094bc:	e019      	b.n	80094f2 <_printf_i+0x102>
 80094be:	680e      	ldr	r6, [r1, #0]
 80094c0:	602b      	str	r3, [r5, #0]
 80094c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094c6:	bf18      	it	ne
 80094c8:	b236      	sxthne	r6, r6
 80094ca:	e7ef      	b.n	80094ac <_printf_i+0xbc>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	6820      	ldr	r0, [r4, #0]
 80094d0:	1d19      	adds	r1, r3, #4
 80094d2:	6029      	str	r1, [r5, #0]
 80094d4:	0601      	lsls	r1, r0, #24
 80094d6:	d501      	bpl.n	80094dc <_printf_i+0xec>
 80094d8:	681e      	ldr	r6, [r3, #0]
 80094da:	e002      	b.n	80094e2 <_printf_i+0xf2>
 80094dc:	0646      	lsls	r6, r0, #25
 80094de:	d5fb      	bpl.n	80094d8 <_printf_i+0xe8>
 80094e0:	881e      	ldrh	r6, [r3, #0]
 80094e2:	4854      	ldr	r0, [pc, #336]	; (8009634 <_printf_i+0x244>)
 80094e4:	2f6f      	cmp	r7, #111	; 0x6f
 80094e6:	bf0c      	ite	eq
 80094e8:	2308      	moveq	r3, #8
 80094ea:	230a      	movne	r3, #10
 80094ec:	2100      	movs	r1, #0
 80094ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094f2:	6865      	ldr	r5, [r4, #4]
 80094f4:	60a5      	str	r5, [r4, #8]
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	bfa2      	ittt	ge
 80094fa:	6821      	ldrge	r1, [r4, #0]
 80094fc:	f021 0104 	bicge.w	r1, r1, #4
 8009500:	6021      	strge	r1, [r4, #0]
 8009502:	b90e      	cbnz	r6, 8009508 <_printf_i+0x118>
 8009504:	2d00      	cmp	r5, #0
 8009506:	d04d      	beq.n	80095a4 <_printf_i+0x1b4>
 8009508:	4615      	mov	r5, r2
 800950a:	fbb6 f1f3 	udiv	r1, r6, r3
 800950e:	fb03 6711 	mls	r7, r3, r1, r6
 8009512:	5dc7      	ldrb	r7, [r0, r7]
 8009514:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009518:	4637      	mov	r7, r6
 800951a:	42bb      	cmp	r3, r7
 800951c:	460e      	mov	r6, r1
 800951e:	d9f4      	bls.n	800950a <_printf_i+0x11a>
 8009520:	2b08      	cmp	r3, #8
 8009522:	d10b      	bne.n	800953c <_printf_i+0x14c>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	07de      	lsls	r6, r3, #31
 8009528:	d508      	bpl.n	800953c <_printf_i+0x14c>
 800952a:	6923      	ldr	r3, [r4, #16]
 800952c:	6861      	ldr	r1, [r4, #4]
 800952e:	4299      	cmp	r1, r3
 8009530:	bfde      	ittt	le
 8009532:	2330      	movle	r3, #48	; 0x30
 8009534:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009538:	f105 35ff 	addle.w	r5, r5, #4294967295
 800953c:	1b52      	subs	r2, r2, r5
 800953e:	6122      	str	r2, [r4, #16]
 8009540:	f8cd a000 	str.w	sl, [sp]
 8009544:	464b      	mov	r3, r9
 8009546:	aa03      	add	r2, sp, #12
 8009548:	4621      	mov	r1, r4
 800954a:	4640      	mov	r0, r8
 800954c:	f7ff fee2 	bl	8009314 <_printf_common>
 8009550:	3001      	adds	r0, #1
 8009552:	d14c      	bne.n	80095ee <_printf_i+0x1fe>
 8009554:	f04f 30ff 	mov.w	r0, #4294967295
 8009558:	b004      	add	sp, #16
 800955a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955e:	4835      	ldr	r0, [pc, #212]	; (8009634 <_printf_i+0x244>)
 8009560:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009564:	6829      	ldr	r1, [r5, #0]
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	f851 6b04 	ldr.w	r6, [r1], #4
 800956c:	6029      	str	r1, [r5, #0]
 800956e:	061d      	lsls	r5, r3, #24
 8009570:	d514      	bpl.n	800959c <_printf_i+0x1ac>
 8009572:	07df      	lsls	r7, r3, #31
 8009574:	bf44      	itt	mi
 8009576:	f043 0320 	orrmi.w	r3, r3, #32
 800957a:	6023      	strmi	r3, [r4, #0]
 800957c:	b91e      	cbnz	r6, 8009586 <_printf_i+0x196>
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	f023 0320 	bic.w	r3, r3, #32
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	2310      	movs	r3, #16
 8009588:	e7b0      	b.n	80094ec <_printf_i+0xfc>
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	f043 0320 	orr.w	r3, r3, #32
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	2378      	movs	r3, #120	; 0x78
 8009594:	4828      	ldr	r0, [pc, #160]	; (8009638 <_printf_i+0x248>)
 8009596:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800959a:	e7e3      	b.n	8009564 <_printf_i+0x174>
 800959c:	0659      	lsls	r1, r3, #25
 800959e:	bf48      	it	mi
 80095a0:	b2b6      	uxthmi	r6, r6
 80095a2:	e7e6      	b.n	8009572 <_printf_i+0x182>
 80095a4:	4615      	mov	r5, r2
 80095a6:	e7bb      	b.n	8009520 <_printf_i+0x130>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	6826      	ldr	r6, [r4, #0]
 80095ac:	6961      	ldr	r1, [r4, #20]
 80095ae:	1d18      	adds	r0, r3, #4
 80095b0:	6028      	str	r0, [r5, #0]
 80095b2:	0635      	lsls	r5, r6, #24
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	d501      	bpl.n	80095bc <_printf_i+0x1cc>
 80095b8:	6019      	str	r1, [r3, #0]
 80095ba:	e002      	b.n	80095c2 <_printf_i+0x1d2>
 80095bc:	0670      	lsls	r0, r6, #25
 80095be:	d5fb      	bpl.n	80095b8 <_printf_i+0x1c8>
 80095c0:	8019      	strh	r1, [r3, #0]
 80095c2:	2300      	movs	r3, #0
 80095c4:	6123      	str	r3, [r4, #16]
 80095c6:	4615      	mov	r5, r2
 80095c8:	e7ba      	b.n	8009540 <_printf_i+0x150>
 80095ca:	682b      	ldr	r3, [r5, #0]
 80095cc:	1d1a      	adds	r2, r3, #4
 80095ce:	602a      	str	r2, [r5, #0]
 80095d0:	681d      	ldr	r5, [r3, #0]
 80095d2:	6862      	ldr	r2, [r4, #4]
 80095d4:	2100      	movs	r1, #0
 80095d6:	4628      	mov	r0, r5
 80095d8:	f7f6 fe32 	bl	8000240 <memchr>
 80095dc:	b108      	cbz	r0, 80095e2 <_printf_i+0x1f2>
 80095de:	1b40      	subs	r0, r0, r5
 80095e0:	6060      	str	r0, [r4, #4]
 80095e2:	6863      	ldr	r3, [r4, #4]
 80095e4:	6123      	str	r3, [r4, #16]
 80095e6:	2300      	movs	r3, #0
 80095e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ec:	e7a8      	b.n	8009540 <_printf_i+0x150>
 80095ee:	6923      	ldr	r3, [r4, #16]
 80095f0:	462a      	mov	r2, r5
 80095f2:	4649      	mov	r1, r9
 80095f4:	4640      	mov	r0, r8
 80095f6:	47d0      	blx	sl
 80095f8:	3001      	adds	r0, #1
 80095fa:	d0ab      	beq.n	8009554 <_printf_i+0x164>
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	079b      	lsls	r3, r3, #30
 8009600:	d413      	bmi.n	800962a <_printf_i+0x23a>
 8009602:	68e0      	ldr	r0, [r4, #12]
 8009604:	9b03      	ldr	r3, [sp, #12]
 8009606:	4298      	cmp	r0, r3
 8009608:	bfb8      	it	lt
 800960a:	4618      	movlt	r0, r3
 800960c:	e7a4      	b.n	8009558 <_printf_i+0x168>
 800960e:	2301      	movs	r3, #1
 8009610:	4632      	mov	r2, r6
 8009612:	4649      	mov	r1, r9
 8009614:	4640      	mov	r0, r8
 8009616:	47d0      	blx	sl
 8009618:	3001      	adds	r0, #1
 800961a:	d09b      	beq.n	8009554 <_printf_i+0x164>
 800961c:	3501      	adds	r5, #1
 800961e:	68e3      	ldr	r3, [r4, #12]
 8009620:	9903      	ldr	r1, [sp, #12]
 8009622:	1a5b      	subs	r3, r3, r1
 8009624:	42ab      	cmp	r3, r5
 8009626:	dcf2      	bgt.n	800960e <_printf_i+0x21e>
 8009628:	e7eb      	b.n	8009602 <_printf_i+0x212>
 800962a:	2500      	movs	r5, #0
 800962c:	f104 0619 	add.w	r6, r4, #25
 8009630:	e7f5      	b.n	800961e <_printf_i+0x22e>
 8009632:	bf00      	nop
 8009634:	0800a176 	.word	0x0800a176
 8009638:	0800a187 	.word	0x0800a187

0800963c <_sbrk_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4d06      	ldr	r5, [pc, #24]	; (8009658 <_sbrk_r+0x1c>)
 8009640:	2300      	movs	r3, #0
 8009642:	4604      	mov	r4, r0
 8009644:	4608      	mov	r0, r1
 8009646:	602b      	str	r3, [r5, #0]
 8009648:	f7f8 f9b0 	bl	80019ac <_sbrk>
 800964c:	1c43      	adds	r3, r0, #1
 800964e:	d102      	bne.n	8009656 <_sbrk_r+0x1a>
 8009650:	682b      	ldr	r3, [r5, #0]
 8009652:	b103      	cbz	r3, 8009656 <_sbrk_r+0x1a>
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	20000518 	.word	0x20000518

0800965c <__swbuf_r>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	460e      	mov	r6, r1
 8009660:	4614      	mov	r4, r2
 8009662:	4605      	mov	r5, r0
 8009664:	b118      	cbz	r0, 800966e <__swbuf_r+0x12>
 8009666:	6983      	ldr	r3, [r0, #24]
 8009668:	b90b      	cbnz	r3, 800966e <__swbuf_r+0x12>
 800966a:	f000 f9d9 	bl	8009a20 <__sinit>
 800966e:	4b21      	ldr	r3, [pc, #132]	; (80096f4 <__swbuf_r+0x98>)
 8009670:	429c      	cmp	r4, r3
 8009672:	d12b      	bne.n	80096cc <__swbuf_r+0x70>
 8009674:	686c      	ldr	r4, [r5, #4]
 8009676:	69a3      	ldr	r3, [r4, #24]
 8009678:	60a3      	str	r3, [r4, #8]
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	071a      	lsls	r2, r3, #28
 800967e:	d52f      	bpl.n	80096e0 <__swbuf_r+0x84>
 8009680:	6923      	ldr	r3, [r4, #16]
 8009682:	b36b      	cbz	r3, 80096e0 <__swbuf_r+0x84>
 8009684:	6923      	ldr	r3, [r4, #16]
 8009686:	6820      	ldr	r0, [r4, #0]
 8009688:	1ac0      	subs	r0, r0, r3
 800968a:	6963      	ldr	r3, [r4, #20]
 800968c:	b2f6      	uxtb	r6, r6
 800968e:	4283      	cmp	r3, r0
 8009690:	4637      	mov	r7, r6
 8009692:	dc04      	bgt.n	800969e <__swbuf_r+0x42>
 8009694:	4621      	mov	r1, r4
 8009696:	4628      	mov	r0, r5
 8009698:	f000 f92e 	bl	80098f8 <_fflush_r>
 800969c:	bb30      	cbnz	r0, 80096ec <__swbuf_r+0x90>
 800969e:	68a3      	ldr	r3, [r4, #8]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	60a3      	str	r3, [r4, #8]
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	1c5a      	adds	r2, r3, #1
 80096a8:	6022      	str	r2, [r4, #0]
 80096aa:	701e      	strb	r6, [r3, #0]
 80096ac:	6963      	ldr	r3, [r4, #20]
 80096ae:	3001      	adds	r0, #1
 80096b0:	4283      	cmp	r3, r0
 80096b2:	d004      	beq.n	80096be <__swbuf_r+0x62>
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	07db      	lsls	r3, r3, #31
 80096b8:	d506      	bpl.n	80096c8 <__swbuf_r+0x6c>
 80096ba:	2e0a      	cmp	r6, #10
 80096bc:	d104      	bne.n	80096c8 <__swbuf_r+0x6c>
 80096be:	4621      	mov	r1, r4
 80096c0:	4628      	mov	r0, r5
 80096c2:	f000 f919 	bl	80098f8 <_fflush_r>
 80096c6:	b988      	cbnz	r0, 80096ec <__swbuf_r+0x90>
 80096c8:	4638      	mov	r0, r7
 80096ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096cc:	4b0a      	ldr	r3, [pc, #40]	; (80096f8 <__swbuf_r+0x9c>)
 80096ce:	429c      	cmp	r4, r3
 80096d0:	d101      	bne.n	80096d6 <__swbuf_r+0x7a>
 80096d2:	68ac      	ldr	r4, [r5, #8]
 80096d4:	e7cf      	b.n	8009676 <__swbuf_r+0x1a>
 80096d6:	4b09      	ldr	r3, [pc, #36]	; (80096fc <__swbuf_r+0xa0>)
 80096d8:	429c      	cmp	r4, r3
 80096da:	bf08      	it	eq
 80096dc:	68ec      	ldreq	r4, [r5, #12]
 80096de:	e7ca      	b.n	8009676 <__swbuf_r+0x1a>
 80096e0:	4621      	mov	r1, r4
 80096e2:	4628      	mov	r0, r5
 80096e4:	f000 f80c 	bl	8009700 <__swsetup_r>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d0cb      	beq.n	8009684 <__swbuf_r+0x28>
 80096ec:	f04f 37ff 	mov.w	r7, #4294967295
 80096f0:	e7ea      	b.n	80096c8 <__swbuf_r+0x6c>
 80096f2:	bf00      	nop
 80096f4:	0800a1b8 	.word	0x0800a1b8
 80096f8:	0800a1d8 	.word	0x0800a1d8
 80096fc:	0800a198 	.word	0x0800a198

08009700 <__swsetup_r>:
 8009700:	4b32      	ldr	r3, [pc, #200]	; (80097cc <__swsetup_r+0xcc>)
 8009702:	b570      	push	{r4, r5, r6, lr}
 8009704:	681d      	ldr	r5, [r3, #0]
 8009706:	4606      	mov	r6, r0
 8009708:	460c      	mov	r4, r1
 800970a:	b125      	cbz	r5, 8009716 <__swsetup_r+0x16>
 800970c:	69ab      	ldr	r3, [r5, #24]
 800970e:	b913      	cbnz	r3, 8009716 <__swsetup_r+0x16>
 8009710:	4628      	mov	r0, r5
 8009712:	f000 f985 	bl	8009a20 <__sinit>
 8009716:	4b2e      	ldr	r3, [pc, #184]	; (80097d0 <__swsetup_r+0xd0>)
 8009718:	429c      	cmp	r4, r3
 800971a:	d10f      	bne.n	800973c <__swsetup_r+0x3c>
 800971c:	686c      	ldr	r4, [r5, #4]
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009724:	0719      	lsls	r1, r3, #28
 8009726:	d42c      	bmi.n	8009782 <__swsetup_r+0x82>
 8009728:	06dd      	lsls	r5, r3, #27
 800972a:	d411      	bmi.n	8009750 <__swsetup_r+0x50>
 800972c:	2309      	movs	r3, #9
 800972e:	6033      	str	r3, [r6, #0]
 8009730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009734:	81a3      	strh	r3, [r4, #12]
 8009736:	f04f 30ff 	mov.w	r0, #4294967295
 800973a:	e03e      	b.n	80097ba <__swsetup_r+0xba>
 800973c:	4b25      	ldr	r3, [pc, #148]	; (80097d4 <__swsetup_r+0xd4>)
 800973e:	429c      	cmp	r4, r3
 8009740:	d101      	bne.n	8009746 <__swsetup_r+0x46>
 8009742:	68ac      	ldr	r4, [r5, #8]
 8009744:	e7eb      	b.n	800971e <__swsetup_r+0x1e>
 8009746:	4b24      	ldr	r3, [pc, #144]	; (80097d8 <__swsetup_r+0xd8>)
 8009748:	429c      	cmp	r4, r3
 800974a:	bf08      	it	eq
 800974c:	68ec      	ldreq	r4, [r5, #12]
 800974e:	e7e6      	b.n	800971e <__swsetup_r+0x1e>
 8009750:	0758      	lsls	r0, r3, #29
 8009752:	d512      	bpl.n	800977a <__swsetup_r+0x7a>
 8009754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009756:	b141      	cbz	r1, 800976a <__swsetup_r+0x6a>
 8009758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800975c:	4299      	cmp	r1, r3
 800975e:	d002      	beq.n	8009766 <__swsetup_r+0x66>
 8009760:	4630      	mov	r0, r6
 8009762:	f7ff fa41 	bl	8008be8 <_free_r>
 8009766:	2300      	movs	r3, #0
 8009768:	6363      	str	r3, [r4, #52]	; 0x34
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009770:	81a3      	strh	r3, [r4, #12]
 8009772:	2300      	movs	r3, #0
 8009774:	6063      	str	r3, [r4, #4]
 8009776:	6923      	ldr	r3, [r4, #16]
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f043 0308 	orr.w	r3, r3, #8
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	b94b      	cbnz	r3, 800979a <__swsetup_r+0x9a>
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800978c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009790:	d003      	beq.n	800979a <__swsetup_r+0x9a>
 8009792:	4621      	mov	r1, r4
 8009794:	4630      	mov	r0, r6
 8009796:	f000 fa09 	bl	8009bac <__smakebuf_r>
 800979a:	89a0      	ldrh	r0, [r4, #12]
 800979c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097a0:	f010 0301 	ands.w	r3, r0, #1
 80097a4:	d00a      	beq.n	80097bc <__swsetup_r+0xbc>
 80097a6:	2300      	movs	r3, #0
 80097a8:	60a3      	str	r3, [r4, #8]
 80097aa:	6963      	ldr	r3, [r4, #20]
 80097ac:	425b      	negs	r3, r3
 80097ae:	61a3      	str	r3, [r4, #24]
 80097b0:	6923      	ldr	r3, [r4, #16]
 80097b2:	b943      	cbnz	r3, 80097c6 <__swsetup_r+0xc6>
 80097b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097b8:	d1ba      	bne.n	8009730 <__swsetup_r+0x30>
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	0781      	lsls	r1, r0, #30
 80097be:	bf58      	it	pl
 80097c0:	6963      	ldrpl	r3, [r4, #20]
 80097c2:	60a3      	str	r3, [r4, #8]
 80097c4:	e7f4      	b.n	80097b0 <__swsetup_r+0xb0>
 80097c6:	2000      	movs	r0, #0
 80097c8:	e7f7      	b.n	80097ba <__swsetup_r+0xba>
 80097ca:	bf00      	nop
 80097cc:	200001ac 	.word	0x200001ac
 80097d0:	0800a1b8 	.word	0x0800a1b8
 80097d4:	0800a1d8 	.word	0x0800a1d8
 80097d8:	0800a198 	.word	0x0800a198

080097dc <abort>:
 80097dc:	b508      	push	{r3, lr}
 80097de:	2006      	movs	r0, #6
 80097e0:	f000 fab0 	bl	8009d44 <raise>
 80097e4:	2001      	movs	r0, #1
 80097e6:	f7f8 f869 	bl	80018bc <_exit>
	...

080097ec <__sflush_r>:
 80097ec:	898a      	ldrh	r2, [r1, #12]
 80097ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f2:	4605      	mov	r5, r0
 80097f4:	0710      	lsls	r0, r2, #28
 80097f6:	460c      	mov	r4, r1
 80097f8:	d458      	bmi.n	80098ac <__sflush_r+0xc0>
 80097fa:	684b      	ldr	r3, [r1, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dc05      	bgt.n	800980c <__sflush_r+0x20>
 8009800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009802:	2b00      	cmp	r3, #0
 8009804:	dc02      	bgt.n	800980c <__sflush_r+0x20>
 8009806:	2000      	movs	r0, #0
 8009808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800980c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800980e:	2e00      	cmp	r6, #0
 8009810:	d0f9      	beq.n	8009806 <__sflush_r+0x1a>
 8009812:	2300      	movs	r3, #0
 8009814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009818:	682f      	ldr	r7, [r5, #0]
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	d032      	beq.n	8009884 <__sflush_r+0x98>
 800981e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009820:	89a3      	ldrh	r3, [r4, #12]
 8009822:	075a      	lsls	r2, r3, #29
 8009824:	d505      	bpl.n	8009832 <__sflush_r+0x46>
 8009826:	6863      	ldr	r3, [r4, #4]
 8009828:	1ac0      	subs	r0, r0, r3
 800982a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800982c:	b10b      	cbz	r3, 8009832 <__sflush_r+0x46>
 800982e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009830:	1ac0      	subs	r0, r0, r3
 8009832:	2300      	movs	r3, #0
 8009834:	4602      	mov	r2, r0
 8009836:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009838:	6a21      	ldr	r1, [r4, #32]
 800983a:	4628      	mov	r0, r5
 800983c:	47b0      	blx	r6
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	d106      	bne.n	8009852 <__sflush_r+0x66>
 8009844:	6829      	ldr	r1, [r5, #0]
 8009846:	291d      	cmp	r1, #29
 8009848:	d82c      	bhi.n	80098a4 <__sflush_r+0xb8>
 800984a:	4a2a      	ldr	r2, [pc, #168]	; (80098f4 <__sflush_r+0x108>)
 800984c:	40ca      	lsrs	r2, r1
 800984e:	07d6      	lsls	r6, r2, #31
 8009850:	d528      	bpl.n	80098a4 <__sflush_r+0xb8>
 8009852:	2200      	movs	r2, #0
 8009854:	6062      	str	r2, [r4, #4]
 8009856:	04d9      	lsls	r1, r3, #19
 8009858:	6922      	ldr	r2, [r4, #16]
 800985a:	6022      	str	r2, [r4, #0]
 800985c:	d504      	bpl.n	8009868 <__sflush_r+0x7c>
 800985e:	1c42      	adds	r2, r0, #1
 8009860:	d101      	bne.n	8009866 <__sflush_r+0x7a>
 8009862:	682b      	ldr	r3, [r5, #0]
 8009864:	b903      	cbnz	r3, 8009868 <__sflush_r+0x7c>
 8009866:	6560      	str	r0, [r4, #84]	; 0x54
 8009868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800986a:	602f      	str	r7, [r5, #0]
 800986c:	2900      	cmp	r1, #0
 800986e:	d0ca      	beq.n	8009806 <__sflush_r+0x1a>
 8009870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009874:	4299      	cmp	r1, r3
 8009876:	d002      	beq.n	800987e <__sflush_r+0x92>
 8009878:	4628      	mov	r0, r5
 800987a:	f7ff f9b5 	bl	8008be8 <_free_r>
 800987e:	2000      	movs	r0, #0
 8009880:	6360      	str	r0, [r4, #52]	; 0x34
 8009882:	e7c1      	b.n	8009808 <__sflush_r+0x1c>
 8009884:	6a21      	ldr	r1, [r4, #32]
 8009886:	2301      	movs	r3, #1
 8009888:	4628      	mov	r0, r5
 800988a:	47b0      	blx	r6
 800988c:	1c41      	adds	r1, r0, #1
 800988e:	d1c7      	bne.n	8009820 <__sflush_r+0x34>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0c4      	beq.n	8009820 <__sflush_r+0x34>
 8009896:	2b1d      	cmp	r3, #29
 8009898:	d001      	beq.n	800989e <__sflush_r+0xb2>
 800989a:	2b16      	cmp	r3, #22
 800989c:	d101      	bne.n	80098a2 <__sflush_r+0xb6>
 800989e:	602f      	str	r7, [r5, #0]
 80098a0:	e7b1      	b.n	8009806 <__sflush_r+0x1a>
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	e7ad      	b.n	8009808 <__sflush_r+0x1c>
 80098ac:	690f      	ldr	r7, [r1, #16]
 80098ae:	2f00      	cmp	r7, #0
 80098b0:	d0a9      	beq.n	8009806 <__sflush_r+0x1a>
 80098b2:	0793      	lsls	r3, r2, #30
 80098b4:	680e      	ldr	r6, [r1, #0]
 80098b6:	bf08      	it	eq
 80098b8:	694b      	ldreq	r3, [r1, #20]
 80098ba:	600f      	str	r7, [r1, #0]
 80098bc:	bf18      	it	ne
 80098be:	2300      	movne	r3, #0
 80098c0:	eba6 0807 	sub.w	r8, r6, r7
 80098c4:	608b      	str	r3, [r1, #8]
 80098c6:	f1b8 0f00 	cmp.w	r8, #0
 80098ca:	dd9c      	ble.n	8009806 <__sflush_r+0x1a>
 80098cc:	6a21      	ldr	r1, [r4, #32]
 80098ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098d0:	4643      	mov	r3, r8
 80098d2:	463a      	mov	r2, r7
 80098d4:	4628      	mov	r0, r5
 80098d6:	47b0      	blx	r6
 80098d8:	2800      	cmp	r0, #0
 80098da:	dc06      	bgt.n	80098ea <__sflush_r+0xfe>
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e2:	81a3      	strh	r3, [r4, #12]
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	e78e      	b.n	8009808 <__sflush_r+0x1c>
 80098ea:	4407      	add	r7, r0
 80098ec:	eba8 0800 	sub.w	r8, r8, r0
 80098f0:	e7e9      	b.n	80098c6 <__sflush_r+0xda>
 80098f2:	bf00      	nop
 80098f4:	20400001 	.word	0x20400001

080098f8 <_fflush_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	690b      	ldr	r3, [r1, #16]
 80098fc:	4605      	mov	r5, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	b913      	cbnz	r3, 8009908 <_fflush_r+0x10>
 8009902:	2500      	movs	r5, #0
 8009904:	4628      	mov	r0, r5
 8009906:	bd38      	pop	{r3, r4, r5, pc}
 8009908:	b118      	cbz	r0, 8009912 <_fflush_r+0x1a>
 800990a:	6983      	ldr	r3, [r0, #24]
 800990c:	b90b      	cbnz	r3, 8009912 <_fflush_r+0x1a>
 800990e:	f000 f887 	bl	8009a20 <__sinit>
 8009912:	4b14      	ldr	r3, [pc, #80]	; (8009964 <_fflush_r+0x6c>)
 8009914:	429c      	cmp	r4, r3
 8009916:	d11b      	bne.n	8009950 <_fflush_r+0x58>
 8009918:	686c      	ldr	r4, [r5, #4]
 800991a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0ef      	beq.n	8009902 <_fflush_r+0xa>
 8009922:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009924:	07d0      	lsls	r0, r2, #31
 8009926:	d404      	bmi.n	8009932 <_fflush_r+0x3a>
 8009928:	0599      	lsls	r1, r3, #22
 800992a:	d402      	bmi.n	8009932 <_fflush_r+0x3a>
 800992c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800992e:	f000 f915 	bl	8009b5c <__retarget_lock_acquire_recursive>
 8009932:	4628      	mov	r0, r5
 8009934:	4621      	mov	r1, r4
 8009936:	f7ff ff59 	bl	80097ec <__sflush_r>
 800993a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800993c:	07da      	lsls	r2, r3, #31
 800993e:	4605      	mov	r5, r0
 8009940:	d4e0      	bmi.n	8009904 <_fflush_r+0xc>
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	059b      	lsls	r3, r3, #22
 8009946:	d4dd      	bmi.n	8009904 <_fflush_r+0xc>
 8009948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800994a:	f000 f908 	bl	8009b5e <__retarget_lock_release_recursive>
 800994e:	e7d9      	b.n	8009904 <_fflush_r+0xc>
 8009950:	4b05      	ldr	r3, [pc, #20]	; (8009968 <_fflush_r+0x70>)
 8009952:	429c      	cmp	r4, r3
 8009954:	d101      	bne.n	800995a <_fflush_r+0x62>
 8009956:	68ac      	ldr	r4, [r5, #8]
 8009958:	e7df      	b.n	800991a <_fflush_r+0x22>
 800995a:	4b04      	ldr	r3, [pc, #16]	; (800996c <_fflush_r+0x74>)
 800995c:	429c      	cmp	r4, r3
 800995e:	bf08      	it	eq
 8009960:	68ec      	ldreq	r4, [r5, #12]
 8009962:	e7da      	b.n	800991a <_fflush_r+0x22>
 8009964:	0800a1b8 	.word	0x0800a1b8
 8009968:	0800a1d8 	.word	0x0800a1d8
 800996c:	0800a198 	.word	0x0800a198

08009970 <std>:
 8009970:	2300      	movs	r3, #0
 8009972:	b510      	push	{r4, lr}
 8009974:	4604      	mov	r4, r0
 8009976:	e9c0 3300 	strd	r3, r3, [r0]
 800997a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800997e:	6083      	str	r3, [r0, #8]
 8009980:	8181      	strh	r1, [r0, #12]
 8009982:	6643      	str	r3, [r0, #100]	; 0x64
 8009984:	81c2      	strh	r2, [r0, #14]
 8009986:	6183      	str	r3, [r0, #24]
 8009988:	4619      	mov	r1, r3
 800998a:	2208      	movs	r2, #8
 800998c:	305c      	adds	r0, #92	; 0x5c
 800998e:	f7fe ffe3 	bl	8008958 <memset>
 8009992:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <std+0x38>)
 8009994:	6263      	str	r3, [r4, #36]	; 0x24
 8009996:	4b05      	ldr	r3, [pc, #20]	; (80099ac <std+0x3c>)
 8009998:	62a3      	str	r3, [r4, #40]	; 0x28
 800999a:	4b05      	ldr	r3, [pc, #20]	; (80099b0 <std+0x40>)
 800999c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800999e:	4b05      	ldr	r3, [pc, #20]	; (80099b4 <std+0x44>)
 80099a0:	6224      	str	r4, [r4, #32]
 80099a2:	6323      	str	r3, [r4, #48]	; 0x30
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	bf00      	nop
 80099a8:	08009d7d 	.word	0x08009d7d
 80099ac:	08009d9f 	.word	0x08009d9f
 80099b0:	08009dd7 	.word	0x08009dd7
 80099b4:	08009dfb 	.word	0x08009dfb

080099b8 <_cleanup_r>:
 80099b8:	4901      	ldr	r1, [pc, #4]	; (80099c0 <_cleanup_r+0x8>)
 80099ba:	f000 b8af 	b.w	8009b1c <_fwalk_reent>
 80099be:	bf00      	nop
 80099c0:	080098f9 	.word	0x080098f9

080099c4 <__sfmoreglue>:
 80099c4:	b570      	push	{r4, r5, r6, lr}
 80099c6:	2268      	movs	r2, #104	; 0x68
 80099c8:	1e4d      	subs	r5, r1, #1
 80099ca:	4355      	muls	r5, r2
 80099cc:	460e      	mov	r6, r1
 80099ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099d2:	f7ff f975 	bl	8008cc0 <_malloc_r>
 80099d6:	4604      	mov	r4, r0
 80099d8:	b140      	cbz	r0, 80099ec <__sfmoreglue+0x28>
 80099da:	2100      	movs	r1, #0
 80099dc:	e9c0 1600 	strd	r1, r6, [r0]
 80099e0:	300c      	adds	r0, #12
 80099e2:	60a0      	str	r0, [r4, #8]
 80099e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099e8:	f7fe ffb6 	bl	8008958 <memset>
 80099ec:	4620      	mov	r0, r4
 80099ee:	bd70      	pop	{r4, r5, r6, pc}

080099f0 <__sfp_lock_acquire>:
 80099f0:	4801      	ldr	r0, [pc, #4]	; (80099f8 <__sfp_lock_acquire+0x8>)
 80099f2:	f000 b8b3 	b.w	8009b5c <__retarget_lock_acquire_recursive>
 80099f6:	bf00      	nop
 80099f8:	20000515 	.word	0x20000515

080099fc <__sfp_lock_release>:
 80099fc:	4801      	ldr	r0, [pc, #4]	; (8009a04 <__sfp_lock_release+0x8>)
 80099fe:	f000 b8ae 	b.w	8009b5e <__retarget_lock_release_recursive>
 8009a02:	bf00      	nop
 8009a04:	20000515 	.word	0x20000515

08009a08 <__sinit_lock_acquire>:
 8009a08:	4801      	ldr	r0, [pc, #4]	; (8009a10 <__sinit_lock_acquire+0x8>)
 8009a0a:	f000 b8a7 	b.w	8009b5c <__retarget_lock_acquire_recursive>
 8009a0e:	bf00      	nop
 8009a10:	20000516 	.word	0x20000516

08009a14 <__sinit_lock_release>:
 8009a14:	4801      	ldr	r0, [pc, #4]	; (8009a1c <__sinit_lock_release+0x8>)
 8009a16:	f000 b8a2 	b.w	8009b5e <__retarget_lock_release_recursive>
 8009a1a:	bf00      	nop
 8009a1c:	20000516 	.word	0x20000516

08009a20 <__sinit>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	4604      	mov	r4, r0
 8009a24:	f7ff fff0 	bl	8009a08 <__sinit_lock_acquire>
 8009a28:	69a3      	ldr	r3, [r4, #24]
 8009a2a:	b11b      	cbz	r3, 8009a34 <__sinit+0x14>
 8009a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a30:	f7ff bff0 	b.w	8009a14 <__sinit_lock_release>
 8009a34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a38:	6523      	str	r3, [r4, #80]	; 0x50
 8009a3a:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <__sinit+0x68>)
 8009a3c:	4a13      	ldr	r2, [pc, #76]	; (8009a8c <__sinit+0x6c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a42:	42a3      	cmp	r3, r4
 8009a44:	bf04      	itt	eq
 8009a46:	2301      	moveq	r3, #1
 8009a48:	61a3      	streq	r3, [r4, #24]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 f820 	bl	8009a90 <__sfp>
 8009a50:	6060      	str	r0, [r4, #4]
 8009a52:	4620      	mov	r0, r4
 8009a54:	f000 f81c 	bl	8009a90 <__sfp>
 8009a58:	60a0      	str	r0, [r4, #8]
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f000 f818 	bl	8009a90 <__sfp>
 8009a60:	2200      	movs	r2, #0
 8009a62:	60e0      	str	r0, [r4, #12]
 8009a64:	2104      	movs	r1, #4
 8009a66:	6860      	ldr	r0, [r4, #4]
 8009a68:	f7ff ff82 	bl	8009970 <std>
 8009a6c:	68a0      	ldr	r0, [r4, #8]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	2109      	movs	r1, #9
 8009a72:	f7ff ff7d 	bl	8009970 <std>
 8009a76:	68e0      	ldr	r0, [r4, #12]
 8009a78:	2202      	movs	r2, #2
 8009a7a:	2112      	movs	r1, #18
 8009a7c:	f7ff ff78 	bl	8009970 <std>
 8009a80:	2301      	movs	r3, #1
 8009a82:	61a3      	str	r3, [r4, #24]
 8009a84:	e7d2      	b.n	8009a2c <__sinit+0xc>
 8009a86:	bf00      	nop
 8009a88:	08009fb0 	.word	0x08009fb0
 8009a8c:	080099b9 	.word	0x080099b9

08009a90 <__sfp>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	4607      	mov	r7, r0
 8009a94:	f7ff ffac 	bl	80099f0 <__sfp_lock_acquire>
 8009a98:	4b1e      	ldr	r3, [pc, #120]	; (8009b14 <__sfp+0x84>)
 8009a9a:	681e      	ldr	r6, [r3, #0]
 8009a9c:	69b3      	ldr	r3, [r6, #24]
 8009a9e:	b913      	cbnz	r3, 8009aa6 <__sfp+0x16>
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f7ff ffbd 	bl	8009a20 <__sinit>
 8009aa6:	3648      	adds	r6, #72	; 0x48
 8009aa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	d503      	bpl.n	8009ab8 <__sfp+0x28>
 8009ab0:	6833      	ldr	r3, [r6, #0]
 8009ab2:	b30b      	cbz	r3, 8009af8 <__sfp+0x68>
 8009ab4:	6836      	ldr	r6, [r6, #0]
 8009ab6:	e7f7      	b.n	8009aa8 <__sfp+0x18>
 8009ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009abc:	b9d5      	cbnz	r5, 8009af4 <__sfp+0x64>
 8009abe:	4b16      	ldr	r3, [pc, #88]	; (8009b18 <__sfp+0x88>)
 8009ac0:	60e3      	str	r3, [r4, #12]
 8009ac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ac6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ac8:	f000 f847 	bl	8009b5a <__retarget_lock_init_recursive>
 8009acc:	f7ff ff96 	bl	80099fc <__sfp_lock_release>
 8009ad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ad8:	6025      	str	r5, [r4, #0]
 8009ada:	61a5      	str	r5, [r4, #24]
 8009adc:	2208      	movs	r2, #8
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ae4:	f7fe ff38 	bl	8008958 <memset>
 8009ae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009aec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009af0:	4620      	mov	r0, r4
 8009af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009af4:	3468      	adds	r4, #104	; 0x68
 8009af6:	e7d9      	b.n	8009aac <__sfp+0x1c>
 8009af8:	2104      	movs	r1, #4
 8009afa:	4638      	mov	r0, r7
 8009afc:	f7ff ff62 	bl	80099c4 <__sfmoreglue>
 8009b00:	4604      	mov	r4, r0
 8009b02:	6030      	str	r0, [r6, #0]
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d1d5      	bne.n	8009ab4 <__sfp+0x24>
 8009b08:	f7ff ff78 	bl	80099fc <__sfp_lock_release>
 8009b0c:	230c      	movs	r3, #12
 8009b0e:	603b      	str	r3, [r7, #0]
 8009b10:	e7ee      	b.n	8009af0 <__sfp+0x60>
 8009b12:	bf00      	nop
 8009b14:	08009fb0 	.word	0x08009fb0
 8009b18:	ffff0001 	.word	0xffff0001

08009b1c <_fwalk_reent>:
 8009b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b20:	4606      	mov	r6, r0
 8009b22:	4688      	mov	r8, r1
 8009b24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b28:	2700      	movs	r7, #0
 8009b2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b2e:	f1b9 0901 	subs.w	r9, r9, #1
 8009b32:	d505      	bpl.n	8009b40 <_fwalk_reent+0x24>
 8009b34:	6824      	ldr	r4, [r4, #0]
 8009b36:	2c00      	cmp	r4, #0
 8009b38:	d1f7      	bne.n	8009b2a <_fwalk_reent+0xe>
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b40:	89ab      	ldrh	r3, [r5, #12]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d907      	bls.n	8009b56 <_fwalk_reent+0x3a>
 8009b46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	d003      	beq.n	8009b56 <_fwalk_reent+0x3a>
 8009b4e:	4629      	mov	r1, r5
 8009b50:	4630      	mov	r0, r6
 8009b52:	47c0      	blx	r8
 8009b54:	4307      	orrs	r7, r0
 8009b56:	3568      	adds	r5, #104	; 0x68
 8009b58:	e7e9      	b.n	8009b2e <_fwalk_reent+0x12>

08009b5a <__retarget_lock_init_recursive>:
 8009b5a:	4770      	bx	lr

08009b5c <__retarget_lock_acquire_recursive>:
 8009b5c:	4770      	bx	lr

08009b5e <__retarget_lock_release_recursive>:
 8009b5e:	4770      	bx	lr

08009b60 <__swhatbuf_r>:
 8009b60:	b570      	push	{r4, r5, r6, lr}
 8009b62:	460e      	mov	r6, r1
 8009b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b68:	2900      	cmp	r1, #0
 8009b6a:	b096      	sub	sp, #88	; 0x58
 8009b6c:	4614      	mov	r4, r2
 8009b6e:	461d      	mov	r5, r3
 8009b70:	da08      	bge.n	8009b84 <__swhatbuf_r+0x24>
 8009b72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	602a      	str	r2, [r5, #0]
 8009b7a:	061a      	lsls	r2, r3, #24
 8009b7c:	d410      	bmi.n	8009ba0 <__swhatbuf_r+0x40>
 8009b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b82:	e00e      	b.n	8009ba2 <__swhatbuf_r+0x42>
 8009b84:	466a      	mov	r2, sp
 8009b86:	f000 f95f 	bl	8009e48 <_fstat_r>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	dbf1      	blt.n	8009b72 <__swhatbuf_r+0x12>
 8009b8e:	9a01      	ldr	r2, [sp, #4]
 8009b90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b98:	425a      	negs	r2, r3
 8009b9a:	415a      	adcs	r2, r3
 8009b9c:	602a      	str	r2, [r5, #0]
 8009b9e:	e7ee      	b.n	8009b7e <__swhatbuf_r+0x1e>
 8009ba0:	2340      	movs	r3, #64	; 0x40
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	b016      	add	sp, #88	; 0x58
 8009ba8:	bd70      	pop	{r4, r5, r6, pc}
	...

08009bac <__smakebuf_r>:
 8009bac:	898b      	ldrh	r3, [r1, #12]
 8009bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bb0:	079d      	lsls	r5, r3, #30
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	d507      	bpl.n	8009bc8 <__smakebuf_r+0x1c>
 8009bb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	6123      	str	r3, [r4, #16]
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	6163      	str	r3, [r4, #20]
 8009bc4:	b002      	add	sp, #8
 8009bc6:	bd70      	pop	{r4, r5, r6, pc}
 8009bc8:	ab01      	add	r3, sp, #4
 8009bca:	466a      	mov	r2, sp
 8009bcc:	f7ff ffc8 	bl	8009b60 <__swhatbuf_r>
 8009bd0:	9900      	ldr	r1, [sp, #0]
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	f7ff f873 	bl	8008cc0 <_malloc_r>
 8009bda:	b948      	cbnz	r0, 8009bf0 <__smakebuf_r+0x44>
 8009bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be0:	059a      	lsls	r2, r3, #22
 8009be2:	d4ef      	bmi.n	8009bc4 <__smakebuf_r+0x18>
 8009be4:	f023 0303 	bic.w	r3, r3, #3
 8009be8:	f043 0302 	orr.w	r3, r3, #2
 8009bec:	81a3      	strh	r3, [r4, #12]
 8009bee:	e7e3      	b.n	8009bb8 <__smakebuf_r+0xc>
 8009bf0:	4b0d      	ldr	r3, [pc, #52]	; (8009c28 <__smakebuf_r+0x7c>)
 8009bf2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bf4:	89a3      	ldrh	r3, [r4, #12]
 8009bf6:	6020      	str	r0, [r4, #0]
 8009bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bfc:	81a3      	strh	r3, [r4, #12]
 8009bfe:	9b00      	ldr	r3, [sp, #0]
 8009c00:	6163      	str	r3, [r4, #20]
 8009c02:	9b01      	ldr	r3, [sp, #4]
 8009c04:	6120      	str	r0, [r4, #16]
 8009c06:	b15b      	cbz	r3, 8009c20 <__smakebuf_r+0x74>
 8009c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	f000 f92d 	bl	8009e6c <_isatty_r>
 8009c12:	b128      	cbz	r0, 8009c20 <__smakebuf_r+0x74>
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	f023 0303 	bic.w	r3, r3, #3
 8009c1a:	f043 0301 	orr.w	r3, r3, #1
 8009c1e:	81a3      	strh	r3, [r4, #12]
 8009c20:	89a0      	ldrh	r0, [r4, #12]
 8009c22:	4305      	orrs	r5, r0
 8009c24:	81a5      	strh	r5, [r4, #12]
 8009c26:	e7cd      	b.n	8009bc4 <__smakebuf_r+0x18>
 8009c28:	080099b9 	.word	0x080099b9

08009c2c <memcpy>:
 8009c2c:	440a      	add	r2, r1
 8009c2e:	4291      	cmp	r1, r2
 8009c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c34:	d100      	bne.n	8009c38 <memcpy+0xc>
 8009c36:	4770      	bx	lr
 8009c38:	b510      	push	{r4, lr}
 8009c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c42:	4291      	cmp	r1, r2
 8009c44:	d1f9      	bne.n	8009c3a <memcpy+0xe>
 8009c46:	bd10      	pop	{r4, pc}

08009c48 <memmove>:
 8009c48:	4288      	cmp	r0, r1
 8009c4a:	b510      	push	{r4, lr}
 8009c4c:	eb01 0402 	add.w	r4, r1, r2
 8009c50:	d902      	bls.n	8009c58 <memmove+0x10>
 8009c52:	4284      	cmp	r4, r0
 8009c54:	4623      	mov	r3, r4
 8009c56:	d807      	bhi.n	8009c68 <memmove+0x20>
 8009c58:	1e43      	subs	r3, r0, #1
 8009c5a:	42a1      	cmp	r1, r4
 8009c5c:	d008      	beq.n	8009c70 <memmove+0x28>
 8009c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c66:	e7f8      	b.n	8009c5a <memmove+0x12>
 8009c68:	4402      	add	r2, r0
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	428a      	cmp	r2, r1
 8009c6e:	d100      	bne.n	8009c72 <memmove+0x2a>
 8009c70:	bd10      	pop	{r4, pc}
 8009c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c7a:	e7f7      	b.n	8009c6c <memmove+0x24>

08009c7c <__malloc_lock>:
 8009c7c:	4801      	ldr	r0, [pc, #4]	; (8009c84 <__malloc_lock+0x8>)
 8009c7e:	f7ff bf6d 	b.w	8009b5c <__retarget_lock_acquire_recursive>
 8009c82:	bf00      	nop
 8009c84:	20000514 	.word	0x20000514

08009c88 <__malloc_unlock>:
 8009c88:	4801      	ldr	r0, [pc, #4]	; (8009c90 <__malloc_unlock+0x8>)
 8009c8a:	f7ff bf68 	b.w	8009b5e <__retarget_lock_release_recursive>
 8009c8e:	bf00      	nop
 8009c90:	20000514 	.word	0x20000514

08009c94 <_realloc_r>:
 8009c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c98:	4680      	mov	r8, r0
 8009c9a:	4614      	mov	r4, r2
 8009c9c:	460e      	mov	r6, r1
 8009c9e:	b921      	cbnz	r1, 8009caa <_realloc_r+0x16>
 8009ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	f7ff b80b 	b.w	8008cc0 <_malloc_r>
 8009caa:	b92a      	cbnz	r2, 8009cb8 <_realloc_r+0x24>
 8009cac:	f7fe ff9c 	bl	8008be8 <_free_r>
 8009cb0:	4625      	mov	r5, r4
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb8:	f000 f8fa 	bl	8009eb0 <_malloc_usable_size_r>
 8009cbc:	4284      	cmp	r4, r0
 8009cbe:	4607      	mov	r7, r0
 8009cc0:	d802      	bhi.n	8009cc8 <_realloc_r+0x34>
 8009cc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cc6:	d812      	bhi.n	8009cee <_realloc_r+0x5a>
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4640      	mov	r0, r8
 8009ccc:	f7fe fff8 	bl	8008cc0 <_malloc_r>
 8009cd0:	4605      	mov	r5, r0
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d0ed      	beq.n	8009cb2 <_realloc_r+0x1e>
 8009cd6:	42bc      	cmp	r4, r7
 8009cd8:	4622      	mov	r2, r4
 8009cda:	4631      	mov	r1, r6
 8009cdc:	bf28      	it	cs
 8009cde:	463a      	movcs	r2, r7
 8009ce0:	f7ff ffa4 	bl	8009c2c <memcpy>
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4640      	mov	r0, r8
 8009ce8:	f7fe ff7e 	bl	8008be8 <_free_r>
 8009cec:	e7e1      	b.n	8009cb2 <_realloc_r+0x1e>
 8009cee:	4635      	mov	r5, r6
 8009cf0:	e7df      	b.n	8009cb2 <_realloc_r+0x1e>

08009cf2 <_raise_r>:
 8009cf2:	291f      	cmp	r1, #31
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	460d      	mov	r5, r1
 8009cfa:	d904      	bls.n	8009d06 <_raise_r+0x14>
 8009cfc:	2316      	movs	r3, #22
 8009cfe:	6003      	str	r3, [r0, #0]
 8009d00:	f04f 30ff 	mov.w	r0, #4294967295
 8009d04:	bd38      	pop	{r3, r4, r5, pc}
 8009d06:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d08:	b112      	cbz	r2, 8009d10 <_raise_r+0x1e>
 8009d0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d0e:	b94b      	cbnz	r3, 8009d24 <_raise_r+0x32>
 8009d10:	4620      	mov	r0, r4
 8009d12:	f000 f831 	bl	8009d78 <_getpid_r>
 8009d16:	462a      	mov	r2, r5
 8009d18:	4601      	mov	r1, r0
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d20:	f000 b818 	b.w	8009d54 <_kill_r>
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d00a      	beq.n	8009d3e <_raise_r+0x4c>
 8009d28:	1c59      	adds	r1, r3, #1
 8009d2a:	d103      	bne.n	8009d34 <_raise_r+0x42>
 8009d2c:	2316      	movs	r3, #22
 8009d2e:	6003      	str	r3, [r0, #0]
 8009d30:	2001      	movs	r0, #1
 8009d32:	e7e7      	b.n	8009d04 <_raise_r+0x12>
 8009d34:	2400      	movs	r4, #0
 8009d36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	4798      	blx	r3
 8009d3e:	2000      	movs	r0, #0
 8009d40:	e7e0      	b.n	8009d04 <_raise_r+0x12>
	...

08009d44 <raise>:
 8009d44:	4b02      	ldr	r3, [pc, #8]	; (8009d50 <raise+0xc>)
 8009d46:	4601      	mov	r1, r0
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	f7ff bfd2 	b.w	8009cf2 <_raise_r>
 8009d4e:	bf00      	nop
 8009d50:	200001ac 	.word	0x200001ac

08009d54 <_kill_r>:
 8009d54:	b538      	push	{r3, r4, r5, lr}
 8009d56:	4d07      	ldr	r5, [pc, #28]	; (8009d74 <_kill_r+0x20>)
 8009d58:	2300      	movs	r3, #0
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	4608      	mov	r0, r1
 8009d5e:	4611      	mov	r1, r2
 8009d60:	602b      	str	r3, [r5, #0]
 8009d62:	f7f7 fd9b 	bl	800189c <_kill>
 8009d66:	1c43      	adds	r3, r0, #1
 8009d68:	d102      	bne.n	8009d70 <_kill_r+0x1c>
 8009d6a:	682b      	ldr	r3, [r5, #0]
 8009d6c:	b103      	cbz	r3, 8009d70 <_kill_r+0x1c>
 8009d6e:	6023      	str	r3, [r4, #0]
 8009d70:	bd38      	pop	{r3, r4, r5, pc}
 8009d72:	bf00      	nop
 8009d74:	20000518 	.word	0x20000518

08009d78 <_getpid_r>:
 8009d78:	f7f7 bd88 	b.w	800188c <_getpid>

08009d7c <__sread>:
 8009d7c:	b510      	push	{r4, lr}
 8009d7e:	460c      	mov	r4, r1
 8009d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d84:	f000 f89c 	bl	8009ec0 <_read_r>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	bfab      	itete	ge
 8009d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8009d90:	181b      	addge	r3, r3, r0
 8009d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d96:	bfac      	ite	ge
 8009d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d9a:	81a3      	strhlt	r3, [r4, #12]
 8009d9c:	bd10      	pop	{r4, pc}

08009d9e <__swrite>:
 8009d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da2:	461f      	mov	r7, r3
 8009da4:	898b      	ldrh	r3, [r1, #12]
 8009da6:	05db      	lsls	r3, r3, #23
 8009da8:	4605      	mov	r5, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	4616      	mov	r6, r2
 8009dae:	d505      	bpl.n	8009dbc <__swrite+0x1e>
 8009db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db4:	2302      	movs	r3, #2
 8009db6:	2200      	movs	r2, #0
 8009db8:	f000 f868 	bl	8009e8c <_lseek_r>
 8009dbc:	89a3      	ldrh	r3, [r4, #12]
 8009dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dc6:	81a3      	strh	r3, [r4, #12]
 8009dc8:	4632      	mov	r2, r6
 8009dca:	463b      	mov	r3, r7
 8009dcc:	4628      	mov	r0, r5
 8009dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd2:	f000 b817 	b.w	8009e04 <_write_r>

08009dd6 <__sseek>:
 8009dd6:	b510      	push	{r4, lr}
 8009dd8:	460c      	mov	r4, r1
 8009dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dde:	f000 f855 	bl	8009e8c <_lseek_r>
 8009de2:	1c43      	adds	r3, r0, #1
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	bf15      	itete	ne
 8009de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009df2:	81a3      	strheq	r3, [r4, #12]
 8009df4:	bf18      	it	ne
 8009df6:	81a3      	strhne	r3, [r4, #12]
 8009df8:	bd10      	pop	{r4, pc}

08009dfa <__sclose>:
 8009dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dfe:	f000 b813 	b.w	8009e28 <_close_r>
	...

08009e04 <_write_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d07      	ldr	r5, [pc, #28]	; (8009e24 <_write_r+0x20>)
 8009e08:	4604      	mov	r4, r0
 8009e0a:	4608      	mov	r0, r1
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	2200      	movs	r2, #0
 8009e10:	602a      	str	r2, [r5, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	f7f7 fd79 	bl	800190a <_write>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	d102      	bne.n	8009e22 <_write_r+0x1e>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	b103      	cbz	r3, 8009e22 <_write_r+0x1e>
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	20000518 	.word	0x20000518

08009e28 <_close_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4d06      	ldr	r5, [pc, #24]	; (8009e44 <_close_r+0x1c>)
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	4604      	mov	r4, r0
 8009e30:	4608      	mov	r0, r1
 8009e32:	602b      	str	r3, [r5, #0]
 8009e34:	f7f7 fd85 	bl	8001942 <_close>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d102      	bne.n	8009e42 <_close_r+0x1a>
 8009e3c:	682b      	ldr	r3, [r5, #0]
 8009e3e:	b103      	cbz	r3, 8009e42 <_close_r+0x1a>
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	20000518 	.word	0x20000518

08009e48 <_fstat_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d07      	ldr	r5, [pc, #28]	; (8009e68 <_fstat_r+0x20>)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4604      	mov	r4, r0
 8009e50:	4608      	mov	r0, r1
 8009e52:	4611      	mov	r1, r2
 8009e54:	602b      	str	r3, [r5, #0]
 8009e56:	f7f7 fd80 	bl	800195a <_fstat>
 8009e5a:	1c43      	adds	r3, r0, #1
 8009e5c:	d102      	bne.n	8009e64 <_fstat_r+0x1c>
 8009e5e:	682b      	ldr	r3, [r5, #0]
 8009e60:	b103      	cbz	r3, 8009e64 <_fstat_r+0x1c>
 8009e62:	6023      	str	r3, [r4, #0]
 8009e64:	bd38      	pop	{r3, r4, r5, pc}
 8009e66:	bf00      	nop
 8009e68:	20000518 	.word	0x20000518

08009e6c <_isatty_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4d06      	ldr	r5, [pc, #24]	; (8009e88 <_isatty_r+0x1c>)
 8009e70:	2300      	movs	r3, #0
 8009e72:	4604      	mov	r4, r0
 8009e74:	4608      	mov	r0, r1
 8009e76:	602b      	str	r3, [r5, #0]
 8009e78:	f7f7 fd7f 	bl	800197a <_isatty>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d102      	bne.n	8009e86 <_isatty_r+0x1a>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	b103      	cbz	r3, 8009e86 <_isatty_r+0x1a>
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	20000518 	.word	0x20000518

08009e8c <_lseek_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d07      	ldr	r5, [pc, #28]	; (8009eac <_lseek_r+0x20>)
 8009e90:	4604      	mov	r4, r0
 8009e92:	4608      	mov	r0, r1
 8009e94:	4611      	mov	r1, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	602a      	str	r2, [r5, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f7f7 fd78 	bl	8001990 <_lseek>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_lseek_r+0x1e>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_lseek_r+0x1e>
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	20000518 	.word	0x20000518

08009eb0 <_malloc_usable_size_r>:
 8009eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb4:	1f18      	subs	r0, r3, #4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bfbc      	itt	lt
 8009eba:	580b      	ldrlt	r3, [r1, r0]
 8009ebc:	18c0      	addlt	r0, r0, r3
 8009ebe:	4770      	bx	lr

08009ec0 <_read_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4d07      	ldr	r5, [pc, #28]	; (8009ee0 <_read_r+0x20>)
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	4608      	mov	r0, r1
 8009ec8:	4611      	mov	r1, r2
 8009eca:	2200      	movs	r2, #0
 8009ecc:	602a      	str	r2, [r5, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f7f7 fcfe 	bl	80018d0 <_read>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d102      	bne.n	8009ede <_read_r+0x1e>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	b103      	cbz	r3, 8009ede <_read_r+0x1e>
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	bd38      	pop	{r3, r4, r5, pc}
 8009ee0:	20000518 	.word	0x20000518

08009ee4 <_init>:
 8009ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee6:	bf00      	nop
 8009ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eea:	bc08      	pop	{r3}
 8009eec:	469e      	mov	lr, r3
 8009eee:	4770      	bx	lr

08009ef0 <_fini>:
 8009ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef2:	bf00      	nop
 8009ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ef6:	bc08      	pop	{r3}
 8009ef8:	469e      	mov	lr, r3
 8009efa:	4770      	bx	lr
