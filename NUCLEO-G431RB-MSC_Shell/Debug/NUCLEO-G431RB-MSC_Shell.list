
NUCLEO-G431RB-MSC_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b10  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08008cf0  08008cf0  00018cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd4  08008fd4  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd4  08008fd4  00018fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fdc  08008fdc  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fdc  08008fdc  00018fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fe0  08008fe0  00018fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08008fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000210  080091f4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  080091f4  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194a6  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc0  00000000  00000000  000396e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  0003c4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  0003d9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212ce  00000000  00000000  0003ee00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017479  00000000  00000000  000600ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcd33  00000000  00000000  00077547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015427a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a0  00000000  00000000  001542cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008cd8 	.word	0x08008cd8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	08008cd8 	.word	0x08008cd8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09e      	sub	sp, #120	; 0x78
 80005e8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	66bb      	str	r3, [r7, #104]	; 0x68
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005f2:	f000 ff34 	bl	800145e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005f6:	f000 f9e5 	bl	80009c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005fa:	f000 fbb3 	bl	8000d64 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005fe:	f000 fb65 	bl	8000ccc <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8000602:	f000 faa3 	bl	8000b4c <MX_TIM1_Init>
	MX_ADC1_Init();
 8000606:	f000 fa29 	bl	8000a5c <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 800060a:	463b      	mov	r3, r7
 800060c:	2224      	movs	r2, #36	; 0x24
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f007 f89b 	bl	800774c <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061a:	2240      	movs	r2, #64	; 0x40
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f007 f894 	bl	800774c <memset>
 8000624:	4ba6      	ldr	r3, [pc, #664]	; (80008c0 <main+0x2dc>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 800062a:	2240      	movs	r2, #64	; 0x40
 800062c:	2100      	movs	r1, #0
 800062e:	48a5      	ldr	r0, [pc, #660]	; (80008c4 <main+0x2e0>)
 8000630:	f007 f88c 	bl	800774c <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000634:	2201      	movs	r2, #1
 8000636:	49a2      	ldr	r1, [pc, #648]	; (80008c0 <main+0x2dc>)
 8000638:	48a3      	ldr	r0, [pc, #652]	; (80008c8 <main+0x2e4>)
 800063a:	f005 f8f9 	bl	8005830 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800063e:	200a      	movs	r0, #10
 8000640:	f000 ff44 	bl	80014cc <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2266      	movs	r2, #102	; 0x66
 800064a:	49a0      	ldr	r1, [pc, #640]	; (80008cc <main+0x2e8>)
 800064c:	489e      	ldr	r0, [pc, #632]	; (80008c8 <main+0x2e4>)
 800064e:	f005 f858 	bl	8005702 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	2218      	movs	r2, #24
 8000658:	499d      	ldr	r1, [pc, #628]	; (80008d0 <main+0x2ec>)
 800065a:	489b      	ldr	r0, [pc, #620]	; (80008c8 <main+0x2e4>)
 800065c:	f005 f851 	bl	8005702 <HAL_UART_Transmit>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8000660:	4b9c      	ldr	r3, [pc, #624]	; (80008d4 <main+0x2f0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d06e      	beq.n	8000746 <main+0x162>
			switch(uartRxBuffer[0]){
 8000668:	4b95      	ldr	r3, [pc, #596]	; (80008c0 <main+0x2dc>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b0d      	cmp	r3, #13
 800066e:	d002      	beq.n	8000676 <main+0x92>
 8000670:	2b7f      	cmp	r3, #127	; 0x7f
 8000672:	d045      	beq.n	8000700 <main+0x11c>
 8000674:	e054      	b.n	8000720 <main+0x13c>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2203      	movs	r2, #3
 800067c:	4996      	ldr	r1, [pc, #600]	; (80008d8 <main+0x2f4>)
 800067e:	4892      	ldr	r0, [pc, #584]	; (80008c8 <main+0x2e4>)
 8000680:	f005 f83f 	bl	8005702 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8000684:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800068a:	4413      	add	r3, r2
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 8000694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000698:	4990      	ldr	r1, [pc, #576]	; (80008dc <main+0x2f8>)
 800069a:	4618      	mov	r0, r3
 800069c:	f007 f87e 	bl	800779c <strtok>
 80006a0:	4603      	mov	r3, r0
 80006a2:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80006a4:	e00e      	b.n	80006c4 <main+0xe0>
					argv[argc++] = token;
 80006a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	673a      	str	r2, [r7, #112]	; 0x70
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	3378      	adds	r3, #120	; 0x78
 80006b0:	443b      	add	r3, r7
 80006b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80006b4:	f843 2c78 	str.w	r2, [r3, #-120]
					token = strtok(NULL, " ");
 80006b8:	4988      	ldr	r1, [pc, #544]	; (80008dc <main+0x2f8>)
 80006ba:	2000      	movs	r0, #0
 80006bc:	f007 f86e 	bl	800779c <strtok>
 80006c0:	4603      	mov	r3, r0
 80006c2:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80006c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1ed      	bne.n	80006a6 <main+0xc2>
				}

				//requested echo transmission to check characters

				HAL_UART_Transmit(&huart2, "\r\n ", sizeof("\r\n "), HAL_MAX_DELAY);
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	2204      	movs	r2, #4
 80006d0:	4983      	ldr	r1, [pc, #524]	; (80008e0 <main+0x2fc>)
 80006d2:	487d      	ldr	r0, [pc, #500]	; (80008c8 <main+0x2e4>)
 80006d4:	f005 f815 	bl	8005702 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, cmdBuffer, sizeof(cmdBuffer), HAL_MAX_DELAY);
 80006d8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	2240      	movs	r2, #64	; 0x40
 80006e2:	4879      	ldr	r0, [pc, #484]	; (80008c8 <main+0x2e4>)
 80006e4:	f005 f80d 	bl	8005702 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\r\n ", sizeof("\r\n "), HAL_MAX_DELAY);
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ec:	2204      	movs	r2, #4
 80006ee:	497c      	ldr	r1, [pc, #496]	; (80008e0 <main+0x2fc>)
 80006f0:	4875      	ldr	r0, [pc, #468]	; (80008c8 <main+0x2e4>)
 80006f2:	f005 f806 	bl	8005702 <HAL_UART_Transmit>

				idx_cmd = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80006fe:	e01f      	b.n	8000740 <main+0x15c>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 8000700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000702:	1e5a      	subs	r2, r3, #1
 8000704:	677a      	str	r2, [r7, #116]	; 0x74
 8000706:	3378      	adds	r3, #120	; 0x78
 8000708:	443b      	add	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	2201      	movs	r2, #1
 8000716:	496a      	ldr	r1, [pc, #424]	; (80008c0 <main+0x2dc>)
 8000718:	486b      	ldr	r0, [pc, #428]	; (80008c8 <main+0x2e4>)
 800071a:	f004 fff2 	bl	8005702 <HAL_UART_Transmit>
				break;
 800071e:	e00f      	b.n	8000740 <main+0x15c>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	677a      	str	r2, [r7, #116]	; 0x74
 8000726:	4a66      	ldr	r2, [pc, #408]	; (80008c0 <main+0x2dc>)
 8000728:	7812      	ldrb	r2, [r2, #0]
 800072a:	3378      	adds	r3, #120	; 0x78
 800072c:	443b      	add	r3, r7
 800072e:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	2201      	movs	r2, #1
 8000738:	4961      	ldr	r1, [pc, #388]	; (80008c0 <main+0x2dc>)
 800073a:	4863      	ldr	r0, [pc, #396]	; (80008c8 <main+0x2e4>)
 800073c:	f004 ffe1 	bl	8005702 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8000740:	4b64      	ldr	r3, [pc, #400]	; (80008d4 <main+0x2f0>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8000746:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000748:	2b00      	cmp	r3, #0
 800074a:	d089      	beq.n	8000660 <main+0x7c>
			if(strcmp(argv[0],"set")==0){
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	4965      	ldr	r1, [pc, #404]	; (80008e4 <main+0x300>)
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd65 	bl	8000220 <strcmp>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d12d      	bne.n	80007b8 <main+0x1d4>
				if(strcmp(argv[1],"PA5")==0){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4962      	ldr	r1, [pc, #392]	; (80008e8 <main+0x304>)
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd5d 	bl	8000220 <strcmp>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d11d      	bne.n	80007a8 <main+0x1c4>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4618      	mov	r0, r3
 8000770:	f006 ffbe 	bl	80076f0 <atoi>
 8000774:	4603      	mov	r3, r0
 8000776:	b2db      	uxtb	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	2120      	movs	r1, #32
 800077c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000780:	f002 fa06 	bl	8002b90 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	4618      	mov	r0, r3
 8000788:	f006 ffb2 	bl	80076f0 <atoi>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	4956      	ldr	r1, [pc, #344]	; (80008ec <main+0x308>)
 8000792:	484c      	ldr	r0, [pc, #304]	; (80008c4 <main+0x2e0>)
 8000794:	f006 ffe2 	bl	800775c <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	2220      	movs	r2, #32
 800079e:	4949      	ldr	r1, [pc, #292]	; (80008c4 <main+0x2e0>)
 80007a0:	4849      	ldr	r0, [pc, #292]	; (80008c8 <main+0x2e4>)
 80007a2:	f004 ffae 	bl	8005702 <HAL_UART_Transmit>
 80007a6:	e0f1      	b.n	800098c <main+0x3a8>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	2214      	movs	r2, #20
 80007ae:	4950      	ldr	r1, [pc, #320]	; (80008f0 <main+0x30c>)
 80007b0:	4845      	ldr	r0, [pc, #276]	; (80008c8 <main+0x2e4>)
 80007b2:	f004 ffa6 	bl	8005702 <HAL_UART_Transmit>
 80007b6:	e0e9      	b.n	800098c <main+0x3a8>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	494e      	ldr	r1, [pc, #312]	; (80008f4 <main+0x310>)
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fd2f 	bl	8000220 <strcmp>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d107      	bne.n	80007d8 <main+0x1f4>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	2214      	movs	r2, #20
 80007ce:	4948      	ldr	r1, [pc, #288]	; (80008f0 <main+0x30c>)
 80007d0:	483d      	ldr	r0, [pc, #244]	; (80008c8 <main+0x2e4>)
 80007d2:	f004 ff96 	bl	8005702 <HAL_UART_Transmit>
 80007d6:	e0d9      	b.n	800098c <main+0x3a8>
			}

			// help function prints all the available commands
			else if(strcmp(argv[0],"help")==0){
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	4947      	ldr	r1, [pc, #284]	; (80008f8 <main+0x314>)
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fd1f 	bl	8000220 <strcmp>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d107      	bne.n	80007f8 <main+0x214>
				HAL_UART_Transmit(&huart2, helpContent, sizeof(helpContent), HAL_MAX_DELAY);
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	223b      	movs	r2, #59	; 0x3b
 80007ee:	4943      	ldr	r1, [pc, #268]	; (80008fc <main+0x318>)
 80007f0:	4835      	ldr	r0, [pc, #212]	; (80008c8 <main+0x2e4>)
 80007f2:	f004 ff86 	bl	8005702 <HAL_UART_Transmit>
 80007f6:	e0c9      	b.n	800098c <main+0x3a8>
			}
			else if(strcmp(argv[0],"pinout")==0){
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4941      	ldr	r1, [pc, #260]	; (8000900 <main+0x31c>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fd0f 	bl	8000220 <strcmp>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d107      	bne.n	8000818 <main+0x234>
				HAL_UART_Transmit(&huart2, pinoutContent, sizeof(pinoutContent), HAL_MAX_DELAY);
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	2289      	movs	r2, #137	; 0x89
 800080e:	493d      	ldr	r1, [pc, #244]	; (8000904 <main+0x320>)
 8000810:	482d      	ldr	r0, [pc, #180]	; (80008c8 <main+0x2e4>)
 8000812:	f004 ff76 	bl	8005702 <HAL_UART_Transmit>
 8000816:	e0b9      	b.n	800098c <main+0x3a8>
			}
			else if(strcmp(argv[0],"start")==0){
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	493b      	ldr	r1, [pc, #236]	; (8000908 <main+0x324>)
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fcff 	bl	8000220 <strcmp>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d12a      	bne.n	800087e <main+0x29a>
				HAL_UART_Transmit(&huart2, startContent, sizeof(startContent), HAL_MAX_DELAY);
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	220f      	movs	r2, #15
 800082e:	4937      	ldr	r1, [pc, #220]	; (800090c <main+0x328>)
 8000830:	4825      	ldr	r0, [pc, #148]	; (80008c8 <main+0x2e4>)
 8000832:	f004 ff66 	bl	8005702 <HAL_UART_Transmit>
				//ISO_RESET code
				HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2102      	movs	r1, #2
 800083a:	4835      	ldr	r0, [pc, #212]	; (8000910 <main+0x32c>)
 800083c:	f002 f9a8 	bl	8002b90 <HAL_GPIO_WritePin>
				for(i=0; i<ISO_RESET_TIME; i++)
 8000840:	2300      	movs	r3, #0
 8000842:	667b      	str	r3, [r7, #100]	; 0x64
 8000844:	e002      	b.n	800084c <main+0x268>
 8000846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000848:	3301      	adds	r3, #1
 800084a:	667b      	str	r3, [r7, #100]	; 0x64
 800084c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800084e:	2b45      	cmp	r3, #69	; 0x45
 8000850:	ddf9      	ble.n	8000846 <main+0x262>
				{
					//wait for at least 2microSec
				}
				//HAL_Delay(100);
				HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2102      	movs	r1, #2
 8000856:	482e      	ldr	r0, [pc, #184]	; (8000910 <main+0x32c>)
 8000858:	f002 f99a 	bl	8002b90 <HAL_GPIO_WritePin>
				//Timers start
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800085c:	2100      	movs	r1, #0
 800085e:	482d      	ldr	r0, [pc, #180]	; (8000914 <main+0x330>)
 8000860:	f003 facc 	bl	8003dfc <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000864:	2104      	movs	r1, #4
 8000866:	482b      	ldr	r0, [pc, #172]	; (8000914 <main+0x330>)
 8000868:	f003 fac8 	bl	8003dfc <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800086c:	2100      	movs	r1, #0
 800086e:	4829      	ldr	r0, [pc, #164]	; (8000914 <main+0x330>)
 8000870:	f004 fc58 	bl	8005124 <HAL_TIMEx_PWMN_Start>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000874:	2104      	movs	r1, #4
 8000876:	4827      	ldr	r0, [pc, #156]	; (8000914 <main+0x330>)
 8000878:	f004 fc54 	bl	8005124 <HAL_TIMEx_PWMN_Start>
 800087c:	e086      	b.n	800098c <main+0x3a8>
			}
			else if(strcmp(argv[0],"stop")==0){
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	4925      	ldr	r1, [pc, #148]	; (8000918 <main+0x334>)
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fccc 	bl	8000220 <strcmp>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d148      	bne.n	8000920 <main+0x33c>
				HAL_UART_Transmit(&huart2, stopContent, sizeof(stopContent), HAL_MAX_DELAY);
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	2210      	movs	r2, #16
 8000894:	4921      	ldr	r1, [pc, #132]	; (800091c <main+0x338>)
 8000896:	480c      	ldr	r0, [pc, #48]	; (80008c8 <main+0x2e4>)
 8000898:	f004 ff33 	bl	8005702 <HAL_UART_Transmit>
				//Timers stop
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800089c:	2100      	movs	r1, #0
 800089e:	481d      	ldr	r0, [pc, #116]	; (8000914 <main+0x330>)
 80008a0:	f003 fbac 	bl	8003ffc <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80008a4:	2104      	movs	r1, #4
 80008a6:	481b      	ldr	r0, [pc, #108]	; (8000914 <main+0x330>)
 80008a8:	f003 fba8 	bl	8003ffc <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80008ac:	2100      	movs	r1, #0
 80008ae:	4819      	ldr	r0, [pc, #100]	; (8000914 <main+0x330>)
 80008b0:	f004 fcec 	bl	800528c <HAL_TIMEx_PWMN_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80008b4:	2104      	movs	r1, #4
 80008b6:	4817      	ldr	r0, [pc, #92]	; (8000914 <main+0x330>)
 80008b8:	f004 fce8 	bl	800528c <HAL_TIMEx_PWMN_Stop>
 80008bc:	e066      	b.n	800098c <main+0x3a8>
 80008be:	bf00      	nop
 80008c0:	20000380 	.word	0x20000380
 80008c4:	20000384 	.word	0x20000384
 80008c8:	200002e4 	.word	0x200002e4
 80008cc:	20000018 	.word	0x20000018
 80008d0:	20000000 	.word	0x20000000
 80008d4:	2000037c 	.word	0x2000037c
 80008d8:	20000080 	.word	0x20000080
 80008dc:	08008cf0 	.word	0x08008cf0
 80008e0:	08008cf4 	.word	0x08008cf4
 80008e4:	08008cf8 	.word	0x08008cf8
 80008e8:	08008cfc 	.word	0x08008cfc
 80008ec:	08008d00 	.word	0x08008d00
 80008f0:	20000084 	.word	0x20000084
 80008f4:	08008d1c 	.word	0x08008d1c
 80008f8:	08008d20 	.word	0x08008d20
 80008fc:	20000098 	.word	0x20000098
 8000900:	08008d28 	.word	0x08008d28
 8000904:	200000d4 	.word	0x200000d4
 8000908:	08008d30 	.word	0x08008d30
 800090c:	20000160 	.word	0x20000160
 8000910:	48000800 	.word	0x48000800
 8000914:	20000298 	.word	0x20000298
 8000918:	08008d38 	.word	0x08008d38
 800091c:	20000170 	.word	0x20000170
			}
			else if(strcmp(argv[0],"dutycycle")==0){
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	491f      	ldr	r1, [pc, #124]	; (80009a0 <main+0x3bc>)
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc7b 	bl	8000220 <strcmp>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d126      	bne.n	800097e <main+0x39a>

				HAL_UART_Transmit(&huart2, dutyCycleChoiceContent, sizeof(dutyCycleChoiceContent), HAL_MAX_DELAY);
 8000930:	f04f 33ff 	mov.w	r3, #4294967295
 8000934:	221e      	movs	r2, #30
 8000936:	491b      	ldr	r1, [pc, #108]	; (80009a4 <main+0x3c0>)
 8000938:	481b      	ldr	r0, [pc, #108]	; (80009a8 <main+0x3c4>)
 800093a:	f004 fee2 	bl	8005702 <HAL_UART_Transmit>

				dutycycle= atoi(argv[1]);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4618      	mov	r0, r3
 8000942:	f006 fed5 	bl	80076f0 <atoi>
 8000946:	4603      	mov	r3, r0
 8000948:	4a18      	ldr	r2, [pc, #96]	; (80009ac <main+0x3c8>)
 800094a:	6013      	str	r3, [r2, #0]
				pulse=(dutycycle*TIM1_ARR)/100;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <main+0x3c8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8000954:	fb02 f303 	mul.w	r3, r2, r3
 8000958:	4a15      	ldr	r2, [pc, #84]	; (80009b0 <main+0x3cc>)
 800095a:	fb82 1203 	smull	r1, r2, r2, r3
 800095e:	1152      	asrs	r2, r2, #5
 8000960:	17db      	asrs	r3, r3, #31
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <main+0x3d0>)
 8000966:	6013      	str	r3, [r2, #0]
				TIM1->CCR1=pulse;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <main+0x3d0>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <main+0x3d4>)
 800096e:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2=TIM1_ARR-pulse;
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <main+0x3d0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f5c3 52a6 	rsb	r2, r3, #5312	; 0x14c0
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <main+0x3d4>)
 800097a:	639a      	str	r2, [r3, #56]	; 0x38
 800097c:	e006      	b.n	800098c <main+0x3a8>

				//HAL_UART_Transmit(&huart2, &pulse, sizeof(pulse), HAL_MAX_DELAY);
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	2214      	movs	r2, #20
 8000984:	490d      	ldr	r1, [pc, #52]	; (80009bc <main+0x3d8>)
 8000986:	4808      	ldr	r0, [pc, #32]	; (80009a8 <main+0x3c4>)
 8000988:	f004 febb 	bl	8005702 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	2218      	movs	r2, #24
 8000992:	490b      	ldr	r1, [pc, #44]	; (80009c0 <main+0x3dc>)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <main+0x3c4>)
 8000996:	f004 feb4 	bl	8005702 <HAL_UART_Transmit>
			newCmdReady = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 800099e:	e65f      	b.n	8000660 <main+0x7c>
 80009a0:	08008d40 	.word	0x08008d40
 80009a4:	20000180 	.word	0x20000180
 80009a8:	200002e4 	.word	0x200002e4
 80009ac:	20000374 	.word	0x20000374
 80009b0:	51eb851f 	.word	0x51eb851f
 80009b4:	20000378 	.word	0x20000378
 80009b8:	40012c00 	.word	0x40012c00
 80009bc:	20000084 	.word	0x20000084
 80009c0:	20000000 	.word	0x20000000

080009c4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b094      	sub	sp, #80	; 0x50
 80009c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	2238      	movs	r2, #56	; 0x38
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f006 feba 	bl	800774c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f002 f8ea 	bl	8002bc0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f6:	2340      	movs	r3, #64	; 0x40
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fa:	2302      	movs	r3, #2
 80009fc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009fe:	2302      	movs	r3, #2
 8000a00:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a02:	2304      	movs	r3, #4
 8000a04:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000a06:	2355      	movs	r3, #85	; 0x55
 8000a08:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a16:	f107 0318 	add.w	r3, r7, #24
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 f974 	bl	8002d08 <HAL_RCC_OscConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000a26:	f000 fa33 	bl	8000e90 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2104      	movs	r1, #4
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fc78 	bl	8003338 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000a4e:	f000 fa1f 	bl	8000e90 <Error_Handler>
	}
}
 8000a52:	bf00      	nop
 8000a54:	3750      	adds	r7, #80	; 0x50
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2220      	movs	r2, #32
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f006 fe69 	bl	800774c <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000a7a:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000a7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a80:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000a84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a88:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a90:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae4:	4817      	ldr	r0, [pc, #92]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000ae6:	f000 feed 	bl	80018c4 <HAL_ADC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 8000af0:	f000 f9ce 	bl	8000e90 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000b00:	f001 fc80 	bl	8002404 <HAL_ADCEx_MultiModeConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_ADC1_Init+0xb2>
	{
		Error_Handler();
 8000b0a:	f000 f9c1 	bl	8000e90 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_ADC1_Init+0xec>)
 8000b10:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b12:	2306      	movs	r3, #6
 8000b14:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b1a:	237f      	movs	r3, #127	; 0x7f
 8000b1c:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000b2c:	f001 f854 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_ADC1_Init+0xde>
	{
		Error_Handler();
 8000b36:	f000 f9ab 	bl	8000e90 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	3730      	adds	r7, #48	; 0x30
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000022c 	.word	0x2000022c
 8000b48:	04300002 	.word	0x04300002

08000b4c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b09c      	sub	sp, #112	; 0x70
 8000b50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	615a      	str	r2, [r3, #20]
 8000b7e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2234      	movs	r2, #52	; 0x34
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f006 fde0 	bl	800774c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000b8c:	4b4d      	ldr	r3, [pc, #308]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000b8e:	4a4e      	ldr	r2, [pc, #312]	; (8000cc8 <MX_TIM1_Init+0x17c>)
 8000b90:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000b92:	4b4c      	ldr	r3, [pc, #304]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000b98:	4b4a      	ldr	r3, [pc, #296]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 5312;
 8000b9e:	4b49      	ldr	r3, [pc, #292]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000ba0:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8000ba4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba6:	4b47      	ldr	r3, [pc, #284]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000bac:	4b45      	ldr	r3, [pc, #276]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bb2:	4b44      	ldr	r3, [pc, #272]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb8:	4842      	ldr	r0, [pc, #264]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000bba:	f002 fffb 	bl	8003bb4 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8000bc4:	f000 f964 	bl	8000e90 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	483b      	ldr	r0, [pc, #236]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000bd6:	f003 fd3b 	bl	8004650 <HAL_TIM_ConfigClockSource>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8000be0:	f000 f956 	bl	8000e90 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000be4:	4837      	ldr	r0, [pc, #220]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000be6:	f003 f8a7 	bl	8003d38 <HAL_TIM_PWM_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8000bf0:	f000 f94e 	bl	8000e90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c04:	4619      	mov	r1, r3
 8000c06:	482f      	ldr	r0, [pc, #188]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000c08:	f004 fb9e 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8000c12:	f000 f93d 	bl	8000e90 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c16:	2360      	movs	r3, #96	; 0x60
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 1328;
 8000c1a:	f44f 63a6 	mov.w	r3, #1328	; 0x530
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c20:	2300      	movs	r3, #0
 8000c22:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c24:	2300      	movs	r3, #0
 8000c26:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4821      	ldr	r0, [pc, #132]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000c3e:	f003 fbf3 	bl	8004428 <HAL_TIM_PWM_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0x100>
	{
		Error_Handler();
 8000c48:	f000 f922 	bl	8000e90 <Error_Handler>
	}
	sConfigOC.Pulse = 3986;
 8000c4c:	f640 7392 	movw	r3, #3986	; 0xf92
 8000c50:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c56:	2204      	movs	r2, #4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481a      	ldr	r0, [pc, #104]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000c5c:	f003 fbe4 	bl	8004428 <HAL_TIM_PWM_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM1_Init+0x11e>
	{
		Error_Handler();
 8000c66:	f000 f913 	bl	8000e90 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 203;
 8000c76:	23cb      	movs	r3, #203	; 0xcb
 8000c78:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c82:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000ca8:	f004 fbd0 	bl	800544c <HAL_TIMEx_ConfigBreakDeadTime>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM1_Init+0x16a>
	{
		Error_Handler();
 8000cb2:	f000 f8ed 	bl	8000e90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <MX_TIM1_Init+0x178>)
 8000cb8:	f000 f988 	bl	8000fcc <HAL_TIM_MspPostInit>

}
 8000cbc:	bf00      	nop
 8000cbe:	3770      	adds	r7, #112	; 0x70
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000298 	.word	0x20000298
 8000cc8:	40012c00 	.word	0x40012c00

08000ccc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <MX_USART2_UART_Init+0x94>)
 8000cd4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d14:	4811      	ldr	r0, [pc, #68]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d16:	f004 fca4 	bl	8005662 <HAL_UART_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8000d20:	f000 f8b6 	bl	8000e90 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d24:	2100      	movs	r1, #0
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d28:	f006 fc17 	bl	800755a <HAL_UARTEx_SetTxFifoThreshold>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8000d32:	f000 f8ad 	bl	8000e90 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4808      	ldr	r0, [pc, #32]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d3a:	f006 fc4c 	bl	80075d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8000d44:	f000 f8a4 	bl	8000e90 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d4a:	f006 fbcd 	bl	80074e8 <HAL_UARTEx_DisableFifoMode>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8000d54:	f000 f89c 	bl	8000e90 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200002e4 	.word	0x200002e4
 8000d60:	40004400 	.word	0x40004400

08000d64 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a2e      	ldr	r2, [pc, #184]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d86:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	4a28      	ldr	r2, [pc, #160]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d98:	f043 0320 	orr.w	r3, r3, #32
 8000d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	f003 0320 	and.w	r3, r3, #32
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	481d      	ldr	r0, [pc, #116]	; (8000e3c <MX_GPIO_Init+0xd8>)
 8000dc8:	f001 fee2 	bl	8002b90 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2120      	movs	r1, #32
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f001 fedc 	bl	8002b90 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BLUE_BUTTON_Pin */
	GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ddc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000de2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <MX_GPIO_Init+0xd8>)
 8000df0:	f001 fd4c 	bl	800288c <HAL_GPIO_Init>

	/*Configure GPIO pin : ISO_RESET_Pin */
	GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000df4:	2302      	movs	r3, #2
 8000df6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <MX_GPIO_Init+0xd8>)
 8000e0c:	f001 fd3e 	bl	800288c <HAL_GPIO_Init>

	/*Configure GPIO pin : GREEN_LED_Pin */
	GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000e10:	2320      	movs	r3, #32
 8000e12:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f001 fd2f 	bl	800288c <HAL_GPIO_Init>

}
 8000e2e:	bf00      	nop
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000800 	.word	0x48000800

08000e40 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	uartRxReceived=1;
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_UART_RxCpltCallback+0x20>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4904      	ldr	r1, [pc, #16]	; (8000e64 <HAL_UART_RxCpltCallback+0x24>)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <HAL_UART_RxCpltCallback+0x28>)
 8000e54:	f004 fcec 	bl	8005830 <HAL_UART_Receive_IT>

}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	2000037c 	.word	0x2000037c
 8000e64:	20000380 	.word	0x20000380
 8000e68:	200002e4 	.word	0x200002e4

08000e6c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d101      	bne.n	8000e82 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000e7e:	f000 fb07 	bl	8001490 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40001000 	.word	0x40001000

08000e90 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e98:	e7fe      	b.n	8000e98 <Error_Handler+0x8>
	...

08000e9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6613      	str	r3, [r2, #96]	; 0x60
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_MspInit+0x44>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b09a      	sub	sp, #104	; 0x68
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	2244      	movs	r2, #68	; 0x44
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f006 fc21 	bl	800774c <memset>
  if(hadc->Instance==ADC1)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f12:	d134      	bne.n	8000f7e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f1a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 fc55 	bl	80037d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f30:	f7ff ffae 	bl	8000e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_ADC_MspInit+0xa4>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f38:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <HAL_ADC_MspInit+0xa4>)
 8000f3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_ADC_MspInit+0xa4>)
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_ADC_MspInit+0xa4>)
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_ADC_MspInit+0xa4>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_ADC_MspInit+0xa4>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_CURRENT_Pin;
 8000f64:	2301      	movs	r3, #1
 8000f66:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(ADC_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7a:	f001 fc87 	bl	800288c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	3768      	adds	r7, #104	; 0x68
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_TIM_Base_MspInit+0x38>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10b      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa2:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fa8:	6613      	str	r3, [r2, #96]	; 0x60
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40012c00 	.word	0x40012c00
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a12      	ldr	r2, [pc, #72]	; (8001034 <HAL_TIM_MspPostInit+0x68>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d11d      	bne.n	800102a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_TIM_MspPostInit+0x6c>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a11      	ldr	r2, [pc, #68]	; (8001038 <HAL_TIM_MspPostInit+0x6c>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_TIM_MspPostInit+0x6c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001006:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800100a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001018:	2306      	movs	r3, #6
 800101a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f001 fc31 	bl	800288c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800102a:	bf00      	nop
 800102c:	3720      	adds	r7, #32
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40012c00 	.word	0x40012c00
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b09a      	sub	sp, #104	; 0x68
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	2244      	movs	r2, #68	; 0x44
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f006 fb75 	bl	800774c <memset>
  if(huart->Instance==USART2)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <HAL_UART_MspInit+0xb8>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d13e      	bne.n	80010ea <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800106c:	2302      	movs	r3, #2
 800106e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4618      	mov	r0, r3
 800107a:	f002 fbab 	bl	80037d4 <HAL_RCCEx_PeriphCLKConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001084:	f7ff ff04 	bl	8000e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_UART_MspInit+0xbc>)
 800108a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108c:	4a1a      	ldr	r2, [pc, #104]	; (80010f8 <HAL_UART_MspInit+0xbc>)
 800108e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001092:	6593      	str	r3, [r2, #88]	; 0x58
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_UART_MspInit+0xbc>)
 8001096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_UART_MspInit+0xbc>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <HAL_UART_MspInit+0xbc>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_UART_MspInit+0xbc>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010b8:	230c      	movs	r3, #12
 80010ba:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c8:	2307      	movs	r3, #7
 80010ca:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d6:	f001 fbd9 	bl	800288c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2026      	movs	r0, #38	; 0x26
 80010e0:	f001 faec 	bl	80026bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010e4:	2026      	movs	r0, #38	; 0x26
 80010e6:	f001 fb03 	bl	80026f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3768      	adds	r7, #104	; 0x68
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40004400 	.word	0x40004400
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08c      	sub	sp, #48	; 0x30
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <HAL_InitTick+0xcc>)
 8001114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001116:	4a2c      	ldr	r2, [pc, #176]	; (80011c8 <HAL_InitTick+0xcc>)
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	6593      	str	r3, [r2, #88]	; 0x58
 800111e:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <HAL_InitTick+0xcc>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800112a:	f107 020c 	add.w	r2, r7, #12
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f002 fad5 	bl	80036e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800113a:	f002 faa7 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 800113e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <HAL_InitTick+0xd0>)
 8001144:	fba2 2303 	umull	r2, r3, r2, r3
 8001148:	0c9b      	lsrs	r3, r3, #18
 800114a:	3b01      	subs	r3, #1
 800114c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <HAL_InitTick+0xd4>)
 8001150:	4a20      	ldr	r2, [pc, #128]	; (80011d4 <HAL_InitTick+0xd8>)
 8001152:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <HAL_InitTick+0xd4>)
 8001156:	f240 32e7 	movw	r2, #999	; 0x3e7
 800115a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800115c:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <HAL_InitTick+0xd4>)
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HAL_InitTick+0xd4>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_InitTick+0xd4>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800116e:	4818      	ldr	r0, [pc, #96]	; (80011d0 <HAL_InitTick+0xd4>)
 8001170:	f002 fd20 	bl	8003bb4 <HAL_TIM_Base_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800117a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800117e:	2b00      	cmp	r3, #0
 8001180:	d11b      	bne.n	80011ba <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001182:	4813      	ldr	r0, [pc, #76]	; (80011d0 <HAL_InitTick+0xd4>)
 8001184:	f002 fd6e 	bl	8003c64 <HAL_TIM_Base_Start_IT>
 8001188:	4603      	mov	r3, r0
 800118a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800118e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001192:	2b00      	cmp	r3, #0
 8001194:	d111      	bne.n	80011ba <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001196:	2036      	movs	r0, #54	; 0x36
 8001198:	f001 faaa 	bl	80026f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b0f      	cmp	r3, #15
 80011a0:	d808      	bhi.n	80011b4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011a2:	2200      	movs	r2, #0
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	2036      	movs	r0, #54	; 0x36
 80011a8:	f001 fa88 	bl	80026bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_InitTick+0xdc>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e002      	b.n	80011ba <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3730      	adds	r7, #48	; 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	431bde83 	.word	0x431bde83
 80011d0:	200003c4 	.word	0x200003c4
 80011d4:	40001000 	.word	0x40001000
 80011d8:	200001a4 	.word	0x200001a4

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <NMI_Handler+0x4>

080011e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <MemManage_Handler+0x4>

080011ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <USART2_IRQHandler+0x10>)
 800123a:	f004 fb4f 	bl	80058dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200002e4 	.word	0x200002e4

08001248 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <TIM6_DAC_IRQHandler+0x10>)
 800124e:	f002 ff6b 	bl	8004128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200003c4 	.word	0x200003c4

0800125c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	return 1;
 8001260:	2301      	movs	r3, #1
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <_kill>:

int _kill(int pid, int sig)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001276:	f006 fa3f 	bl	80076f8 <__errno>
 800127a:	4603      	mov	r3, r0
 800127c:	2216      	movs	r2, #22
 800127e:	601a      	str	r2, [r3, #0]
	return -1;
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_exit>:

void _exit (int status)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ffe7 	bl	800126c <_kill>
	while (1) {}		/* Make sure we hang here */
 800129e:	e7fe      	b.n	800129e <_exit+0x12>

080012a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	e00a      	b.n	80012c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012b2:	f3af 8000 	nop.w
 80012b6:	4601      	mov	r1, r0
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	60ba      	str	r2, [r7, #8]
 80012be:	b2ca      	uxtb	r2, r1
 80012c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3301      	adds	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	dbf0      	blt.n	80012b2 <_read+0x12>
	}

return len;
 80012d0:	687b      	ldr	r3, [r7, #4]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	e009      	b.n	8001300 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	60ba      	str	r2, [r7, #8]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3301      	adds	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	dbf1      	blt.n	80012ec <_write+0x12>
	}
	return len;
 8001308:	687b      	ldr	r3, [r7, #4]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <_close>:

int _close(int file)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
	return -1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800133a:	605a      	str	r2, [r3, #4]
	return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <_isatty>:

int _isatty(int file)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
	return 1;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
	return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001384:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <_sbrk+0x5c>)
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <_sbrk+0x60>)
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <_sbrk+0x64>)
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <_sbrk+0x68>)
 800139c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d207      	bcs.n	80013bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ac:	f006 f9a4 	bl	80076f8 <__errno>
 80013b0:	4603      	mov	r3, r0
 80013b2:	220c      	movs	r2, #12
 80013b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	e009      	b.n	80013d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <_sbrk+0x64>)
 80013cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20008000 	.word	0x20008000
 80013dc:	00000400 	.word	0x00000400
 80013e0:	20000410 	.word	0x20000410
 80013e4:	20000428 	.word	0x20000428

080013e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <SystemInit+0x20>)
 80013ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <SystemInit+0x20>)
 80013f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800140e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <LoopForever+0x6>)
  ldr r1, =_edata
 8001412:	490e      	ldr	r1, [pc, #56]	; (800144c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001414:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <LoopForever+0xe>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001418:	e002      	b.n	8001420 <LoopCopyDataInit>

0800141a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800141c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141e:	3304      	adds	r3, #4

08001420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001424:	d3f9      	bcc.n	800141a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001428:	4c0b      	ldr	r4, [pc, #44]	; (8001458 <LoopForever+0x16>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800142c:	e001      	b.n	8001432 <LoopFillZerobss>

0800142e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001430:	3204      	adds	r2, #4

08001432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001434:	d3fb      	bcc.n	800142e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001436:	f7ff ffd7 	bl	80013e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143a:	f006 f963 	bl	8007704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800143e:	f7ff f8d1 	bl	80005e4 <main>

08001442 <LoopForever>:

LoopForever:
    b LoopForever
 8001442:	e7fe      	b.n	8001442 <LoopForever>
  ldr   r0, =_estack
 8001444:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800144c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001450:	08008fe4 	.word	0x08008fe4
  ldr r2, =_sbss
 8001454:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001458:	20000428 	.word	0x20000428

0800145c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC1_2_IRQHandler>

0800145e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001468:	2003      	movs	r0, #3
 800146a:	f001 f91c 	bl	80026a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800146e:	200f      	movs	r0, #15
 8001470:	f7ff fe44 	bl	80010fc <HAL_InitTick>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	e001      	b.n	8001484 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001480:	f7ff fd0c 	bl	8000e9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001484:	79fb      	ldrb	r3, [r7, #7]

}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_IncTick+0x1c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_IncTick+0x20>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4413      	add	r3, r2
 800149e:	4a03      	ldr	r2, [pc, #12]	; (80014ac <HAL_IncTick+0x1c>)
 80014a0:	6013      	str	r3, [r2, #0]
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	20000414 	.word	0x20000414
 80014b0:	200001a8 	.word	0x200001a8

080014b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_GetTick+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000414 	.word	0x20000414

080014cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff ffee 	bl	80014b4 <HAL_GetTick>
 80014d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e4:	d004      	beq.n	80014f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_Delay+0x40>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f0:	bf00      	nop
 80014f2:	f7ff ffdf 	bl	80014b4 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d8f7      	bhi.n	80014f2 <HAL_Delay+0x26>
  {
  }
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200001a8 	.word	0x200001a8

08001510 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	609a      	str	r2, [r3, #8]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3360      	adds	r3, #96	; 0x60
 800158a:	461a      	mov	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <LL_ADC_SetOffset+0x44>)
 800159a:	4013      	ands	r3, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	4313      	orrs	r3, r2
 80015a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015b0:	bf00      	nop
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	03fff000 	.word	0x03fff000

080015c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3360      	adds	r3, #96	; 0x60
 80015ce:	461a      	mov	r2, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3360      	adds	r3, #96	; 0x60
 80015fc:	461a      	mov	r2, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001622:	b480      	push	{r7}
 8001624:	b087      	sub	sp, #28
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	3360      	adds	r3, #96	; 0x60
 8001632:	461a      	mov	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	431a      	orrs	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800164c:	bf00      	nop
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3360      	adds	r3, #96	; 0x60
 8001668:	461a      	mov	r2, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	431a      	orrs	r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001682:	bf00      	nop
 8001684:	371c      	adds	r7, #28
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	615a      	str	r2, [r3, #20]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3330      	adds	r3, #48	; 0x30
 80016c4:	461a      	mov	r2, r3
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	4413      	add	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	211f      	movs	r1, #31
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	401a      	ands	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	0e9b      	lsrs	r3, r3, #26
 80016ec:	f003 011f 	and.w	r1, r3, #31
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	431a      	orrs	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001700:	bf00      	nop
 8001702:	371c      	adds	r7, #28
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3314      	adds	r3, #20
 800171c:	461a      	mov	r2, r3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	0e5b      	lsrs	r3, r3, #25
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	0d1b      	lsrs	r3, r3, #20
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	2107      	movs	r1, #7
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	401a      	ands	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	0d1b      	lsrs	r3, r3, #20
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	431a      	orrs	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001756:	bf00      	nop
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d10a      	bne.n	800178e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001784:	431a      	orrs	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800178c:	e00a      	b.n	80017a4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179a:	43db      	mvns	r3, r3
 800179c:	401a      	ands	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	407f0000 	.word	0x407f0000

080017b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6093      	str	r3, [r2, #8]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ec:	d101      	bne.n	80017f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001814:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800183c:	d101      	bne.n	8001842 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <LL_ADC_IsEnabled+0x18>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <LL_ADC_IsEnabled+0x1a>
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b04      	cmp	r3, #4
 8001888:	d101      	bne.n	800188e <LL_ADC_REG_IsConversionOngoing+0x18>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d101      	bne.n	80018b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e177      	b.n	8001bce <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff faf9 	bl	8000ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff67 	bl	80017d8 <LL_ADC_IsDeepPowerDownEnabled>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff4d 	bl	80017b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff82 	bl	8001828 <LL_ADC_IsInternalRegulatorEnabled>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d115      	bne.n	8001956 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff66 	bl	8001800 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001934:	4b9c      	ldr	r3, [pc, #624]	; (8001ba8 <HAL_ADC_Init+0x2e4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	4a9c      	ldr	r2, [pc, #624]	; (8001bac <HAL_ADC_Init+0x2e8>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	099b      	lsrs	r3, r3, #6
 8001942:	3301      	adds	r3, #1
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001948:	e002      	b.n	8001950 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3b01      	subs	r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f9      	bne.n	800194a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff64 	bl	8001828 <LL_ADC_IsInternalRegulatorEnabled>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10d      	bne.n	8001982 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196a:	f043 0210 	orr.w	r2, r3, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001976:	f043 0201 	orr.w	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff75 	bl	8001876 <LL_ADC_REG_IsConversionOngoing>
 800198c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 8110 	bne.w	8001bbc <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 810c 	bne.w	8001bbc <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019ac:	f043 0202 	orr.w	r2, r3, #2
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff49 	bl	8001850 <LL_ADC_IsEnabled>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d111      	bne.n	80019e8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80019c8:	f7ff ff42 	bl	8001850 <LL_ADC_IsEnabled>
 80019cc:	4604      	mov	r4, r0
 80019ce:	4878      	ldr	r0, [pc, #480]	; (8001bb0 <HAL_ADC_Init+0x2ec>)
 80019d0:	f7ff ff3e 	bl	8001850 <LL_ADC_IsEnabled>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4323      	orrs	r3, r4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4619      	mov	r1, r3
 80019e2:	4874      	ldr	r0, [pc, #464]	; (8001bb4 <HAL_ADC_Init+0x2f0>)
 80019e4:	f7ff fd94 	bl	8001510 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7f5b      	ldrb	r3, [r3, #29]
 80019ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80019f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80019fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a06:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d106      	bne.n	8001a24 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	045b      	lsls	r3, r3, #17
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d009      	beq.n	8001a40 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <HAL_ADC_Init+0x2f4>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff01 	bl	8001876 <LL_ADC_REG_IsConversionOngoing>
 8001a74:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff0e 	bl	800189c <LL_ADC_INJ_IsConversionOngoing>
 8001a80:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d16d      	bne.n	8001b64 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d16a      	bne.n	8001b64 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a92:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a9a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aaa:	f023 0302 	bic.w	r3, r3, #2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	69b9      	ldr	r1, [r7, #24]
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d017      	beq.n	8001af0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ace:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ad8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001adc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6911      	ldr	r1, [r2, #16]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001aee:	e013      	b.n	8001b18 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001afe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b14:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d118      	bne.n	8001b54 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b38:	4311      	orrs	r1, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b3e:	4311      	orrs	r1, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b44:	430a      	orrs	r2, r1
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
 8001b50:	611a      	str	r2, [r3, #16]
 8001b52:	e007      	b.n	8001b64 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d10c      	bne.n	8001b86 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f023 010f 	bic.w	r1, r3, #15
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	1e5a      	subs	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
 8001b84:	e007      	b.n	8001b96 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 020f 	bic.w	r2, r2, #15
 8001b94:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9a:	f023 0303 	bic.w	r3, r3, #3
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ba6:	e011      	b.n	8001bcc <HAL_ADC_Init+0x308>
 8001ba8:	200001a0 	.word	0x200001a0
 8001bac:	053e2d63 	.word	0x053e2d63
 8001bb0:	50000100 	.word	0x50000100
 8001bb4:	50000300 	.word	0x50000300
 8001bb8:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	f043 0210 	orr.w	r2, r3, #16
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd90      	pop	{r4, r7, pc}
 8001bd6:	bf00      	nop

08001bd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b0b6      	sub	sp, #216	; 0xd8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x22>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e3c8      	b.n	800238c <HAL_ADC_ConfigChannel+0x7b4>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fe35 	bl	8001876 <LL_ADC_REG_IsConversionOngoing>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 83ad 	bne.w	800236e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	f7ff fd47 	bl	80016b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fe23 	bl	8001876 <LL_ADC_REG_IsConversionOngoing>
 8001c30:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fe2f 	bl	800189c <LL_ADC_INJ_IsConversionOngoing>
 8001c3e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 81d9 	bne.w	8001ffe <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f040 81d4 	bne.w	8001ffe <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c5e:	d10f      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7ff fd4e 	bl	800170c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fd08 	bl	800168e <LL_ADC_SetSamplingTimeCommonConfig>
 8001c7e:	e00e      	b.n	8001c9e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6819      	ldr	r1, [r3, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	f7ff fd3d 	bl	800170c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fcf8 	bl	800168e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d022      	beq.n	8001d06 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6919      	ldr	r1, [r3, #16]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cd0:	f7ff fc52 	bl	8001578 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	6919      	ldr	r1, [r3, #16]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	f7ff fc9e 	bl	8001622 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6919      	ldr	r1, [r3, #16]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	7f1b      	ldrb	r3, [r3, #28]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d102      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x124>
 8001cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cfa:	e000      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x126>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f7ff fcaa 	bl	8001658 <LL_ADC_SetOffsetSaturation>
 8001d04:	e17b      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fc57 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10a      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x15a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fc4c 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	0e9b      	lsrs	r3, r3, #26
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	e01e      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x198>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fc41 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001d60:	2320      	movs	r3, #32
 8001d62:	e004      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001d64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x1b0>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0e9b      	lsrs	r3, r3, #26
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	e018      	b.n	8001dba <HAL_ADC_ConfigChannel+0x1e2>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001da4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001dac:	2320      	movs	r3, #32
 8001dae:	e004      	b.n	8001dba <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001db0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d106      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fc10 	bl	80015ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fbf4 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10a      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x220>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2101      	movs	r1, #1
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fbe9 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	0e9b      	lsrs	r3, r3, #26
 8001df2:	f003 021f 	and.w	r2, r3, #31
 8001df6:	e01e      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x25e>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fbde 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001e26:	2320      	movs	r3, #32
 8001e28:	e004      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001e2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d105      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x276>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	0e9b      	lsrs	r3, r3, #26
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	e018      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x2a8>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001e72:	2320      	movs	r3, #32
 8001e74:	e004      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001e76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d106      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fbad 	bl	80015ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2102      	movs	r1, #2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fb91 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10a      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x2e6>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2102      	movs	r1, #2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fb86 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	0e9b      	lsrs	r3, r3, #26
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	e01e      	b.n	8001efc <HAL_ADC_ConfigChannel+0x324>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fb7b 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ee0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001eec:	2320      	movs	r3, #32
 8001eee:	e004      	b.n	8001efa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001ef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x33c>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0e9b      	lsrs	r3, r3, #26
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	e016      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x36a>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001f34:	2320      	movs	r3, #32
 8001f36:	e004      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d106      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fb4c 	bl	80015ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2103      	movs	r1, #3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fb30 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10a      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x3a8>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2103      	movs	r1, #3
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fb25 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8001f76:	4603      	mov	r3, r0
 8001f78:	0e9b      	lsrs	r3, r3, #26
 8001f7a:	f003 021f 	and.w	r2, r3, #31
 8001f7e:	e017      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x3d8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2103      	movs	r1, #3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fb1a 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f9a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	e003      	b.n	8001fae <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d105      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x3f0>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0e9b      	lsrs	r3, r3, #26
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	e011      	b.n	8001fec <HAL_ADC_ConfigChannel+0x414>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001fd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	e003      	b.n	8001fec <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d106      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2103      	movs	r1, #3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff faf7 	bl	80015ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fc24 	bl	8001850 <LL_ADC_IsEnabled>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 8140 	bne.w	8002290 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	461a      	mov	r2, r3
 800201e:	f7ff fba1 	bl	8001764 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	4a8f      	ldr	r2, [pc, #572]	; (8002264 <HAL_ADC_ConfigChannel+0x68c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	f040 8131 	bne.w	8002290 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10b      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x47e>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	0e9b      	lsrs	r3, r3, #26
 8002044:	3301      	adds	r3, #1
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	2b09      	cmp	r3, #9
 800204c:	bf94      	ite	ls
 800204e:	2301      	movls	r3, #1
 8002050:	2300      	movhi	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	e019      	b.n	800208a <HAL_ADC_ConfigChannel+0x4b2>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002066:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800206e:	2320      	movs	r3, #32
 8002070:	e003      	b.n	800207a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	3301      	adds	r3, #1
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	2b09      	cmp	r3, #9
 8002082:	bf94      	ite	ls
 8002084:	2301      	movls	r3, #1
 8002086:	2300      	movhi	r3, #0
 8002088:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800208a:	2b00      	cmp	r3, #0
 800208c:	d079      	beq.n	8002182 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002096:	2b00      	cmp	r3, #0
 8002098:	d107      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x4d2>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	0e9b      	lsrs	r3, r3, #26
 80020a0:	3301      	adds	r3, #1
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a8:	e015      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x4fe>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80020bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80020c2:	2320      	movs	r3, #32
 80020c4:	e003      	b.n	80020ce <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80020c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	069b      	lsls	r3, r3, #26
 80020d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x51e>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	3301      	adds	r3, #1
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f303 	lsl.w	r3, r1, r3
 80020f4:	e017      	b.n	8002126 <HAL_ADC_ConfigChannel+0x54e>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002106:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800210e:	2320      	movs	r3, #32
 8002110:	e003      	b.n	800211a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	3301      	adds	r3, #1
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2101      	movs	r1, #1
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	ea42 0103 	orr.w	r1, r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10a      	bne.n	800214c <HAL_ADC_ConfigChannel+0x574>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	0e9b      	lsrs	r3, r3, #26
 800213c:	3301      	adds	r3, #1
 800213e:	f003 021f 	and.w	r2, r3, #31
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	051b      	lsls	r3, r3, #20
 800214a:	e018      	b.n	800217e <HAL_ADC_ConfigChannel+0x5a6>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800215a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800215e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e003      	b.n	8002170 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3301      	adds	r3, #1
 8002172:	f003 021f 	and.w	r2, r3, #31
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800217e:	430b      	orrs	r3, r1
 8002180:	e081      	b.n	8002286 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218a:	2b00      	cmp	r3, #0
 800218c:	d107      	bne.n	800219e <HAL_ADC_ConfigChannel+0x5c6>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	3301      	adds	r3, #1
 8002196:	069b      	lsls	r3, r3, #26
 8002198:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800219c:	e015      	b.n	80021ca <HAL_ADC_ConfigChannel+0x5f2>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80021b6:	2320      	movs	r3, #32
 80021b8:	e003      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	069b      	lsls	r3, r3, #26
 80021c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x612>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	0e9b      	lsrs	r3, r3, #26
 80021dc:	3301      	adds	r3, #1
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	e017      	b.n	800221a <HAL_ADC_ConfigChannel+0x642>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	61fb      	str	r3, [r7, #28]
  return result;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002202:	2320      	movs	r3, #32
 8002204:	e003      	b.n	800220e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	3301      	adds	r3, #1
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	ea42 0103 	orr.w	r1, r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10d      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x66e>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	0e9b      	lsrs	r3, r3, #26
 8002230:	3301      	adds	r3, #1
 8002232:	f003 021f 	and.w	r2, r3, #31
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	3b1e      	subs	r3, #30
 800223e:	051b      	lsls	r3, r3, #20
 8002240:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002244:	e01e      	b.n	8002284 <HAL_ADC_ConfigChannel+0x6ac>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	613b      	str	r3, [r7, #16]
  return result;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d104      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800225e:	2320      	movs	r3, #32
 8002260:	e006      	b.n	8002270 <HAL_ADC_ConfigChannel+0x698>
 8002262:	bf00      	nop
 8002264:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f003 021f 	and.w	r2, r3, #31
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	3b1e      	subs	r3, #30
 800227e:	051b      	lsls	r3, r3, #20
 8002280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002284:	430b      	orrs	r3, r1
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	6892      	ldr	r2, [r2, #8]
 800228a:	4619      	mov	r1, r3
 800228c:	f7ff fa3e 	bl	800170c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <HAL_ADC_ConfigChannel+0x7bc>)
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d071      	beq.n	8002380 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800229c:	483e      	ldr	r0, [pc, #248]	; (8002398 <HAL_ADC_ConfigChannel+0x7c0>)
 800229e:	f7ff f95d 	bl	800155c <LL_ADC_GetCommonPathInternalCh>
 80022a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a3c      	ldr	r2, [pc, #240]	; (800239c <HAL_ADC_ConfigChannel+0x7c4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d004      	beq.n	80022ba <HAL_ADC_ConfigChannel+0x6e2>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a3a      	ldr	r2, [pc, #232]	; (80023a0 <HAL_ADC_ConfigChannel+0x7c8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d127      	bne.n	800230a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d121      	bne.n	800230a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ce:	d157      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022d8:	4619      	mov	r1, r3
 80022da:	482f      	ldr	r0, [pc, #188]	; (8002398 <HAL_ADC_ConfigChannel+0x7c0>)
 80022dc:	f7ff f92b 	bl	8001536 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022e0:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <HAL_ADC_ConfigChannel+0x7cc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	099b      	lsrs	r3, r3, #6
 80022e6:	4a30      	ldr	r2, [pc, #192]	; (80023a8 <HAL_ADC_ConfigChannel+0x7d0>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022fa:	e002      	b.n	8002302 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3b01      	subs	r3, #1
 8002300:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f9      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002308:	e03a      	b.n	8002380 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a27      	ldr	r2, [pc, #156]	; (80023ac <HAL_ADC_ConfigChannel+0x7d4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d113      	bne.n	800233c <HAL_ADC_ConfigChannel+0x764>
 8002314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10d      	bne.n	800233c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a22      	ldr	r2, [pc, #136]	; (80023b0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d02a      	beq.n	8002380 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800232a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800232e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002332:	4619      	mov	r1, r3
 8002334:	4818      	ldr	r0, [pc, #96]	; (8002398 <HAL_ADC_ConfigChannel+0x7c0>)
 8002336:	f7ff f8fe 	bl	8001536 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800233a:	e021      	b.n	8002380 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d11c      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d116      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d011      	beq.n	8002380 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800235c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002360:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002364:	4619      	mov	r1, r3
 8002366:	480c      	ldr	r0, [pc, #48]	; (8002398 <HAL_ADC_ConfigChannel+0x7c0>)
 8002368:	f7ff f8e5 	bl	8001536 <LL_ADC_SetCommonPathInternalCh>
 800236c:	e008      	b.n	8002380 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002372:	f043 0220 	orr.w	r2, r3, #32
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002388:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800238c:	4618      	mov	r0, r3
 800238e:	37d8      	adds	r7, #216	; 0xd8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	80080000 	.word	0x80080000
 8002398:	50000300 	.word	0x50000300
 800239c:	c3210000 	.word	0xc3210000
 80023a0:	90c00010 	.word	0x90c00010
 80023a4:	200001a0 	.word	0x200001a0
 80023a8:	053e2d63 	.word	0x053e2d63
 80023ac:	c7520000 	.word	0xc7520000
 80023b0:	50000100 	.word	0x50000100
 80023b4:	cb840000 	.word	0xcb840000

080023b8 <LL_ADC_IsEnabled>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <LL_ADC_IsEnabled+0x18>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <LL_ADC_IsEnabled+0x1a>
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_ADC_REG_IsConversionOngoing>:
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d101      	bne.n	80023f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b0a1      	sub	sp, #132	; 0x84
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800241e:	2302      	movs	r3, #2
 8002420:	e08b      	b.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800242a:	2300      	movs	r3, #0
 800242c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800242e:	2300      	movs	r3, #0
 8002430:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800243a:	d102      	bne.n	8002442 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800243c:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	e001      	b.n	8002446 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	f043 0220 	orr.w	r2, r3, #32
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e06a      	b.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ffb9 	bl	80023de <LL_ADC_REG_IsConversionOngoing>
 800246c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ffb3 	bl	80023de <LL_ADC_REG_IsConversionOngoing>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d14c      	bne.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800247e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002480:	2b00      	cmp	r3, #0
 8002482:	d149      	bne.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002486:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d028      	beq.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024a2:	035b      	lsls	r3, r3, #13
 80024a4:	430b      	orrs	r3, r1
 80024a6:	431a      	orrs	r2, r3
 80024a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024b0:	f7ff ff82 	bl	80023b8 <LL_ADC_IsEnabled>
 80024b4:	4604      	mov	r4, r0
 80024b6:	4823      	ldr	r0, [pc, #140]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024b8:	f7ff ff7e 	bl	80023b8 <LL_ADC_IsEnabled>
 80024bc:	4603      	mov	r3, r0
 80024be:	4323      	orrs	r3, r4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d133      	bne.n	800252c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024cc:	f023 030f 	bic.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	6811      	ldr	r1, [r2, #0]
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	6892      	ldr	r2, [r2, #8]
 80024d8:	430a      	orrs	r2, r1
 80024da:	431a      	orrs	r2, r3
 80024dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024de:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024e0:	e024      	b.n	800252c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024f2:	f7ff ff61 	bl	80023b8 <LL_ADC_IsEnabled>
 80024f6:	4604      	mov	r4, r0
 80024f8:	4812      	ldr	r0, [pc, #72]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024fa:	f7ff ff5d 	bl	80023b8 <LL_ADC_IsEnabled>
 80024fe:	4603      	mov	r3, r0
 8002500:	4323      	orrs	r3, r4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d112      	bne.n	800252c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800250e:	f023 030f 	bic.w	r3, r3, #15
 8002512:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002514:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002516:	e009      	b.n	800252c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800252a:	e000      	b.n	800252e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800252c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002536:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800253a:	4618      	mov	r0, r3
 800253c:	3784      	adds	r7, #132	; 0x84
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}
 8002542:	bf00      	nop
 8002544:	50000100 	.word	0x50000100
 8002548:	50000300 	.word	0x50000300

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0b      	blt.n	80025da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <__NVIC_EnableIRQ+0x38>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db0a      	blt.n	8002616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	490c      	ldr	r1, [pc, #48]	; (8002638 <__NVIC_SetPriority+0x4c>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	440b      	add	r3, r1
 8002610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002614:	e00a      	b.n	800262c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4908      	ldr	r1, [pc, #32]	; (800263c <__NVIC_SetPriority+0x50>)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	3b04      	subs	r3, #4
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	440b      	add	r3, r1
 800262a:	761a      	strb	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f1c3 0307 	rsb	r3, r3, #7
 800265a:	2b04      	cmp	r3, #4
 800265c:	bf28      	it	cs
 800265e:	2304      	movcs	r3, #4
 8002660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3304      	adds	r3, #4
 8002666:	2b06      	cmp	r3, #6
 8002668:	d902      	bls.n	8002670 <NVIC_EncodePriority+0x30>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3b03      	subs	r3, #3
 800266e:	e000      	b.n	8002672 <NVIC_EncodePriority+0x32>
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	f04f 32ff 	mov.w	r2, #4294967295
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	401a      	ands	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002688:	f04f 31ff 	mov.w	r1, #4294967295
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	43d9      	mvns	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	4313      	orrs	r3, r2
         );
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ff4c 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026ca:	f7ff ff63 	bl	8002594 <__NVIC_GetPriorityGrouping>
 80026ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	6978      	ldr	r0, [r7, #20]
 80026d6:	f7ff ffb3 	bl	8002640 <NVIC_EncodePriority>
 80026da:	4602      	mov	r2, r0
 80026dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff82 	bl	80025ec <__NVIC_SetPriority>
}
 80026e8:	bf00      	nop
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff ff56 	bl	80025b0 <__NVIC_EnableIRQ>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d005      	beq.n	8002730 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2204      	movs	r2, #4
 8002728:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
 800272e:	e037      	b.n	80027a0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 020e 	bic.w	r2, r2, #14
 800273e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800274e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800277c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00c      	beq.n	80027a0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002794:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800279e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d00d      	beq.n	80027f2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2204      	movs	r2, #4
 80027da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	e047      	b.n	8002882 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 020e 	bic.w	r2, r2, #14
 8002800:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002820:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f003 021f 	and.w	r2, r3, #31
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	2101      	movs	r1, #1
 8002830:	fa01 f202 	lsl.w	r2, r1, r2
 8002834:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800283e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00c      	beq.n	8002862 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002856:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002860:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
    }
  }
  return status;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800289a:	e15a      	b.n	8002b52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2101      	movs	r1, #1
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 814c 	beq.w	8002b4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d005      	beq.n	80028cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d130      	bne.n	800292e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002902:	2201      	movs	r2, #1
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 0201 	and.w	r2, r3, #1
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b03      	cmp	r3, #3
 8002938:	d017      	beq.n	800296a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	2203      	movs	r2, #3
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d123      	bne.n	80029be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	08da      	lsrs	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3208      	adds	r2, #8
 800297e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	220f      	movs	r2, #15
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	08da      	lsrs	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3208      	adds	r2, #8
 80029b8:	6939      	ldr	r1, [r7, #16]
 80029ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	2203      	movs	r2, #3
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0203 	and.w	r2, r3, #3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80a6 	beq.w	8002b4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a00:	4b5b      	ldr	r3, [pc, #364]	; (8002b70 <HAL_GPIO_Init+0x2e4>)
 8002a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a04:	4a5a      	ldr	r2, [pc, #360]	; (8002b70 <HAL_GPIO_Init+0x2e4>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6613      	str	r3, [r2, #96]	; 0x60
 8002a0c:	4b58      	ldr	r3, [pc, #352]	; (8002b70 <HAL_GPIO_Init+0x2e4>)
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a18:	4a56      	ldr	r2, [pc, #344]	; (8002b74 <HAL_GPIO_Init+0x2e8>)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	3302      	adds	r3, #2
 8002a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	220f      	movs	r2, #15
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a42:	d01f      	beq.n	8002a84 <HAL_GPIO_Init+0x1f8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a4c      	ldr	r2, [pc, #304]	; (8002b78 <HAL_GPIO_Init+0x2ec>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d019      	beq.n	8002a80 <HAL_GPIO_Init+0x1f4>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a4b      	ldr	r2, [pc, #300]	; (8002b7c <HAL_GPIO_Init+0x2f0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d013      	beq.n	8002a7c <HAL_GPIO_Init+0x1f0>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <HAL_GPIO_Init+0x2f4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00d      	beq.n	8002a78 <HAL_GPIO_Init+0x1ec>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a49      	ldr	r2, [pc, #292]	; (8002b84 <HAL_GPIO_Init+0x2f8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d007      	beq.n	8002a74 <HAL_GPIO_Init+0x1e8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a48      	ldr	r2, [pc, #288]	; (8002b88 <HAL_GPIO_Init+0x2fc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d101      	bne.n	8002a70 <HAL_GPIO_Init+0x1e4>
 8002a6c:	2305      	movs	r3, #5
 8002a6e:	e00a      	b.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a70:	2306      	movs	r3, #6
 8002a72:	e008      	b.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a74:	2304      	movs	r3, #4
 8002a76:	e006      	b.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e004      	b.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e002      	b.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a84:	2300      	movs	r3, #0
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	f002 0203 	and.w	r2, r2, #3
 8002a8c:	0092      	lsls	r2, r2, #2
 8002a8e:	4093      	lsls	r3, r2
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a96:	4937      	ldr	r1, [pc, #220]	; (8002b74 <HAL_GPIO_Init+0x2e8>)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aa4:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <HAL_GPIO_Init+0x300>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ac8:	4a30      	ldr	r2, [pc, #192]	; (8002b8c <HAL_GPIO_Init+0x300>)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ace:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <HAL_GPIO_Init+0x300>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002af2:	4a26      	ldr	r2, [pc, #152]	; (8002b8c <HAL_GPIO_Init+0x300>)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002af8:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <HAL_GPIO_Init+0x300>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <HAL_GPIO_Init+0x300>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_GPIO_Init+0x300>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b46:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_GPIO_Init+0x300>)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f47f ae9d 	bne.w	800289c <HAL_GPIO_Init+0x10>
  }
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40010000 	.word	0x40010000
 8002b78:	48000400 	.word	0x48000400
 8002b7c:	48000800 	.word	0x48000800
 8002b80:	48000c00 	.word	0x48000c00
 8002b84:	48001000 	.word	0x48001000
 8002b88:	48001400 	.word	0x48001400
 8002b8c:	40010400 	.word	0x40010400

08002b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ba0:	787b      	ldrb	r3, [r7, #1]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ba6:	887a      	ldrh	r2, [r7, #2]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bac:	e002      	b.n	8002bb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bae:	887a      	ldrh	r2, [r7, #2]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d141      	bne.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bce:	4b4b      	ldr	r3, [pc, #300]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bda:	d131      	bne.n	8002c40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bdc:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be2:	4a46      	ldr	r2, [pc, #280]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bec:	4b43      	ldr	r3, [pc, #268]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bf4:	4a41      	ldr	r2, [pc, #260]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bfc:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2232      	movs	r2, #50	; 0x32
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	4a3f      	ldr	r2, [pc, #252]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	0c9b      	lsrs	r3, r3, #18
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c12:	e002      	b.n	8002c1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c1a:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c26:	d102      	bne.n	8002c2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f2      	bne.n	8002c14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c2e:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3a:	d158      	bne.n	8002cee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e057      	b.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c40:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c46:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c50:	e04d      	b.n	8002cee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c58:	d141      	bne.n	8002cde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c5a:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c66:	d131      	bne.n	8002ccc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c68:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6e:	4a23      	ldr	r2, [pc, #140]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c78:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c80:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2232      	movs	r2, #50	; 0x32
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	0c9b      	lsrs	r3, r3, #18
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c9e:	e002      	b.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb2:	d102      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f2      	bne.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc6:	d112      	bne.n	8002cee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e011      	b.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002cdc:	e007      	b.n	8002cee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cde:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ce6:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	200001a0 	.word	0x200001a0
 8002d04:	431bde83 	.word	0x431bde83

08002d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e306      	b.n	8003328 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d075      	beq.n	8002e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d26:	4b97      	ldr	r3, [pc, #604]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d30:	4b94      	ldr	r3, [pc, #592]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d102      	bne.n	8002d46 <HAL_RCC_OscConfig+0x3e>
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_OscConfig+0x44>
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	4b8d      	ldr	r3, [pc, #564]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d05b      	beq.n	8002e10 <HAL_RCC_OscConfig+0x108>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d157      	bne.n	8002e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e2e1      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d106      	bne.n	8002d7c <HAL_RCC_OscConfig+0x74>
 8002d6e:	4b85      	ldr	r3, [pc, #532]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a84      	ldr	r2, [pc, #528]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e01d      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x98>
 8002d86:	4b7f      	ldr	r3, [pc, #508]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a7e      	ldr	r2, [pc, #504]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b7c      	ldr	r3, [pc, #496]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7b      	ldr	r2, [pc, #492]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002da0:	4b78      	ldr	r3, [pc, #480]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a77      	ldr	r2, [pc, #476]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b75      	ldr	r3, [pc, #468]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a74      	ldr	r2, [pc, #464]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fb78 	bl	80014b4 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fb74 	bl	80014b4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e2a6      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dda:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xc0>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe fb64 	bl	80014b4 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe fb60 	bl	80014b4 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e292      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e02:	4b60      	ldr	r3, [pc, #384]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0xe8>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d075      	beq.n	8002f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e1e:	4b59      	ldr	r3, [pc, #356]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e28:	4b56      	ldr	r3, [pc, #344]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2b0c      	cmp	r3, #12
 8002e36:	d102      	bne.n	8002e3e <HAL_RCC_OscConfig+0x136>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d002      	beq.n	8002e44 <HAL_RCC_OscConfig+0x13c>
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d11f      	bne.n	8002e84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e44:	4b4f      	ldr	r3, [pc, #316]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_OscConfig+0x154>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e265      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5c:	4b49      	ldr	r3, [pc, #292]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	061b      	lsls	r3, r3, #24
 8002e6a:	4946      	ldr	r1, [pc, #280]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e70:	4b45      	ldr	r3, [pc, #276]	; (8002f88 <HAL_RCC_OscConfig+0x280>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe f941 	bl	80010fc <HAL_InitTick>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d043      	beq.n	8002f08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e251      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d023      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e8c:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a3c      	ldr	r2, [pc, #240]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fb0c 	bl	80014b4 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7fe fb08 	bl	80014b4 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e23a      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb2:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebe:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	061b      	lsls	r3, r3, #24
 8002ecc:	492d      	ldr	r1, [pc, #180]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]
 8002ed2:	e01a      	b.n	8002f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fae8 	bl	80014b4 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee8:	f7fe fae4 	bl	80014b4 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e216      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x1e0>
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d041      	beq.n	8002f9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f24:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fac1 	bl	80014b4 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f36:	f7fe fabd 	bl	80014b4 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e1ef      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f48:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0ef      	beq.n	8002f36 <HAL_RCC_OscConfig+0x22e>
 8002f56:	e020      	b.n	8002f9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5e:	4a09      	ldr	r2, [pc, #36]	; (8002f84 <HAL_RCC_OscConfig+0x27c>)
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7fe faa4 	bl	80014b4 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f6e:	e00d      	b.n	8002f8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fe faa0 	bl	80014b4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d906      	bls.n	8002f8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e1d2      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	200001a4 	.word	0x200001a4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f8c:	4b8c      	ldr	r3, [pc, #560]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8002f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ea      	bne.n	8002f70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80a6 	beq.w	80030f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fac:	4b84      	ldr	r3, [pc, #528]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_OscConfig+0x2b4>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x2b6>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	4b7f      	ldr	r3, [pc, #508]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	4a7e      	ldr	r2, [pc, #504]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8002fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8002fce:	4b7c      	ldr	r3, [pc, #496]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fde:	4b79      	ldr	r3, [pc, #484]	; (80031c4 <HAL_RCC_OscConfig+0x4bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d118      	bne.n	800301c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fea:	4b76      	ldr	r3, [pc, #472]	; (80031c4 <HAL_RCC_OscConfig+0x4bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a75      	ldr	r2, [pc, #468]	; (80031c4 <HAL_RCC_OscConfig+0x4bc>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fa5d 	bl	80014b4 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffe:	f7fe fa59 	bl	80014b4 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e18b      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003010:	4b6c      	ldr	r3, [pc, #432]	; (80031c4 <HAL_RCC_OscConfig+0x4bc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d108      	bne.n	8003036 <HAL_RCC_OscConfig+0x32e>
 8003024:	4b66      	ldr	r3, [pc, #408]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302a:	4a65      	ldr	r2, [pc, #404]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003034:	e024      	b.n	8003080 <HAL_RCC_OscConfig+0x378>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b05      	cmp	r3, #5
 800303c:	d110      	bne.n	8003060 <HAL_RCC_OscConfig+0x358>
 800303e:	4b60      	ldr	r3, [pc, #384]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	4a5e      	ldr	r2, [pc, #376]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8003046:	f043 0304 	orr.w	r3, r3, #4
 800304a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800304e:	4b5c      	ldr	r3, [pc, #368]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	4a5a      	ldr	r2, [pc, #360]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800305e:	e00f      	b.n	8003080 <HAL_RCC_OscConfig+0x378>
 8003060:	4b57      	ldr	r3, [pc, #348]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	4a56      	ldr	r2, [pc, #344]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003070:	4b53      	ldr	r3, [pc, #332]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	4a52      	ldr	r2, [pc, #328]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8003078:	f023 0304 	bic.w	r3, r3, #4
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d016      	beq.n	80030b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe fa14 	bl	80014b4 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fe fa10 	bl	80014b4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e140      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a6:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ed      	beq.n	8003090 <HAL_RCC_OscConfig+0x388>
 80030b4:	e015      	b.n	80030e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b6:	f7fe f9fd 	bl	80014b4 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fe f9f9 	bl	80014b4 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e129      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030d4:	4b3a      	ldr	r3, [pc, #232]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1ed      	bne.n	80030be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030e2:	7ffb      	ldrb	r3, [r7, #31]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e8:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	4a34      	ldr	r2, [pc, #208]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 80030ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d03c      	beq.n	800317a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01c      	beq.n	8003142 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003108:	4b2d      	ldr	r3, [pc, #180]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 800310a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800310e:	4a2c      	ldr	r2, [pc, #176]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003118:	f7fe f9cc 	bl	80014b4 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003120:	f7fe f9c8 	bl	80014b4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e0fa      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003132:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8003134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ef      	beq.n	8003120 <HAL_RCC_OscConfig+0x418>
 8003140:	e01b      	b.n	800317a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003142:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8003144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003148:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003152:	f7fe f9af 	bl	80014b4 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800315a:	f7fe f9ab 	bl	80014b4 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e0dd      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800316c:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 800316e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ef      	bne.n	800315a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 80d1 	beq.w	8003326 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003184:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b0c      	cmp	r3, #12
 800318e:	f000 808b 	beq.w	80032a8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d15e      	bne.n	8003258 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a08      	ldr	r2, [pc, #32]	; (80031c0 <HAL_RCC_OscConfig+0x4b8>)
 80031a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7fe f985 	bl	80014b4 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ac:	e00c      	b.n	80031c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ae:	f7fe f981 	bl	80014b4 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d905      	bls.n	80031c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e0b3      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c8:	4b59      	ldr	r3, [pc, #356]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ec      	bne.n	80031ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d4:	4b56      	ldr	r3, [pc, #344]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	4b56      	ldr	r3, [pc, #344]	; (8003334 <HAL_RCC_OscConfig+0x62c>)
 80031da:	4013      	ands	r3, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6a11      	ldr	r1, [r2, #32]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031e4:	3a01      	subs	r2, #1
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	4311      	orrs	r1, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80031ee:	0212      	lsls	r2, r2, #8
 80031f0:	4311      	orrs	r1, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031f6:	0852      	lsrs	r2, r2, #1
 80031f8:	3a01      	subs	r2, #1
 80031fa:	0552      	lsls	r2, r2, #21
 80031fc:	4311      	orrs	r1, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003202:	0852      	lsrs	r2, r2, #1
 8003204:	3a01      	subs	r2, #1
 8003206:	0652      	lsls	r2, r2, #25
 8003208:	4311      	orrs	r1, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800320e:	06d2      	lsls	r2, r2, #27
 8003210:	430a      	orrs	r2, r1
 8003212:	4947      	ldr	r1, [pc, #284]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 8003214:	4313      	orrs	r3, r2
 8003216:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003218:	4b45      	ldr	r3, [pc, #276]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a44      	ldr	r2, [pc, #272]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 800321e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003222:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003224:	4b42      	ldr	r3, [pc, #264]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a41      	ldr	r2, [pc, #260]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 800322a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe f940 	bl	80014b4 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003238:	f7fe f93c 	bl	80014b4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e06e      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324a:	4b39      	ldr	r3, [pc, #228]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x530>
 8003256:	e066      	b.n	8003326 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003258:	4b35      	ldr	r3, [pc, #212]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a34      	ldr	r2, [pc, #208]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 800325e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003262:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a31      	ldr	r2, [pc, #196]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003270:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4a2e      	ldr	r2, [pc, #184]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 8003276:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe f918 	bl	80014b4 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7fe f914 	bl	80014b4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e046      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800329a:	4b25      	ldr	r3, [pc, #148]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x580>
 80032a6:	e03e      	b.n	8003326 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e039      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80032b4:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <HAL_RCC_OscConfig+0x628>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 0203 	and.w	r2, r3, #3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d12c      	bne.n	8003322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	3b01      	subs	r3, #1
 80032d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d123      	bne.n	8003322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d11b      	bne.n	8003322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d113      	bne.n	8003322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	3b01      	subs	r3, #1
 8003308:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d109      	bne.n	8003322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	3b01      	subs	r3, #1
 800331c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d001      	beq.n	8003326 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3720      	adds	r7, #32
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000
 8003334:	019f800c 	.word	0x019f800c

08003338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e11e      	b.n	800358e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003350:	4b91      	ldr	r3, [pc, #580]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d910      	bls.n	8003380 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b8e      	ldr	r3, [pc, #568]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 020f 	bic.w	r2, r3, #15
 8003366:	498c      	ldr	r1, [pc, #560]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b8a      	ldr	r3, [pc, #552]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e106      	b.n	800358e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d073      	beq.n	8003474 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d129      	bne.n	80033e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003394:	4b81      	ldr	r3, [pc, #516]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0f4      	b.n	800358e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80033a4:	f000 f9d0 	bl	8003748 <RCC_GetSysClockFreqFromPLLSource>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4a7c      	ldr	r2, [pc, #496]	; (80035a0 <HAL_RCC_ClockConfig+0x268>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d93f      	bls.n	8003432 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033b2:	4b7a      	ldr	r3, [pc, #488]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d033      	beq.n	8003432 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d12f      	bne.n	8003432 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033d2:	4b72      	ldr	r3, [pc, #456]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033da:	4a70      	ldr	r2, [pc, #448]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 80033dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e024      	b.n	8003432 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f0:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0c6      	b.n	800358e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003400:	4b66      	ldr	r3, [pc, #408]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0be      	b.n	800358e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003410:	f000 f8ce 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 8003414:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4a61      	ldr	r2, [pc, #388]	; (80035a0 <HAL_RCC_ClockConfig+0x268>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d909      	bls.n	8003432 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800341e:	4b5f      	ldr	r3, [pc, #380]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003426:	4a5d      	ldr	r2, [pc, #372]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 8003428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800342c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003432:	4b5a      	ldr	r3, [pc, #360]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f023 0203 	bic.w	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	4957      	ldr	r1, [pc, #348]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 8003440:	4313      	orrs	r3, r2
 8003442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003444:	f7fe f836 	bl	80014b4 <HAL_GetTick>
 8003448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	e00a      	b.n	8003462 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800344c:	f7fe f832 	bl	80014b4 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e095      	b.n	800358e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	4b4e      	ldr	r3, [pc, #312]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 020c 	and.w	r2, r3, #12
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	429a      	cmp	r2, r3
 8003472:	d1eb      	bne.n	800344c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d023      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800348c:	4b43      	ldr	r3, [pc, #268]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4a42      	ldr	r2, [pc, #264]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 8003492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003496:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80034a4:	4b3d      	ldr	r3, [pc, #244]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80034ac:	4a3b      	ldr	r2, [pc, #236]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 80034ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b4:	4b39      	ldr	r3, [pc, #228]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4936      	ldr	r1, [pc, #216]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
 80034c6:	e008      	b.n	80034da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d105      	bne.n	80034da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034ce:	4b33      	ldr	r3, [pc, #204]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	4a32      	ldr	r2, [pc, #200]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 80034d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034da:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d21d      	bcs.n	8003524 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e8:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f023 020f 	bic.w	r2, r3, #15
 80034f0:	4929      	ldr	r1, [pc, #164]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034f8:	f7fd ffdc 	bl	80014b4 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fd ffd8 	bl	80014b4 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e03b      	b.n	800358e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d1ed      	bne.n	8003500 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003530:	4b1a      	ldr	r3, [pc, #104]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4917      	ldr	r1, [pc, #92]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800354e:	4b13      	ldr	r3, [pc, #76]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	490f      	ldr	r1, [pc, #60]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003562:	f000 f825 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 8003566:	4602      	mov	r2, r0
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <HAL_RCC_ClockConfig+0x264>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	490c      	ldr	r1, [pc, #48]	; (80035a4 <HAL_RCC_ClockConfig+0x26c>)
 8003574:	5ccb      	ldrb	r3, [r1, r3]
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	fa22 f303 	lsr.w	r3, r2, r3
 800357e:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <HAL_RCC_ClockConfig+0x270>)
 8003580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_RCC_ClockConfig+0x274>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd fdb8 	bl	80010fc <HAL_InitTick>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40022000 	.word	0x40022000
 800359c:	40021000 	.word	0x40021000
 80035a0:	04c4b400 	.word	0x04c4b400
 80035a4:	08008d4c 	.word	0x08008d4c
 80035a8:	200001a0 	.word	0x200001a0
 80035ac:	200001a4 	.word	0x200001a4

080035b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035b6:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d102      	bne.n	80035c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_RCC_GetSysClockFreq+0xbc>)
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	e047      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035c8:	4b27      	ldr	r3, [pc, #156]	; (8003668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d102      	bne.n	80035da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035d4:	4b26      	ldr	r3, [pc, #152]	; (8003670 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	e03e      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d136      	bne.n	8003654 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	3301      	adds	r3, #1
 80035fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d10c      	bne.n	800361e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003604:	4a1a      	ldr	r2, [pc, #104]	; (8003670 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	fbb2 f3f3 	udiv	r3, r2, r3
 800360c:	4a16      	ldr	r2, [pc, #88]	; (8003668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800360e:	68d2      	ldr	r2, [r2, #12]
 8003610:	0a12      	lsrs	r2, r2, #8
 8003612:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	617b      	str	r3, [r7, #20]
      break;
 800361c:	e00c      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800361e:	4a13      	ldr	r2, [pc, #76]	; (800366c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	fbb2 f3f3 	udiv	r3, r2, r3
 8003626:	4a10      	ldr	r2, [pc, #64]	; (8003668 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003628:	68d2      	ldr	r2, [r2, #12]
 800362a:	0a12      	lsrs	r2, r2, #8
 800362c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]
      break;
 8003636:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	0e5b      	lsrs	r3, r3, #25
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	3301      	adds	r3, #1
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	e001      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003658:	693b      	ldr	r3, [r7, #16]
}
 800365a:	4618      	mov	r0, r3
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	00f42400 	.word	0x00f42400
 8003670:	016e3600 	.word	0x016e3600

08003674 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <HAL_RCC_GetHCLKFreq+0x14>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	200001a0 	.word	0x200001a0

0800368c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003690:	f7ff fff0 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	0a1b      	lsrs	r3, r3, #8
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4904      	ldr	r1, [pc, #16]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	08008d5c 	.word	0x08008d5c

080036b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036bc:	f7ff ffda 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b06      	ldr	r3, [pc, #24]	; (80036dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	0adb      	lsrs	r3, r3, #11
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4904      	ldr	r1, [pc, #16]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40021000 	.word	0x40021000
 80036e0:	08008d5c 	.word	0x08008d5c

080036e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	220f      	movs	r2, #15
 80036f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80036f4:	4b12      	ldr	r3, [pc, #72]	; (8003740 <HAL_RCC_GetClockConfig+0x5c>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0203 	and.w	r2, r3, #3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003700:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <HAL_RCC_GetClockConfig+0x5c>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <HAL_RCC_GetClockConfig+0x5c>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_GetClockConfig+0x5c>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	08db      	lsrs	r3, r3, #3
 800371e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003726:	4b07      	ldr	r3, [pc, #28]	; (8003744 <HAL_RCC_GetClockConfig+0x60>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 020f 	and.w	r2, r3, #15
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	601a      	str	r2, [r3, #0]
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	40022000 	.word	0x40022000

08003748 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003758:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	3301      	adds	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d10c      	bne.n	8003786 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800376c:	4a17      	ldr	r2, [pc, #92]	; (80037cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003776:	68d2      	ldr	r2, [r2, #12]
 8003778:	0a12      	lsrs	r2, r2, #8
 800377a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800377e:	fb02 f303 	mul.w	r3, r2, r3
 8003782:	617b      	str	r3, [r7, #20]
    break;
 8003784:	e00c      	b.n	80037a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003786:	4a12      	ldr	r2, [pc, #72]	; (80037d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	fbb2 f3f3 	udiv	r3, r2, r3
 800378e:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003790:	68d2      	ldr	r2, [r2, #12]
 8003792:	0a12      	lsrs	r2, r2, #8
 8003794:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003798:	fb02 f303 	mul.w	r3, r2, r3
 800379c:	617b      	str	r3, [r7, #20]
    break;
 800379e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037a0:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0e5b      	lsrs	r3, r3, #25
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	3301      	adds	r3, #1
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80037ba:	687b      	ldr	r3, [r7, #4]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	40021000 	.word	0x40021000
 80037cc:	016e3600 	.word	0x016e3600
 80037d0:	00f42400 	.word	0x00f42400

080037d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037dc:	2300      	movs	r3, #0
 80037de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037e0:	2300      	movs	r3, #0
 80037e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8098 	beq.w	8003922 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f2:	2300      	movs	r3, #0
 80037f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f6:	4b43      	ldr	r3, [pc, #268]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	4b40      	ldr	r3, [pc, #256]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003806:	4a3f      	ldr	r2, [pc, #252]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	6593      	str	r3, [r2, #88]	; 0x58
 800380e:	4b3d      	ldr	r3, [pc, #244]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381a:	2301      	movs	r3, #1
 800381c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800381e:	4b3a      	ldr	r3, [pc, #232]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a39      	ldr	r2, [pc, #228]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003828:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800382a:	f7fd fe43 	bl	80014b4 <HAL_GetTick>
 800382e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003830:	e009      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7fd fe3f 	bl	80014b4 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d902      	bls.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	74fb      	strb	r3, [r7, #19]
        break;
 8003844:	e005      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003846:	4b30      	ldr	r3, [pc, #192]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0ef      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003852:	7cfb      	ldrb	r3, [r7, #19]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d159      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003858:	4b2a      	ldr	r3, [pc, #168]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003862:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01e      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	429a      	cmp	r2, r3
 8003872:	d019      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003874:	4b23      	ldr	r3, [pc, #140]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003880:	4b20      	ldr	r3, [pc, #128]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	4a1f      	ldr	r2, [pc, #124]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	4a1b      	ldr	r2, [pc, #108]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038a0:	4a18      	ldr	r2, [pc, #96]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d016      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd fdff 	bl	80014b4 <HAL_GetTick>
 80038b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b8:	e00b      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fd fdfb 	bl	80014b4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d902      	bls.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	74fb      	strb	r3, [r7, #19]
            break;
 80038d0:	e006      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ec      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	4903      	ldr	r1, [pc, #12]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038fc:	e008      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038fe:	7cfb      	ldrb	r3, [r7, #19]
 8003900:	74bb      	strb	r3, [r7, #18]
 8003902:	e005      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003904:	40021000 	.word	0x40021000
 8003908:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390c:	7cfb      	ldrb	r3, [r7, #19]
 800390e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003910:	7c7b      	ldrb	r3, [r7, #17]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d105      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003916:	4ba6      	ldr	r3, [pc, #664]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	4aa5      	ldr	r2, [pc, #660]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003920:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800392e:	4ba0      	ldr	r3, [pc, #640]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f023 0203 	bic.w	r2, r3, #3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	499c      	ldr	r1, [pc, #624]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003950:	4b97      	ldr	r3, [pc, #604]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003956:	f023 020c 	bic.w	r2, r3, #12
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	4994      	ldr	r1, [pc, #592]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003972:	4b8f      	ldr	r3, [pc, #572]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	498b      	ldr	r1, [pc, #556]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003994:	4b86      	ldr	r3, [pc, #536]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	4983      	ldr	r1, [pc, #524]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039b6:	4b7e      	ldr	r3, [pc, #504]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	497a      	ldr	r1, [pc, #488]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039d8:	4b75      	ldr	r3, [pc, #468]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	4972      	ldr	r1, [pc, #456]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039fa:	4b6d      	ldr	r3, [pc, #436]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	4969      	ldr	r1, [pc, #420]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a1c:	4b64      	ldr	r3, [pc, #400]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4961      	ldr	r1, [pc, #388]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a3e:	4b5c      	ldr	r3, [pc, #368]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	4958      	ldr	r1, [pc, #352]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d015      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a60:	4b53      	ldr	r3, [pc, #332]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	4950      	ldr	r1, [pc, #320]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a7e:	d105      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a80:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4a4a      	ldr	r2, [pc, #296]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d015      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a98:	4b45      	ldr	r3, [pc, #276]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	4942      	ldr	r1, [pc, #264]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab8:	4b3d      	ldr	r3, [pc, #244]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a3c      	ldr	r2, [pc, #240]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d015      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ad0:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	4934      	ldr	r1, [pc, #208]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aee:	d105      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af0:	4b2f      	ldr	r3, [pc, #188]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a2e      	ldr	r2, [pc, #184]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003afa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d015      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b08:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b16:	4926      	ldr	r1, [pc, #152]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b26:	d105      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b28:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d015      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	4918      	ldr	r1, [pc, #96]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b60:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d015      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b78:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	490a      	ldr	r1, [pc, #40]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a04      	ldr	r2, [pc, #16]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ba4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e049      	b.n	8003c5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fd f9d6 	bl	8000f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f000 fe4e 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d001      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e04a      	b.n	8003d12 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a21      	ldr	r2, [pc, #132]	; (8003d20 <HAL_TIM_Base_Start_IT+0xbc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d018      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d013      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <HAL_TIM_Base_Start_IT+0xc0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1c      	ldr	r2, [pc, #112]	; (8003d28 <HAL_TIM_Base_Start_IT+0xc4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d009      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1a      	ldr	r2, [pc, #104]	; (8003d2c <HAL_TIM_Base_Start_IT+0xc8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d004      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a19      	ldr	r2, [pc, #100]	; (8003d30 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d115      	bne.n	8003cfc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d015      	beq.n	8003d0e <HAL_TIM_Base_Start_IT+0xaa>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce8:	d011      	beq.n	8003d0e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0201 	orr.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfa:	e008      	b.n	8003d0e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e000      	b.n	8003d10 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40000400 	.word	0x40000400
 8003d28:	40000800 	.word	0x40000800
 8003d2c:	40013400 	.word	0x40013400
 8003d30:	40014000 	.word	0x40014000
 8003d34:	00010007 	.word	0x00010007

08003d38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e049      	b.n	8003dde <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f841 	bl	8003de6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f000 fd8c 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <HAL_TIM_PWM_Start+0x24>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	bf14      	ite	ne
 8003e18:	2301      	movne	r3, #1
 8003e1a:	2300      	moveq	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	e03c      	b.n	8003e9a <HAL_TIM_PWM_Start+0x9e>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d109      	bne.n	8003e3a <HAL_TIM_PWM_Start+0x3e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	bf14      	ite	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	2300      	moveq	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	e02f      	b.n	8003e9a <HAL_TIM_PWM_Start+0x9e>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d109      	bne.n	8003e54 <HAL_TIM_PWM_Start+0x58>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	e022      	b.n	8003e9a <HAL_TIM_PWM_Start+0x9e>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b0c      	cmp	r3, #12
 8003e58:	d109      	bne.n	8003e6e <HAL_TIM_PWM_Start+0x72>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	bf14      	ite	ne
 8003e66:	2301      	movne	r3, #1
 8003e68:	2300      	moveq	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	e015      	b.n	8003e9a <HAL_TIM_PWM_Start+0x9e>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d109      	bne.n	8003e88 <HAL_TIM_PWM_Start+0x8c>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e008      	b.n	8003e9a <HAL_TIM_PWM_Start+0x9e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	bf14      	ite	ne
 8003e94:	2301      	movne	r3, #1
 8003e96:	2300      	moveq	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e097      	b.n	8003fd2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_PWM_Start+0xb6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb0:	e023      	b.n	8003efa <HAL_TIM_PWM_Start+0xfe>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d104      	bne.n	8003ec2 <HAL_TIM_PWM_Start+0xc6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec0:	e01b      	b.n	8003efa <HAL_TIM_PWM_Start+0xfe>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d104      	bne.n	8003ed2 <HAL_TIM_PWM_Start+0xd6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed0:	e013      	b.n	8003efa <HAL_TIM_PWM_Start+0xfe>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b0c      	cmp	r3, #12
 8003ed6:	d104      	bne.n	8003ee2 <HAL_TIM_PWM_Start+0xe6>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ee0:	e00b      	b.n	8003efa <HAL_TIM_PWM_Start+0xfe>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d104      	bne.n	8003ef2 <HAL_TIM_PWM_Start+0xf6>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef0:	e003      	b.n	8003efa <HAL_TIM_PWM_Start+0xfe>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2201      	movs	r2, #1
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f001 f8e8 	bl	80050d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a33      	ldr	r2, [pc, #204]	; (8003fdc <HAL_TIM_PWM_Start+0x1e0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_TIM_PWM_Start+0x13e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a32      	ldr	r2, [pc, #200]	; (8003fe0 <HAL_TIM_PWM_Start+0x1e4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_TIM_PWM_Start+0x13e>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a30      	ldr	r2, [pc, #192]	; (8003fe4 <HAL_TIM_PWM_Start+0x1e8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_TIM_PWM_Start+0x13e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2f      	ldr	r2, [pc, #188]	; (8003fe8 <HAL_TIM_PWM_Start+0x1ec>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_TIM_PWM_Start+0x13e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a2d      	ldr	r2, [pc, #180]	; (8003fec <HAL_TIM_PWM_Start+0x1f0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <HAL_TIM_PWM_Start+0x142>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_TIM_PWM_Start+0x144>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a20      	ldr	r2, [pc, #128]	; (8003fdc <HAL_TIM_PWM_Start+0x1e0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d018      	beq.n	8003f90 <HAL_TIM_PWM_Start+0x194>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f66:	d013      	beq.n	8003f90 <HAL_TIM_PWM_Start+0x194>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a20      	ldr	r2, [pc, #128]	; (8003ff0 <HAL_TIM_PWM_Start+0x1f4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00e      	beq.n	8003f90 <HAL_TIM_PWM_Start+0x194>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1f      	ldr	r2, [pc, #124]	; (8003ff4 <HAL_TIM_PWM_Start+0x1f8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_TIM_PWM_Start+0x194>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <HAL_TIM_PWM_Start+0x1e4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d004      	beq.n	8003f90 <HAL_TIM_PWM_Start+0x194>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a16      	ldr	r2, [pc, #88]	; (8003fe4 <HAL_TIM_PWM_Start+0x1e8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d115      	bne.n	8003fbc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <HAL_TIM_PWM_Start+0x1fc>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d015      	beq.n	8003fce <HAL_TIM_PWM_Start+0x1d2>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa8:	d011      	beq.n	8003fce <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0201 	orr.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fba:	e008      	b.n	8003fce <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e000      	b.n	8003fd0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40013400 	.word	0x40013400
 8003fe4:	40014000 	.word	0x40014000
 8003fe8:	40014400 	.word	0x40014400
 8003fec:	40014800 	.word	0x40014800
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	00010007 	.word	0x00010007

08003ffc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	6839      	ldr	r1, [r7, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f001 f862 	bl	80050d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a3e      	ldr	r2, [pc, #248]	; (8004114 <HAL_TIM_PWM_Stop+0x118>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_TIM_PWM_Stop+0x4a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a3d      	ldr	r2, [pc, #244]	; (8004118 <HAL_TIM_PWM_Stop+0x11c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_TIM_PWM_Stop+0x4a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a3b      	ldr	r2, [pc, #236]	; (800411c <HAL_TIM_PWM_Stop+0x120>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_TIM_PWM_Stop+0x4a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a3a      	ldr	r2, [pc, #232]	; (8004120 <HAL_TIM_PWM_Stop+0x124>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_TIM_PWM_Stop+0x4a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a38      	ldr	r2, [pc, #224]	; (8004124 <HAL_TIM_PWM_Stop+0x128>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <HAL_TIM_PWM_Stop+0x4e>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_TIM_PWM_Stop+0x50>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d017      	beq.n	8004080 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6a1a      	ldr	r2, [r3, #32]
 8004056:	f241 1311 	movw	r3, #4369	; 0x1111
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10f      	bne.n	8004080 <HAL_TIM_PWM_Stop+0x84>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6a1a      	ldr	r2, [r3, #32]
 8004066:	f244 4344 	movw	r3, #17476	; 0x4444
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d107      	bne.n	8004080 <HAL_TIM_PWM_Stop+0x84>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800407e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6a1a      	ldr	r2, [r3, #32]
 8004086:	f241 1311 	movw	r3, #4369	; 0x1111
 800408a:	4013      	ands	r3, r2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10f      	bne.n	80040b0 <HAL_TIM_PWM_Stop+0xb4>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	f244 4344 	movw	r3, #17476	; 0x4444
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <HAL_TIM_PWM_Stop+0xb4>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d104      	bne.n	80040c0 <HAL_TIM_PWM_Stop+0xc4>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040be:	e023      	b.n	8004108 <HAL_TIM_PWM_Stop+0x10c>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d104      	bne.n	80040d0 <HAL_TIM_PWM_Stop+0xd4>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ce:	e01b      	b.n	8004108 <HAL_TIM_PWM_Stop+0x10c>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d104      	bne.n	80040e0 <HAL_TIM_PWM_Stop+0xe4>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040de:	e013      	b.n	8004108 <HAL_TIM_PWM_Stop+0x10c>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d104      	bne.n	80040f0 <HAL_TIM_PWM_Stop+0xf4>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ee:	e00b      	b.n	8004108 <HAL_TIM_PWM_Stop+0x10c>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d104      	bne.n	8004100 <HAL_TIM_PWM_Stop+0x104>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040fe:	e003      	b.n	8004108 <HAL_TIM_PWM_Stop+0x10c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40013400 	.word	0x40013400
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800

08004128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b02      	cmp	r3, #2
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0202 	mvn.w	r2, #2
 8004154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fb74 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fb66 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fb77 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b04      	cmp	r3, #4
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0204 	mvn.w	r2, #4
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fb4a 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fb3c 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fb4d 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d122      	bne.n	800422c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0208 	mvn.w	r2, #8
 80041fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2204      	movs	r2, #4
 8004202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fb20 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fb12 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fb23 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b10      	cmp	r3, #16
 8004238:	d122      	bne.n	8004280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b10      	cmp	r3, #16
 8004246:	d11b      	bne.n	8004280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0210 	mvn.w	r2, #16
 8004250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2208      	movs	r2, #8
 8004256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 faf6 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 800426c:	e005      	b.n	800427a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fae8 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 faf9 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d10e      	bne.n	80042ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b01      	cmp	r3, #1
 800429a:	d107      	bne.n	80042ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0201 	mvn.w	r2, #1
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fc fde0 	bl	8000e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b6:	2b80      	cmp	r3, #128	; 0x80
 80042b8:	d10e      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d107      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f001 f964 	bl	80055a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e6:	d10e      	bne.n	8004306 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b80      	cmp	r3, #128	; 0x80
 80042f4:	d107      	bne.n	8004306 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f001 f957 	bl	80055b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d10e      	bne.n	8004332 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d107      	bne.n	8004332 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800432a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 faa7 	bl	8004880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b20      	cmp	r3, #32
 800433e:	d10e      	bne.n	800435e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b20      	cmp	r3, #32
 800434c:	d107      	bne.n	800435e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f06f 0220 	mvn.w	r2, #32
 8004356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f001 f917 	bl	800558c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436c:	d10f      	bne.n	800438e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800437c:	d107      	bne.n	800438e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f001 f91d 	bl	80055c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004398:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800439c:	d10f      	bne.n	80043be <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ac:	d107      	bne.n	80043be <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80043b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f001 f90f 	bl	80055dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043cc:	d10f      	bne.n	80043ee <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043dc:	d107      	bne.n	80043ee <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80043e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f001 f901 	bl	80055f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043fc:	d10f      	bne.n	800441e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004408:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800440c:	d107      	bne.n	800441e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f001 f8f3 	bl	8005604 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004442:	2302      	movs	r3, #2
 8004444:	e0ff      	b.n	8004646 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b14      	cmp	r3, #20
 8004452:	f200 80f0 	bhi.w	8004636 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004456:	a201      	add	r2, pc, #4	; (adr r2, 800445c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445c:	080044b1 	.word	0x080044b1
 8004460:	08004637 	.word	0x08004637
 8004464:	08004637 	.word	0x08004637
 8004468:	08004637 	.word	0x08004637
 800446c:	080044f1 	.word	0x080044f1
 8004470:	08004637 	.word	0x08004637
 8004474:	08004637 	.word	0x08004637
 8004478:	08004637 	.word	0x08004637
 800447c:	08004533 	.word	0x08004533
 8004480:	08004637 	.word	0x08004637
 8004484:	08004637 	.word	0x08004637
 8004488:	08004637 	.word	0x08004637
 800448c:	08004573 	.word	0x08004573
 8004490:	08004637 	.word	0x08004637
 8004494:	08004637 	.word	0x08004637
 8004498:	08004637 	.word	0x08004637
 800449c:	080045b5 	.word	0x080045b5
 80044a0:	08004637 	.word	0x08004637
 80044a4:	08004637 	.word	0x08004637
 80044a8:	08004637 	.word	0x08004637
 80044ac:	080045f5 	.word	0x080045f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fa7c 	bl	80049b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0208 	orr.w	r2, r2, #8
 80044ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0204 	bic.w	r2, r2, #4
 80044da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6999      	ldr	r1, [r3, #24]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	619a      	str	r2, [r3, #24]
      break;
 80044ee:	e0a5      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 faec 	bl	8004ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800450a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6999      	ldr	r1, [r3, #24]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	021a      	lsls	r2, r3, #8
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	619a      	str	r2, [r3, #24]
      break;
 8004530:	e084      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fb55 	bl	8004be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0208 	orr.w	r2, r2, #8
 800454c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0204 	bic.w	r2, r2, #4
 800455c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69d9      	ldr	r1, [r3, #28]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	61da      	str	r2, [r3, #28]
      break;
 8004570:	e064      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fbbd 	bl	8004cf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800458c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69d9      	ldr	r1, [r3, #28]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	021a      	lsls	r2, r3, #8
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	61da      	str	r2, [r3, #28]
      break;
 80045b2:	e043      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fc26 	bl	8004e0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0208 	orr.w	r2, r2, #8
 80045ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0204 	bic.w	r2, r2, #4
 80045de:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80045f2:	e023      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fc6a 	bl	8004ed4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800460e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	021a      	lsls	r2, r3, #8
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004634:	e002      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
      break;
 800463a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004644:	7dfb      	ldrb	r3, [r7, #23]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop

08004650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_TIM_ConfigClockSource+0x1c>
 8004668:	2302      	movs	r3, #2
 800466a:	e0de      	b.n	800482a <HAL_TIM_ConfigClockSource+0x1da>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800468a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800468e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004696:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a63      	ldr	r2, [pc, #396]	; (8004834 <HAL_TIM_ConfigClockSource+0x1e4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	f000 80a9 	beq.w	80047fe <HAL_TIM_ConfigClockSource+0x1ae>
 80046ac:	4a61      	ldr	r2, [pc, #388]	; (8004834 <HAL_TIM_ConfigClockSource+0x1e4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	f200 80ae 	bhi.w	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
 80046b4:	4a60      	ldr	r2, [pc, #384]	; (8004838 <HAL_TIM_ConfigClockSource+0x1e8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	f000 80a1 	beq.w	80047fe <HAL_TIM_ConfigClockSource+0x1ae>
 80046bc:	4a5e      	ldr	r2, [pc, #376]	; (8004838 <HAL_TIM_ConfigClockSource+0x1e8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	f200 80a6 	bhi.w	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
 80046c4:	4a5d      	ldr	r2, [pc, #372]	; (800483c <HAL_TIM_ConfigClockSource+0x1ec>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	f000 8099 	beq.w	80047fe <HAL_TIM_ConfigClockSource+0x1ae>
 80046cc:	4a5b      	ldr	r2, [pc, #364]	; (800483c <HAL_TIM_ConfigClockSource+0x1ec>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	f200 809e 	bhi.w	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
 80046d4:	4a5a      	ldr	r2, [pc, #360]	; (8004840 <HAL_TIM_ConfigClockSource+0x1f0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	f000 8091 	beq.w	80047fe <HAL_TIM_ConfigClockSource+0x1ae>
 80046dc:	4a58      	ldr	r2, [pc, #352]	; (8004840 <HAL_TIM_ConfigClockSource+0x1f0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	f200 8096 	bhi.w	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
 80046e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80046e8:	f000 8089 	beq.w	80047fe <HAL_TIM_ConfigClockSource+0x1ae>
 80046ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80046f0:	f200 808e 	bhi.w	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
 80046f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f8:	d03e      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0x128>
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fe:	f200 8087 	bhi.w	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004706:	f000 8086 	beq.w	8004816 <HAL_TIM_ConfigClockSource+0x1c6>
 800470a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470e:	d87f      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
 8004710:	2b70      	cmp	r3, #112	; 0x70
 8004712:	d01a      	beq.n	800474a <HAL_TIM_ConfigClockSource+0xfa>
 8004714:	2b70      	cmp	r3, #112	; 0x70
 8004716:	d87b      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
 8004718:	2b60      	cmp	r3, #96	; 0x60
 800471a:	d050      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x16e>
 800471c:	2b60      	cmp	r3, #96	; 0x60
 800471e:	d877      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
 8004720:	2b50      	cmp	r3, #80	; 0x50
 8004722:	d03c      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x14e>
 8004724:	2b50      	cmp	r3, #80	; 0x50
 8004726:	d873      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
 8004728:	2b40      	cmp	r3, #64	; 0x40
 800472a:	d058      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x18e>
 800472c:	2b40      	cmp	r3, #64	; 0x40
 800472e:	d86f      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
 8004730:	2b30      	cmp	r3, #48	; 0x30
 8004732:	d064      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x1ae>
 8004734:	2b30      	cmp	r3, #48	; 0x30
 8004736:	d86b      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
 8004738:	2b20      	cmp	r3, #32
 800473a:	d060      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x1ae>
 800473c:	2b20      	cmp	r3, #32
 800473e:	d867      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d05c      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x1ae>
 8004744:	2b10      	cmp	r3, #16
 8004746:	d05a      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x1ae>
 8004748:	e062      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6899      	ldr	r1, [r3, #8]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f000 fc9d 	bl	8005098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800476c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	609a      	str	r2, [r3, #8]
      break;
 8004776:	e04f      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f000 fc86 	bl	8005098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800479a:	609a      	str	r2, [r3, #8]
      break;
 800479c:	e03c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f000 fbf8 	bl	8004fa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2150      	movs	r1, #80	; 0x50
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fc51 	bl	800505e <TIM_ITRx_SetConfig>
      break;
 80047bc:	e02c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6859      	ldr	r1, [r3, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f000 fc17 	bl	8004ffe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2160      	movs	r1, #96	; 0x60
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fc41 	bl	800505e <TIM_ITRx_SetConfig>
      break;
 80047dc:	e01c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f000 fbd8 	bl	8004fa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2140      	movs	r1, #64	; 0x40
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fc31 	bl	800505e <TIM_ITRx_SetConfig>
      break;
 80047fc:	e00c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f000 fc28 	bl	800505e <TIM_ITRx_SetConfig>
      break;
 800480e:	e003      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
      break;
 8004814:	e000      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	00100070 	.word	0x00100070
 8004838:	00100040 	.word	0x00100040
 800483c:	00100030 	.word	0x00100030
 8004840:	00100020 	.word	0x00100020

08004844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a3c      	ldr	r2, [pc, #240]	; (8004998 <TIM_Base_SetConfig+0x104>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00f      	beq.n	80048cc <TIM_Base_SetConfig+0x38>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d00b      	beq.n	80048cc <TIM_Base_SetConfig+0x38>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a39      	ldr	r2, [pc, #228]	; (800499c <TIM_Base_SetConfig+0x108>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_Base_SetConfig+0x38>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a38      	ldr	r2, [pc, #224]	; (80049a0 <TIM_Base_SetConfig+0x10c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0x38>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a37      	ldr	r2, [pc, #220]	; (80049a4 <TIM_Base_SetConfig+0x110>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2d      	ldr	r2, [pc, #180]	; (8004998 <TIM_Base_SetConfig+0x104>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01b      	beq.n	800491e <TIM_Base_SetConfig+0x8a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ec:	d017      	beq.n	800491e <TIM_Base_SetConfig+0x8a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2a      	ldr	r2, [pc, #168]	; (800499c <TIM_Base_SetConfig+0x108>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <TIM_Base_SetConfig+0x8a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <TIM_Base_SetConfig+0x10c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00f      	beq.n	800491e <TIM_Base_SetConfig+0x8a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <TIM_Base_SetConfig+0x110>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00b      	beq.n	800491e <TIM_Base_SetConfig+0x8a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d007      	beq.n	800491e <TIM_Base_SetConfig+0x8a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a26      	ldr	r2, [pc, #152]	; (80049ac <TIM_Base_SetConfig+0x118>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d003      	beq.n	800491e <TIM_Base_SetConfig+0x8a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a25      	ldr	r2, [pc, #148]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d108      	bne.n	8004930 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a10      	ldr	r2, [pc, #64]	; (8004998 <TIM_Base_SetConfig+0x104>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00f      	beq.n	800497c <TIM_Base_SetConfig+0xe8>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a11      	ldr	r2, [pc, #68]	; (80049a4 <TIM_Base_SetConfig+0x110>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00b      	beq.n	800497c <TIM_Base_SetConfig+0xe8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a10      	ldr	r2, [pc, #64]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d007      	beq.n	800497c <TIM_Base_SetConfig+0xe8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a0f      	ldr	r2, [pc, #60]	; (80049ac <TIM_Base_SetConfig+0x118>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_Base_SetConfig+0xe8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0e      	ldr	r2, [pc, #56]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d103      	bne.n	8004984 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	615a      	str	r2, [r3, #20]
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40012c00 	.word	0x40012c00
 800499c:	40000400 	.word	0x40000400
 80049a0:	40000800 	.word	0x40000800
 80049a4:	40013400 	.word	0x40013400
 80049a8:	40014000 	.word	0x40014000
 80049ac:	40014400 	.word	0x40014400
 80049b0:	40014800 	.word	0x40014800

080049b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f023 0201 	bic.w	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0303 	bic.w	r3, r3, #3
 80049ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f023 0302 	bic.w	r3, r3, #2
 8004a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ac0 <TIM_OC1_SetConfig+0x10c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00f      	beq.n	8004a34 <TIM_OC1_SetConfig+0x80>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a2b      	ldr	r2, [pc, #172]	; (8004ac4 <TIM_OC1_SetConfig+0x110>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00b      	beq.n	8004a34 <TIM_OC1_SetConfig+0x80>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a2a      	ldr	r2, [pc, #168]	; (8004ac8 <TIM_OC1_SetConfig+0x114>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d007      	beq.n	8004a34 <TIM_OC1_SetConfig+0x80>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a29      	ldr	r2, [pc, #164]	; (8004acc <TIM_OC1_SetConfig+0x118>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_OC1_SetConfig+0x80>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a28      	ldr	r2, [pc, #160]	; (8004ad0 <TIM_OC1_SetConfig+0x11c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d10c      	bne.n	8004a4e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f023 0308 	bic.w	r3, r3, #8
 8004a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f023 0304 	bic.w	r3, r3, #4
 8004a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1b      	ldr	r2, [pc, #108]	; (8004ac0 <TIM_OC1_SetConfig+0x10c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00f      	beq.n	8004a76 <TIM_OC1_SetConfig+0xc2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <TIM_OC1_SetConfig+0x110>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00b      	beq.n	8004a76 <TIM_OC1_SetConfig+0xc2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <TIM_OC1_SetConfig+0x114>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d007      	beq.n	8004a76 <TIM_OC1_SetConfig+0xc2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a18      	ldr	r2, [pc, #96]	; (8004acc <TIM_OC1_SetConfig+0x118>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d003      	beq.n	8004a76 <TIM_OC1_SetConfig+0xc2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a17      	ldr	r2, [pc, #92]	; (8004ad0 <TIM_OC1_SetConfig+0x11c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d111      	bne.n	8004a9a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	621a      	str	r2, [r3, #32]
}
 8004ab4:	bf00      	nop
 8004ab6:	371c      	adds	r7, #28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40013400 	.word	0x40013400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400
 8004ad0:	40014800 	.word	0x40014800

08004ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f023 0210 	bic.w	r2, r3, #16
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f023 0320 	bic.w	r3, r3, #32
 8004b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a28      	ldr	r2, [pc, #160]	; (8004bd4 <TIM_OC2_SetConfig+0x100>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_OC2_SetConfig+0x6c>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a27      	ldr	r2, [pc, #156]	; (8004bd8 <TIM_OC2_SetConfig+0x104>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10d      	bne.n	8004b5c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <TIM_OC2_SetConfig+0x100>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00f      	beq.n	8004b84 <TIM_OC2_SetConfig+0xb0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a1c      	ldr	r2, [pc, #112]	; (8004bd8 <TIM_OC2_SetConfig+0x104>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00b      	beq.n	8004b84 <TIM_OC2_SetConfig+0xb0>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <TIM_OC2_SetConfig+0x108>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d007      	beq.n	8004b84 <TIM_OC2_SetConfig+0xb0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <TIM_OC2_SetConfig+0x10c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_OC2_SetConfig+0xb0>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <TIM_OC2_SetConfig+0x110>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d113      	bne.n	8004bac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	621a      	str	r2, [r3, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40013400 	.word	0x40013400
 8004bdc:	40014000 	.word	0x40014000
 8004be0:	40014400 	.word	0x40014400
 8004be4:	40014800 	.word	0x40014800

08004be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0303 	bic.w	r3, r3, #3
 8004c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	021b      	lsls	r3, r3, #8
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a27      	ldr	r2, [pc, #156]	; (8004ce4 <TIM_OC3_SetConfig+0xfc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d003      	beq.n	8004c52 <TIM_OC3_SetConfig+0x6a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a26      	ldr	r2, [pc, #152]	; (8004ce8 <TIM_OC3_SetConfig+0x100>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d10d      	bne.n	8004c6e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <TIM_OC3_SetConfig+0xfc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00f      	beq.n	8004c96 <TIM_OC3_SetConfig+0xae>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <TIM_OC3_SetConfig+0x100>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00b      	beq.n	8004c96 <TIM_OC3_SetConfig+0xae>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a1a      	ldr	r2, [pc, #104]	; (8004cec <TIM_OC3_SetConfig+0x104>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d007      	beq.n	8004c96 <TIM_OC3_SetConfig+0xae>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a19      	ldr	r2, [pc, #100]	; (8004cf0 <TIM_OC3_SetConfig+0x108>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d003      	beq.n	8004c96 <TIM_OC3_SetConfig+0xae>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a18      	ldr	r2, [pc, #96]	; (8004cf4 <TIM_OC3_SetConfig+0x10c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d113      	bne.n	8004cbe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	621a      	str	r2, [r3, #32]
}
 8004cd8:	bf00      	nop
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40013400 	.word	0x40013400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400
 8004cf4:	40014800 	.word	0x40014800

08004cf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	031b      	lsls	r3, r3, #12
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a28      	ldr	r2, [pc, #160]	; (8004df8 <TIM_OC4_SetConfig+0x100>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_OC4_SetConfig+0x6c>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a27      	ldr	r2, [pc, #156]	; (8004dfc <TIM_OC4_SetConfig+0x104>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d10d      	bne.n	8004d80 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	031b      	lsls	r3, r3, #12
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a1d      	ldr	r2, [pc, #116]	; (8004df8 <TIM_OC4_SetConfig+0x100>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00f      	beq.n	8004da8 <TIM_OC4_SetConfig+0xb0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a1c      	ldr	r2, [pc, #112]	; (8004dfc <TIM_OC4_SetConfig+0x104>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <TIM_OC4_SetConfig+0xb0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a1b      	ldr	r2, [pc, #108]	; (8004e00 <TIM_OC4_SetConfig+0x108>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d007      	beq.n	8004da8 <TIM_OC4_SetConfig+0xb0>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a1a      	ldr	r2, [pc, #104]	; (8004e04 <TIM_OC4_SetConfig+0x10c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_OC4_SetConfig+0xb0>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a19      	ldr	r2, [pc, #100]	; (8004e08 <TIM_OC4_SetConfig+0x110>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d113      	bne.n	8004dd0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004db6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	019b      	lsls	r3, r3, #6
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	019b      	lsls	r3, r3, #6
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40013400 	.word	0x40013400
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40014400 	.word	0x40014400
 8004e08:	40014800 	.word	0x40014800

08004e0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	041b      	lsls	r3, r3, #16
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <TIM_OC5_SetConfig+0xb4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00f      	beq.n	8004e86 <TIM_OC5_SetConfig+0x7a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a16      	ldr	r2, [pc, #88]	; (8004ec4 <TIM_OC5_SetConfig+0xb8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00b      	beq.n	8004e86 <TIM_OC5_SetConfig+0x7a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a15      	ldr	r2, [pc, #84]	; (8004ec8 <TIM_OC5_SetConfig+0xbc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d007      	beq.n	8004e86 <TIM_OC5_SetConfig+0x7a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a14      	ldr	r2, [pc, #80]	; (8004ecc <TIM_OC5_SetConfig+0xc0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d003      	beq.n	8004e86 <TIM_OC5_SetConfig+0x7a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <TIM_OC5_SetConfig+0xc4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d109      	bne.n	8004e9a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	621a      	str	r2, [r3, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40013400 	.word	0x40013400
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800

08004ed4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	051b      	lsls	r3, r3, #20
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a18      	ldr	r2, [pc, #96]	; (8004f8c <TIM_OC6_SetConfig+0xb8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00f      	beq.n	8004f50 <TIM_OC6_SetConfig+0x7c>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <TIM_OC6_SetConfig+0xbc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00b      	beq.n	8004f50 <TIM_OC6_SetConfig+0x7c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a16      	ldr	r2, [pc, #88]	; (8004f94 <TIM_OC6_SetConfig+0xc0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d007      	beq.n	8004f50 <TIM_OC6_SetConfig+0x7c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a15      	ldr	r2, [pc, #84]	; (8004f98 <TIM_OC6_SetConfig+0xc4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_OC6_SetConfig+0x7c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a14      	ldr	r2, [pc, #80]	; (8004f9c <TIM_OC6_SetConfig+0xc8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d109      	bne.n	8004f64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	029b      	lsls	r3, r3, #10
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40012c00 	.word	0x40012c00
 8004f90:	40013400 	.word	0x40013400
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40014400 	.word	0x40014400
 8004f9c:	40014800 	.word	0x40014800

08004fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f023 0201 	bic.w	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f023 030a 	bic.w	r3, r3, #10
 8004fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	621a      	str	r2, [r3, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b087      	sub	sp, #28
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	f023 0210 	bic.w	r2, r3, #16
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005028:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	031b      	lsls	r3, r3, #12
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800503a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800505e:	b480      	push	{r7}
 8005060:	b085      	sub	sp, #20
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	f043 0307 	orr.w	r3, r3, #7
 8005084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	021a      	lsls	r2, r3, #8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4313      	orrs	r3, r2
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	609a      	str	r2, [r3, #8]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	2201      	movs	r2, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1a      	ldr	r2, [r3, #32]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	43db      	mvns	r3, r3
 80050fa:	401a      	ands	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1a      	ldr	r2, [r3, #32]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	431a      	orrs	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d109      	bne.n	8005148 <HAL_TIMEx_PWMN_Start+0x24>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	bf14      	ite	ne
 8005140:	2301      	movne	r3, #1
 8005142:	2300      	moveq	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	e022      	b.n	800518e <HAL_TIMEx_PWMN_Start+0x6a>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b04      	cmp	r3, #4
 800514c:	d109      	bne.n	8005162 <HAL_TIMEx_PWMN_Start+0x3e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	bf14      	ite	ne
 800515a:	2301      	movne	r3, #1
 800515c:	2300      	moveq	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	e015      	b.n	800518e <HAL_TIMEx_PWMN_Start+0x6a>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b08      	cmp	r3, #8
 8005166:	d109      	bne.n	800517c <HAL_TIMEx_PWMN_Start+0x58>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	bf14      	ite	ne
 8005174:	2301      	movne	r3, #1
 8005176:	2300      	moveq	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	e008      	b.n	800518e <HAL_TIMEx_PWMN_Start+0x6a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	bf14      	ite	ne
 8005188:	2301      	movne	r3, #1
 800518a:	2300      	moveq	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e069      	b.n	800526a <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <HAL_TIMEx_PWMN_Start+0x82>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a4:	e013      	b.n	80051ce <HAL_TIMEx_PWMN_Start+0xaa>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d104      	bne.n	80051b6 <HAL_TIMEx_PWMN_Start+0x92>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051b4:	e00b      	b.n	80051ce <HAL_TIMEx_PWMN_Start+0xaa>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d104      	bne.n	80051c6 <HAL_TIMEx_PWMN_Start+0xa2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051c4:	e003      	b.n	80051ce <HAL_TIMEx_PWMN_Start+0xaa>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2202      	movs	r2, #2
 80051ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2204      	movs	r2, #4
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fa1e 	bl	8005618 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a20      	ldr	r2, [pc, #128]	; (8005274 <HAL_TIMEx_PWMN_Start+0x150>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d018      	beq.n	8005228 <HAL_TIMEx_PWMN_Start+0x104>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fe:	d013      	beq.n	8005228 <HAL_TIMEx_PWMN_Start+0x104>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1c      	ldr	r2, [pc, #112]	; (8005278 <HAL_TIMEx_PWMN_Start+0x154>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00e      	beq.n	8005228 <HAL_TIMEx_PWMN_Start+0x104>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1b      	ldr	r2, [pc, #108]	; (800527c <HAL_TIMEx_PWMN_Start+0x158>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d009      	beq.n	8005228 <HAL_TIMEx_PWMN_Start+0x104>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a19      	ldr	r2, [pc, #100]	; (8005280 <HAL_TIMEx_PWMN_Start+0x15c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d004      	beq.n	8005228 <HAL_TIMEx_PWMN_Start+0x104>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a18      	ldr	r2, [pc, #96]	; (8005284 <HAL_TIMEx_PWMN_Start+0x160>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d115      	bne.n	8005254 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	4b16      	ldr	r3, [pc, #88]	; (8005288 <HAL_TIMEx_PWMN_Start+0x164>)
 8005230:	4013      	ands	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b06      	cmp	r3, #6
 8005238:	d015      	beq.n	8005266 <HAL_TIMEx_PWMN_Start+0x142>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005240:	d011      	beq.n	8005266 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0201 	orr.w	r2, r2, #1
 8005250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005252:	e008      	b.n	8005266 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0201 	orr.w	r2, r2, #1
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	e000      	b.n	8005268 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005266:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40012c00 	.word	0x40012c00
 8005278:	40000400 	.word	0x40000400
 800527c:	40000800 	.word	0x40000800
 8005280:	40013400 	.word	0x40013400
 8005284:	40014000 	.word	0x40014000
 8005288:	00010007 	.word	0x00010007

0800528c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	6839      	ldr	r1, [r7, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 f9ba 	bl	8005618 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6a1a      	ldr	r2, [r3, #32]
 80052aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10f      	bne.n	80052d4 <HAL_TIMEx_PWMN_Stop+0x48>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6a1a      	ldr	r2, [r3, #32]
 80052ba:	f244 4344 	movw	r3, #17476	; 0x4444
 80052be:	4013      	ands	r3, r2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d107      	bne.n	80052d4 <HAL_TIMEx_PWMN_Stop+0x48>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6a1a      	ldr	r2, [r3, #32]
 80052da:	f241 1311 	movw	r3, #4369	; 0x1111
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10f      	bne.n	8005304 <HAL_TIMEx_PWMN_Stop+0x78>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6a1a      	ldr	r2, [r3, #32]
 80052ea:	f244 4344 	movw	r3, #17476	; 0x4444
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d107      	bne.n	8005304 <HAL_TIMEx_PWMN_Stop+0x78>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d104      	bne.n	8005314 <HAL_TIMEx_PWMN_Stop+0x88>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005312:	e013      	b.n	800533c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b04      	cmp	r3, #4
 8005318:	d104      	bne.n	8005324 <HAL_TIMEx_PWMN_Stop+0x98>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005322:	e00b      	b.n	800533c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b08      	cmp	r3, #8
 8005328:	d104      	bne.n	8005334 <HAL_TIMEx_PWMN_Stop+0xa8>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005332:	e003      	b.n	800533c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e065      	b.n	800542c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a2c      	ldr	r2, [pc, #176]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d004      	beq.n	8005394 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a2b      	ldr	r2, [pc, #172]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d108      	bne.n	80053a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800539a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80053ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1b      	ldr	r2, [pc, #108]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d018      	beq.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d6:	d013      	beq.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a18      	ldr	r2, [pc, #96]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00e      	beq.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a17      	ldr	r2, [pc, #92]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d009      	beq.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a12      	ldr	r2, [pc, #72]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a13      	ldr	r2, [pc, #76]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10c      	bne.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005406:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	4313      	orrs	r3, r2
 8005410:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40013400 	.word	0x40013400
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800
 8005448:	40014000 	.word	0x40014000

0800544c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005464:	2302      	movs	r3, #2
 8005466:	e087      	b.n	8005578 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	041b      	lsls	r3, r3, #16
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a27      	ldr	r2, [pc, #156]	; (8005584 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a25      	ldr	r2, [pc, #148]	; (8005588 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d106      	bne.n	8005504 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1e      	ldr	r2, [pc, #120]	; (8005584 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d126      	bne.n	8005566 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	051b      	lsls	r3, r3, #20
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a0e      	ldr	r2, [pc, #56]	; (8005584 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a0d      	ldr	r2, [pc, #52]	; (8005588 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d106      	bne.n	8005566 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40013400 	.word	0x40013400

0800558c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	2204      	movs	r2, #4
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	43db      	mvns	r3, r3
 800563a:	401a      	ands	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1a      	ldr	r2, [r3, #32]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	fa01 f303 	lsl.w	r3, r1, r3
 8005650:	431a      	orrs	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	621a      	str	r2, [r3, #32]
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e042      	b.n	80056fa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fb fcd8 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2224      	movs	r2, #36	; 0x24
 8005690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0201 	bic.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fc51 	bl	8005f4c <UART_SetConfig>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e022      	b.n	80056fa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 ff11 	bl	80064e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0201 	orr.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 ff98 	bl	8006628 <UART_CheckIdleState>
 80056f8:	4603      	mov	r3, r0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b08a      	sub	sp, #40	; 0x28
 8005706:	af02      	add	r7, sp, #8
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	603b      	str	r3, [r7, #0]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005718:	2b20      	cmp	r3, #32
 800571a:	f040 8083 	bne.w	8005824 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_UART_Transmit+0x28>
 8005724:	88fb      	ldrh	r3, [r7, #6]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e07b      	b.n	8005826 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_UART_Transmit+0x3a>
 8005738:	2302      	movs	r3, #2
 800573a:	e074      	b.n	8005826 <HAL_UART_Transmit+0x124>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2221      	movs	r2, #33	; 0x21
 8005750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005754:	f7fb feae 	bl	80014b4 <HAL_GetTick>
 8005758:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	88fa      	ldrh	r2, [r7, #6]
 800575e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	88fa      	ldrh	r2, [r7, #6]
 8005766:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005772:	d108      	bne.n	8005786 <HAL_UART_Transmit+0x84>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d104      	bne.n	8005786 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800577c:	2300      	movs	r3, #0
 800577e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	e003      	b.n	800578e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800578a:	2300      	movs	r3, #0
 800578c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005796:	e02c      	b.n	80057f2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2200      	movs	r2, #0
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 ff8b 	bl	80066be <UART_WaitOnFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e039      	b.n	8005826 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	3302      	adds	r3, #2
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	e007      	b.n	80057e0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	781a      	ldrb	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	3301      	adds	r3, #1
 80057de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1cc      	bne.n	8005798 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2200      	movs	r2, #0
 8005806:	2140      	movs	r1, #64	; 0x40
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 ff58 	bl	80066be <UART_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e006      	b.n	8005826 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	e000      	b.n	8005826 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005824:	2302      	movs	r3, #2
  }
}
 8005826:	4618      	mov	r0, r3
 8005828:	3720      	adds	r7, #32
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08a      	sub	sp, #40	; 0x28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	4613      	mov	r3, r2
 800583c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	2b20      	cmp	r3, #32
 8005846:	d142      	bne.n	80058ce <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <HAL_UART_Receive_IT+0x24>
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e03b      	b.n	80058d0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <HAL_UART_Receive_IT+0x36>
 8005862:	2302      	movs	r3, #2
 8005864:	e034      	b.n	80058d0 <HAL_UART_Receive_IT+0xa0>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <HAL_UART_Receive_IT+0xa8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d01f      	beq.n	80058be <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d018      	beq.n	80058be <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	613b      	str	r3, [r7, #16]
   return(result);
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	623b      	str	r3, [r7, #32]
 80058ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	69f9      	ldr	r1, [r7, #28]
 80058b0:	6a3a      	ldr	r2, [r7, #32]
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e6      	bne.n	800588c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	461a      	mov	r2, r3
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 ffc3 	bl	8006850 <UART_Start_Receive_IT>
 80058ca:	4603      	mov	r3, r0
 80058cc:	e000      	b.n	80058d0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
  }
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3728      	adds	r7, #40	; 0x28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40008000 	.word	0x40008000

080058dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b0ba      	sub	sp, #232	; 0xe8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005902:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005906:	f640 030f 	movw	r3, #2063	; 0x80f
 800590a:	4013      	ands	r3, r2
 800590c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005914:	2b00      	cmp	r3, #0
 8005916:	d11b      	bne.n	8005950 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b00      	cmp	r3, #0
 8005922:	d015      	beq.n	8005950 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	2b00      	cmp	r3, #0
 800592e:	d105      	bne.n	800593c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d009      	beq.n	8005950 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 82d6 	beq.w	8005ef2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	4798      	blx	r3
      }
      return;
 800594e:	e2d0      	b.n	8005ef2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005950:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 811f 	beq.w	8005b98 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800595a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800595e:	4b8b      	ldr	r3, [pc, #556]	; (8005b8c <HAL_UART_IRQHandler+0x2b0>)
 8005960:	4013      	ands	r3, r2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005966:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800596a:	4b89      	ldr	r3, [pc, #548]	; (8005b90 <HAL_UART_IRQHandler+0x2b4>)
 800596c:	4013      	ands	r3, r2
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 8112 	beq.w	8005b98 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d011      	beq.n	80059a4 <HAL_UART_IRQHandler+0xc8>
 8005980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00b      	beq.n	80059a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2201      	movs	r2, #1
 8005992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800599a:	f043 0201 	orr.w	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d011      	beq.n	80059d4 <HAL_UART_IRQHandler+0xf8>
 80059b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00b      	beq.n	80059d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2202      	movs	r2, #2
 80059c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ca:	f043 0204 	orr.w	r2, r3, #4
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d011      	beq.n	8005a04 <HAL_UART_IRQHandler+0x128>
 80059e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00b      	beq.n	8005a04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2204      	movs	r2, #4
 80059f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059fa:	f043 0202 	orr.w	r2, r3, #2
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d017      	beq.n	8005a40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d105      	bne.n	8005a28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005a1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005a20:	4b5a      	ldr	r3, [pc, #360]	; (8005b8c <HAL_UART_IRQHandler+0x2b0>)
 8005a22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00b      	beq.n	8005a40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2208      	movs	r2, #8
 8005a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a36:	f043 0208 	orr.w	r2, r3, #8
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d012      	beq.n	8005a72 <HAL_UART_IRQHandler+0x196>
 8005a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00c      	beq.n	8005a72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a68:	f043 0220 	orr.w	r2, r3, #32
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 823c 	beq.w	8005ef6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d013      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d105      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b40      	cmp	r3, #64	; 0x40
 8005ac8:	d005      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ace:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d04f      	beq.n	8005b76 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 ffe4 	bl	8006aa4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b40      	cmp	r3, #64	; 0x40
 8005ae8:	d141      	bne.n	8005b6e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3308      	adds	r3, #8
 8005af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3308      	adds	r3, #8
 8005b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1d9      	bne.n	8005aea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d013      	beq.n	8005b66 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b42:	4a14      	ldr	r2, [pc, #80]	; (8005b94 <HAL_UART_IRQHandler+0x2b8>)
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fc fe37 	bl	80027be <HAL_DMA_Abort_IT>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d017      	beq.n	8005b86 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005b60:	4610      	mov	r0, r2
 8005b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b64:	e00f      	b.n	8005b86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f9da 	bl	8005f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6c:	e00b      	b.n	8005b86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f9d6 	bl	8005f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b74:	e007      	b.n	8005b86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f9d2 	bl	8005f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005b84:	e1b7      	b.n	8005ef6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b86:	bf00      	nop
    return;
 8005b88:	e1b5      	b.n	8005ef6 <HAL_UART_IRQHandler+0x61a>
 8005b8a:	bf00      	nop
 8005b8c:	10000001 	.word	0x10000001
 8005b90:	04000120 	.word	0x04000120
 8005b94:	08006b71 	.word	0x08006b71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	f040 814a 	bne.w	8005e36 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8143 	beq.w	8005e36 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 813c 	beq.w	8005e36 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2210      	movs	r2, #16
 8005bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	f040 80b5 	bne.w	8005d40 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005be2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 8187 	beq.w	8005efa <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	f080 817f 	bcs.w	8005efa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f040 8086 	bne.w	8005d24 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1da      	bne.n	8005c18 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3308      	adds	r3, #8
 8005c68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3308      	adds	r3, #8
 8005c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e1      	bne.n	8005c62 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cca:	e841 2300 	strex	r3, r2, [r1]
 8005cce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1e3      	bne.n	8005c9e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf4:	f023 0310 	bic.w	r3, r3, #16
 8005cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	461a      	mov	r2, r3
 8005d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d06:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e4      	bne.n	8005ce4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fc fcf4 	bl	800270c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f8fb 	bl	8005f34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d3e:	e0dc      	b.n	8005efa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80ce 	beq.w	8005efe <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005d62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 80c9 	beq.w	8005efe <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e4      	bne.n	8005d6c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3308      	adds	r3, #8
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	623b      	str	r3, [r7, #32]
   return(result);
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db8:	f023 0301 	bic.w	r3, r3, #1
 8005dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dca:	633a      	str	r2, [r7, #48]	; 0x30
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e1      	bne.n	8005da2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0310 	bic.w	r3, r3, #16
 8005e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	69b9      	ldr	r1, [r7, #24]
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	617b      	str	r3, [r7, #20]
   return(result);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e4      	bne.n	8005df2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f880 	bl	8005f34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e34:	e063      	b.n	8005efe <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00e      	beq.n	8005e60 <HAL_UART_IRQHandler+0x584>
 8005e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d008      	beq.n	8005e60 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 fb27 	bl	80074ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e5e:	e051      	b.n	8005f04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d014      	beq.n	8005e96 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d105      	bne.n	8005e84 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d03a      	beq.n	8005f02 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4798      	blx	r3
    }
    return;
 8005e94:	e035      	b.n	8005f02 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x5da>
 8005ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fe74 	bl	8006b9c <UART_EndTransmit_IT>
    return;
 8005eb4:	e026      	b.n	8005f04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d009      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x5fa>
 8005ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ec6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f001 fb00 	bl	80074d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ed4:	e016      	b.n	8005f04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d010      	beq.n	8005f04 <HAL_UART_IRQHandler+0x628>
 8005ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da0c      	bge.n	8005f04 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f001 fae8 	bl	80074c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ef0:	e008      	b.n	8005f04 <HAL_UART_IRQHandler+0x628>
      return;
 8005ef2:	bf00      	nop
 8005ef4:	e006      	b.n	8005f04 <HAL_UART_IRQHandler+0x628>
    return;
 8005ef6:	bf00      	nop
 8005ef8:	e004      	b.n	8005f04 <HAL_UART_IRQHandler+0x628>
      return;
 8005efa:	bf00      	nop
 8005efc:	e002      	b.n	8005f04 <HAL_UART_IRQHandler+0x628>
      return;
 8005efe:	bf00      	nop
 8005f00:	e000      	b.n	8005f04 <HAL_UART_IRQHandler+0x628>
    return;
 8005f02:	bf00      	nop
  }
}
 8005f04:	37e8      	adds	r7, #232	; 0xe8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop

08005f0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f50:	b08c      	sub	sp, #48	; 0x30
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	431a      	orrs	r2, r3
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	4bab      	ldr	r3, [pc, #684]	; (8006228 <UART_SetConfig+0x2dc>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f84:	430b      	orrs	r3, r1
 8005f86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4aa0      	ldr	r2, [pc, #640]	; (800622c <UART_SetConfig+0x2e0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005fc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	f023 010f 	bic.w	r1, r3, #15
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a91      	ldr	r2, [pc, #580]	; (8006230 <UART_SetConfig+0x2e4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d125      	bne.n	800603c <UART_SetConfig+0xf0>
 8005ff0:	4b90      	ldr	r3, [pc, #576]	; (8006234 <UART_SetConfig+0x2e8>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d81a      	bhi.n	8006034 <UART_SetConfig+0xe8>
 8005ffe:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <UART_SetConfig+0xb8>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006015 	.word	0x08006015
 8006008:	08006025 	.word	0x08006025
 800600c:	0800601d 	.word	0x0800601d
 8006010:	0800602d 	.word	0x0800602d
 8006014:	2301      	movs	r3, #1
 8006016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800601a:	e0d6      	b.n	80061ca <UART_SetConfig+0x27e>
 800601c:	2302      	movs	r3, #2
 800601e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006022:	e0d2      	b.n	80061ca <UART_SetConfig+0x27e>
 8006024:	2304      	movs	r3, #4
 8006026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800602a:	e0ce      	b.n	80061ca <UART_SetConfig+0x27e>
 800602c:	2308      	movs	r3, #8
 800602e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006032:	e0ca      	b.n	80061ca <UART_SetConfig+0x27e>
 8006034:	2310      	movs	r3, #16
 8006036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800603a:	e0c6      	b.n	80061ca <UART_SetConfig+0x27e>
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a7d      	ldr	r2, [pc, #500]	; (8006238 <UART_SetConfig+0x2ec>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d138      	bne.n	80060b8 <UART_SetConfig+0x16c>
 8006046:	4b7b      	ldr	r3, [pc, #492]	; (8006234 <UART_SetConfig+0x2e8>)
 8006048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604c:	f003 030c 	and.w	r3, r3, #12
 8006050:	2b0c      	cmp	r3, #12
 8006052:	d82d      	bhi.n	80060b0 <UART_SetConfig+0x164>
 8006054:	a201      	add	r2, pc, #4	; (adr r2, 800605c <UART_SetConfig+0x110>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006091 	.word	0x08006091
 8006060:	080060b1 	.word	0x080060b1
 8006064:	080060b1 	.word	0x080060b1
 8006068:	080060b1 	.word	0x080060b1
 800606c:	080060a1 	.word	0x080060a1
 8006070:	080060b1 	.word	0x080060b1
 8006074:	080060b1 	.word	0x080060b1
 8006078:	080060b1 	.word	0x080060b1
 800607c:	08006099 	.word	0x08006099
 8006080:	080060b1 	.word	0x080060b1
 8006084:	080060b1 	.word	0x080060b1
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060a9 	.word	0x080060a9
 8006090:	2300      	movs	r3, #0
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006096:	e098      	b.n	80061ca <UART_SetConfig+0x27e>
 8006098:	2302      	movs	r3, #2
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800609e:	e094      	b.n	80061ca <UART_SetConfig+0x27e>
 80060a0:	2304      	movs	r3, #4
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060a6:	e090      	b.n	80061ca <UART_SetConfig+0x27e>
 80060a8:	2308      	movs	r3, #8
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ae:	e08c      	b.n	80061ca <UART_SetConfig+0x27e>
 80060b0:	2310      	movs	r3, #16
 80060b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060b6:	e088      	b.n	80061ca <UART_SetConfig+0x27e>
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a5f      	ldr	r2, [pc, #380]	; (800623c <UART_SetConfig+0x2f0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d125      	bne.n	800610e <UART_SetConfig+0x1c2>
 80060c2:	4b5c      	ldr	r3, [pc, #368]	; (8006234 <UART_SetConfig+0x2e8>)
 80060c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060cc:	2b30      	cmp	r3, #48	; 0x30
 80060ce:	d016      	beq.n	80060fe <UART_SetConfig+0x1b2>
 80060d0:	2b30      	cmp	r3, #48	; 0x30
 80060d2:	d818      	bhi.n	8006106 <UART_SetConfig+0x1ba>
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d00a      	beq.n	80060ee <UART_SetConfig+0x1a2>
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d814      	bhi.n	8006106 <UART_SetConfig+0x1ba>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <UART_SetConfig+0x19a>
 80060e0:	2b10      	cmp	r3, #16
 80060e2:	d008      	beq.n	80060f6 <UART_SetConfig+0x1aa>
 80060e4:	e00f      	b.n	8006106 <UART_SetConfig+0x1ba>
 80060e6:	2300      	movs	r3, #0
 80060e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ec:	e06d      	b.n	80061ca <UART_SetConfig+0x27e>
 80060ee:	2302      	movs	r3, #2
 80060f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060f4:	e069      	b.n	80061ca <UART_SetConfig+0x27e>
 80060f6:	2304      	movs	r3, #4
 80060f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060fc:	e065      	b.n	80061ca <UART_SetConfig+0x27e>
 80060fe:	2308      	movs	r3, #8
 8006100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006104:	e061      	b.n	80061ca <UART_SetConfig+0x27e>
 8006106:	2310      	movs	r3, #16
 8006108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800610c:	e05d      	b.n	80061ca <UART_SetConfig+0x27e>
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a4b      	ldr	r2, [pc, #300]	; (8006240 <UART_SetConfig+0x2f4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d125      	bne.n	8006164 <UART_SetConfig+0x218>
 8006118:	4b46      	ldr	r3, [pc, #280]	; (8006234 <UART_SetConfig+0x2e8>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006122:	2bc0      	cmp	r3, #192	; 0xc0
 8006124:	d016      	beq.n	8006154 <UART_SetConfig+0x208>
 8006126:	2bc0      	cmp	r3, #192	; 0xc0
 8006128:	d818      	bhi.n	800615c <UART_SetConfig+0x210>
 800612a:	2b80      	cmp	r3, #128	; 0x80
 800612c:	d00a      	beq.n	8006144 <UART_SetConfig+0x1f8>
 800612e:	2b80      	cmp	r3, #128	; 0x80
 8006130:	d814      	bhi.n	800615c <UART_SetConfig+0x210>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <UART_SetConfig+0x1f0>
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	d008      	beq.n	800614c <UART_SetConfig+0x200>
 800613a:	e00f      	b.n	800615c <UART_SetConfig+0x210>
 800613c:	2300      	movs	r3, #0
 800613e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006142:	e042      	b.n	80061ca <UART_SetConfig+0x27e>
 8006144:	2302      	movs	r3, #2
 8006146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800614a:	e03e      	b.n	80061ca <UART_SetConfig+0x27e>
 800614c:	2304      	movs	r3, #4
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006152:	e03a      	b.n	80061ca <UART_SetConfig+0x27e>
 8006154:	2308      	movs	r3, #8
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800615a:	e036      	b.n	80061ca <UART_SetConfig+0x27e>
 800615c:	2310      	movs	r3, #16
 800615e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006162:	e032      	b.n	80061ca <UART_SetConfig+0x27e>
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a30      	ldr	r2, [pc, #192]	; (800622c <UART_SetConfig+0x2e0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d12a      	bne.n	80061c4 <UART_SetConfig+0x278>
 800616e:	4b31      	ldr	r3, [pc, #196]	; (8006234 <UART_SetConfig+0x2e8>)
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006174:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800617c:	d01a      	beq.n	80061b4 <UART_SetConfig+0x268>
 800617e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006182:	d81b      	bhi.n	80061bc <UART_SetConfig+0x270>
 8006184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006188:	d00c      	beq.n	80061a4 <UART_SetConfig+0x258>
 800618a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800618e:	d815      	bhi.n	80061bc <UART_SetConfig+0x270>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <UART_SetConfig+0x250>
 8006194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006198:	d008      	beq.n	80061ac <UART_SetConfig+0x260>
 800619a:	e00f      	b.n	80061bc <UART_SetConfig+0x270>
 800619c:	2300      	movs	r3, #0
 800619e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061a2:	e012      	b.n	80061ca <UART_SetConfig+0x27e>
 80061a4:	2302      	movs	r3, #2
 80061a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061aa:	e00e      	b.n	80061ca <UART_SetConfig+0x27e>
 80061ac:	2304      	movs	r3, #4
 80061ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b2:	e00a      	b.n	80061ca <UART_SetConfig+0x27e>
 80061b4:	2308      	movs	r3, #8
 80061b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ba:	e006      	b.n	80061ca <UART_SetConfig+0x27e>
 80061bc:	2310      	movs	r3, #16
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061c2:	e002      	b.n	80061ca <UART_SetConfig+0x27e>
 80061c4:	2310      	movs	r3, #16
 80061c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a17      	ldr	r2, [pc, #92]	; (800622c <UART_SetConfig+0x2e0>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	f040 80a8 	bne.w	8006326 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d834      	bhi.n	8006248 <UART_SetConfig+0x2fc>
 80061de:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <UART_SetConfig+0x298>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006209 	.word	0x08006209
 80061e8:	08006249 	.word	0x08006249
 80061ec:	08006211 	.word	0x08006211
 80061f0:	08006249 	.word	0x08006249
 80061f4:	08006217 	.word	0x08006217
 80061f8:	08006249 	.word	0x08006249
 80061fc:	08006249 	.word	0x08006249
 8006200:	08006249 	.word	0x08006249
 8006204:	0800621f 	.word	0x0800621f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006208:	f7fd fa40 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 800620c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800620e:	e021      	b.n	8006254 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006210:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <UART_SetConfig+0x2f8>)
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006214:	e01e      	b.n	8006254 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006216:	f7fd f9cb 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 800621a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800621c:	e01a      	b.n	8006254 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006224:	e016      	b.n	8006254 <UART_SetConfig+0x308>
 8006226:	bf00      	nop
 8006228:	cfff69f3 	.word	0xcfff69f3
 800622c:	40008000 	.word	0x40008000
 8006230:	40013800 	.word	0x40013800
 8006234:	40021000 	.word	0x40021000
 8006238:	40004400 	.word	0x40004400
 800623c:	40004800 	.word	0x40004800
 8006240:	40004c00 	.word	0x40004c00
 8006244:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006252:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 812a 	beq.w	80064b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	4a9e      	ldr	r2, [pc, #632]	; (80064dc <UART_SetConfig+0x590>)
 8006262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006266:	461a      	mov	r2, r3
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	fbb3 f3f2 	udiv	r3, r3, r2
 800626e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	4613      	mov	r3, r2
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	4413      	add	r3, r2
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	429a      	cmp	r2, r3
 800627e:	d305      	bcc.n	800628c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	429a      	cmp	r2, r3
 800628a:	d903      	bls.n	8006294 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006292:	e10d      	b.n	80064b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	2200      	movs	r2, #0
 8006298:	60bb      	str	r3, [r7, #8]
 800629a:	60fa      	str	r2, [r7, #12]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	4a8e      	ldr	r2, [pc, #568]	; (80064dc <UART_SetConfig+0x590>)
 80062a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2200      	movs	r2, #0
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062b6:	f7fa f813 	bl	80002e0 <__aeabi_uldivmod>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4610      	mov	r0, r2
 80062c0:	4619      	mov	r1, r3
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	f04f 0300 	mov.w	r3, #0
 80062ca:	020b      	lsls	r3, r1, #8
 80062cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062d0:	0202      	lsls	r2, r0, #8
 80062d2:	6979      	ldr	r1, [r7, #20]
 80062d4:	6849      	ldr	r1, [r1, #4]
 80062d6:	0849      	lsrs	r1, r1, #1
 80062d8:	2000      	movs	r0, #0
 80062da:	460c      	mov	r4, r1
 80062dc:	4605      	mov	r5, r0
 80062de:	eb12 0804 	adds.w	r8, r2, r4
 80062e2:	eb43 0905 	adc.w	r9, r3, r5
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	469a      	mov	sl, r3
 80062ee:	4693      	mov	fp, r2
 80062f0:	4652      	mov	r2, sl
 80062f2:	465b      	mov	r3, fp
 80062f4:	4640      	mov	r0, r8
 80062f6:	4649      	mov	r1, r9
 80062f8:	f7f9 fff2 	bl	80002e0 <__aeabi_uldivmod>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4613      	mov	r3, r2
 8006302:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800630a:	d308      	bcc.n	800631e <UART_SetConfig+0x3d2>
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006312:	d204      	bcs.n	800631e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6a3a      	ldr	r2, [r7, #32]
 800631a:	60da      	str	r2, [r3, #12]
 800631c:	e0c8      	b.n	80064b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006324:	e0c4      	b.n	80064b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800632e:	d167      	bne.n	8006400 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006330:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006334:	2b08      	cmp	r3, #8
 8006336:	d828      	bhi.n	800638a <UART_SetConfig+0x43e>
 8006338:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <UART_SetConfig+0x3f4>)
 800633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633e:	bf00      	nop
 8006340:	08006365 	.word	0x08006365
 8006344:	0800636d 	.word	0x0800636d
 8006348:	08006375 	.word	0x08006375
 800634c:	0800638b 	.word	0x0800638b
 8006350:	0800637b 	.word	0x0800637b
 8006354:	0800638b 	.word	0x0800638b
 8006358:	0800638b 	.word	0x0800638b
 800635c:	0800638b 	.word	0x0800638b
 8006360:	08006383 	.word	0x08006383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006364:	f7fd f992 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 8006368:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800636a:	e014      	b.n	8006396 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800636c:	f7fd f9a4 	bl	80036b8 <HAL_RCC_GetPCLK2Freq>
 8006370:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006372:	e010      	b.n	8006396 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006374:	4b5a      	ldr	r3, [pc, #360]	; (80064e0 <UART_SetConfig+0x594>)
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006378:	e00d      	b.n	8006396 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637a:	f7fd f919 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 800637e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006380:	e009      	b.n	8006396 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006388:	e005      	b.n	8006396 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8089 	beq.w	80064b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	4a4e      	ldr	r2, [pc, #312]	; (80064dc <UART_SetConfig+0x590>)
 80063a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063a8:	461a      	mov	r2, r3
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80063b0:	005a      	lsls	r2, r3, #1
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	085b      	lsrs	r3, r3, #1
 80063b8:	441a      	add	r2, r3
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	2b0f      	cmp	r3, #15
 80063c8:	d916      	bls.n	80063f8 <UART_SetConfig+0x4ac>
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d0:	d212      	bcs.n	80063f8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f023 030f 	bic.w	r3, r3, #15
 80063da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	8bfb      	ldrh	r3, [r7, #30]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	8bfa      	ldrh	r2, [r7, #30]
 80063f4:	60da      	str	r2, [r3, #12]
 80063f6:	e05b      	b.n	80064b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063fe:	e057      	b.n	80064b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006400:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006404:	2b08      	cmp	r3, #8
 8006406:	d828      	bhi.n	800645a <UART_SetConfig+0x50e>
 8006408:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <UART_SetConfig+0x4c4>)
 800640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640e:	bf00      	nop
 8006410:	08006435 	.word	0x08006435
 8006414:	0800643d 	.word	0x0800643d
 8006418:	08006445 	.word	0x08006445
 800641c:	0800645b 	.word	0x0800645b
 8006420:	0800644b 	.word	0x0800644b
 8006424:	0800645b 	.word	0x0800645b
 8006428:	0800645b 	.word	0x0800645b
 800642c:	0800645b 	.word	0x0800645b
 8006430:	08006453 	.word	0x08006453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006434:	f7fd f92a 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 8006438:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800643a:	e014      	b.n	8006466 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800643c:	f7fd f93c 	bl	80036b8 <HAL_RCC_GetPCLK2Freq>
 8006440:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006442:	e010      	b.n	8006466 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006444:	4b26      	ldr	r3, [pc, #152]	; (80064e0 <UART_SetConfig+0x594>)
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006448:	e00d      	b.n	8006466 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800644a:	f7fd f8b1 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 800644e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006450:	e009      	b.n	8006466 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006458:	e005      	b.n	8006466 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006464:	bf00      	nop
    }

    if (pclk != 0U)
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	2b00      	cmp	r3, #0
 800646a:	d021      	beq.n	80064b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	4a1a      	ldr	r2, [pc, #104]	; (80064dc <UART_SetConfig+0x590>)
 8006472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006476:	461a      	mov	r2, r3
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	fbb3 f2f2 	udiv	r2, r3, r2
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	085b      	lsrs	r3, r3, #1
 8006484:	441a      	add	r2, r3
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	fbb2 f3f3 	udiv	r3, r2, r3
 800648e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	2b0f      	cmp	r3, #15
 8006494:	d909      	bls.n	80064aa <UART_SetConfig+0x55e>
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800649c:	d205      	bcs.n	80064aa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60da      	str	r2, [r3, #12]
 80064a8:	e002      	b.n	80064b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2200      	movs	r2, #0
 80064c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2200      	movs	r2, #0
 80064ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80064cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3730      	adds	r7, #48	; 0x30
 80064d4:	46bd      	mov	sp, r7
 80064d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064da:	bf00      	nop
 80064dc:	08008d64 	.word	0x08008d64
 80064e0:	00f42400 	.word	0x00f42400

080064e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	f003 0310 	and.w	r3, r3, #16
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01a      	beq.n	80065fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065e2:	d10a      	bne.n	80065fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	605a      	str	r2, [r3, #4]
  }
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af02      	add	r7, sp, #8
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006638:	f7fa ff3c 	bl	80014b4 <HAL_GetTick>
 800663c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b08      	cmp	r3, #8
 800664a:	d10e      	bne.n	800666a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800664c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f82f 	bl	80066be <UART_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e025      	b.n	80066b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b04      	cmp	r3, #4
 8006676:	d10e      	bne.n	8006696 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f819 	bl	80066be <UART_WaitOnFlagUntilTimeout>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e00f      	b.n	80066b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b09c      	sub	sp, #112	; 0x70
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	603b      	str	r3, [r7, #0]
 80066ca:	4613      	mov	r3, r2
 80066cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ce:	e0a9      	b.n	8006824 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d6:	f000 80a5 	beq.w	8006824 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066da:	f7fa feeb 	bl	80014b4 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d302      	bcc.n	80066f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80066ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d140      	bne.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006700:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006704:	667b      	str	r3, [r7, #100]	; 0x64
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800670e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006710:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006714:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800671c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e6      	bne.n	80066f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3308      	adds	r3, #8
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	f023 0301 	bic.w	r3, r3, #1
 8006738:	663b      	str	r3, [r7, #96]	; 0x60
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3308      	adds	r3, #8
 8006740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006742:	64ba      	str	r2, [r7, #72]	; 0x48
 8006744:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e5      	bne.n	8006722 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2220      	movs	r2, #32
 800675a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2220      	movs	r2, #32
 8006762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e069      	b.n	8006846 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d051      	beq.n	8006824 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800678a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800678e:	d149      	bne.n	8006824 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006798:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e6      	bne.n	800679a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3308      	adds	r3, #8
 80067d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	613b      	str	r3, [r7, #16]
   return(result);
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f023 0301 	bic.w	r3, r3, #1
 80067e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3308      	adds	r3, #8
 80067ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067ec:	623a      	str	r2, [r7, #32]
 80067ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	69f9      	ldr	r1, [r7, #28]
 80067f2:	6a3a      	ldr	r2, [r7, #32]
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e5      	bne.n	80067cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2220      	movs	r2, #32
 8006804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e010      	b.n	8006846 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	69da      	ldr	r2, [r3, #28]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	4013      	ands	r3, r2
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	429a      	cmp	r2, r3
 8006832:	bf0c      	ite	eq
 8006834:	2301      	moveq	r3, #1
 8006836:	2300      	movne	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	461a      	mov	r2, r3
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	429a      	cmp	r2, r3
 8006840:	f43f af46 	beq.w	80066d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3770      	adds	r7, #112	; 0x70
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006850:	b480      	push	{r7}
 8006852:	b0a3      	sub	sp, #140	; 0x8c
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	4613      	mov	r3, r2
 800685c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	88fa      	ldrh	r2, [r7, #6]
 8006868:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	88fa      	ldrh	r2, [r7, #6]
 8006870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006882:	d10e      	bne.n	80068a2 <UART_Start_Receive_IT+0x52>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d105      	bne.n	8006898 <UART_Start_Receive_IT+0x48>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006892:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006896:	e02d      	b.n	80068f4 <UART_Start_Receive_IT+0xa4>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	22ff      	movs	r2, #255	; 0xff
 800689c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068a0:	e028      	b.n	80068f4 <UART_Start_Receive_IT+0xa4>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10d      	bne.n	80068c6 <UART_Start_Receive_IT+0x76>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d104      	bne.n	80068bc <UART_Start_Receive_IT+0x6c>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	22ff      	movs	r2, #255	; 0xff
 80068b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068ba:	e01b      	b.n	80068f4 <UART_Start_Receive_IT+0xa4>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	227f      	movs	r2, #127	; 0x7f
 80068c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068c4:	e016      	b.n	80068f4 <UART_Start_Receive_IT+0xa4>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068ce:	d10d      	bne.n	80068ec <UART_Start_Receive_IT+0x9c>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <UART_Start_Receive_IT+0x92>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	227f      	movs	r2, #127	; 0x7f
 80068dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068e0:	e008      	b.n	80068f4 <UART_Start_Receive_IT+0xa4>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	223f      	movs	r2, #63	; 0x3f
 80068e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068ea:	e003      	b.n	80068f4 <UART_Start_Receive_IT+0xa4>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2222      	movs	r2, #34	; 0x22
 8006900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3308      	adds	r3, #8
 800690a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006916:	f043 0301 	orr.w	r3, r3, #1
 800691a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3308      	adds	r3, #8
 8006924:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006928:	673a      	str	r2, [r7, #112]	; 0x70
 800692a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800692e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e3      	bne.n	8006904 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006944:	d153      	bne.n	80069ee <UART_Start_Receive_IT+0x19e>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800694c:	88fa      	ldrh	r2, [r7, #6]
 800694e:	429a      	cmp	r2, r3
 8006950:	d34d      	bcc.n	80069ee <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695a:	d107      	bne.n	800696c <UART_Start_Receive_IT+0x11c>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d103      	bne.n	800696c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4a4b      	ldr	r2, [pc, #300]	; (8006a94 <UART_Start_Receive_IT+0x244>)
 8006968:	671a      	str	r2, [r3, #112]	; 0x70
 800696a:	e002      	b.n	8006972 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4a4a      	ldr	r2, [pc, #296]	; (8006a98 <UART_Start_Receive_IT+0x248>)
 8006970:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d01a      	beq.n	80069b8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006996:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069a6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e4      	bne.n	8006982 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3308      	adds	r3, #8
 80069be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c2:	e853 3f00 	ldrex	r3, [r3]
 80069c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3308      	adds	r3, #8
 80069d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80069d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80069da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e5      	bne.n	80069b8 <UART_Start_Receive_IT+0x168>
 80069ec:	e04a      	b.n	8006a84 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f6:	d107      	bne.n	8006a08 <UART_Start_Receive_IT+0x1b8>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d103      	bne.n	8006a08 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4a26      	ldr	r2, [pc, #152]	; (8006a9c <UART_Start_Receive_IT+0x24c>)
 8006a04:	671a      	str	r2, [r3, #112]	; 0x70
 8006a06:	e002      	b.n	8006a0e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4a25      	ldr	r2, [pc, #148]	; (8006aa0 <UART_Start_Receive_IT+0x250>)
 8006a0c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d019      	beq.n	8006a52 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006a32:	677b      	str	r3, [r7, #116]	; 0x74
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e6      	bne.n	8006a1e <UART_Start_Receive_IT+0x1ce>
 8006a50:	e018      	b.n	8006a84 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f043 0320 	orr.w	r3, r3, #32
 8006a66:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a70:	623b      	str	r3, [r7, #32]
 8006a72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	69f9      	ldr	r1, [r7, #28]
 8006a76:	6a3a      	ldr	r2, [r7, #32]
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e6      	bne.n	8006a52 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	378c      	adds	r7, #140	; 0x8c
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	080071ad 	.word	0x080071ad
 8006a98:	08006eb5 	.word	0x08006eb5
 8006a9c:	08006d53 	.word	0x08006d53
 8006aa0:	08006bf3 	.word	0x08006bf3

08006aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b095      	sub	sp, #84	; 0x54
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aca:	643b      	str	r3, [r7, #64]	; 0x40
 8006acc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e6      	bne.n	8006aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3308      	adds	r3, #8
 8006ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e3      	bne.n	8006ade <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d118      	bne.n	8006b50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f023 0310 	bic.w	r3, r3, #16
 8006b32:	647b      	str	r3, [r7, #68]	; 0x44
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3c:	61bb      	str	r3, [r7, #24]
 8006b3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6979      	ldr	r1, [r7, #20]
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e6      	bne.n	8006b1e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006b64:	bf00      	nop
 8006b66:	3754      	adds	r7, #84	; 0x54
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f7ff f9c6 	bl	8005f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b94:	bf00      	nop
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6979      	ldr	r1, [r7, #20]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e6      	bne.n	8006ba4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff f991 	bl	8005f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bea:	bf00      	nop
 8006bec:	3720      	adds	r7, #32
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b096      	sub	sp, #88	; 0x58
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0a:	2b22      	cmp	r3, #34	; 0x22
 8006c0c:	f040 8095 	bne.w	8006d3a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c1a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006c1e:	b2d9      	uxtb	r1, r3
 8006c20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2a:	400a      	ands	r2, r1
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	3b01      	subs	r3, #1
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d178      	bne.n	8006d4a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c6c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c76:	647b      	str	r3, [r7, #68]	; 0x44
 8006c78:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e6      	bne.n	8006c58 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3308      	adds	r3, #8
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	623b      	str	r3, [r7, #32]
   return(result);
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006caa:	633a      	str	r2, [r7, #48]	; 0x30
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e5      	bne.n	8006c8a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d12e      	bne.n	8006d32 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0310 	bic.w	r3, r3, #16
 8006cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cf8:	61fb      	str	r3, [r7, #28]
 8006cfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	69b9      	ldr	r1, [r7, #24]
 8006cfe:	69fa      	ldr	r2, [r7, #28]
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	617b      	str	r3, [r7, #20]
   return(result);
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e6      	bne.n	8006cda <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b10      	cmp	r3, #16
 8006d18:	d103      	bne.n	8006d22 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2210      	movs	r2, #16
 8006d20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff f902 	bl	8005f34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d30:	e00b      	b.n	8006d4a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fa f884 	bl	8000e40 <HAL_UART_RxCpltCallback>
}
 8006d38:	e007      	b.n	8006d4a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	699a      	ldr	r2, [r3, #24]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0208 	orr.w	r2, r2, #8
 8006d48:	619a      	str	r2, [r3, #24]
}
 8006d4a:	bf00      	nop
 8006d4c:	3758      	adds	r7, #88	; 0x58
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b096      	sub	sp, #88	; 0x58
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6a:	2b22      	cmp	r3, #34	; 0x22
 8006d6c:	f040 8095 	bne.w	8006e9a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d80:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006d84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d88:	4013      	ands	r3, r2
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d8e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d94:	1c9a      	adds	r2, r3, #2
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d178      	bne.n	8006eaa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e6      	bne.n	8006db8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3308      	adds	r3, #8
 8006df0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	f023 0301 	bic.w	r3, r3, #1
 8006e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3308      	adds	r3, #8
 8006e08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e5      	bne.n	8006dea <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d12e      	bne.n	8006e92 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f023 0310 	bic.w	r3, r3, #16
 8006e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	6979      	ldr	r1, [r7, #20]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	613b      	str	r3, [r7, #16]
   return(result);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e6      	bne.n	8006e3a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b10      	cmp	r3, #16
 8006e78:	d103      	bne.n	8006e82 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2210      	movs	r2, #16
 8006e80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff f852 	bl	8005f34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e90:	e00b      	b.n	8006eaa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7f9 ffd4 	bl	8000e40 <HAL_UART_RxCpltCallback>
}
 8006e98:	e007      	b.n	8006eaa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	699a      	ldr	r2, [r3, #24]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f042 0208 	orr.w	r2, r2, #8
 8006ea8:	619a      	str	r2, [r3, #24]
}
 8006eaa:	bf00      	nop
 8006eac:	3758      	adds	r7, #88	; 0x58
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
	...

08006eb4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b0a6      	sub	sp, #152	; 0x98
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ec2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eea:	2b22      	cmp	r3, #34	; 0x22
 8006eec:	f040 814f 	bne.w	800718e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ef6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006efa:	e0f6      	b.n	80070ea <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f06:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006f0a:	b2d9      	uxtb	r1, r3
 8006f0c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f16:	400a      	ands	r2, r1
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d053      	beq.n	8006ff6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d011      	beq.n	8006f7e <UART_RxISR_8BIT_FIFOEN+0xca>
 8006f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00b      	beq.n	8006f7e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f74:	f043 0201 	orr.w	r2, r3, #1
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d011      	beq.n	8006fae <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006f8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fa4:	f043 0204 	orr.w	r2, r3, #4
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d011      	beq.n	8006fde <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006fba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd4:	f043 0202 	orr.w	r2, r3, #2
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d006      	beq.n	8006ff6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7fe ff99 	bl	8005f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d173      	bne.n	80070ea <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007010:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007016:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007024:	66bb      	str	r3, [r7, #104]	; 0x68
 8007026:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800702a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e4      	bne.n	8007002 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3308      	adds	r3, #8
 800703e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800704a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800704e:	f023 0301 	bic.w	r3, r3, #1
 8007052:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3308      	adds	r3, #8
 800705a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800705c:	657a      	str	r2, [r7, #84]	; 0x54
 800705e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007062:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800706a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e3      	bne.n	8007038 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2220      	movs	r2, #32
 8007074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007082:	2b01      	cmp	r3, #1
 8007084:	d12e      	bne.n	80070e4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	f023 0310 	bic.w	r3, r3, #16
 80070a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070aa:	643b      	str	r3, [r7, #64]	; 0x40
 80070ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e6      	bne.n	800708c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	f003 0310 	and.w	r3, r3, #16
 80070c8:	2b10      	cmp	r3, #16
 80070ca:	d103      	bne.n	80070d4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2210      	movs	r2, #16
 80070d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7fe ff29 	bl	8005f34 <HAL_UARTEx_RxEventCallback>
 80070e2:	e002      	b.n	80070ea <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7f9 feab 	bl	8000e40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d006      	beq.n	8007100 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80070f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f47f aefe 	bne.w	8006efc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007106:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800710a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800710e:	2b00      	cmp	r3, #0
 8007110:	d045      	beq.n	800719e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007118:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800711c:	429a      	cmp	r2, r3
 800711e:	d23e      	bcs.n	800719e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007136:	673b      	str	r3, [r7, #112]	; 0x70
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007140:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e5      	bne.n	8007120 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a14      	ldr	r2, [pc, #80]	; (80071a8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007158:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	e853 3f00 	ldrex	r3, [r3]
 8007166:	60bb      	str	r3, [r7, #8]
   return(result);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f043 0320 	orr.w	r3, r3, #32
 800716e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007178:	61bb      	str	r3, [r7, #24]
 800717a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	6979      	ldr	r1, [r7, #20]
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	613b      	str	r3, [r7, #16]
   return(result);
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e6      	bne.n	800715a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800718c:	e007      	b.n	800719e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	699a      	ldr	r2, [r3, #24]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0208 	orr.w	r2, r2, #8
 800719c:	619a      	str	r2, [r3, #24]
}
 800719e:	bf00      	nop
 80071a0:	3798      	adds	r7, #152	; 0x98
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	08006bf3 	.word	0x08006bf3

080071ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b0a8      	sub	sp, #160	; 0xa0
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80071ba:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e2:	2b22      	cmp	r3, #34	; 0x22
 80071e4:	f040 8153 	bne.w	800748e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071ee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071f2:	e0fa      	b.n	80073ea <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007206:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800720a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800720e:	4013      	ands	r3, r2
 8007210:	b29a      	uxth	r2, r3
 8007212:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007216:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721c:	1c9a      	adds	r2, r3, #2
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	b29a      	uxth	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800723e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007242:	f003 0307 	and.w	r3, r3, #7
 8007246:	2b00      	cmp	r3, #0
 8007248:	d053      	beq.n	80072f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800724a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d011      	beq.n	800727a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007256:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800725a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00b      	beq.n	800727a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2201      	movs	r2, #1
 8007268:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007270:	f043 0201 	orr.w	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800727a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d011      	beq.n	80072aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007286:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00b      	beq.n	80072aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2202      	movs	r2, #2
 8007298:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072a0:	f043 0204 	orr.w	r2, r3, #4
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072ae:	f003 0304 	and.w	r3, r3, #4
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d011      	beq.n	80072da <UART_RxISR_16BIT_FIFOEN+0x12e>
 80072b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00b      	beq.n	80072da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2204      	movs	r2, #4
 80072c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072d0:	f043 0202 	orr.w	r2, r3, #2
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d006      	beq.n	80072f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7fe fe1b 	bl	8005f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d175      	bne.n	80073ea <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800730c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800730e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007312:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007320:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007322:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007326:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800732e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e4      	bne.n	80072fe <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3308      	adds	r3, #8
 800733a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800734a:	f023 0301 	bic.w	r3, r3, #1
 800734e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800735c:	65ba      	str	r2, [r7, #88]	; 0x58
 800735e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007362:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007364:	e841 2300 	strex	r3, r2, [r1]
 8007368:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800736a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e1      	bne.n	8007334 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007382:	2b01      	cmp	r3, #1
 8007384:	d12e      	bne.n	80073e4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800739a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739c:	f023 0310 	bic.w	r3, r3, #16
 80073a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073aa:	647b      	str	r3, [r7, #68]	; 0x44
 80073ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e6      	bne.n	800738c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	f003 0310 	and.w	r3, r3, #16
 80073c8:	2b10      	cmp	r3, #16
 80073ca:	d103      	bne.n	80073d4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2210      	movs	r2, #16
 80073d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7fe fda9 	bl	8005f34 <HAL_UARTEx_RxEventCallback>
 80073e2:	e002      	b.n	80073ea <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7f9 fd2b 	bl	8000e40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d006      	beq.n	8007400 <UART_RxISR_16BIT_FIFOEN+0x254>
 80073f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f47f aefa 	bne.w	80071f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007406:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800740a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800740e:	2b00      	cmp	r3, #0
 8007410:	d045      	beq.n	800749e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007418:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800741c:	429a      	cmp	r2, r3
 800741e:	d23e      	bcs.n	800749e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3308      	adds	r3, #8
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	623b      	str	r3, [r7, #32]
   return(result);
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007436:	677b      	str	r3, [r7, #116]	; 0x74
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3308      	adds	r3, #8
 800743e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007440:	633a      	str	r2, [r7, #48]	; 0x30
 8007442:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e5      	bne.n	8007420 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a14      	ldr	r2, [pc, #80]	; (80074a8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007458:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	60fb      	str	r3, [r7, #12]
   return(result);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f043 0320 	orr.w	r3, r3, #32
 800746e:	673b      	str	r3, [r7, #112]	; 0x70
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007478:	61fb      	str	r3, [r7, #28]
 800747a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	69b9      	ldr	r1, [r7, #24]
 800747e:	69fa      	ldr	r2, [r7, #28]
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	617b      	str	r3, [r7, #20]
   return(result);
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e6      	bne.n	800745a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800748c:	e007      	b.n	800749e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	699a      	ldr	r2, [r3, #24]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f042 0208 	orr.w	r2, r2, #8
 800749c:	619a      	str	r2, [r3, #24]
}
 800749e:	bf00      	nop
 80074a0:	37a0      	adds	r7, #160	; 0xa0
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	08006d53 	.word	0x08006d53

080074ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d101      	bne.n	80074fe <HAL_UARTEx_DisableFifoMode+0x16>
 80074fa:	2302      	movs	r3, #2
 80074fc:	e027      	b.n	800754e <HAL_UARTEx_DisableFifoMode+0x66>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2224      	movs	r2, #36	; 0x24
 800750a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0201 	bic.w	r2, r2, #1
 8007524:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800752c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800756a:	2b01      	cmp	r3, #1
 800756c:	d101      	bne.n	8007572 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800756e:	2302      	movs	r3, #2
 8007570:	e02d      	b.n	80075ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2224      	movs	r2, #36	; 0x24
 800757e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0201 	bic.w	r2, r2, #1
 8007598:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f850 	bl	8007654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2220      	movs	r2, #32
 80075c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e02d      	b.n	800764a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2224      	movs	r2, #36	; 0x24
 80075fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f812 	bl	8007654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007660:	2b00      	cmp	r3, #0
 8007662:	d108      	bne.n	8007676 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007674:	e031      	b.n	80076da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007676:	2308      	movs	r3, #8
 8007678:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800767a:	2308      	movs	r3, #8
 800767c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	0e5b      	lsrs	r3, r3, #25
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	0f5b      	lsrs	r3, r3, #29
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 0307 	and.w	r3, r3, #7
 800769c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	7b3a      	ldrb	r2, [r7, #12]
 80076a2:	4911      	ldr	r1, [pc, #68]	; (80076e8 <UARTEx_SetNbDataToProcess+0x94>)
 80076a4:	5c8a      	ldrb	r2, [r1, r2]
 80076a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80076aa:	7b3a      	ldrb	r2, [r7, #12]
 80076ac:	490f      	ldr	r1, [pc, #60]	; (80076ec <UARTEx_SetNbDataToProcess+0x98>)
 80076ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
 80076be:	7b7a      	ldrb	r2, [r7, #13]
 80076c0:	4909      	ldr	r1, [pc, #36]	; (80076e8 <UARTEx_SetNbDataToProcess+0x94>)
 80076c2:	5c8a      	ldrb	r2, [r1, r2]
 80076c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076c8:	7b7a      	ldrb	r2, [r7, #13]
 80076ca:	4908      	ldr	r1, [pc, #32]	; (80076ec <UARTEx_SetNbDataToProcess+0x98>)
 80076cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80076da:	bf00      	nop
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	08008d7c 	.word	0x08008d7c
 80076ec:	08008d84 	.word	0x08008d84

080076f0 <atoi>:
 80076f0:	220a      	movs	r2, #10
 80076f2:	2100      	movs	r1, #0
 80076f4:	f000 b930 	b.w	8007958 <strtol>

080076f8 <__errno>:
 80076f8:	4b01      	ldr	r3, [pc, #4]	; (8007700 <__errno+0x8>)
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	200001ac 	.word	0x200001ac

08007704 <__libc_init_array>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	4d0d      	ldr	r5, [pc, #52]	; (800773c <__libc_init_array+0x38>)
 8007708:	4c0d      	ldr	r4, [pc, #52]	; (8007740 <__libc_init_array+0x3c>)
 800770a:	1b64      	subs	r4, r4, r5
 800770c:	10a4      	asrs	r4, r4, #2
 800770e:	2600      	movs	r6, #0
 8007710:	42a6      	cmp	r6, r4
 8007712:	d109      	bne.n	8007728 <__libc_init_array+0x24>
 8007714:	4d0b      	ldr	r5, [pc, #44]	; (8007744 <__libc_init_array+0x40>)
 8007716:	4c0c      	ldr	r4, [pc, #48]	; (8007748 <__libc_init_array+0x44>)
 8007718:	f001 fade 	bl	8008cd8 <_init>
 800771c:	1b64      	subs	r4, r4, r5
 800771e:	10a4      	asrs	r4, r4, #2
 8007720:	2600      	movs	r6, #0
 8007722:	42a6      	cmp	r6, r4
 8007724:	d105      	bne.n	8007732 <__libc_init_array+0x2e>
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	f855 3b04 	ldr.w	r3, [r5], #4
 800772c:	4798      	blx	r3
 800772e:	3601      	adds	r6, #1
 8007730:	e7ee      	b.n	8007710 <__libc_init_array+0xc>
 8007732:	f855 3b04 	ldr.w	r3, [r5], #4
 8007736:	4798      	blx	r3
 8007738:	3601      	adds	r6, #1
 800773a:	e7f2      	b.n	8007722 <__libc_init_array+0x1e>
 800773c:	08008fdc 	.word	0x08008fdc
 8007740:	08008fdc 	.word	0x08008fdc
 8007744:	08008fdc 	.word	0x08008fdc
 8007748:	08008fe0 	.word	0x08008fe0

0800774c <memset>:
 800774c:	4402      	add	r2, r0
 800774e:	4603      	mov	r3, r0
 8007750:	4293      	cmp	r3, r2
 8007752:	d100      	bne.n	8007756 <memset+0xa>
 8007754:	4770      	bx	lr
 8007756:	f803 1b01 	strb.w	r1, [r3], #1
 800775a:	e7f9      	b.n	8007750 <memset+0x4>

0800775c <siprintf>:
 800775c:	b40e      	push	{r1, r2, r3}
 800775e:	b500      	push	{lr}
 8007760:	b09c      	sub	sp, #112	; 0x70
 8007762:	ab1d      	add	r3, sp, #116	; 0x74
 8007764:	9002      	str	r0, [sp, #8]
 8007766:	9006      	str	r0, [sp, #24]
 8007768:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800776c:	4809      	ldr	r0, [pc, #36]	; (8007794 <siprintf+0x38>)
 800776e:	9107      	str	r1, [sp, #28]
 8007770:	9104      	str	r1, [sp, #16]
 8007772:	4909      	ldr	r1, [pc, #36]	; (8007798 <siprintf+0x3c>)
 8007774:	f853 2b04 	ldr.w	r2, [r3], #4
 8007778:	9105      	str	r1, [sp, #20]
 800777a:	6800      	ldr	r0, [r0, #0]
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	a902      	add	r1, sp, #8
 8007780:	f000 fa68 	bl	8007c54 <_svfiprintf_r>
 8007784:	9b02      	ldr	r3, [sp, #8]
 8007786:	2200      	movs	r2, #0
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	b01c      	add	sp, #112	; 0x70
 800778c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007790:	b003      	add	sp, #12
 8007792:	4770      	bx	lr
 8007794:	200001ac 	.word	0x200001ac
 8007798:	ffff0208 	.word	0xffff0208

0800779c <strtok>:
 800779c:	4b16      	ldr	r3, [pc, #88]	; (80077f8 <strtok+0x5c>)
 800779e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077a0:	681e      	ldr	r6, [r3, #0]
 80077a2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80077a4:	4605      	mov	r5, r0
 80077a6:	b9fc      	cbnz	r4, 80077e8 <strtok+0x4c>
 80077a8:	2050      	movs	r0, #80	; 0x50
 80077aa:	9101      	str	r1, [sp, #4]
 80077ac:	f000 f90e 	bl	80079cc <malloc>
 80077b0:	9901      	ldr	r1, [sp, #4]
 80077b2:	65b0      	str	r0, [r6, #88]	; 0x58
 80077b4:	4602      	mov	r2, r0
 80077b6:	b920      	cbnz	r0, 80077c2 <strtok+0x26>
 80077b8:	4b10      	ldr	r3, [pc, #64]	; (80077fc <strtok+0x60>)
 80077ba:	4811      	ldr	r0, [pc, #68]	; (8007800 <strtok+0x64>)
 80077bc:	2157      	movs	r1, #87	; 0x57
 80077be:	f000 f8d5 	bl	800796c <__assert_func>
 80077c2:	e9c0 4400 	strd	r4, r4, [r0]
 80077c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80077ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80077ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80077d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80077d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80077da:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80077de:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80077e2:	6184      	str	r4, [r0, #24]
 80077e4:	7704      	strb	r4, [r0, #28]
 80077e6:	6244      	str	r4, [r0, #36]	; 0x24
 80077e8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80077ea:	2301      	movs	r3, #1
 80077ec:	4628      	mov	r0, r5
 80077ee:	b002      	add	sp, #8
 80077f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80077f4:	f000 b806 	b.w	8007804 <__strtok_r>
 80077f8:	200001ac 	.word	0x200001ac
 80077fc:	08008d90 	.word	0x08008d90
 8007800:	08008da7 	.word	0x08008da7

08007804 <__strtok_r>:
 8007804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007806:	b908      	cbnz	r0, 800780c <__strtok_r+0x8>
 8007808:	6810      	ldr	r0, [r2, #0]
 800780a:	b188      	cbz	r0, 8007830 <__strtok_r+0x2c>
 800780c:	4604      	mov	r4, r0
 800780e:	4620      	mov	r0, r4
 8007810:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007814:	460f      	mov	r7, r1
 8007816:	f817 6b01 	ldrb.w	r6, [r7], #1
 800781a:	b91e      	cbnz	r6, 8007824 <__strtok_r+0x20>
 800781c:	b965      	cbnz	r5, 8007838 <__strtok_r+0x34>
 800781e:	6015      	str	r5, [r2, #0]
 8007820:	4628      	mov	r0, r5
 8007822:	e005      	b.n	8007830 <__strtok_r+0x2c>
 8007824:	42b5      	cmp	r5, r6
 8007826:	d1f6      	bne.n	8007816 <__strtok_r+0x12>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1f0      	bne.n	800780e <__strtok_r+0xa>
 800782c:	6014      	str	r4, [r2, #0]
 800782e:	7003      	strb	r3, [r0, #0]
 8007830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007832:	461c      	mov	r4, r3
 8007834:	e00c      	b.n	8007850 <__strtok_r+0x4c>
 8007836:	b915      	cbnz	r5, 800783e <__strtok_r+0x3a>
 8007838:	f814 3b01 	ldrb.w	r3, [r4], #1
 800783c:	460e      	mov	r6, r1
 800783e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007842:	42ab      	cmp	r3, r5
 8007844:	d1f7      	bne.n	8007836 <__strtok_r+0x32>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d0f3      	beq.n	8007832 <__strtok_r+0x2e>
 800784a:	2300      	movs	r3, #0
 800784c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007850:	6014      	str	r4, [r2, #0]
 8007852:	e7ed      	b.n	8007830 <__strtok_r+0x2c>

08007854 <_strtol_l.constprop.0>:
 8007854:	2b01      	cmp	r3, #1
 8007856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800785a:	d001      	beq.n	8007860 <_strtol_l.constprop.0+0xc>
 800785c:	2b24      	cmp	r3, #36	; 0x24
 800785e:	d906      	bls.n	800786e <_strtol_l.constprop.0+0x1a>
 8007860:	f7ff ff4a 	bl	80076f8 <__errno>
 8007864:	2316      	movs	r3, #22
 8007866:	6003      	str	r3, [r0, #0]
 8007868:	2000      	movs	r0, #0
 800786a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800786e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007954 <_strtol_l.constprop.0+0x100>
 8007872:	460d      	mov	r5, r1
 8007874:	462e      	mov	r6, r5
 8007876:	f815 4b01 	ldrb.w	r4, [r5], #1
 800787a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800787e:	f017 0708 	ands.w	r7, r7, #8
 8007882:	d1f7      	bne.n	8007874 <_strtol_l.constprop.0+0x20>
 8007884:	2c2d      	cmp	r4, #45	; 0x2d
 8007886:	d132      	bne.n	80078ee <_strtol_l.constprop.0+0x9a>
 8007888:	782c      	ldrb	r4, [r5, #0]
 800788a:	2701      	movs	r7, #1
 800788c:	1cb5      	adds	r5, r6, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d05b      	beq.n	800794a <_strtol_l.constprop.0+0xf6>
 8007892:	2b10      	cmp	r3, #16
 8007894:	d109      	bne.n	80078aa <_strtol_l.constprop.0+0x56>
 8007896:	2c30      	cmp	r4, #48	; 0x30
 8007898:	d107      	bne.n	80078aa <_strtol_l.constprop.0+0x56>
 800789a:	782c      	ldrb	r4, [r5, #0]
 800789c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80078a0:	2c58      	cmp	r4, #88	; 0x58
 80078a2:	d14d      	bne.n	8007940 <_strtol_l.constprop.0+0xec>
 80078a4:	786c      	ldrb	r4, [r5, #1]
 80078a6:	2310      	movs	r3, #16
 80078a8:	3502      	adds	r5, #2
 80078aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80078ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80078b2:	f04f 0c00 	mov.w	ip, #0
 80078b6:	fbb8 f9f3 	udiv	r9, r8, r3
 80078ba:	4666      	mov	r6, ip
 80078bc:	fb03 8a19 	mls	sl, r3, r9, r8
 80078c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80078c4:	f1be 0f09 	cmp.w	lr, #9
 80078c8:	d816      	bhi.n	80078f8 <_strtol_l.constprop.0+0xa4>
 80078ca:	4674      	mov	r4, lr
 80078cc:	42a3      	cmp	r3, r4
 80078ce:	dd24      	ble.n	800791a <_strtol_l.constprop.0+0xc6>
 80078d0:	f1bc 0f00 	cmp.w	ip, #0
 80078d4:	db1e      	blt.n	8007914 <_strtol_l.constprop.0+0xc0>
 80078d6:	45b1      	cmp	r9, r6
 80078d8:	d31c      	bcc.n	8007914 <_strtol_l.constprop.0+0xc0>
 80078da:	d101      	bne.n	80078e0 <_strtol_l.constprop.0+0x8c>
 80078dc:	45a2      	cmp	sl, r4
 80078de:	db19      	blt.n	8007914 <_strtol_l.constprop.0+0xc0>
 80078e0:	fb06 4603 	mla	r6, r6, r3, r4
 80078e4:	f04f 0c01 	mov.w	ip, #1
 80078e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078ec:	e7e8      	b.n	80078c0 <_strtol_l.constprop.0+0x6c>
 80078ee:	2c2b      	cmp	r4, #43	; 0x2b
 80078f0:	bf04      	itt	eq
 80078f2:	782c      	ldrbeq	r4, [r5, #0]
 80078f4:	1cb5      	addeq	r5, r6, #2
 80078f6:	e7ca      	b.n	800788e <_strtol_l.constprop.0+0x3a>
 80078f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80078fc:	f1be 0f19 	cmp.w	lr, #25
 8007900:	d801      	bhi.n	8007906 <_strtol_l.constprop.0+0xb2>
 8007902:	3c37      	subs	r4, #55	; 0x37
 8007904:	e7e2      	b.n	80078cc <_strtol_l.constprop.0+0x78>
 8007906:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800790a:	f1be 0f19 	cmp.w	lr, #25
 800790e:	d804      	bhi.n	800791a <_strtol_l.constprop.0+0xc6>
 8007910:	3c57      	subs	r4, #87	; 0x57
 8007912:	e7db      	b.n	80078cc <_strtol_l.constprop.0+0x78>
 8007914:	f04f 3cff 	mov.w	ip, #4294967295
 8007918:	e7e6      	b.n	80078e8 <_strtol_l.constprop.0+0x94>
 800791a:	f1bc 0f00 	cmp.w	ip, #0
 800791e:	da05      	bge.n	800792c <_strtol_l.constprop.0+0xd8>
 8007920:	2322      	movs	r3, #34	; 0x22
 8007922:	6003      	str	r3, [r0, #0]
 8007924:	4646      	mov	r6, r8
 8007926:	b942      	cbnz	r2, 800793a <_strtol_l.constprop.0+0xe6>
 8007928:	4630      	mov	r0, r6
 800792a:	e79e      	b.n	800786a <_strtol_l.constprop.0+0x16>
 800792c:	b107      	cbz	r7, 8007930 <_strtol_l.constprop.0+0xdc>
 800792e:	4276      	negs	r6, r6
 8007930:	2a00      	cmp	r2, #0
 8007932:	d0f9      	beq.n	8007928 <_strtol_l.constprop.0+0xd4>
 8007934:	f1bc 0f00 	cmp.w	ip, #0
 8007938:	d000      	beq.n	800793c <_strtol_l.constprop.0+0xe8>
 800793a:	1e69      	subs	r1, r5, #1
 800793c:	6011      	str	r1, [r2, #0]
 800793e:	e7f3      	b.n	8007928 <_strtol_l.constprop.0+0xd4>
 8007940:	2430      	movs	r4, #48	; 0x30
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1b1      	bne.n	80078aa <_strtol_l.constprop.0+0x56>
 8007946:	2308      	movs	r3, #8
 8007948:	e7af      	b.n	80078aa <_strtol_l.constprop.0+0x56>
 800794a:	2c30      	cmp	r4, #48	; 0x30
 800794c:	d0a5      	beq.n	800789a <_strtol_l.constprop.0+0x46>
 800794e:	230a      	movs	r3, #10
 8007950:	e7ab      	b.n	80078aa <_strtol_l.constprop.0+0x56>
 8007952:	bf00      	nop
 8007954:	08008e41 	.word	0x08008e41

08007958 <strtol>:
 8007958:	4613      	mov	r3, r2
 800795a:	460a      	mov	r2, r1
 800795c:	4601      	mov	r1, r0
 800795e:	4802      	ldr	r0, [pc, #8]	; (8007968 <strtol+0x10>)
 8007960:	6800      	ldr	r0, [r0, #0]
 8007962:	f7ff bf77 	b.w	8007854 <_strtol_l.constprop.0>
 8007966:	bf00      	nop
 8007968:	200001ac 	.word	0x200001ac

0800796c <__assert_func>:
 800796c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800796e:	4614      	mov	r4, r2
 8007970:	461a      	mov	r2, r3
 8007972:	4b09      	ldr	r3, [pc, #36]	; (8007998 <__assert_func+0x2c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4605      	mov	r5, r0
 8007978:	68d8      	ldr	r0, [r3, #12]
 800797a:	b14c      	cbz	r4, 8007990 <__assert_func+0x24>
 800797c:	4b07      	ldr	r3, [pc, #28]	; (800799c <__assert_func+0x30>)
 800797e:	9100      	str	r1, [sp, #0]
 8007980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007984:	4906      	ldr	r1, [pc, #24]	; (80079a0 <__assert_func+0x34>)
 8007986:	462b      	mov	r3, r5
 8007988:	f000 f80e 	bl	80079a8 <fiprintf>
 800798c:	f000 fe20 	bl	80085d0 <abort>
 8007990:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <__assert_func+0x38>)
 8007992:	461c      	mov	r4, r3
 8007994:	e7f3      	b.n	800797e <__assert_func+0x12>
 8007996:	bf00      	nop
 8007998:	200001ac 	.word	0x200001ac
 800799c:	08008e04 	.word	0x08008e04
 80079a0:	08008e11 	.word	0x08008e11
 80079a4:	08008e3f 	.word	0x08008e3f

080079a8 <fiprintf>:
 80079a8:	b40e      	push	{r1, r2, r3}
 80079aa:	b503      	push	{r0, r1, lr}
 80079ac:	4601      	mov	r1, r0
 80079ae:	ab03      	add	r3, sp, #12
 80079b0:	4805      	ldr	r0, [pc, #20]	; (80079c8 <fiprintf+0x20>)
 80079b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b6:	6800      	ldr	r0, [r0, #0]
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	f000 fa75 	bl	8007ea8 <_vfiprintf_r>
 80079be:	b002      	add	sp, #8
 80079c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079c4:	b003      	add	sp, #12
 80079c6:	4770      	bx	lr
 80079c8:	200001ac 	.word	0x200001ac

080079cc <malloc>:
 80079cc:	4b02      	ldr	r3, [pc, #8]	; (80079d8 <malloc+0xc>)
 80079ce:	4601      	mov	r1, r0
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	f000 b86f 	b.w	8007ab4 <_malloc_r>
 80079d6:	bf00      	nop
 80079d8:	200001ac 	.word	0x200001ac

080079dc <_free_r>:
 80079dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079de:	2900      	cmp	r1, #0
 80079e0:	d044      	beq.n	8007a6c <_free_r+0x90>
 80079e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079e6:	9001      	str	r0, [sp, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f1a1 0404 	sub.w	r4, r1, #4
 80079ee:	bfb8      	it	lt
 80079f0:	18e4      	addlt	r4, r4, r3
 80079f2:	f001 f83d 	bl	8008a70 <__malloc_lock>
 80079f6:	4a1e      	ldr	r2, [pc, #120]	; (8007a70 <_free_r+0x94>)
 80079f8:	9801      	ldr	r0, [sp, #4]
 80079fa:	6813      	ldr	r3, [r2, #0]
 80079fc:	b933      	cbnz	r3, 8007a0c <_free_r+0x30>
 80079fe:	6063      	str	r3, [r4, #4]
 8007a00:	6014      	str	r4, [r2, #0]
 8007a02:	b003      	add	sp, #12
 8007a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a08:	f001 b838 	b.w	8008a7c <__malloc_unlock>
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	d908      	bls.n	8007a22 <_free_r+0x46>
 8007a10:	6825      	ldr	r5, [r4, #0]
 8007a12:	1961      	adds	r1, r4, r5
 8007a14:	428b      	cmp	r3, r1
 8007a16:	bf01      	itttt	eq
 8007a18:	6819      	ldreq	r1, [r3, #0]
 8007a1a:	685b      	ldreq	r3, [r3, #4]
 8007a1c:	1949      	addeq	r1, r1, r5
 8007a1e:	6021      	streq	r1, [r4, #0]
 8007a20:	e7ed      	b.n	80079fe <_free_r+0x22>
 8007a22:	461a      	mov	r2, r3
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	b10b      	cbz	r3, 8007a2c <_free_r+0x50>
 8007a28:	42a3      	cmp	r3, r4
 8007a2a:	d9fa      	bls.n	8007a22 <_free_r+0x46>
 8007a2c:	6811      	ldr	r1, [r2, #0]
 8007a2e:	1855      	adds	r5, r2, r1
 8007a30:	42a5      	cmp	r5, r4
 8007a32:	d10b      	bne.n	8007a4c <_free_r+0x70>
 8007a34:	6824      	ldr	r4, [r4, #0]
 8007a36:	4421      	add	r1, r4
 8007a38:	1854      	adds	r4, r2, r1
 8007a3a:	42a3      	cmp	r3, r4
 8007a3c:	6011      	str	r1, [r2, #0]
 8007a3e:	d1e0      	bne.n	8007a02 <_free_r+0x26>
 8007a40:	681c      	ldr	r4, [r3, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	6053      	str	r3, [r2, #4]
 8007a46:	4421      	add	r1, r4
 8007a48:	6011      	str	r1, [r2, #0]
 8007a4a:	e7da      	b.n	8007a02 <_free_r+0x26>
 8007a4c:	d902      	bls.n	8007a54 <_free_r+0x78>
 8007a4e:	230c      	movs	r3, #12
 8007a50:	6003      	str	r3, [r0, #0]
 8007a52:	e7d6      	b.n	8007a02 <_free_r+0x26>
 8007a54:	6825      	ldr	r5, [r4, #0]
 8007a56:	1961      	adds	r1, r4, r5
 8007a58:	428b      	cmp	r3, r1
 8007a5a:	bf04      	itt	eq
 8007a5c:	6819      	ldreq	r1, [r3, #0]
 8007a5e:	685b      	ldreq	r3, [r3, #4]
 8007a60:	6063      	str	r3, [r4, #4]
 8007a62:	bf04      	itt	eq
 8007a64:	1949      	addeq	r1, r1, r5
 8007a66:	6021      	streq	r1, [r4, #0]
 8007a68:	6054      	str	r4, [r2, #4]
 8007a6a:	e7ca      	b.n	8007a02 <_free_r+0x26>
 8007a6c:	b003      	add	sp, #12
 8007a6e:	bd30      	pop	{r4, r5, pc}
 8007a70:	20000418 	.word	0x20000418

08007a74 <sbrk_aligned>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	4e0e      	ldr	r6, [pc, #56]	; (8007ab0 <sbrk_aligned+0x3c>)
 8007a78:	460c      	mov	r4, r1
 8007a7a:	6831      	ldr	r1, [r6, #0]
 8007a7c:	4605      	mov	r5, r0
 8007a7e:	b911      	cbnz	r1, 8007a86 <sbrk_aligned+0x12>
 8007a80:	f000 fcd6 	bl	8008430 <_sbrk_r>
 8007a84:	6030      	str	r0, [r6, #0]
 8007a86:	4621      	mov	r1, r4
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f000 fcd1 	bl	8008430 <_sbrk_r>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	d00a      	beq.n	8007aa8 <sbrk_aligned+0x34>
 8007a92:	1cc4      	adds	r4, r0, #3
 8007a94:	f024 0403 	bic.w	r4, r4, #3
 8007a98:	42a0      	cmp	r0, r4
 8007a9a:	d007      	beq.n	8007aac <sbrk_aligned+0x38>
 8007a9c:	1a21      	subs	r1, r4, r0
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 fcc6 	bl	8008430 <_sbrk_r>
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d101      	bne.n	8007aac <sbrk_aligned+0x38>
 8007aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8007aac:	4620      	mov	r0, r4
 8007aae:	bd70      	pop	{r4, r5, r6, pc}
 8007ab0:	2000041c 	.word	0x2000041c

08007ab4 <_malloc_r>:
 8007ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab8:	1ccd      	adds	r5, r1, #3
 8007aba:	f025 0503 	bic.w	r5, r5, #3
 8007abe:	3508      	adds	r5, #8
 8007ac0:	2d0c      	cmp	r5, #12
 8007ac2:	bf38      	it	cc
 8007ac4:	250c      	movcc	r5, #12
 8007ac6:	2d00      	cmp	r5, #0
 8007ac8:	4607      	mov	r7, r0
 8007aca:	db01      	blt.n	8007ad0 <_malloc_r+0x1c>
 8007acc:	42a9      	cmp	r1, r5
 8007ace:	d905      	bls.n	8007adc <_malloc_r+0x28>
 8007ad0:	230c      	movs	r3, #12
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	2600      	movs	r6, #0
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007adc:	4e2e      	ldr	r6, [pc, #184]	; (8007b98 <_malloc_r+0xe4>)
 8007ade:	f000 ffc7 	bl	8008a70 <__malloc_lock>
 8007ae2:	6833      	ldr	r3, [r6, #0]
 8007ae4:	461c      	mov	r4, r3
 8007ae6:	bb34      	cbnz	r4, 8007b36 <_malloc_r+0x82>
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4638      	mov	r0, r7
 8007aec:	f7ff ffc2 	bl	8007a74 <sbrk_aligned>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	4604      	mov	r4, r0
 8007af4:	d14d      	bne.n	8007b92 <_malloc_r+0xde>
 8007af6:	6834      	ldr	r4, [r6, #0]
 8007af8:	4626      	mov	r6, r4
 8007afa:	2e00      	cmp	r6, #0
 8007afc:	d140      	bne.n	8007b80 <_malloc_r+0xcc>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	4631      	mov	r1, r6
 8007b02:	4638      	mov	r0, r7
 8007b04:	eb04 0803 	add.w	r8, r4, r3
 8007b08:	f000 fc92 	bl	8008430 <_sbrk_r>
 8007b0c:	4580      	cmp	r8, r0
 8007b0e:	d13a      	bne.n	8007b86 <_malloc_r+0xd2>
 8007b10:	6821      	ldr	r1, [r4, #0]
 8007b12:	3503      	adds	r5, #3
 8007b14:	1a6d      	subs	r5, r5, r1
 8007b16:	f025 0503 	bic.w	r5, r5, #3
 8007b1a:	3508      	adds	r5, #8
 8007b1c:	2d0c      	cmp	r5, #12
 8007b1e:	bf38      	it	cc
 8007b20:	250c      	movcc	r5, #12
 8007b22:	4629      	mov	r1, r5
 8007b24:	4638      	mov	r0, r7
 8007b26:	f7ff ffa5 	bl	8007a74 <sbrk_aligned>
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	d02b      	beq.n	8007b86 <_malloc_r+0xd2>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	442b      	add	r3, r5
 8007b32:	6023      	str	r3, [r4, #0]
 8007b34:	e00e      	b.n	8007b54 <_malloc_r+0xa0>
 8007b36:	6822      	ldr	r2, [r4, #0]
 8007b38:	1b52      	subs	r2, r2, r5
 8007b3a:	d41e      	bmi.n	8007b7a <_malloc_r+0xc6>
 8007b3c:	2a0b      	cmp	r2, #11
 8007b3e:	d916      	bls.n	8007b6e <_malloc_r+0xba>
 8007b40:	1961      	adds	r1, r4, r5
 8007b42:	42a3      	cmp	r3, r4
 8007b44:	6025      	str	r5, [r4, #0]
 8007b46:	bf18      	it	ne
 8007b48:	6059      	strne	r1, [r3, #4]
 8007b4a:	6863      	ldr	r3, [r4, #4]
 8007b4c:	bf08      	it	eq
 8007b4e:	6031      	streq	r1, [r6, #0]
 8007b50:	5162      	str	r2, [r4, r5]
 8007b52:	604b      	str	r3, [r1, #4]
 8007b54:	4638      	mov	r0, r7
 8007b56:	f104 060b 	add.w	r6, r4, #11
 8007b5a:	f000 ff8f 	bl	8008a7c <__malloc_unlock>
 8007b5e:	f026 0607 	bic.w	r6, r6, #7
 8007b62:	1d23      	adds	r3, r4, #4
 8007b64:	1af2      	subs	r2, r6, r3
 8007b66:	d0b6      	beq.n	8007ad6 <_malloc_r+0x22>
 8007b68:	1b9b      	subs	r3, r3, r6
 8007b6a:	50a3      	str	r3, [r4, r2]
 8007b6c:	e7b3      	b.n	8007ad6 <_malloc_r+0x22>
 8007b6e:	6862      	ldr	r2, [r4, #4]
 8007b70:	42a3      	cmp	r3, r4
 8007b72:	bf0c      	ite	eq
 8007b74:	6032      	streq	r2, [r6, #0]
 8007b76:	605a      	strne	r2, [r3, #4]
 8007b78:	e7ec      	b.n	8007b54 <_malloc_r+0xa0>
 8007b7a:	4623      	mov	r3, r4
 8007b7c:	6864      	ldr	r4, [r4, #4]
 8007b7e:	e7b2      	b.n	8007ae6 <_malloc_r+0x32>
 8007b80:	4634      	mov	r4, r6
 8007b82:	6876      	ldr	r6, [r6, #4]
 8007b84:	e7b9      	b.n	8007afa <_malloc_r+0x46>
 8007b86:	230c      	movs	r3, #12
 8007b88:	603b      	str	r3, [r7, #0]
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	f000 ff76 	bl	8008a7c <__malloc_unlock>
 8007b90:	e7a1      	b.n	8007ad6 <_malloc_r+0x22>
 8007b92:	6025      	str	r5, [r4, #0]
 8007b94:	e7de      	b.n	8007b54 <_malloc_r+0xa0>
 8007b96:	bf00      	nop
 8007b98:	20000418 	.word	0x20000418

08007b9c <__ssputs_r>:
 8007b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba0:	688e      	ldr	r6, [r1, #8]
 8007ba2:	429e      	cmp	r6, r3
 8007ba4:	4682      	mov	sl, r0
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	4690      	mov	r8, r2
 8007baa:	461f      	mov	r7, r3
 8007bac:	d838      	bhi.n	8007c20 <__ssputs_r+0x84>
 8007bae:	898a      	ldrh	r2, [r1, #12]
 8007bb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bb4:	d032      	beq.n	8007c1c <__ssputs_r+0x80>
 8007bb6:	6825      	ldr	r5, [r4, #0]
 8007bb8:	6909      	ldr	r1, [r1, #16]
 8007bba:	eba5 0901 	sub.w	r9, r5, r1
 8007bbe:	6965      	ldr	r5, [r4, #20]
 8007bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bc8:	3301      	adds	r3, #1
 8007bca:	444b      	add	r3, r9
 8007bcc:	106d      	asrs	r5, r5, #1
 8007bce:	429d      	cmp	r5, r3
 8007bd0:	bf38      	it	cc
 8007bd2:	461d      	movcc	r5, r3
 8007bd4:	0553      	lsls	r3, r2, #21
 8007bd6:	d531      	bpl.n	8007c3c <__ssputs_r+0xa0>
 8007bd8:	4629      	mov	r1, r5
 8007bda:	f7ff ff6b 	bl	8007ab4 <_malloc_r>
 8007bde:	4606      	mov	r6, r0
 8007be0:	b950      	cbnz	r0, 8007bf8 <__ssputs_r+0x5c>
 8007be2:	230c      	movs	r3, #12
 8007be4:	f8ca 3000 	str.w	r3, [sl]
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bee:	81a3      	strh	r3, [r4, #12]
 8007bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf8:	6921      	ldr	r1, [r4, #16]
 8007bfa:	464a      	mov	r2, r9
 8007bfc:	f000 ff10 	bl	8008a20 <memcpy>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	6126      	str	r6, [r4, #16]
 8007c0e:	6165      	str	r5, [r4, #20]
 8007c10:	444e      	add	r6, r9
 8007c12:	eba5 0509 	sub.w	r5, r5, r9
 8007c16:	6026      	str	r6, [r4, #0]
 8007c18:	60a5      	str	r5, [r4, #8]
 8007c1a:	463e      	mov	r6, r7
 8007c1c:	42be      	cmp	r6, r7
 8007c1e:	d900      	bls.n	8007c22 <__ssputs_r+0x86>
 8007c20:	463e      	mov	r6, r7
 8007c22:	6820      	ldr	r0, [r4, #0]
 8007c24:	4632      	mov	r2, r6
 8007c26:	4641      	mov	r1, r8
 8007c28:	f000 ff08 	bl	8008a3c <memmove>
 8007c2c:	68a3      	ldr	r3, [r4, #8]
 8007c2e:	1b9b      	subs	r3, r3, r6
 8007c30:	60a3      	str	r3, [r4, #8]
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	4433      	add	r3, r6
 8007c36:	6023      	str	r3, [r4, #0]
 8007c38:	2000      	movs	r0, #0
 8007c3a:	e7db      	b.n	8007bf4 <__ssputs_r+0x58>
 8007c3c:	462a      	mov	r2, r5
 8007c3e:	f000 ff23 	bl	8008a88 <_realloc_r>
 8007c42:	4606      	mov	r6, r0
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d1e1      	bne.n	8007c0c <__ssputs_r+0x70>
 8007c48:	6921      	ldr	r1, [r4, #16]
 8007c4a:	4650      	mov	r0, sl
 8007c4c:	f7ff fec6 	bl	80079dc <_free_r>
 8007c50:	e7c7      	b.n	8007be2 <__ssputs_r+0x46>
	...

08007c54 <_svfiprintf_r>:
 8007c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c58:	4698      	mov	r8, r3
 8007c5a:	898b      	ldrh	r3, [r1, #12]
 8007c5c:	061b      	lsls	r3, r3, #24
 8007c5e:	b09d      	sub	sp, #116	; 0x74
 8007c60:	4607      	mov	r7, r0
 8007c62:	460d      	mov	r5, r1
 8007c64:	4614      	mov	r4, r2
 8007c66:	d50e      	bpl.n	8007c86 <_svfiprintf_r+0x32>
 8007c68:	690b      	ldr	r3, [r1, #16]
 8007c6a:	b963      	cbnz	r3, 8007c86 <_svfiprintf_r+0x32>
 8007c6c:	2140      	movs	r1, #64	; 0x40
 8007c6e:	f7ff ff21 	bl	8007ab4 <_malloc_r>
 8007c72:	6028      	str	r0, [r5, #0]
 8007c74:	6128      	str	r0, [r5, #16]
 8007c76:	b920      	cbnz	r0, 8007c82 <_svfiprintf_r+0x2e>
 8007c78:	230c      	movs	r3, #12
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	e0d1      	b.n	8007e26 <_svfiprintf_r+0x1d2>
 8007c82:	2340      	movs	r3, #64	; 0x40
 8007c84:	616b      	str	r3, [r5, #20]
 8007c86:	2300      	movs	r3, #0
 8007c88:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8a:	2320      	movs	r3, #32
 8007c8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c94:	2330      	movs	r3, #48	; 0x30
 8007c96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e40 <_svfiprintf_r+0x1ec>
 8007c9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c9e:	f04f 0901 	mov.w	r9, #1
 8007ca2:	4623      	mov	r3, r4
 8007ca4:	469a      	mov	sl, r3
 8007ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007caa:	b10a      	cbz	r2, 8007cb0 <_svfiprintf_r+0x5c>
 8007cac:	2a25      	cmp	r2, #37	; 0x25
 8007cae:	d1f9      	bne.n	8007ca4 <_svfiprintf_r+0x50>
 8007cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8007cb4:	d00b      	beq.n	8007cce <_svfiprintf_r+0x7a>
 8007cb6:	465b      	mov	r3, fp
 8007cb8:	4622      	mov	r2, r4
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	f7ff ff6d 	bl	8007b9c <__ssputs_r>
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	f000 80aa 	beq.w	8007e1c <_svfiprintf_r+0x1c8>
 8007cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cca:	445a      	add	r2, fp
 8007ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8007cce:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 80a2 	beq.w	8007e1c <_svfiprintf_r+0x1c8>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f04f 32ff 	mov.w	r2, #4294967295
 8007cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ce2:	f10a 0a01 	add.w	sl, sl, #1
 8007ce6:	9304      	str	r3, [sp, #16]
 8007ce8:	9307      	str	r3, [sp, #28]
 8007cea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cee:	931a      	str	r3, [sp, #104]	; 0x68
 8007cf0:	4654      	mov	r4, sl
 8007cf2:	2205      	movs	r2, #5
 8007cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf8:	4851      	ldr	r0, [pc, #324]	; (8007e40 <_svfiprintf_r+0x1ec>)
 8007cfa:	f7f8 faa1 	bl	8000240 <memchr>
 8007cfe:	9a04      	ldr	r2, [sp, #16]
 8007d00:	b9d8      	cbnz	r0, 8007d3a <_svfiprintf_r+0xe6>
 8007d02:	06d0      	lsls	r0, r2, #27
 8007d04:	bf44      	itt	mi
 8007d06:	2320      	movmi	r3, #32
 8007d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d0c:	0711      	lsls	r1, r2, #28
 8007d0e:	bf44      	itt	mi
 8007d10:	232b      	movmi	r3, #43	; 0x2b
 8007d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d16:	f89a 3000 	ldrb.w	r3, [sl]
 8007d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d1c:	d015      	beq.n	8007d4a <_svfiprintf_r+0xf6>
 8007d1e:	9a07      	ldr	r2, [sp, #28]
 8007d20:	4654      	mov	r4, sl
 8007d22:	2000      	movs	r0, #0
 8007d24:	f04f 0c0a 	mov.w	ip, #10
 8007d28:	4621      	mov	r1, r4
 8007d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d2e:	3b30      	subs	r3, #48	; 0x30
 8007d30:	2b09      	cmp	r3, #9
 8007d32:	d94e      	bls.n	8007dd2 <_svfiprintf_r+0x17e>
 8007d34:	b1b0      	cbz	r0, 8007d64 <_svfiprintf_r+0x110>
 8007d36:	9207      	str	r2, [sp, #28]
 8007d38:	e014      	b.n	8007d64 <_svfiprintf_r+0x110>
 8007d3a:	eba0 0308 	sub.w	r3, r0, r8
 8007d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8007d42:	4313      	orrs	r3, r2
 8007d44:	9304      	str	r3, [sp, #16]
 8007d46:	46a2      	mov	sl, r4
 8007d48:	e7d2      	b.n	8007cf0 <_svfiprintf_r+0x9c>
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	1d19      	adds	r1, r3, #4
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	9103      	str	r1, [sp, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bfbb      	ittet	lt
 8007d56:	425b      	neglt	r3, r3
 8007d58:	f042 0202 	orrlt.w	r2, r2, #2
 8007d5c:	9307      	strge	r3, [sp, #28]
 8007d5e:	9307      	strlt	r3, [sp, #28]
 8007d60:	bfb8      	it	lt
 8007d62:	9204      	strlt	r2, [sp, #16]
 8007d64:	7823      	ldrb	r3, [r4, #0]
 8007d66:	2b2e      	cmp	r3, #46	; 0x2e
 8007d68:	d10c      	bne.n	8007d84 <_svfiprintf_r+0x130>
 8007d6a:	7863      	ldrb	r3, [r4, #1]
 8007d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d6e:	d135      	bne.n	8007ddc <_svfiprintf_r+0x188>
 8007d70:	9b03      	ldr	r3, [sp, #12]
 8007d72:	1d1a      	adds	r2, r3, #4
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	9203      	str	r2, [sp, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	bfb8      	it	lt
 8007d7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d80:	3402      	adds	r4, #2
 8007d82:	9305      	str	r3, [sp, #20]
 8007d84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e50 <_svfiprintf_r+0x1fc>
 8007d88:	7821      	ldrb	r1, [r4, #0]
 8007d8a:	2203      	movs	r2, #3
 8007d8c:	4650      	mov	r0, sl
 8007d8e:	f7f8 fa57 	bl	8000240 <memchr>
 8007d92:	b140      	cbz	r0, 8007da6 <_svfiprintf_r+0x152>
 8007d94:	2340      	movs	r3, #64	; 0x40
 8007d96:	eba0 000a 	sub.w	r0, r0, sl
 8007d9a:	fa03 f000 	lsl.w	r0, r3, r0
 8007d9e:	9b04      	ldr	r3, [sp, #16]
 8007da0:	4303      	orrs	r3, r0
 8007da2:	3401      	adds	r4, #1
 8007da4:	9304      	str	r3, [sp, #16]
 8007da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007daa:	4826      	ldr	r0, [pc, #152]	; (8007e44 <_svfiprintf_r+0x1f0>)
 8007dac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007db0:	2206      	movs	r2, #6
 8007db2:	f7f8 fa45 	bl	8000240 <memchr>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d038      	beq.n	8007e2c <_svfiprintf_r+0x1d8>
 8007dba:	4b23      	ldr	r3, [pc, #140]	; (8007e48 <_svfiprintf_r+0x1f4>)
 8007dbc:	bb1b      	cbnz	r3, 8007e06 <_svfiprintf_r+0x1b2>
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	3307      	adds	r3, #7
 8007dc2:	f023 0307 	bic.w	r3, r3, #7
 8007dc6:	3308      	adds	r3, #8
 8007dc8:	9303      	str	r3, [sp, #12]
 8007dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dcc:	4433      	add	r3, r6
 8007dce:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd0:	e767      	b.n	8007ca2 <_svfiprintf_r+0x4e>
 8007dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	2001      	movs	r0, #1
 8007dda:	e7a5      	b.n	8007d28 <_svfiprintf_r+0xd4>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	3401      	adds	r4, #1
 8007de0:	9305      	str	r3, [sp, #20]
 8007de2:	4619      	mov	r1, r3
 8007de4:	f04f 0c0a 	mov.w	ip, #10
 8007de8:	4620      	mov	r0, r4
 8007dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dee:	3a30      	subs	r2, #48	; 0x30
 8007df0:	2a09      	cmp	r2, #9
 8007df2:	d903      	bls.n	8007dfc <_svfiprintf_r+0x1a8>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0c5      	beq.n	8007d84 <_svfiprintf_r+0x130>
 8007df8:	9105      	str	r1, [sp, #20]
 8007dfa:	e7c3      	b.n	8007d84 <_svfiprintf_r+0x130>
 8007dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e00:	4604      	mov	r4, r0
 8007e02:	2301      	movs	r3, #1
 8007e04:	e7f0      	b.n	8007de8 <_svfiprintf_r+0x194>
 8007e06:	ab03      	add	r3, sp, #12
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	462a      	mov	r2, r5
 8007e0c:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <_svfiprintf_r+0x1f8>)
 8007e0e:	a904      	add	r1, sp, #16
 8007e10:	4638      	mov	r0, r7
 8007e12:	f3af 8000 	nop.w
 8007e16:	1c42      	adds	r2, r0, #1
 8007e18:	4606      	mov	r6, r0
 8007e1a:	d1d6      	bne.n	8007dca <_svfiprintf_r+0x176>
 8007e1c:	89ab      	ldrh	r3, [r5, #12]
 8007e1e:	065b      	lsls	r3, r3, #25
 8007e20:	f53f af2c 	bmi.w	8007c7c <_svfiprintf_r+0x28>
 8007e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e26:	b01d      	add	sp, #116	; 0x74
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	ab03      	add	r3, sp, #12
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	462a      	mov	r2, r5
 8007e32:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <_svfiprintf_r+0x1f8>)
 8007e34:	a904      	add	r1, sp, #16
 8007e36:	4638      	mov	r0, r7
 8007e38:	f000 f9d4 	bl	80081e4 <_printf_i>
 8007e3c:	e7eb      	b.n	8007e16 <_svfiprintf_r+0x1c2>
 8007e3e:	bf00      	nop
 8007e40:	08008f41 	.word	0x08008f41
 8007e44:	08008f4b 	.word	0x08008f4b
 8007e48:	00000000 	.word	0x00000000
 8007e4c:	08007b9d 	.word	0x08007b9d
 8007e50:	08008f47 	.word	0x08008f47

08007e54 <__sfputc_r>:
 8007e54:	6893      	ldr	r3, [r2, #8]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	b410      	push	{r4}
 8007e5c:	6093      	str	r3, [r2, #8]
 8007e5e:	da08      	bge.n	8007e72 <__sfputc_r+0x1e>
 8007e60:	6994      	ldr	r4, [r2, #24]
 8007e62:	42a3      	cmp	r3, r4
 8007e64:	db01      	blt.n	8007e6a <__sfputc_r+0x16>
 8007e66:	290a      	cmp	r1, #10
 8007e68:	d103      	bne.n	8007e72 <__sfputc_r+0x1e>
 8007e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e6e:	f000 baef 	b.w	8008450 <__swbuf_r>
 8007e72:	6813      	ldr	r3, [r2, #0]
 8007e74:	1c58      	adds	r0, r3, #1
 8007e76:	6010      	str	r0, [r2, #0]
 8007e78:	7019      	strb	r1, [r3, #0]
 8007e7a:	4608      	mov	r0, r1
 8007e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <__sfputs_r>:
 8007e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e84:	4606      	mov	r6, r0
 8007e86:	460f      	mov	r7, r1
 8007e88:	4614      	mov	r4, r2
 8007e8a:	18d5      	adds	r5, r2, r3
 8007e8c:	42ac      	cmp	r4, r5
 8007e8e:	d101      	bne.n	8007e94 <__sfputs_r+0x12>
 8007e90:	2000      	movs	r0, #0
 8007e92:	e007      	b.n	8007ea4 <__sfputs_r+0x22>
 8007e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e98:	463a      	mov	r2, r7
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7ff ffda 	bl	8007e54 <__sfputc_r>
 8007ea0:	1c43      	adds	r3, r0, #1
 8007ea2:	d1f3      	bne.n	8007e8c <__sfputs_r+0xa>
 8007ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ea8 <_vfiprintf_r>:
 8007ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	460d      	mov	r5, r1
 8007eae:	b09d      	sub	sp, #116	; 0x74
 8007eb0:	4614      	mov	r4, r2
 8007eb2:	4698      	mov	r8, r3
 8007eb4:	4606      	mov	r6, r0
 8007eb6:	b118      	cbz	r0, 8007ec0 <_vfiprintf_r+0x18>
 8007eb8:	6983      	ldr	r3, [r0, #24]
 8007eba:	b90b      	cbnz	r3, 8007ec0 <_vfiprintf_r+0x18>
 8007ebc:	f000 fcaa 	bl	8008814 <__sinit>
 8007ec0:	4b89      	ldr	r3, [pc, #548]	; (80080e8 <_vfiprintf_r+0x240>)
 8007ec2:	429d      	cmp	r5, r3
 8007ec4:	d11b      	bne.n	8007efe <_vfiprintf_r+0x56>
 8007ec6:	6875      	ldr	r5, [r6, #4]
 8007ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eca:	07d9      	lsls	r1, r3, #31
 8007ecc:	d405      	bmi.n	8007eda <_vfiprintf_r+0x32>
 8007ece:	89ab      	ldrh	r3, [r5, #12]
 8007ed0:	059a      	lsls	r2, r3, #22
 8007ed2:	d402      	bmi.n	8007eda <_vfiprintf_r+0x32>
 8007ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ed6:	f000 fd3b 	bl	8008950 <__retarget_lock_acquire_recursive>
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	071b      	lsls	r3, r3, #28
 8007ede:	d501      	bpl.n	8007ee4 <_vfiprintf_r+0x3c>
 8007ee0:	692b      	ldr	r3, [r5, #16]
 8007ee2:	b9eb      	cbnz	r3, 8007f20 <_vfiprintf_r+0x78>
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f000 fb04 	bl	80084f4 <__swsetup_r>
 8007eec:	b1c0      	cbz	r0, 8007f20 <_vfiprintf_r+0x78>
 8007eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ef0:	07dc      	lsls	r4, r3, #31
 8007ef2:	d50e      	bpl.n	8007f12 <_vfiprintf_r+0x6a>
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef8:	b01d      	add	sp, #116	; 0x74
 8007efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efe:	4b7b      	ldr	r3, [pc, #492]	; (80080ec <_vfiprintf_r+0x244>)
 8007f00:	429d      	cmp	r5, r3
 8007f02:	d101      	bne.n	8007f08 <_vfiprintf_r+0x60>
 8007f04:	68b5      	ldr	r5, [r6, #8]
 8007f06:	e7df      	b.n	8007ec8 <_vfiprintf_r+0x20>
 8007f08:	4b79      	ldr	r3, [pc, #484]	; (80080f0 <_vfiprintf_r+0x248>)
 8007f0a:	429d      	cmp	r5, r3
 8007f0c:	bf08      	it	eq
 8007f0e:	68f5      	ldreq	r5, [r6, #12]
 8007f10:	e7da      	b.n	8007ec8 <_vfiprintf_r+0x20>
 8007f12:	89ab      	ldrh	r3, [r5, #12]
 8007f14:	0598      	lsls	r0, r3, #22
 8007f16:	d4ed      	bmi.n	8007ef4 <_vfiprintf_r+0x4c>
 8007f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f1a:	f000 fd1a 	bl	8008952 <__retarget_lock_release_recursive>
 8007f1e:	e7e9      	b.n	8007ef4 <_vfiprintf_r+0x4c>
 8007f20:	2300      	movs	r3, #0
 8007f22:	9309      	str	r3, [sp, #36]	; 0x24
 8007f24:	2320      	movs	r3, #32
 8007f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f2e:	2330      	movs	r3, #48	; 0x30
 8007f30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80080f4 <_vfiprintf_r+0x24c>
 8007f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f38:	f04f 0901 	mov.w	r9, #1
 8007f3c:	4623      	mov	r3, r4
 8007f3e:	469a      	mov	sl, r3
 8007f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f44:	b10a      	cbz	r2, 8007f4a <_vfiprintf_r+0xa2>
 8007f46:	2a25      	cmp	r2, #37	; 0x25
 8007f48:	d1f9      	bne.n	8007f3e <_vfiprintf_r+0x96>
 8007f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007f4e:	d00b      	beq.n	8007f68 <_vfiprintf_r+0xc0>
 8007f50:	465b      	mov	r3, fp
 8007f52:	4622      	mov	r2, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7ff ff93 	bl	8007e82 <__sfputs_r>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	f000 80aa 	beq.w	80080b6 <_vfiprintf_r+0x20e>
 8007f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f64:	445a      	add	r2, fp
 8007f66:	9209      	str	r2, [sp, #36]	; 0x24
 8007f68:	f89a 3000 	ldrb.w	r3, [sl]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 80a2 	beq.w	80080b6 <_vfiprintf_r+0x20e>
 8007f72:	2300      	movs	r3, #0
 8007f74:	f04f 32ff 	mov.w	r2, #4294967295
 8007f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f7c:	f10a 0a01 	add.w	sl, sl, #1
 8007f80:	9304      	str	r3, [sp, #16]
 8007f82:	9307      	str	r3, [sp, #28]
 8007f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f88:	931a      	str	r3, [sp, #104]	; 0x68
 8007f8a:	4654      	mov	r4, sl
 8007f8c:	2205      	movs	r2, #5
 8007f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f92:	4858      	ldr	r0, [pc, #352]	; (80080f4 <_vfiprintf_r+0x24c>)
 8007f94:	f7f8 f954 	bl	8000240 <memchr>
 8007f98:	9a04      	ldr	r2, [sp, #16]
 8007f9a:	b9d8      	cbnz	r0, 8007fd4 <_vfiprintf_r+0x12c>
 8007f9c:	06d1      	lsls	r1, r2, #27
 8007f9e:	bf44      	itt	mi
 8007fa0:	2320      	movmi	r3, #32
 8007fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fa6:	0713      	lsls	r3, r2, #28
 8007fa8:	bf44      	itt	mi
 8007faa:	232b      	movmi	r3, #43	; 0x2b
 8007fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8007fb6:	d015      	beq.n	8007fe4 <_vfiprintf_r+0x13c>
 8007fb8:	9a07      	ldr	r2, [sp, #28]
 8007fba:	4654      	mov	r4, sl
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	f04f 0c0a 	mov.w	ip, #10
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fc8:	3b30      	subs	r3, #48	; 0x30
 8007fca:	2b09      	cmp	r3, #9
 8007fcc:	d94e      	bls.n	800806c <_vfiprintf_r+0x1c4>
 8007fce:	b1b0      	cbz	r0, 8007ffe <_vfiprintf_r+0x156>
 8007fd0:	9207      	str	r2, [sp, #28]
 8007fd2:	e014      	b.n	8007ffe <_vfiprintf_r+0x156>
 8007fd4:	eba0 0308 	sub.w	r3, r0, r8
 8007fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	9304      	str	r3, [sp, #16]
 8007fe0:	46a2      	mov	sl, r4
 8007fe2:	e7d2      	b.n	8007f8a <_vfiprintf_r+0xe2>
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	1d19      	adds	r1, r3, #4
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	9103      	str	r1, [sp, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bfbb      	ittet	lt
 8007ff0:	425b      	neglt	r3, r3
 8007ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ff6:	9307      	strge	r3, [sp, #28]
 8007ff8:	9307      	strlt	r3, [sp, #28]
 8007ffa:	bfb8      	it	lt
 8007ffc:	9204      	strlt	r2, [sp, #16]
 8007ffe:	7823      	ldrb	r3, [r4, #0]
 8008000:	2b2e      	cmp	r3, #46	; 0x2e
 8008002:	d10c      	bne.n	800801e <_vfiprintf_r+0x176>
 8008004:	7863      	ldrb	r3, [r4, #1]
 8008006:	2b2a      	cmp	r3, #42	; 0x2a
 8008008:	d135      	bne.n	8008076 <_vfiprintf_r+0x1ce>
 800800a:	9b03      	ldr	r3, [sp, #12]
 800800c:	1d1a      	adds	r2, r3, #4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	9203      	str	r2, [sp, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	bfb8      	it	lt
 8008016:	f04f 33ff 	movlt.w	r3, #4294967295
 800801a:	3402      	adds	r4, #2
 800801c:	9305      	str	r3, [sp, #20]
 800801e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008104 <_vfiprintf_r+0x25c>
 8008022:	7821      	ldrb	r1, [r4, #0]
 8008024:	2203      	movs	r2, #3
 8008026:	4650      	mov	r0, sl
 8008028:	f7f8 f90a 	bl	8000240 <memchr>
 800802c:	b140      	cbz	r0, 8008040 <_vfiprintf_r+0x198>
 800802e:	2340      	movs	r3, #64	; 0x40
 8008030:	eba0 000a 	sub.w	r0, r0, sl
 8008034:	fa03 f000 	lsl.w	r0, r3, r0
 8008038:	9b04      	ldr	r3, [sp, #16]
 800803a:	4303      	orrs	r3, r0
 800803c:	3401      	adds	r4, #1
 800803e:	9304      	str	r3, [sp, #16]
 8008040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008044:	482c      	ldr	r0, [pc, #176]	; (80080f8 <_vfiprintf_r+0x250>)
 8008046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800804a:	2206      	movs	r2, #6
 800804c:	f7f8 f8f8 	bl	8000240 <memchr>
 8008050:	2800      	cmp	r0, #0
 8008052:	d03f      	beq.n	80080d4 <_vfiprintf_r+0x22c>
 8008054:	4b29      	ldr	r3, [pc, #164]	; (80080fc <_vfiprintf_r+0x254>)
 8008056:	bb1b      	cbnz	r3, 80080a0 <_vfiprintf_r+0x1f8>
 8008058:	9b03      	ldr	r3, [sp, #12]
 800805a:	3307      	adds	r3, #7
 800805c:	f023 0307 	bic.w	r3, r3, #7
 8008060:	3308      	adds	r3, #8
 8008062:	9303      	str	r3, [sp, #12]
 8008064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008066:	443b      	add	r3, r7
 8008068:	9309      	str	r3, [sp, #36]	; 0x24
 800806a:	e767      	b.n	8007f3c <_vfiprintf_r+0x94>
 800806c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008070:	460c      	mov	r4, r1
 8008072:	2001      	movs	r0, #1
 8008074:	e7a5      	b.n	8007fc2 <_vfiprintf_r+0x11a>
 8008076:	2300      	movs	r3, #0
 8008078:	3401      	adds	r4, #1
 800807a:	9305      	str	r3, [sp, #20]
 800807c:	4619      	mov	r1, r3
 800807e:	f04f 0c0a 	mov.w	ip, #10
 8008082:	4620      	mov	r0, r4
 8008084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008088:	3a30      	subs	r2, #48	; 0x30
 800808a:	2a09      	cmp	r2, #9
 800808c:	d903      	bls.n	8008096 <_vfiprintf_r+0x1ee>
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0c5      	beq.n	800801e <_vfiprintf_r+0x176>
 8008092:	9105      	str	r1, [sp, #20]
 8008094:	e7c3      	b.n	800801e <_vfiprintf_r+0x176>
 8008096:	fb0c 2101 	mla	r1, ip, r1, r2
 800809a:	4604      	mov	r4, r0
 800809c:	2301      	movs	r3, #1
 800809e:	e7f0      	b.n	8008082 <_vfiprintf_r+0x1da>
 80080a0:	ab03      	add	r3, sp, #12
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	462a      	mov	r2, r5
 80080a6:	4b16      	ldr	r3, [pc, #88]	; (8008100 <_vfiprintf_r+0x258>)
 80080a8:	a904      	add	r1, sp, #16
 80080aa:	4630      	mov	r0, r6
 80080ac:	f3af 8000 	nop.w
 80080b0:	4607      	mov	r7, r0
 80080b2:	1c78      	adds	r0, r7, #1
 80080b4:	d1d6      	bne.n	8008064 <_vfiprintf_r+0x1bc>
 80080b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080b8:	07d9      	lsls	r1, r3, #31
 80080ba:	d405      	bmi.n	80080c8 <_vfiprintf_r+0x220>
 80080bc:	89ab      	ldrh	r3, [r5, #12]
 80080be:	059a      	lsls	r2, r3, #22
 80080c0:	d402      	bmi.n	80080c8 <_vfiprintf_r+0x220>
 80080c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080c4:	f000 fc45 	bl	8008952 <__retarget_lock_release_recursive>
 80080c8:	89ab      	ldrh	r3, [r5, #12]
 80080ca:	065b      	lsls	r3, r3, #25
 80080cc:	f53f af12 	bmi.w	8007ef4 <_vfiprintf_r+0x4c>
 80080d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080d2:	e711      	b.n	8007ef8 <_vfiprintf_r+0x50>
 80080d4:	ab03      	add	r3, sp, #12
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	462a      	mov	r2, r5
 80080da:	4b09      	ldr	r3, [pc, #36]	; (8008100 <_vfiprintf_r+0x258>)
 80080dc:	a904      	add	r1, sp, #16
 80080de:	4630      	mov	r0, r6
 80080e0:	f000 f880 	bl	80081e4 <_printf_i>
 80080e4:	e7e4      	b.n	80080b0 <_vfiprintf_r+0x208>
 80080e6:	bf00      	nop
 80080e8:	08008f94 	.word	0x08008f94
 80080ec:	08008fb4 	.word	0x08008fb4
 80080f0:	08008f74 	.word	0x08008f74
 80080f4:	08008f41 	.word	0x08008f41
 80080f8:	08008f4b 	.word	0x08008f4b
 80080fc:	00000000 	.word	0x00000000
 8008100:	08007e83 	.word	0x08007e83
 8008104:	08008f47 	.word	0x08008f47

08008108 <_printf_common>:
 8008108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800810c:	4616      	mov	r6, r2
 800810e:	4699      	mov	r9, r3
 8008110:	688a      	ldr	r2, [r1, #8]
 8008112:	690b      	ldr	r3, [r1, #16]
 8008114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008118:	4293      	cmp	r3, r2
 800811a:	bfb8      	it	lt
 800811c:	4613      	movlt	r3, r2
 800811e:	6033      	str	r3, [r6, #0]
 8008120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008124:	4607      	mov	r7, r0
 8008126:	460c      	mov	r4, r1
 8008128:	b10a      	cbz	r2, 800812e <_printf_common+0x26>
 800812a:	3301      	adds	r3, #1
 800812c:	6033      	str	r3, [r6, #0]
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	0699      	lsls	r1, r3, #26
 8008132:	bf42      	ittt	mi
 8008134:	6833      	ldrmi	r3, [r6, #0]
 8008136:	3302      	addmi	r3, #2
 8008138:	6033      	strmi	r3, [r6, #0]
 800813a:	6825      	ldr	r5, [r4, #0]
 800813c:	f015 0506 	ands.w	r5, r5, #6
 8008140:	d106      	bne.n	8008150 <_printf_common+0x48>
 8008142:	f104 0a19 	add.w	sl, r4, #25
 8008146:	68e3      	ldr	r3, [r4, #12]
 8008148:	6832      	ldr	r2, [r6, #0]
 800814a:	1a9b      	subs	r3, r3, r2
 800814c:	42ab      	cmp	r3, r5
 800814e:	dc26      	bgt.n	800819e <_printf_common+0x96>
 8008150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008154:	1e13      	subs	r3, r2, #0
 8008156:	6822      	ldr	r2, [r4, #0]
 8008158:	bf18      	it	ne
 800815a:	2301      	movne	r3, #1
 800815c:	0692      	lsls	r2, r2, #26
 800815e:	d42b      	bmi.n	80081b8 <_printf_common+0xb0>
 8008160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008164:	4649      	mov	r1, r9
 8008166:	4638      	mov	r0, r7
 8008168:	47c0      	blx	r8
 800816a:	3001      	adds	r0, #1
 800816c:	d01e      	beq.n	80081ac <_printf_common+0xa4>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	68e5      	ldr	r5, [r4, #12]
 8008172:	6832      	ldr	r2, [r6, #0]
 8008174:	f003 0306 	and.w	r3, r3, #6
 8008178:	2b04      	cmp	r3, #4
 800817a:	bf08      	it	eq
 800817c:	1aad      	subeq	r5, r5, r2
 800817e:	68a3      	ldr	r3, [r4, #8]
 8008180:	6922      	ldr	r2, [r4, #16]
 8008182:	bf0c      	ite	eq
 8008184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008188:	2500      	movne	r5, #0
 800818a:	4293      	cmp	r3, r2
 800818c:	bfc4      	itt	gt
 800818e:	1a9b      	subgt	r3, r3, r2
 8008190:	18ed      	addgt	r5, r5, r3
 8008192:	2600      	movs	r6, #0
 8008194:	341a      	adds	r4, #26
 8008196:	42b5      	cmp	r5, r6
 8008198:	d11a      	bne.n	80081d0 <_printf_common+0xc8>
 800819a:	2000      	movs	r0, #0
 800819c:	e008      	b.n	80081b0 <_printf_common+0xa8>
 800819e:	2301      	movs	r3, #1
 80081a0:	4652      	mov	r2, sl
 80081a2:	4649      	mov	r1, r9
 80081a4:	4638      	mov	r0, r7
 80081a6:	47c0      	blx	r8
 80081a8:	3001      	adds	r0, #1
 80081aa:	d103      	bne.n	80081b4 <_printf_common+0xac>
 80081ac:	f04f 30ff 	mov.w	r0, #4294967295
 80081b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b4:	3501      	adds	r5, #1
 80081b6:	e7c6      	b.n	8008146 <_printf_common+0x3e>
 80081b8:	18e1      	adds	r1, r4, r3
 80081ba:	1c5a      	adds	r2, r3, #1
 80081bc:	2030      	movs	r0, #48	; 0x30
 80081be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081c2:	4422      	add	r2, r4
 80081c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081cc:	3302      	adds	r3, #2
 80081ce:	e7c7      	b.n	8008160 <_printf_common+0x58>
 80081d0:	2301      	movs	r3, #1
 80081d2:	4622      	mov	r2, r4
 80081d4:	4649      	mov	r1, r9
 80081d6:	4638      	mov	r0, r7
 80081d8:	47c0      	blx	r8
 80081da:	3001      	adds	r0, #1
 80081dc:	d0e6      	beq.n	80081ac <_printf_common+0xa4>
 80081de:	3601      	adds	r6, #1
 80081e0:	e7d9      	b.n	8008196 <_printf_common+0x8e>
	...

080081e4 <_printf_i>:
 80081e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e8:	7e0f      	ldrb	r7, [r1, #24]
 80081ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081ec:	2f78      	cmp	r7, #120	; 0x78
 80081ee:	4691      	mov	r9, r2
 80081f0:	4680      	mov	r8, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	469a      	mov	sl, r3
 80081f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081fa:	d807      	bhi.n	800820c <_printf_i+0x28>
 80081fc:	2f62      	cmp	r7, #98	; 0x62
 80081fe:	d80a      	bhi.n	8008216 <_printf_i+0x32>
 8008200:	2f00      	cmp	r7, #0
 8008202:	f000 80d8 	beq.w	80083b6 <_printf_i+0x1d2>
 8008206:	2f58      	cmp	r7, #88	; 0x58
 8008208:	f000 80a3 	beq.w	8008352 <_printf_i+0x16e>
 800820c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008214:	e03a      	b.n	800828c <_printf_i+0xa8>
 8008216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800821a:	2b15      	cmp	r3, #21
 800821c:	d8f6      	bhi.n	800820c <_printf_i+0x28>
 800821e:	a101      	add	r1, pc, #4	; (adr r1, 8008224 <_printf_i+0x40>)
 8008220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008224:	0800827d 	.word	0x0800827d
 8008228:	08008291 	.word	0x08008291
 800822c:	0800820d 	.word	0x0800820d
 8008230:	0800820d 	.word	0x0800820d
 8008234:	0800820d 	.word	0x0800820d
 8008238:	0800820d 	.word	0x0800820d
 800823c:	08008291 	.word	0x08008291
 8008240:	0800820d 	.word	0x0800820d
 8008244:	0800820d 	.word	0x0800820d
 8008248:	0800820d 	.word	0x0800820d
 800824c:	0800820d 	.word	0x0800820d
 8008250:	0800839d 	.word	0x0800839d
 8008254:	080082c1 	.word	0x080082c1
 8008258:	0800837f 	.word	0x0800837f
 800825c:	0800820d 	.word	0x0800820d
 8008260:	0800820d 	.word	0x0800820d
 8008264:	080083bf 	.word	0x080083bf
 8008268:	0800820d 	.word	0x0800820d
 800826c:	080082c1 	.word	0x080082c1
 8008270:	0800820d 	.word	0x0800820d
 8008274:	0800820d 	.word	0x0800820d
 8008278:	08008387 	.word	0x08008387
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	1d1a      	adds	r2, r3, #4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	602a      	str	r2, [r5, #0]
 8008284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800828c:	2301      	movs	r3, #1
 800828e:	e0a3      	b.n	80083d8 <_printf_i+0x1f4>
 8008290:	6820      	ldr	r0, [r4, #0]
 8008292:	6829      	ldr	r1, [r5, #0]
 8008294:	0606      	lsls	r6, r0, #24
 8008296:	f101 0304 	add.w	r3, r1, #4
 800829a:	d50a      	bpl.n	80082b2 <_printf_i+0xce>
 800829c:	680e      	ldr	r6, [r1, #0]
 800829e:	602b      	str	r3, [r5, #0]
 80082a0:	2e00      	cmp	r6, #0
 80082a2:	da03      	bge.n	80082ac <_printf_i+0xc8>
 80082a4:	232d      	movs	r3, #45	; 0x2d
 80082a6:	4276      	negs	r6, r6
 80082a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082ac:	485e      	ldr	r0, [pc, #376]	; (8008428 <_printf_i+0x244>)
 80082ae:	230a      	movs	r3, #10
 80082b0:	e019      	b.n	80082e6 <_printf_i+0x102>
 80082b2:	680e      	ldr	r6, [r1, #0]
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082ba:	bf18      	it	ne
 80082bc:	b236      	sxthne	r6, r6
 80082be:	e7ef      	b.n	80082a0 <_printf_i+0xbc>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	6820      	ldr	r0, [r4, #0]
 80082c4:	1d19      	adds	r1, r3, #4
 80082c6:	6029      	str	r1, [r5, #0]
 80082c8:	0601      	lsls	r1, r0, #24
 80082ca:	d501      	bpl.n	80082d0 <_printf_i+0xec>
 80082cc:	681e      	ldr	r6, [r3, #0]
 80082ce:	e002      	b.n	80082d6 <_printf_i+0xf2>
 80082d0:	0646      	lsls	r6, r0, #25
 80082d2:	d5fb      	bpl.n	80082cc <_printf_i+0xe8>
 80082d4:	881e      	ldrh	r6, [r3, #0]
 80082d6:	4854      	ldr	r0, [pc, #336]	; (8008428 <_printf_i+0x244>)
 80082d8:	2f6f      	cmp	r7, #111	; 0x6f
 80082da:	bf0c      	ite	eq
 80082dc:	2308      	moveq	r3, #8
 80082de:	230a      	movne	r3, #10
 80082e0:	2100      	movs	r1, #0
 80082e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082e6:	6865      	ldr	r5, [r4, #4]
 80082e8:	60a5      	str	r5, [r4, #8]
 80082ea:	2d00      	cmp	r5, #0
 80082ec:	bfa2      	ittt	ge
 80082ee:	6821      	ldrge	r1, [r4, #0]
 80082f0:	f021 0104 	bicge.w	r1, r1, #4
 80082f4:	6021      	strge	r1, [r4, #0]
 80082f6:	b90e      	cbnz	r6, 80082fc <_printf_i+0x118>
 80082f8:	2d00      	cmp	r5, #0
 80082fa:	d04d      	beq.n	8008398 <_printf_i+0x1b4>
 80082fc:	4615      	mov	r5, r2
 80082fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008302:	fb03 6711 	mls	r7, r3, r1, r6
 8008306:	5dc7      	ldrb	r7, [r0, r7]
 8008308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800830c:	4637      	mov	r7, r6
 800830e:	42bb      	cmp	r3, r7
 8008310:	460e      	mov	r6, r1
 8008312:	d9f4      	bls.n	80082fe <_printf_i+0x11a>
 8008314:	2b08      	cmp	r3, #8
 8008316:	d10b      	bne.n	8008330 <_printf_i+0x14c>
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	07de      	lsls	r6, r3, #31
 800831c:	d508      	bpl.n	8008330 <_printf_i+0x14c>
 800831e:	6923      	ldr	r3, [r4, #16]
 8008320:	6861      	ldr	r1, [r4, #4]
 8008322:	4299      	cmp	r1, r3
 8008324:	bfde      	ittt	le
 8008326:	2330      	movle	r3, #48	; 0x30
 8008328:	f805 3c01 	strble.w	r3, [r5, #-1]
 800832c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008330:	1b52      	subs	r2, r2, r5
 8008332:	6122      	str	r2, [r4, #16]
 8008334:	f8cd a000 	str.w	sl, [sp]
 8008338:	464b      	mov	r3, r9
 800833a:	aa03      	add	r2, sp, #12
 800833c:	4621      	mov	r1, r4
 800833e:	4640      	mov	r0, r8
 8008340:	f7ff fee2 	bl	8008108 <_printf_common>
 8008344:	3001      	adds	r0, #1
 8008346:	d14c      	bne.n	80083e2 <_printf_i+0x1fe>
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	b004      	add	sp, #16
 800834e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008352:	4835      	ldr	r0, [pc, #212]	; (8008428 <_printf_i+0x244>)
 8008354:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008358:	6829      	ldr	r1, [r5, #0]
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008360:	6029      	str	r1, [r5, #0]
 8008362:	061d      	lsls	r5, r3, #24
 8008364:	d514      	bpl.n	8008390 <_printf_i+0x1ac>
 8008366:	07df      	lsls	r7, r3, #31
 8008368:	bf44      	itt	mi
 800836a:	f043 0320 	orrmi.w	r3, r3, #32
 800836e:	6023      	strmi	r3, [r4, #0]
 8008370:	b91e      	cbnz	r6, 800837a <_printf_i+0x196>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	f023 0320 	bic.w	r3, r3, #32
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	2310      	movs	r3, #16
 800837c:	e7b0      	b.n	80082e0 <_printf_i+0xfc>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	f043 0320 	orr.w	r3, r3, #32
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	2378      	movs	r3, #120	; 0x78
 8008388:	4828      	ldr	r0, [pc, #160]	; (800842c <_printf_i+0x248>)
 800838a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800838e:	e7e3      	b.n	8008358 <_printf_i+0x174>
 8008390:	0659      	lsls	r1, r3, #25
 8008392:	bf48      	it	mi
 8008394:	b2b6      	uxthmi	r6, r6
 8008396:	e7e6      	b.n	8008366 <_printf_i+0x182>
 8008398:	4615      	mov	r5, r2
 800839a:	e7bb      	b.n	8008314 <_printf_i+0x130>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	6826      	ldr	r6, [r4, #0]
 80083a0:	6961      	ldr	r1, [r4, #20]
 80083a2:	1d18      	adds	r0, r3, #4
 80083a4:	6028      	str	r0, [r5, #0]
 80083a6:	0635      	lsls	r5, r6, #24
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	d501      	bpl.n	80083b0 <_printf_i+0x1cc>
 80083ac:	6019      	str	r1, [r3, #0]
 80083ae:	e002      	b.n	80083b6 <_printf_i+0x1d2>
 80083b0:	0670      	lsls	r0, r6, #25
 80083b2:	d5fb      	bpl.n	80083ac <_printf_i+0x1c8>
 80083b4:	8019      	strh	r1, [r3, #0]
 80083b6:	2300      	movs	r3, #0
 80083b8:	6123      	str	r3, [r4, #16]
 80083ba:	4615      	mov	r5, r2
 80083bc:	e7ba      	b.n	8008334 <_printf_i+0x150>
 80083be:	682b      	ldr	r3, [r5, #0]
 80083c0:	1d1a      	adds	r2, r3, #4
 80083c2:	602a      	str	r2, [r5, #0]
 80083c4:	681d      	ldr	r5, [r3, #0]
 80083c6:	6862      	ldr	r2, [r4, #4]
 80083c8:	2100      	movs	r1, #0
 80083ca:	4628      	mov	r0, r5
 80083cc:	f7f7 ff38 	bl	8000240 <memchr>
 80083d0:	b108      	cbz	r0, 80083d6 <_printf_i+0x1f2>
 80083d2:	1b40      	subs	r0, r0, r5
 80083d4:	6060      	str	r0, [r4, #4]
 80083d6:	6863      	ldr	r3, [r4, #4]
 80083d8:	6123      	str	r3, [r4, #16]
 80083da:	2300      	movs	r3, #0
 80083dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e0:	e7a8      	b.n	8008334 <_printf_i+0x150>
 80083e2:	6923      	ldr	r3, [r4, #16]
 80083e4:	462a      	mov	r2, r5
 80083e6:	4649      	mov	r1, r9
 80083e8:	4640      	mov	r0, r8
 80083ea:	47d0      	blx	sl
 80083ec:	3001      	adds	r0, #1
 80083ee:	d0ab      	beq.n	8008348 <_printf_i+0x164>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	079b      	lsls	r3, r3, #30
 80083f4:	d413      	bmi.n	800841e <_printf_i+0x23a>
 80083f6:	68e0      	ldr	r0, [r4, #12]
 80083f8:	9b03      	ldr	r3, [sp, #12]
 80083fa:	4298      	cmp	r0, r3
 80083fc:	bfb8      	it	lt
 80083fe:	4618      	movlt	r0, r3
 8008400:	e7a4      	b.n	800834c <_printf_i+0x168>
 8008402:	2301      	movs	r3, #1
 8008404:	4632      	mov	r2, r6
 8008406:	4649      	mov	r1, r9
 8008408:	4640      	mov	r0, r8
 800840a:	47d0      	blx	sl
 800840c:	3001      	adds	r0, #1
 800840e:	d09b      	beq.n	8008348 <_printf_i+0x164>
 8008410:	3501      	adds	r5, #1
 8008412:	68e3      	ldr	r3, [r4, #12]
 8008414:	9903      	ldr	r1, [sp, #12]
 8008416:	1a5b      	subs	r3, r3, r1
 8008418:	42ab      	cmp	r3, r5
 800841a:	dcf2      	bgt.n	8008402 <_printf_i+0x21e>
 800841c:	e7eb      	b.n	80083f6 <_printf_i+0x212>
 800841e:	2500      	movs	r5, #0
 8008420:	f104 0619 	add.w	r6, r4, #25
 8008424:	e7f5      	b.n	8008412 <_printf_i+0x22e>
 8008426:	bf00      	nop
 8008428:	08008f52 	.word	0x08008f52
 800842c:	08008f63 	.word	0x08008f63

08008430 <_sbrk_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4d06      	ldr	r5, [pc, #24]	; (800844c <_sbrk_r+0x1c>)
 8008434:	2300      	movs	r3, #0
 8008436:	4604      	mov	r4, r0
 8008438:	4608      	mov	r0, r1
 800843a:	602b      	str	r3, [r5, #0]
 800843c:	f7f8 ff9e 	bl	800137c <_sbrk>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_sbrk_r+0x1a>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_sbrk_r+0x1a>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	20000424 	.word	0x20000424

08008450 <__swbuf_r>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	460e      	mov	r6, r1
 8008454:	4614      	mov	r4, r2
 8008456:	4605      	mov	r5, r0
 8008458:	b118      	cbz	r0, 8008462 <__swbuf_r+0x12>
 800845a:	6983      	ldr	r3, [r0, #24]
 800845c:	b90b      	cbnz	r3, 8008462 <__swbuf_r+0x12>
 800845e:	f000 f9d9 	bl	8008814 <__sinit>
 8008462:	4b21      	ldr	r3, [pc, #132]	; (80084e8 <__swbuf_r+0x98>)
 8008464:	429c      	cmp	r4, r3
 8008466:	d12b      	bne.n	80084c0 <__swbuf_r+0x70>
 8008468:	686c      	ldr	r4, [r5, #4]
 800846a:	69a3      	ldr	r3, [r4, #24]
 800846c:	60a3      	str	r3, [r4, #8]
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	071a      	lsls	r2, r3, #28
 8008472:	d52f      	bpl.n	80084d4 <__swbuf_r+0x84>
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	b36b      	cbz	r3, 80084d4 <__swbuf_r+0x84>
 8008478:	6923      	ldr	r3, [r4, #16]
 800847a:	6820      	ldr	r0, [r4, #0]
 800847c:	1ac0      	subs	r0, r0, r3
 800847e:	6963      	ldr	r3, [r4, #20]
 8008480:	b2f6      	uxtb	r6, r6
 8008482:	4283      	cmp	r3, r0
 8008484:	4637      	mov	r7, r6
 8008486:	dc04      	bgt.n	8008492 <__swbuf_r+0x42>
 8008488:	4621      	mov	r1, r4
 800848a:	4628      	mov	r0, r5
 800848c:	f000 f92e 	bl	80086ec <_fflush_r>
 8008490:	bb30      	cbnz	r0, 80084e0 <__swbuf_r+0x90>
 8008492:	68a3      	ldr	r3, [r4, #8]
 8008494:	3b01      	subs	r3, #1
 8008496:	60a3      	str	r3, [r4, #8]
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	6022      	str	r2, [r4, #0]
 800849e:	701e      	strb	r6, [r3, #0]
 80084a0:	6963      	ldr	r3, [r4, #20]
 80084a2:	3001      	adds	r0, #1
 80084a4:	4283      	cmp	r3, r0
 80084a6:	d004      	beq.n	80084b2 <__swbuf_r+0x62>
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	07db      	lsls	r3, r3, #31
 80084ac:	d506      	bpl.n	80084bc <__swbuf_r+0x6c>
 80084ae:	2e0a      	cmp	r6, #10
 80084b0:	d104      	bne.n	80084bc <__swbuf_r+0x6c>
 80084b2:	4621      	mov	r1, r4
 80084b4:	4628      	mov	r0, r5
 80084b6:	f000 f919 	bl	80086ec <_fflush_r>
 80084ba:	b988      	cbnz	r0, 80084e0 <__swbuf_r+0x90>
 80084bc:	4638      	mov	r0, r7
 80084be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c0:	4b0a      	ldr	r3, [pc, #40]	; (80084ec <__swbuf_r+0x9c>)
 80084c2:	429c      	cmp	r4, r3
 80084c4:	d101      	bne.n	80084ca <__swbuf_r+0x7a>
 80084c6:	68ac      	ldr	r4, [r5, #8]
 80084c8:	e7cf      	b.n	800846a <__swbuf_r+0x1a>
 80084ca:	4b09      	ldr	r3, [pc, #36]	; (80084f0 <__swbuf_r+0xa0>)
 80084cc:	429c      	cmp	r4, r3
 80084ce:	bf08      	it	eq
 80084d0:	68ec      	ldreq	r4, [r5, #12]
 80084d2:	e7ca      	b.n	800846a <__swbuf_r+0x1a>
 80084d4:	4621      	mov	r1, r4
 80084d6:	4628      	mov	r0, r5
 80084d8:	f000 f80c 	bl	80084f4 <__swsetup_r>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d0cb      	beq.n	8008478 <__swbuf_r+0x28>
 80084e0:	f04f 37ff 	mov.w	r7, #4294967295
 80084e4:	e7ea      	b.n	80084bc <__swbuf_r+0x6c>
 80084e6:	bf00      	nop
 80084e8:	08008f94 	.word	0x08008f94
 80084ec:	08008fb4 	.word	0x08008fb4
 80084f0:	08008f74 	.word	0x08008f74

080084f4 <__swsetup_r>:
 80084f4:	4b32      	ldr	r3, [pc, #200]	; (80085c0 <__swsetup_r+0xcc>)
 80084f6:	b570      	push	{r4, r5, r6, lr}
 80084f8:	681d      	ldr	r5, [r3, #0]
 80084fa:	4606      	mov	r6, r0
 80084fc:	460c      	mov	r4, r1
 80084fe:	b125      	cbz	r5, 800850a <__swsetup_r+0x16>
 8008500:	69ab      	ldr	r3, [r5, #24]
 8008502:	b913      	cbnz	r3, 800850a <__swsetup_r+0x16>
 8008504:	4628      	mov	r0, r5
 8008506:	f000 f985 	bl	8008814 <__sinit>
 800850a:	4b2e      	ldr	r3, [pc, #184]	; (80085c4 <__swsetup_r+0xd0>)
 800850c:	429c      	cmp	r4, r3
 800850e:	d10f      	bne.n	8008530 <__swsetup_r+0x3c>
 8008510:	686c      	ldr	r4, [r5, #4]
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008518:	0719      	lsls	r1, r3, #28
 800851a:	d42c      	bmi.n	8008576 <__swsetup_r+0x82>
 800851c:	06dd      	lsls	r5, r3, #27
 800851e:	d411      	bmi.n	8008544 <__swsetup_r+0x50>
 8008520:	2309      	movs	r3, #9
 8008522:	6033      	str	r3, [r6, #0]
 8008524:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	f04f 30ff 	mov.w	r0, #4294967295
 800852e:	e03e      	b.n	80085ae <__swsetup_r+0xba>
 8008530:	4b25      	ldr	r3, [pc, #148]	; (80085c8 <__swsetup_r+0xd4>)
 8008532:	429c      	cmp	r4, r3
 8008534:	d101      	bne.n	800853a <__swsetup_r+0x46>
 8008536:	68ac      	ldr	r4, [r5, #8]
 8008538:	e7eb      	b.n	8008512 <__swsetup_r+0x1e>
 800853a:	4b24      	ldr	r3, [pc, #144]	; (80085cc <__swsetup_r+0xd8>)
 800853c:	429c      	cmp	r4, r3
 800853e:	bf08      	it	eq
 8008540:	68ec      	ldreq	r4, [r5, #12]
 8008542:	e7e6      	b.n	8008512 <__swsetup_r+0x1e>
 8008544:	0758      	lsls	r0, r3, #29
 8008546:	d512      	bpl.n	800856e <__swsetup_r+0x7a>
 8008548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800854a:	b141      	cbz	r1, 800855e <__swsetup_r+0x6a>
 800854c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008550:	4299      	cmp	r1, r3
 8008552:	d002      	beq.n	800855a <__swsetup_r+0x66>
 8008554:	4630      	mov	r0, r6
 8008556:	f7ff fa41 	bl	80079dc <_free_r>
 800855a:	2300      	movs	r3, #0
 800855c:	6363      	str	r3, [r4, #52]	; 0x34
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	2300      	movs	r3, #0
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	6923      	ldr	r3, [r4, #16]
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	f043 0308 	orr.w	r3, r3, #8
 8008574:	81a3      	strh	r3, [r4, #12]
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	b94b      	cbnz	r3, 800858e <__swsetup_r+0x9a>
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008584:	d003      	beq.n	800858e <__swsetup_r+0x9a>
 8008586:	4621      	mov	r1, r4
 8008588:	4630      	mov	r0, r6
 800858a:	f000 fa09 	bl	80089a0 <__smakebuf_r>
 800858e:	89a0      	ldrh	r0, [r4, #12]
 8008590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008594:	f010 0301 	ands.w	r3, r0, #1
 8008598:	d00a      	beq.n	80085b0 <__swsetup_r+0xbc>
 800859a:	2300      	movs	r3, #0
 800859c:	60a3      	str	r3, [r4, #8]
 800859e:	6963      	ldr	r3, [r4, #20]
 80085a0:	425b      	negs	r3, r3
 80085a2:	61a3      	str	r3, [r4, #24]
 80085a4:	6923      	ldr	r3, [r4, #16]
 80085a6:	b943      	cbnz	r3, 80085ba <__swsetup_r+0xc6>
 80085a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085ac:	d1ba      	bne.n	8008524 <__swsetup_r+0x30>
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	0781      	lsls	r1, r0, #30
 80085b2:	bf58      	it	pl
 80085b4:	6963      	ldrpl	r3, [r4, #20]
 80085b6:	60a3      	str	r3, [r4, #8]
 80085b8:	e7f4      	b.n	80085a4 <__swsetup_r+0xb0>
 80085ba:	2000      	movs	r0, #0
 80085bc:	e7f7      	b.n	80085ae <__swsetup_r+0xba>
 80085be:	bf00      	nop
 80085c0:	200001ac 	.word	0x200001ac
 80085c4:	08008f94 	.word	0x08008f94
 80085c8:	08008fb4 	.word	0x08008fb4
 80085cc:	08008f74 	.word	0x08008f74

080085d0 <abort>:
 80085d0:	b508      	push	{r3, lr}
 80085d2:	2006      	movs	r0, #6
 80085d4:	f000 fab0 	bl	8008b38 <raise>
 80085d8:	2001      	movs	r0, #1
 80085da:	f7f8 fe57 	bl	800128c <_exit>
	...

080085e0 <__sflush_r>:
 80085e0:	898a      	ldrh	r2, [r1, #12]
 80085e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e6:	4605      	mov	r5, r0
 80085e8:	0710      	lsls	r0, r2, #28
 80085ea:	460c      	mov	r4, r1
 80085ec:	d458      	bmi.n	80086a0 <__sflush_r+0xc0>
 80085ee:	684b      	ldr	r3, [r1, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	dc05      	bgt.n	8008600 <__sflush_r+0x20>
 80085f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dc02      	bgt.n	8008600 <__sflush_r+0x20>
 80085fa:	2000      	movs	r0, #0
 80085fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008602:	2e00      	cmp	r6, #0
 8008604:	d0f9      	beq.n	80085fa <__sflush_r+0x1a>
 8008606:	2300      	movs	r3, #0
 8008608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800860c:	682f      	ldr	r7, [r5, #0]
 800860e:	602b      	str	r3, [r5, #0]
 8008610:	d032      	beq.n	8008678 <__sflush_r+0x98>
 8008612:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	075a      	lsls	r2, r3, #29
 8008618:	d505      	bpl.n	8008626 <__sflush_r+0x46>
 800861a:	6863      	ldr	r3, [r4, #4]
 800861c:	1ac0      	subs	r0, r0, r3
 800861e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008620:	b10b      	cbz	r3, 8008626 <__sflush_r+0x46>
 8008622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008624:	1ac0      	subs	r0, r0, r3
 8008626:	2300      	movs	r3, #0
 8008628:	4602      	mov	r2, r0
 800862a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800862c:	6a21      	ldr	r1, [r4, #32]
 800862e:	4628      	mov	r0, r5
 8008630:	47b0      	blx	r6
 8008632:	1c43      	adds	r3, r0, #1
 8008634:	89a3      	ldrh	r3, [r4, #12]
 8008636:	d106      	bne.n	8008646 <__sflush_r+0x66>
 8008638:	6829      	ldr	r1, [r5, #0]
 800863a:	291d      	cmp	r1, #29
 800863c:	d82c      	bhi.n	8008698 <__sflush_r+0xb8>
 800863e:	4a2a      	ldr	r2, [pc, #168]	; (80086e8 <__sflush_r+0x108>)
 8008640:	40ca      	lsrs	r2, r1
 8008642:	07d6      	lsls	r6, r2, #31
 8008644:	d528      	bpl.n	8008698 <__sflush_r+0xb8>
 8008646:	2200      	movs	r2, #0
 8008648:	6062      	str	r2, [r4, #4]
 800864a:	04d9      	lsls	r1, r3, #19
 800864c:	6922      	ldr	r2, [r4, #16]
 800864e:	6022      	str	r2, [r4, #0]
 8008650:	d504      	bpl.n	800865c <__sflush_r+0x7c>
 8008652:	1c42      	adds	r2, r0, #1
 8008654:	d101      	bne.n	800865a <__sflush_r+0x7a>
 8008656:	682b      	ldr	r3, [r5, #0]
 8008658:	b903      	cbnz	r3, 800865c <__sflush_r+0x7c>
 800865a:	6560      	str	r0, [r4, #84]	; 0x54
 800865c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800865e:	602f      	str	r7, [r5, #0]
 8008660:	2900      	cmp	r1, #0
 8008662:	d0ca      	beq.n	80085fa <__sflush_r+0x1a>
 8008664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008668:	4299      	cmp	r1, r3
 800866a:	d002      	beq.n	8008672 <__sflush_r+0x92>
 800866c:	4628      	mov	r0, r5
 800866e:	f7ff f9b5 	bl	80079dc <_free_r>
 8008672:	2000      	movs	r0, #0
 8008674:	6360      	str	r0, [r4, #52]	; 0x34
 8008676:	e7c1      	b.n	80085fc <__sflush_r+0x1c>
 8008678:	6a21      	ldr	r1, [r4, #32]
 800867a:	2301      	movs	r3, #1
 800867c:	4628      	mov	r0, r5
 800867e:	47b0      	blx	r6
 8008680:	1c41      	adds	r1, r0, #1
 8008682:	d1c7      	bne.n	8008614 <__sflush_r+0x34>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0c4      	beq.n	8008614 <__sflush_r+0x34>
 800868a:	2b1d      	cmp	r3, #29
 800868c:	d001      	beq.n	8008692 <__sflush_r+0xb2>
 800868e:	2b16      	cmp	r3, #22
 8008690:	d101      	bne.n	8008696 <__sflush_r+0xb6>
 8008692:	602f      	str	r7, [r5, #0]
 8008694:	e7b1      	b.n	80085fa <__sflush_r+0x1a>
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869c:	81a3      	strh	r3, [r4, #12]
 800869e:	e7ad      	b.n	80085fc <__sflush_r+0x1c>
 80086a0:	690f      	ldr	r7, [r1, #16]
 80086a2:	2f00      	cmp	r7, #0
 80086a4:	d0a9      	beq.n	80085fa <__sflush_r+0x1a>
 80086a6:	0793      	lsls	r3, r2, #30
 80086a8:	680e      	ldr	r6, [r1, #0]
 80086aa:	bf08      	it	eq
 80086ac:	694b      	ldreq	r3, [r1, #20]
 80086ae:	600f      	str	r7, [r1, #0]
 80086b0:	bf18      	it	ne
 80086b2:	2300      	movne	r3, #0
 80086b4:	eba6 0807 	sub.w	r8, r6, r7
 80086b8:	608b      	str	r3, [r1, #8]
 80086ba:	f1b8 0f00 	cmp.w	r8, #0
 80086be:	dd9c      	ble.n	80085fa <__sflush_r+0x1a>
 80086c0:	6a21      	ldr	r1, [r4, #32]
 80086c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086c4:	4643      	mov	r3, r8
 80086c6:	463a      	mov	r2, r7
 80086c8:	4628      	mov	r0, r5
 80086ca:	47b0      	blx	r6
 80086cc:	2800      	cmp	r0, #0
 80086ce:	dc06      	bgt.n	80086de <__sflush_r+0xfe>
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d6:	81a3      	strh	r3, [r4, #12]
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	e78e      	b.n	80085fc <__sflush_r+0x1c>
 80086de:	4407      	add	r7, r0
 80086e0:	eba8 0800 	sub.w	r8, r8, r0
 80086e4:	e7e9      	b.n	80086ba <__sflush_r+0xda>
 80086e6:	bf00      	nop
 80086e8:	20400001 	.word	0x20400001

080086ec <_fflush_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	690b      	ldr	r3, [r1, #16]
 80086f0:	4605      	mov	r5, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	b913      	cbnz	r3, 80086fc <_fflush_r+0x10>
 80086f6:	2500      	movs	r5, #0
 80086f8:	4628      	mov	r0, r5
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	b118      	cbz	r0, 8008706 <_fflush_r+0x1a>
 80086fe:	6983      	ldr	r3, [r0, #24]
 8008700:	b90b      	cbnz	r3, 8008706 <_fflush_r+0x1a>
 8008702:	f000 f887 	bl	8008814 <__sinit>
 8008706:	4b14      	ldr	r3, [pc, #80]	; (8008758 <_fflush_r+0x6c>)
 8008708:	429c      	cmp	r4, r3
 800870a:	d11b      	bne.n	8008744 <_fflush_r+0x58>
 800870c:	686c      	ldr	r4, [r5, #4]
 800870e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0ef      	beq.n	80086f6 <_fflush_r+0xa>
 8008716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008718:	07d0      	lsls	r0, r2, #31
 800871a:	d404      	bmi.n	8008726 <_fflush_r+0x3a>
 800871c:	0599      	lsls	r1, r3, #22
 800871e:	d402      	bmi.n	8008726 <_fflush_r+0x3a>
 8008720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008722:	f000 f915 	bl	8008950 <__retarget_lock_acquire_recursive>
 8008726:	4628      	mov	r0, r5
 8008728:	4621      	mov	r1, r4
 800872a:	f7ff ff59 	bl	80085e0 <__sflush_r>
 800872e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008730:	07da      	lsls	r2, r3, #31
 8008732:	4605      	mov	r5, r0
 8008734:	d4e0      	bmi.n	80086f8 <_fflush_r+0xc>
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	059b      	lsls	r3, r3, #22
 800873a:	d4dd      	bmi.n	80086f8 <_fflush_r+0xc>
 800873c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800873e:	f000 f908 	bl	8008952 <__retarget_lock_release_recursive>
 8008742:	e7d9      	b.n	80086f8 <_fflush_r+0xc>
 8008744:	4b05      	ldr	r3, [pc, #20]	; (800875c <_fflush_r+0x70>)
 8008746:	429c      	cmp	r4, r3
 8008748:	d101      	bne.n	800874e <_fflush_r+0x62>
 800874a:	68ac      	ldr	r4, [r5, #8]
 800874c:	e7df      	b.n	800870e <_fflush_r+0x22>
 800874e:	4b04      	ldr	r3, [pc, #16]	; (8008760 <_fflush_r+0x74>)
 8008750:	429c      	cmp	r4, r3
 8008752:	bf08      	it	eq
 8008754:	68ec      	ldreq	r4, [r5, #12]
 8008756:	e7da      	b.n	800870e <_fflush_r+0x22>
 8008758:	08008f94 	.word	0x08008f94
 800875c:	08008fb4 	.word	0x08008fb4
 8008760:	08008f74 	.word	0x08008f74

08008764 <std>:
 8008764:	2300      	movs	r3, #0
 8008766:	b510      	push	{r4, lr}
 8008768:	4604      	mov	r4, r0
 800876a:	e9c0 3300 	strd	r3, r3, [r0]
 800876e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008772:	6083      	str	r3, [r0, #8]
 8008774:	8181      	strh	r1, [r0, #12]
 8008776:	6643      	str	r3, [r0, #100]	; 0x64
 8008778:	81c2      	strh	r2, [r0, #14]
 800877a:	6183      	str	r3, [r0, #24]
 800877c:	4619      	mov	r1, r3
 800877e:	2208      	movs	r2, #8
 8008780:	305c      	adds	r0, #92	; 0x5c
 8008782:	f7fe ffe3 	bl	800774c <memset>
 8008786:	4b05      	ldr	r3, [pc, #20]	; (800879c <std+0x38>)
 8008788:	6263      	str	r3, [r4, #36]	; 0x24
 800878a:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <std+0x3c>)
 800878c:	62a3      	str	r3, [r4, #40]	; 0x28
 800878e:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <std+0x40>)
 8008790:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008792:	4b05      	ldr	r3, [pc, #20]	; (80087a8 <std+0x44>)
 8008794:	6224      	str	r4, [r4, #32]
 8008796:	6323      	str	r3, [r4, #48]	; 0x30
 8008798:	bd10      	pop	{r4, pc}
 800879a:	bf00      	nop
 800879c:	08008b71 	.word	0x08008b71
 80087a0:	08008b93 	.word	0x08008b93
 80087a4:	08008bcb 	.word	0x08008bcb
 80087a8:	08008bef 	.word	0x08008bef

080087ac <_cleanup_r>:
 80087ac:	4901      	ldr	r1, [pc, #4]	; (80087b4 <_cleanup_r+0x8>)
 80087ae:	f000 b8af 	b.w	8008910 <_fwalk_reent>
 80087b2:	bf00      	nop
 80087b4:	080086ed 	.word	0x080086ed

080087b8 <__sfmoreglue>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	2268      	movs	r2, #104	; 0x68
 80087bc:	1e4d      	subs	r5, r1, #1
 80087be:	4355      	muls	r5, r2
 80087c0:	460e      	mov	r6, r1
 80087c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087c6:	f7ff f975 	bl	8007ab4 <_malloc_r>
 80087ca:	4604      	mov	r4, r0
 80087cc:	b140      	cbz	r0, 80087e0 <__sfmoreglue+0x28>
 80087ce:	2100      	movs	r1, #0
 80087d0:	e9c0 1600 	strd	r1, r6, [r0]
 80087d4:	300c      	adds	r0, #12
 80087d6:	60a0      	str	r0, [r4, #8]
 80087d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087dc:	f7fe ffb6 	bl	800774c <memset>
 80087e0:	4620      	mov	r0, r4
 80087e2:	bd70      	pop	{r4, r5, r6, pc}

080087e4 <__sfp_lock_acquire>:
 80087e4:	4801      	ldr	r0, [pc, #4]	; (80087ec <__sfp_lock_acquire+0x8>)
 80087e6:	f000 b8b3 	b.w	8008950 <__retarget_lock_acquire_recursive>
 80087ea:	bf00      	nop
 80087ec:	20000421 	.word	0x20000421

080087f0 <__sfp_lock_release>:
 80087f0:	4801      	ldr	r0, [pc, #4]	; (80087f8 <__sfp_lock_release+0x8>)
 80087f2:	f000 b8ae 	b.w	8008952 <__retarget_lock_release_recursive>
 80087f6:	bf00      	nop
 80087f8:	20000421 	.word	0x20000421

080087fc <__sinit_lock_acquire>:
 80087fc:	4801      	ldr	r0, [pc, #4]	; (8008804 <__sinit_lock_acquire+0x8>)
 80087fe:	f000 b8a7 	b.w	8008950 <__retarget_lock_acquire_recursive>
 8008802:	bf00      	nop
 8008804:	20000422 	.word	0x20000422

08008808 <__sinit_lock_release>:
 8008808:	4801      	ldr	r0, [pc, #4]	; (8008810 <__sinit_lock_release+0x8>)
 800880a:	f000 b8a2 	b.w	8008952 <__retarget_lock_release_recursive>
 800880e:	bf00      	nop
 8008810:	20000422 	.word	0x20000422

08008814 <__sinit>:
 8008814:	b510      	push	{r4, lr}
 8008816:	4604      	mov	r4, r0
 8008818:	f7ff fff0 	bl	80087fc <__sinit_lock_acquire>
 800881c:	69a3      	ldr	r3, [r4, #24]
 800881e:	b11b      	cbz	r3, 8008828 <__sinit+0x14>
 8008820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008824:	f7ff bff0 	b.w	8008808 <__sinit_lock_release>
 8008828:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800882c:	6523      	str	r3, [r4, #80]	; 0x50
 800882e:	4b13      	ldr	r3, [pc, #76]	; (800887c <__sinit+0x68>)
 8008830:	4a13      	ldr	r2, [pc, #76]	; (8008880 <__sinit+0x6c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	62a2      	str	r2, [r4, #40]	; 0x28
 8008836:	42a3      	cmp	r3, r4
 8008838:	bf04      	itt	eq
 800883a:	2301      	moveq	r3, #1
 800883c:	61a3      	streq	r3, [r4, #24]
 800883e:	4620      	mov	r0, r4
 8008840:	f000 f820 	bl	8008884 <__sfp>
 8008844:	6060      	str	r0, [r4, #4]
 8008846:	4620      	mov	r0, r4
 8008848:	f000 f81c 	bl	8008884 <__sfp>
 800884c:	60a0      	str	r0, [r4, #8]
 800884e:	4620      	mov	r0, r4
 8008850:	f000 f818 	bl	8008884 <__sfp>
 8008854:	2200      	movs	r2, #0
 8008856:	60e0      	str	r0, [r4, #12]
 8008858:	2104      	movs	r1, #4
 800885a:	6860      	ldr	r0, [r4, #4]
 800885c:	f7ff ff82 	bl	8008764 <std>
 8008860:	68a0      	ldr	r0, [r4, #8]
 8008862:	2201      	movs	r2, #1
 8008864:	2109      	movs	r1, #9
 8008866:	f7ff ff7d 	bl	8008764 <std>
 800886a:	68e0      	ldr	r0, [r4, #12]
 800886c:	2202      	movs	r2, #2
 800886e:	2112      	movs	r1, #18
 8008870:	f7ff ff78 	bl	8008764 <std>
 8008874:	2301      	movs	r3, #1
 8008876:	61a3      	str	r3, [r4, #24]
 8008878:	e7d2      	b.n	8008820 <__sinit+0xc>
 800887a:	bf00      	nop
 800887c:	08008d8c 	.word	0x08008d8c
 8008880:	080087ad 	.word	0x080087ad

08008884 <__sfp>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	4607      	mov	r7, r0
 8008888:	f7ff ffac 	bl	80087e4 <__sfp_lock_acquire>
 800888c:	4b1e      	ldr	r3, [pc, #120]	; (8008908 <__sfp+0x84>)
 800888e:	681e      	ldr	r6, [r3, #0]
 8008890:	69b3      	ldr	r3, [r6, #24]
 8008892:	b913      	cbnz	r3, 800889a <__sfp+0x16>
 8008894:	4630      	mov	r0, r6
 8008896:	f7ff ffbd 	bl	8008814 <__sinit>
 800889a:	3648      	adds	r6, #72	; 0x48
 800889c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	d503      	bpl.n	80088ac <__sfp+0x28>
 80088a4:	6833      	ldr	r3, [r6, #0]
 80088a6:	b30b      	cbz	r3, 80088ec <__sfp+0x68>
 80088a8:	6836      	ldr	r6, [r6, #0]
 80088aa:	e7f7      	b.n	800889c <__sfp+0x18>
 80088ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088b0:	b9d5      	cbnz	r5, 80088e8 <__sfp+0x64>
 80088b2:	4b16      	ldr	r3, [pc, #88]	; (800890c <__sfp+0x88>)
 80088b4:	60e3      	str	r3, [r4, #12]
 80088b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088ba:	6665      	str	r5, [r4, #100]	; 0x64
 80088bc:	f000 f847 	bl	800894e <__retarget_lock_init_recursive>
 80088c0:	f7ff ff96 	bl	80087f0 <__sfp_lock_release>
 80088c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088cc:	6025      	str	r5, [r4, #0]
 80088ce:	61a5      	str	r5, [r4, #24]
 80088d0:	2208      	movs	r2, #8
 80088d2:	4629      	mov	r1, r5
 80088d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088d8:	f7fe ff38 	bl	800774c <memset>
 80088dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088e4:	4620      	mov	r0, r4
 80088e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e8:	3468      	adds	r4, #104	; 0x68
 80088ea:	e7d9      	b.n	80088a0 <__sfp+0x1c>
 80088ec:	2104      	movs	r1, #4
 80088ee:	4638      	mov	r0, r7
 80088f0:	f7ff ff62 	bl	80087b8 <__sfmoreglue>
 80088f4:	4604      	mov	r4, r0
 80088f6:	6030      	str	r0, [r6, #0]
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d1d5      	bne.n	80088a8 <__sfp+0x24>
 80088fc:	f7ff ff78 	bl	80087f0 <__sfp_lock_release>
 8008900:	230c      	movs	r3, #12
 8008902:	603b      	str	r3, [r7, #0]
 8008904:	e7ee      	b.n	80088e4 <__sfp+0x60>
 8008906:	bf00      	nop
 8008908:	08008d8c 	.word	0x08008d8c
 800890c:	ffff0001 	.word	0xffff0001

08008910 <_fwalk_reent>:
 8008910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008914:	4606      	mov	r6, r0
 8008916:	4688      	mov	r8, r1
 8008918:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800891c:	2700      	movs	r7, #0
 800891e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008922:	f1b9 0901 	subs.w	r9, r9, #1
 8008926:	d505      	bpl.n	8008934 <_fwalk_reent+0x24>
 8008928:	6824      	ldr	r4, [r4, #0]
 800892a:	2c00      	cmp	r4, #0
 800892c:	d1f7      	bne.n	800891e <_fwalk_reent+0xe>
 800892e:	4638      	mov	r0, r7
 8008930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008934:	89ab      	ldrh	r3, [r5, #12]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d907      	bls.n	800894a <_fwalk_reent+0x3a>
 800893a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800893e:	3301      	adds	r3, #1
 8008940:	d003      	beq.n	800894a <_fwalk_reent+0x3a>
 8008942:	4629      	mov	r1, r5
 8008944:	4630      	mov	r0, r6
 8008946:	47c0      	blx	r8
 8008948:	4307      	orrs	r7, r0
 800894a:	3568      	adds	r5, #104	; 0x68
 800894c:	e7e9      	b.n	8008922 <_fwalk_reent+0x12>

0800894e <__retarget_lock_init_recursive>:
 800894e:	4770      	bx	lr

08008950 <__retarget_lock_acquire_recursive>:
 8008950:	4770      	bx	lr

08008952 <__retarget_lock_release_recursive>:
 8008952:	4770      	bx	lr

08008954 <__swhatbuf_r>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	460e      	mov	r6, r1
 8008958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800895c:	2900      	cmp	r1, #0
 800895e:	b096      	sub	sp, #88	; 0x58
 8008960:	4614      	mov	r4, r2
 8008962:	461d      	mov	r5, r3
 8008964:	da08      	bge.n	8008978 <__swhatbuf_r+0x24>
 8008966:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	602a      	str	r2, [r5, #0]
 800896e:	061a      	lsls	r2, r3, #24
 8008970:	d410      	bmi.n	8008994 <__swhatbuf_r+0x40>
 8008972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008976:	e00e      	b.n	8008996 <__swhatbuf_r+0x42>
 8008978:	466a      	mov	r2, sp
 800897a:	f000 f95f 	bl	8008c3c <_fstat_r>
 800897e:	2800      	cmp	r0, #0
 8008980:	dbf1      	blt.n	8008966 <__swhatbuf_r+0x12>
 8008982:	9a01      	ldr	r2, [sp, #4]
 8008984:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008988:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800898c:	425a      	negs	r2, r3
 800898e:	415a      	adcs	r2, r3
 8008990:	602a      	str	r2, [r5, #0]
 8008992:	e7ee      	b.n	8008972 <__swhatbuf_r+0x1e>
 8008994:	2340      	movs	r3, #64	; 0x40
 8008996:	2000      	movs	r0, #0
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	b016      	add	sp, #88	; 0x58
 800899c:	bd70      	pop	{r4, r5, r6, pc}
	...

080089a0 <__smakebuf_r>:
 80089a0:	898b      	ldrh	r3, [r1, #12]
 80089a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089a4:	079d      	lsls	r5, r3, #30
 80089a6:	4606      	mov	r6, r0
 80089a8:	460c      	mov	r4, r1
 80089aa:	d507      	bpl.n	80089bc <__smakebuf_r+0x1c>
 80089ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	6123      	str	r3, [r4, #16]
 80089b4:	2301      	movs	r3, #1
 80089b6:	6163      	str	r3, [r4, #20]
 80089b8:	b002      	add	sp, #8
 80089ba:	bd70      	pop	{r4, r5, r6, pc}
 80089bc:	ab01      	add	r3, sp, #4
 80089be:	466a      	mov	r2, sp
 80089c0:	f7ff ffc8 	bl	8008954 <__swhatbuf_r>
 80089c4:	9900      	ldr	r1, [sp, #0]
 80089c6:	4605      	mov	r5, r0
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7ff f873 	bl	8007ab4 <_malloc_r>
 80089ce:	b948      	cbnz	r0, 80089e4 <__smakebuf_r+0x44>
 80089d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d4:	059a      	lsls	r2, r3, #22
 80089d6:	d4ef      	bmi.n	80089b8 <__smakebuf_r+0x18>
 80089d8:	f023 0303 	bic.w	r3, r3, #3
 80089dc:	f043 0302 	orr.w	r3, r3, #2
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	e7e3      	b.n	80089ac <__smakebuf_r+0xc>
 80089e4:	4b0d      	ldr	r3, [pc, #52]	; (8008a1c <__smakebuf_r+0x7c>)
 80089e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	6020      	str	r0, [r4, #0]
 80089ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	9b00      	ldr	r3, [sp, #0]
 80089f4:	6163      	str	r3, [r4, #20]
 80089f6:	9b01      	ldr	r3, [sp, #4]
 80089f8:	6120      	str	r0, [r4, #16]
 80089fa:	b15b      	cbz	r3, 8008a14 <__smakebuf_r+0x74>
 80089fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a00:	4630      	mov	r0, r6
 8008a02:	f000 f92d 	bl	8008c60 <_isatty_r>
 8008a06:	b128      	cbz	r0, 8008a14 <__smakebuf_r+0x74>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	f023 0303 	bic.w	r3, r3, #3
 8008a0e:	f043 0301 	orr.w	r3, r3, #1
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	89a0      	ldrh	r0, [r4, #12]
 8008a16:	4305      	orrs	r5, r0
 8008a18:	81a5      	strh	r5, [r4, #12]
 8008a1a:	e7cd      	b.n	80089b8 <__smakebuf_r+0x18>
 8008a1c:	080087ad 	.word	0x080087ad

08008a20 <memcpy>:
 8008a20:	440a      	add	r2, r1
 8008a22:	4291      	cmp	r1, r2
 8008a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a28:	d100      	bne.n	8008a2c <memcpy+0xc>
 8008a2a:	4770      	bx	lr
 8008a2c:	b510      	push	{r4, lr}
 8008a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a36:	4291      	cmp	r1, r2
 8008a38:	d1f9      	bne.n	8008a2e <memcpy+0xe>
 8008a3a:	bd10      	pop	{r4, pc}

08008a3c <memmove>:
 8008a3c:	4288      	cmp	r0, r1
 8008a3e:	b510      	push	{r4, lr}
 8008a40:	eb01 0402 	add.w	r4, r1, r2
 8008a44:	d902      	bls.n	8008a4c <memmove+0x10>
 8008a46:	4284      	cmp	r4, r0
 8008a48:	4623      	mov	r3, r4
 8008a4a:	d807      	bhi.n	8008a5c <memmove+0x20>
 8008a4c:	1e43      	subs	r3, r0, #1
 8008a4e:	42a1      	cmp	r1, r4
 8008a50:	d008      	beq.n	8008a64 <memmove+0x28>
 8008a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a5a:	e7f8      	b.n	8008a4e <memmove+0x12>
 8008a5c:	4402      	add	r2, r0
 8008a5e:	4601      	mov	r1, r0
 8008a60:	428a      	cmp	r2, r1
 8008a62:	d100      	bne.n	8008a66 <memmove+0x2a>
 8008a64:	bd10      	pop	{r4, pc}
 8008a66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a6e:	e7f7      	b.n	8008a60 <memmove+0x24>

08008a70 <__malloc_lock>:
 8008a70:	4801      	ldr	r0, [pc, #4]	; (8008a78 <__malloc_lock+0x8>)
 8008a72:	f7ff bf6d 	b.w	8008950 <__retarget_lock_acquire_recursive>
 8008a76:	bf00      	nop
 8008a78:	20000420 	.word	0x20000420

08008a7c <__malloc_unlock>:
 8008a7c:	4801      	ldr	r0, [pc, #4]	; (8008a84 <__malloc_unlock+0x8>)
 8008a7e:	f7ff bf68 	b.w	8008952 <__retarget_lock_release_recursive>
 8008a82:	bf00      	nop
 8008a84:	20000420 	.word	0x20000420

08008a88 <_realloc_r>:
 8008a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	4614      	mov	r4, r2
 8008a90:	460e      	mov	r6, r1
 8008a92:	b921      	cbnz	r1, 8008a9e <_realloc_r+0x16>
 8008a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a98:	4611      	mov	r1, r2
 8008a9a:	f7ff b80b 	b.w	8007ab4 <_malloc_r>
 8008a9e:	b92a      	cbnz	r2, 8008aac <_realloc_r+0x24>
 8008aa0:	f7fe ff9c 	bl	80079dc <_free_r>
 8008aa4:	4625      	mov	r5, r4
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aac:	f000 f8fa 	bl	8008ca4 <_malloc_usable_size_r>
 8008ab0:	4284      	cmp	r4, r0
 8008ab2:	4607      	mov	r7, r0
 8008ab4:	d802      	bhi.n	8008abc <_realloc_r+0x34>
 8008ab6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008aba:	d812      	bhi.n	8008ae2 <_realloc_r+0x5a>
 8008abc:	4621      	mov	r1, r4
 8008abe:	4640      	mov	r0, r8
 8008ac0:	f7fe fff8 	bl	8007ab4 <_malloc_r>
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d0ed      	beq.n	8008aa6 <_realloc_r+0x1e>
 8008aca:	42bc      	cmp	r4, r7
 8008acc:	4622      	mov	r2, r4
 8008ace:	4631      	mov	r1, r6
 8008ad0:	bf28      	it	cs
 8008ad2:	463a      	movcs	r2, r7
 8008ad4:	f7ff ffa4 	bl	8008a20 <memcpy>
 8008ad8:	4631      	mov	r1, r6
 8008ada:	4640      	mov	r0, r8
 8008adc:	f7fe ff7e 	bl	80079dc <_free_r>
 8008ae0:	e7e1      	b.n	8008aa6 <_realloc_r+0x1e>
 8008ae2:	4635      	mov	r5, r6
 8008ae4:	e7df      	b.n	8008aa6 <_realloc_r+0x1e>

08008ae6 <_raise_r>:
 8008ae6:	291f      	cmp	r1, #31
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4604      	mov	r4, r0
 8008aec:	460d      	mov	r5, r1
 8008aee:	d904      	bls.n	8008afa <_raise_r+0x14>
 8008af0:	2316      	movs	r3, #22
 8008af2:	6003      	str	r3, [r0, #0]
 8008af4:	f04f 30ff 	mov.w	r0, #4294967295
 8008af8:	bd38      	pop	{r3, r4, r5, pc}
 8008afa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008afc:	b112      	cbz	r2, 8008b04 <_raise_r+0x1e>
 8008afe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b02:	b94b      	cbnz	r3, 8008b18 <_raise_r+0x32>
 8008b04:	4620      	mov	r0, r4
 8008b06:	f000 f831 	bl	8008b6c <_getpid_r>
 8008b0a:	462a      	mov	r2, r5
 8008b0c:	4601      	mov	r1, r0
 8008b0e:	4620      	mov	r0, r4
 8008b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b14:	f000 b818 	b.w	8008b48 <_kill_r>
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d00a      	beq.n	8008b32 <_raise_r+0x4c>
 8008b1c:	1c59      	adds	r1, r3, #1
 8008b1e:	d103      	bne.n	8008b28 <_raise_r+0x42>
 8008b20:	2316      	movs	r3, #22
 8008b22:	6003      	str	r3, [r0, #0]
 8008b24:	2001      	movs	r0, #1
 8008b26:	e7e7      	b.n	8008af8 <_raise_r+0x12>
 8008b28:	2400      	movs	r4, #0
 8008b2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b2e:	4628      	mov	r0, r5
 8008b30:	4798      	blx	r3
 8008b32:	2000      	movs	r0, #0
 8008b34:	e7e0      	b.n	8008af8 <_raise_r+0x12>
	...

08008b38 <raise>:
 8008b38:	4b02      	ldr	r3, [pc, #8]	; (8008b44 <raise+0xc>)
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	6818      	ldr	r0, [r3, #0]
 8008b3e:	f7ff bfd2 	b.w	8008ae6 <_raise_r>
 8008b42:	bf00      	nop
 8008b44:	200001ac 	.word	0x200001ac

08008b48 <_kill_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	4d07      	ldr	r5, [pc, #28]	; (8008b68 <_kill_r+0x20>)
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4604      	mov	r4, r0
 8008b50:	4608      	mov	r0, r1
 8008b52:	4611      	mov	r1, r2
 8008b54:	602b      	str	r3, [r5, #0]
 8008b56:	f7f8 fb89 	bl	800126c <_kill>
 8008b5a:	1c43      	adds	r3, r0, #1
 8008b5c:	d102      	bne.n	8008b64 <_kill_r+0x1c>
 8008b5e:	682b      	ldr	r3, [r5, #0]
 8008b60:	b103      	cbz	r3, 8008b64 <_kill_r+0x1c>
 8008b62:	6023      	str	r3, [r4, #0]
 8008b64:	bd38      	pop	{r3, r4, r5, pc}
 8008b66:	bf00      	nop
 8008b68:	20000424 	.word	0x20000424

08008b6c <_getpid_r>:
 8008b6c:	f7f8 bb76 	b.w	800125c <_getpid>

08008b70 <__sread>:
 8008b70:	b510      	push	{r4, lr}
 8008b72:	460c      	mov	r4, r1
 8008b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b78:	f000 f89c 	bl	8008cb4 <_read_r>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	bfab      	itete	ge
 8008b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b82:	89a3      	ldrhlt	r3, [r4, #12]
 8008b84:	181b      	addge	r3, r3, r0
 8008b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b8a:	bfac      	ite	ge
 8008b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b8e:	81a3      	strhlt	r3, [r4, #12]
 8008b90:	bd10      	pop	{r4, pc}

08008b92 <__swrite>:
 8008b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b96:	461f      	mov	r7, r3
 8008b98:	898b      	ldrh	r3, [r1, #12]
 8008b9a:	05db      	lsls	r3, r3, #23
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	4616      	mov	r6, r2
 8008ba2:	d505      	bpl.n	8008bb0 <__swrite+0x1e>
 8008ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba8:	2302      	movs	r3, #2
 8008baa:	2200      	movs	r2, #0
 8008bac:	f000 f868 	bl	8008c80 <_lseek_r>
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bba:	81a3      	strh	r3, [r4, #12]
 8008bbc:	4632      	mov	r2, r6
 8008bbe:	463b      	mov	r3, r7
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc6:	f000 b817 	b.w	8008bf8 <_write_r>

08008bca <__sseek>:
 8008bca:	b510      	push	{r4, lr}
 8008bcc:	460c      	mov	r4, r1
 8008bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd2:	f000 f855 	bl	8008c80 <_lseek_r>
 8008bd6:	1c43      	adds	r3, r0, #1
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	bf15      	itete	ne
 8008bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008be6:	81a3      	strheq	r3, [r4, #12]
 8008be8:	bf18      	it	ne
 8008bea:	81a3      	strhne	r3, [r4, #12]
 8008bec:	bd10      	pop	{r4, pc}

08008bee <__sclose>:
 8008bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf2:	f000 b813 	b.w	8008c1c <_close_r>
	...

08008bf8 <_write_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d07      	ldr	r5, [pc, #28]	; (8008c18 <_write_r+0x20>)
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	4608      	mov	r0, r1
 8008c00:	4611      	mov	r1, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	602a      	str	r2, [r5, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f7f8 fb67 	bl	80012da <_write>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d102      	bne.n	8008c16 <_write_r+0x1e>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	b103      	cbz	r3, 8008c16 <_write_r+0x1e>
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	20000424 	.word	0x20000424

08008c1c <_close_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4d06      	ldr	r5, [pc, #24]	; (8008c38 <_close_r+0x1c>)
 8008c20:	2300      	movs	r3, #0
 8008c22:	4604      	mov	r4, r0
 8008c24:	4608      	mov	r0, r1
 8008c26:	602b      	str	r3, [r5, #0]
 8008c28:	f7f8 fb73 	bl	8001312 <_close>
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	d102      	bne.n	8008c36 <_close_r+0x1a>
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	b103      	cbz	r3, 8008c36 <_close_r+0x1a>
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	20000424 	.word	0x20000424

08008c3c <_fstat_r>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	4d07      	ldr	r5, [pc, #28]	; (8008c5c <_fstat_r+0x20>)
 8008c40:	2300      	movs	r3, #0
 8008c42:	4604      	mov	r4, r0
 8008c44:	4608      	mov	r0, r1
 8008c46:	4611      	mov	r1, r2
 8008c48:	602b      	str	r3, [r5, #0]
 8008c4a:	f7f8 fb6e 	bl	800132a <_fstat>
 8008c4e:	1c43      	adds	r3, r0, #1
 8008c50:	d102      	bne.n	8008c58 <_fstat_r+0x1c>
 8008c52:	682b      	ldr	r3, [r5, #0]
 8008c54:	b103      	cbz	r3, 8008c58 <_fstat_r+0x1c>
 8008c56:	6023      	str	r3, [r4, #0]
 8008c58:	bd38      	pop	{r3, r4, r5, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20000424 	.word	0x20000424

08008c60 <_isatty_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	4d06      	ldr	r5, [pc, #24]	; (8008c7c <_isatty_r+0x1c>)
 8008c64:	2300      	movs	r3, #0
 8008c66:	4604      	mov	r4, r0
 8008c68:	4608      	mov	r0, r1
 8008c6a:	602b      	str	r3, [r5, #0]
 8008c6c:	f7f8 fb6d 	bl	800134a <_isatty>
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d102      	bne.n	8008c7a <_isatty_r+0x1a>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	b103      	cbz	r3, 8008c7a <_isatty_r+0x1a>
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	20000424 	.word	0x20000424

08008c80 <_lseek_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4d07      	ldr	r5, [pc, #28]	; (8008ca0 <_lseek_r+0x20>)
 8008c84:	4604      	mov	r4, r0
 8008c86:	4608      	mov	r0, r1
 8008c88:	4611      	mov	r1, r2
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	602a      	str	r2, [r5, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	f7f8 fb66 	bl	8001360 <_lseek>
 8008c94:	1c43      	adds	r3, r0, #1
 8008c96:	d102      	bne.n	8008c9e <_lseek_r+0x1e>
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	b103      	cbz	r3, 8008c9e <_lseek_r+0x1e>
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	20000424 	.word	0x20000424

08008ca4 <_malloc_usable_size_r>:
 8008ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca8:	1f18      	subs	r0, r3, #4
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	bfbc      	itt	lt
 8008cae:	580b      	ldrlt	r3, [r1, r0]
 8008cb0:	18c0      	addlt	r0, r0, r3
 8008cb2:	4770      	bx	lr

08008cb4 <_read_r>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	4d07      	ldr	r5, [pc, #28]	; (8008cd4 <_read_r+0x20>)
 8008cb8:	4604      	mov	r4, r0
 8008cba:	4608      	mov	r0, r1
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	602a      	str	r2, [r5, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	f7f8 faec 	bl	80012a0 <_read>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_read_r+0x1e>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_read_r+0x1e>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	20000424 	.word	0x20000424

08008cd8 <_init>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	bf00      	nop
 8008cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cde:	bc08      	pop	{r3}
 8008ce0:	469e      	mov	lr, r3
 8008ce2:	4770      	bx	lr

08008ce4 <_fini>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	bf00      	nop
 8008ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cea:	bc08      	pop	{r3}
 8008cec:	469e      	mov	lr, r3
 8008cee:	4770      	bx	lr
